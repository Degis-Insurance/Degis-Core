{
  "address": "0x3D791295BDd279e3Ba5e4c4a9d09aa6370B9d173",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DegisLottery",
      "outputs": [
        {
          "internalType": "contract IDegisLottery",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRandomNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestLotteryId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRequestId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "name": "setKeyHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_degisLottery",
          "type": "address"
        }
      ],
      "name": "setLotteryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x46ca57e7b86ab67ceee178985bed2d0c8cc9dc2378bc775ca72dd7917218cba6",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x3D791295BDd279e3Ba5e4c4a9d09aa6370B9d173",
    "transactionIndex": 1,
    "gasUsed": "982703",
    "logsBloom": "0x
    "blockHash": "0xa88feb93b1adfbe292a8d31fed6850b437e4561597a3d42785258757911334a2",
    "transactionHash": "0x46ca57e7b86ab67ceee178985bed2d0c8cc9dc2378bc775ca72dd7917218cba6",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5239721,
        "transactionHash": "0x46ca57e7b86ab67ceee178985bed2d0c8cc9dc2378bc775ca72dd7917218cba6",
        "address": "0x3D791295BDd279e3Ba5e4c4a9d09aa6370B9d173",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001be1a151ba3d24f594ee971dc9b843f23b5ba80e"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa88feb93b1adfbe292a8d31fed6850b437e4561597a3d42785258757911334a2"
      }
    ],
    "blockNumber": 5239721,
    "cumulativeGasUsed": "1028721",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000",
    "0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445"
  ],
  "numDeployments": 1,
  "solcInputHash": "891f6e83b97076056766f10193ee5514",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DegisLottery\",\"outputs\":[{\"internalType\":\"contract IDegisLottery\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestLotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"setKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_degisLottery\",\"type\":\"address\"}],\"name\":\"setLotteryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"RandomNumberGenerator must be deployed before the lottery. Once the lottery contract is deployed, setLotteryAddress must be called. https://docs.chain.link/docs/vrf-contracts/\",\"params\":{\"_linkToken\":\"address of the LINK token\",\"_vrfCoordinator\":\"address of the VRF coordinator\"}},\"renounceOwnership()\":{\"details\":\"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.\"},\"setFee(uint256)\":{\"params\":{\"_fee\":\"new fee (in LINK)\"}},\"setKeyHash(bytes32)\":{\"params\":{\"_keyHash\":\"new keyHash\"}},\"setLotteryAddress(address)\":{\"params\":{\"_degisLottery\":\"address of the PancakeSwap lottery\"}},\"transferOwnership(address)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"newOwner\":\"Address of the new owner\"}},\"withdrawTokens(address,uint256)\":{\"details\":\"Only callable by owner.\",\"params\":{\"_tokenAddress\":\"the address of the token to withdraw\",\"_tokenAmount\":\"the number of token amount to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"getRandomNumber()\":{\"notice\":\"Request randomness from Chainlink VRF\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner.\"},\"setFee(uint256)\":{\"notice\":\"Change the fee\"},\"setKeyHash(bytes32)\":{\"notice\":\"Change the keyHash\"},\"setLotteryAddress(address)\":{\"notice\":\"Set the address for the DegisLottery\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).\"},\"withdrawTokens(address,uint256)\":{\"notice\":\"It allows the admin to withdraw tokens sent to the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lucky-box/RandomNumberGenerator.sol\":\"RandomNumberGenerator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x778c9d88cd6d94ae866c1c3f5fec6022f07e39280d3b6d581c8cceb8a5ac4b1e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"contracts/libraries/StringsUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUtils {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @notice Bytes to string (not human-readable form)\\n     * @param _bytes Input bytes\\n     * @return stringBytes String form of the bytes\\n     */\\n    function byToString(bytes32 _bytes) internal pure returns (string memory) {\\n        return uintToHexString(uint256(_bytes), 32);\\n    }\\n\\n    /**\\n     * @notice Transfer address to string (not change the content)\\n     * @param _addr Input address\\n     * @return stringAddress String form of the address\\n     */\\n    function addressToString(address _addr)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return uintToHexString(uint256(uint160(_addr)), 20);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function uintToString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function uintToHexString(uint256 value)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return uintToHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function uintToHexString(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x95d621cbfbf0c82757a2d245d09ab282bb86e044fd3a39a3de39431e627cd06e\",\"license\":\"MIT\"},\"contracts/lucky-box/RandomNumberGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../libraries/StringsUtils.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\n\\nimport \\\"./interfaces/IDegisLottery.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract RandomNumberGenerator is VRFConsumerBase, Ownable {\\n    using StringsUtils for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IDegisLottery public DegisLottery;\\n\\n    bytes32 public keyHash;\\n    bytes32 public latestRequestId;\\n    uint256 public randomResult;\\n    uint256 public fee;\\n\\n    uint256 public latestLotteryId;\\n\\n    /**\\n     * @notice Constructor\\n     * @dev RandomNumberGenerator must be deployed before the lottery.\\n     * Once the lottery contract is deployed, setLotteryAddress must be called.\\n     * https://docs.chain.link/docs/vrf-contracts/\\n     * @param _vrfCoordinator address of the VRF coordinator\\n     * @param _linkToken address of the LINK token\\n     */\\n    constructor(\\n        address _vrfCoordinator,\\n        address _linkToken,\\n        bytes32 _keyHash\\n    ) VRFConsumerBase(_vrfCoordinator, _linkToken) {\\n        keyHash = _keyHash;\\n        fee = 0.1 * 10e18;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Change the fee\\n     * @param _fee new fee (in LINK)\\n     */\\n    function setFee(uint256 _fee) external onlyOwner {\\n        fee = _fee;\\n    }\\n\\n    /**\\n     * @notice Change the keyHash\\n     * @param _keyHash new keyHash\\n     */\\n    function setKeyHash(bytes32 _keyHash) external onlyOwner {\\n        keyHash = _keyHash;\\n    }\\n\\n    /**\\n     * @notice Set the address for the DegisLottery\\n     * @param _degisLottery address of the PancakeSwap lottery\\n     */\\n    function setLotteryAddress(address _degisLottery) external onlyOwner {\\n        DegisLottery = IDegisLottery(_degisLottery);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to withdraw tokens sent to the contract\\n     * @param _tokenAddress the address of the token to withdraw\\n     * @param _tokenAmount the number of token amount to withdraw\\n     * @dev Only callable by owner.\\n     */\\n    function withdrawTokens(address _tokenAddress, uint256 _tokenAmount)\\n        external\\n        onlyOwner\\n    {\\n        IERC20(_tokenAddress).safeTransfer(_msgSender(), _tokenAmount);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Request randomness from Chainlink VRF\\n     */\\n    function getRandomNumber() external {\\n        require(_msgSender() == address(DegisLottery), \\\"Only DegisLottery\\\");\\n\\n        require(keyHash != bytes32(0), \\\"Must have valid key hash\\\");\\n        // require(LINK.balanceOf(address(this)) >= fee, \\\"Not enough LINK tokens\\\");\\n\\n        //*********************************//\\n        // TODO: This part is only for test on Fuji Testnet because there is no VRF currently\\n        string memory randInput = string(\\n            abi.encodePacked((block.timestamp).uintToString(), address(this))\\n        );\\n        randomResult = _rand(randInput) % 10000;\\n        //*********************************//\\n\\n        // latestRequestId = requestRandomness(keyHash, fee);\\n\\n        latestLotteryId = IDegisLottery(DegisLottery).currentLotteryId();\\n    }\\n\\n    function _rand(string memory input) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(input)));\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Callback function used by ChainLink's VRF Coordinator\\n     */\\n    // TODO: On Fuji testnet, we use fake random numbers\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness)\\n        internal\\n        override\\n    {\\n        require(latestRequestId == requestId, \\\"Wrong requestId\\\");\\n        randomResult = randomness % 10000;\\n\\n        latestLotteryId = IDegisLottery(DegisLottery).currentLotteryId();\\n    }\\n}\\n\",\"keccak256\":\"0x0c7d68496317f276dd64a9d5d6b16397100ff9e016b1139d42673c889fdba61a\",\"license\":\"MIT\"},\"contracts/lucky-box/interfaces/IDegisLottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IDegisLottery {\\n    /**\\n     * @notice Inject funds\\n     * @param _amount amount to inject in USD\\n     * @dev Callable by operator\\n     */\\n    function injectFunds(uint256 _amount) external;\\n\\n    /**\\n     * @notice View current lottery id\\n     */\\n    function currentLotteryId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaadcb8f8666b8394f380f7226f84624087bf14dce5e7439c02fb0a745fe57a23\",\"license\":\"MIT\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xb06279e6f1b96475d682c29d19535cc444d7b2e4aa60c8c7b4b0f032230ebff0\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. It will not be possible to call\\n     *         `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * @dev    Renouncing ownership will leave the contract without an owner,\\n     *         thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Can only be called by the current owner.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Internal function without access restriction.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x573a48e60c5226b8470bc2d8ba1f4436c89d865fc83de5449de9d8af0c8cb81a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620010fc380380620010fc833981016040819052620000349162000109565b6001600160a01b0380841660a0528216608052620000523362000069565b6003555050670de0b6b3a764000060065562000161565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0382165b92915050565b620000d981620000bb565b8114620000e557600080fd5b50565b8051620000c881620000ce565b80620000d9565b8051620000c881620000f5565b600080600060608486031215620001235762000123600080fd5b6000620001318686620000e8565b93505060206200014486828701620000e8565b92505060406200015786828701620000fc565b9150509250925092565b60805160a051610f7862000184600039600061033d015260005050610f786000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063dbdff2c111610066578063dbdff2c1146101cd578063ddca3f43146101d5578063eed8e1ee146101de578063f2fde38b146101e757600080fd5b80638da5cb5b1461016e57806394985ddd14610187578063985447101461019a578063d581b5b6146101ad57600080fd5b806342619f66116100d357806342619f661461014157806361728f391461014a57806369fe0e2d14610153578063715018a61461016657600080fd5b806306b091f9146100fa5780631aa46f591461010f5780632a332b2a1461012e575b600080fd5b61010d6101083660046109a0565b6101fa565b005b61011860045481565b60405161012591906109e5565b60405180910390f35b61010d61013c3660046109f3565b610254565b61011860055481565b61011860035481565b61010d610161366004610a14565b6102af565b61010d6102ed565b6001546001600160a01b03166040516101259190610a3e565b61010d610195366004610a4c565b610332565b61010d6101a8366004610a14565b610384565b6002546101c0906001600160a01b031681565b6040516101259190610a9e565b61010d6103c2565b61011860065481565b61011860075481565b61010d6101f53660046109f3565b6104cf565b3361020d6001546001600160a01b031690565b6001600160a01b03161461023c5760405162461bcd60e51b815260040161023390610ade565b60405180910390fd5b6102506001600160a01b038316338361053a565b5050565b336102676001546001600160a01b031690565b6001600160a01b03161461028d5760405162461bcd60e51b815260040161023390610ade565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b336102c26001546001600160a01b031690565b6001600160a01b0316146102e85760405162461bcd60e51b815260040161023390610ade565b600655565b336103006001546001600160a01b031690565b6001600160a01b0316146103265760405162461bcd60e51b815260040161023390610ade565b6103306000610595565b565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461037a5760405162461bcd60e51b815260040161023390610b20565b61025082826105e7565b336103976001546001600160a01b031690565b6001600160a01b0316146103bd5760405162461bcd60e51b815260040161023390610ade565b600355565b6002546001600160a01b0316336001600160a01b0316146103f55760405162461bcd60e51b815260040161023390610b56565b6003546104145760405162461bcd60e51b815260040161023390610b98565b600061041f4261068c565b30604051602001610431929190610c22565b604051602081830303815290604052905061271061044e82610792565b6104589190610c57565b60055560025460408051631af9025f60e21b815290516001600160a01b0390921691636be4097c916004808201926020929091908290030181865afa1580156104a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c99190610c76565b60075550565b336104e26001546001600160a01b031690565b6001600160a01b0316146105085760405162461bcd60e51b815260040161023390610ade565b6001600160a01b03811661052e5760405162461bcd60e51b815260040161023390610cda565b61053781610595565b50565b6105908363a9059cbb60e01b8484604051602401610559929190610cea565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526107c3565b505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b81600454146106085760405162461bcd60e51b815260040161023390610d29565b61061461271082610c57565b60055560025460408051631af9025f60e21b815290516001600160a01b0390921691636be4097c916004808201926020929091908290030181865afa158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190610c76565b6007555050565b6060816106b05750506040805180820190915260018152600360fc1b602082015290565b8160005b81156106da57806106c481610d4f565b91506106d39050600a83610d6a565b91506106b4565b60008167ffffffffffffffff8111156106f5576106f5610d7e565b6040519080825280601f01601f19166020018201604052801561071f576020820181803683370190505b5090505b841561078a57610734600183610d94565b9150610741600a86610c57565b61074c906030610dab565b60f81b81838151811061076157610761610dc3565b60200101906001600160f81b031916908160001a905350610783600a86610d6a565b9450610723565b949350505050565b6000816040516020016107a59190610dd9565b60408051601f19818403018152919052805160209091012092915050565b6000610818826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108529092919063ffffffff16565b80519091501561059057808060200190518101906108369190610df6565b6105905760405162461bcd60e51b815260040161023390610e5c565b6060610861848460008561086b565b90505b9392505050565b60608247101561088d5760405162461bcd60e51b815260040161023390610ead565b843b6108ab5760405162461bcd60e51b815260040161023390610eef565b600080866001600160a01b031685876040516108c79190610dd9565b60006040518083038185875af1925050503d8060008114610904576040519150601f19603f3d011682016040523d82523d6000602084013e610909565b606091505b5091509150610919828286610924565b979650505050505050565b60608315610933575081610864565b8251156109435782518084602001fd5b8160405162461bcd60e51b81526004016102339190610f31565b60006001600160a01b0382165b92915050565b6109798161095d565b811461053757600080fd5b803561096a81610970565b80610979565b803561096a8161098f565b600080604083850312156109b6576109b6600080fd5b60006109c28585610984565b92505060206109d385828601610995565b9150509250929050565b805b82525050565b6020810161096a82846109dd565b600060208284031215610a0857610a08600080fd5b600061078a8484610984565b600060208284031215610a2957610a29600080fd5b600061078a8484610995565b6109df8161095d565b6020810161096a8284610a35565b60008060408385031215610a6257610a62600080fd5b60006109c28585610995565b60006001600160a01b03821661096a565b600061096a82610a6e565b600061096a82610a7f565b6109df81610a8a565b6020810161096a8284610a95565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b6020808252810161096a81610aac565b601f8152602081017f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c0081529050610ad8565b6020808252810161096a81610aee565b6011815260208101704f6e6c792044656769734c6f747465727960781b81529050610ad8565b6020808252810161096a81610b30565b60188152602081017f4d75737420686176652076616c6964206b65792068617368000000000000000081529050610ad8565b6020808252810161096a81610b66565b60005b83811015610bc3578181015183820152602001610bab565b83811115610bd2576000848401525b50505050565b6000610be2825190565b610bf0818560208601610ba8565b9290920192915050565b600061096a8260601b90565b600061096a82610bfa565b6109df610c1d8261095d565b610c06565b610c2c8184610bd8565b9050610c388183610c11565b60140192915050565b634e487b7160e01b600052601260045260246000fd5b600082610c6657610c66610c41565b500690565b805161096a8161098f565b600060208284031215610c8b57610c8b600080fd5b600061078a8484610c6b565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015290505b60400190565b6020808252810161096a81610c97565b60408101610cf88285610a35565b61086460208301846109dd565b600f8152602081016e15dc9bdb99c81c995c5d595cdd1259608a1b81529050610ad8565b6020808252810161096a81610d05565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610d6357610d63610d39565b5060010190565b600082610d7957610d79610c41565b500490565b634e487b7160e01b600052604160045260246000fd5b600082821015610da657610da6610d39565b500390565b60008219821115610dbe57610dbe610d39565b500190565b634e487b7160e01b600052603260045260246000fd5b61096a8183610bd8565b801515610979565b805161096a81610de3565b600060208284031215610e0b57610e0b600080fd5b600061078a8484610deb565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529050610cd4565b6020808252810161096a81610e17565b60268152602081017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b60208201529050610cd4565b6020808252810161096a81610e6c565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529050610ad8565b6020808252810161096a81610ebd565b6000610f09825190565b808452602084019350610f20818560208601610ba8565b601f01601f19169290920192915050565b602080825281016108648184610eff56fea2646970667358221220442963f0d239a0587b4f10b3b1f52848902df56af842f2214cf6250d9394e4bd64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063dbdff2c111610066578063dbdff2c1146101cd578063ddca3f43146101d5578063eed8e1ee146101de578063f2fde38b146101e757600080fd5b80638da5cb5b1461016e57806394985ddd14610187578063985447101461019a578063d581b5b6146101ad57600080fd5b806342619f66116100d357806342619f661461014157806361728f391461014a57806369fe0e2d14610153578063715018a61461016657600080fd5b806306b091f9146100fa5780631aa46f591461010f5780632a332b2a1461012e575b600080fd5b61010d6101083660046109a0565b6101fa565b005b61011860045481565b60405161012591906109e5565b60405180910390f35b61010d61013c3660046109f3565b610254565b61011860055481565b61011860035481565b61010d610161366004610a14565b6102af565b61010d6102ed565b6001546001600160a01b03166040516101259190610a3e565b61010d610195366004610a4c565b610332565b61010d6101a8366004610a14565b610384565b6002546101c0906001600160a01b031681565b6040516101259190610a9e565b61010d6103c2565b61011860065481565b61011860075481565b61010d6101f53660046109f3565b6104cf565b3361020d6001546001600160a01b031690565b6001600160a01b03161461023c5760405162461bcd60e51b815260040161023390610ade565b60405180910390fd5b6102506001600160a01b038316338361053a565b5050565b336102676001546001600160a01b031690565b6001600160a01b03161461028d5760405162461bcd60e51b815260040161023390610ade565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b336102c26001546001600160a01b031690565b6001600160a01b0316146102e85760405162461bcd60e51b815260040161023390610ade565b600655565b336103006001546001600160a01b031690565b6001600160a01b0316146103265760405162461bcd60e51b815260040161023390610ade565b6103306000610595565b565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461037a5760405162461bcd60e51b815260040161023390610b20565b61025082826105e7565b336103976001546001600160a01b031690565b6001600160a01b0316146103bd5760405162461bcd60e51b815260040161023390610ade565b600355565b6002546001600160a01b0316336001600160a01b0316146103f55760405162461bcd60e51b815260040161023390610b56565b6003546104145760405162461bcd60e51b815260040161023390610b98565b600061041f4261068c565b30604051602001610431929190610c22565b604051602081830303815290604052905061271061044e82610792565b6104589190610c57565b60055560025460408051631af9025f60e21b815290516001600160a01b0390921691636be4097c916004808201926020929091908290030181865afa1580156104a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c99190610c76565b60075550565b336104e26001546001600160a01b031690565b6001600160a01b0316146105085760405162461bcd60e51b815260040161023390610ade565b6001600160a01b03811661052e5760405162461bcd60e51b815260040161023390610cda565b61053781610595565b50565b6105908363a9059cbb60e01b8484604051602401610559929190610cea565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526107c3565b505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b81600454146106085760405162461bcd60e51b815260040161023390610d29565b61061461271082610c57565b60055560025460408051631af9025f60e21b815290516001600160a01b0390921691636be4097c916004808201926020929091908290030181865afa158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190610c76565b6007555050565b6060816106b05750506040805180820190915260018152600360fc1b602082015290565b8160005b81156106da57806106c481610d4f565b91506106d39050600a83610d6a565b91506106b4565b60008167ffffffffffffffff8111156106f5576106f5610d7e565b6040519080825280601f01601f19166020018201604052801561071f576020820181803683370190505b5090505b841561078a57610734600183610d94565b9150610741600a86610c57565b61074c906030610dab565b60f81b81838151811061076157610761610dc3565b60200101906001600160f81b031916908160001a905350610783600a86610d6a565b9450610723565b949350505050565b6000816040516020016107a59190610dd9565b60408051601f19818403018152919052805160209091012092915050565b6000610818826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108529092919063ffffffff16565b80519091501561059057808060200190518101906108369190610df6565b6105905760405162461bcd60e51b815260040161023390610e5c565b6060610861848460008561086b565b90505b9392505050565b60608247101561088d5760405162461bcd60e51b815260040161023390610ead565b843b6108ab5760405162461bcd60e51b815260040161023390610eef565b600080866001600160a01b031685876040516108c79190610dd9565b60006040518083038185875af1925050503d8060008114610904576040519150601f19603f3d011682016040523d82523d6000602084013e610909565b606091505b5091509150610919828286610924565b979650505050505050565b60608315610933575081610864565b8251156109435782518084602001fd5b8160405162461bcd60e51b81526004016102339190610f31565b60006001600160a01b0382165b92915050565b6109798161095d565b811461053757600080fd5b803561096a81610970565b80610979565b803561096a8161098f565b600080604083850312156109b6576109b6600080fd5b60006109c28585610984565b92505060206109d385828601610995565b9150509250929050565b805b82525050565b6020810161096a82846109dd565b600060208284031215610a0857610a08600080fd5b600061078a8484610984565b600060208284031215610a2957610a29600080fd5b600061078a8484610995565b6109df8161095d565b6020810161096a8284610a35565b60008060408385031215610a6257610a62600080fd5b60006109c28585610995565b60006001600160a01b03821661096a565b600061096a82610a6e565b600061096a82610a7f565b6109df81610a8a565b6020810161096a8284610a95565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b6020808252810161096a81610aac565b601f8152602081017f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c0081529050610ad8565b6020808252810161096a81610aee565b6011815260208101704f6e6c792044656769734c6f747465727960781b81529050610ad8565b6020808252810161096a81610b30565b60188152602081017f4d75737420686176652076616c6964206b65792068617368000000000000000081529050610ad8565b6020808252810161096a81610b66565b60005b83811015610bc3578181015183820152602001610bab565b83811115610bd2576000848401525b50505050565b6000610be2825190565b610bf0818560208601610ba8565b9290920192915050565b600061096a8260601b90565b600061096a82610bfa565b6109df610c1d8261095d565b610c06565b610c2c8184610bd8565b9050610c388183610c11565b60140192915050565b634e487b7160e01b600052601260045260246000fd5b600082610c6657610c66610c41565b500690565b805161096a8161098f565b600060208284031215610c8b57610c8b600080fd5b600061078a8484610c6b565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015290505b60400190565b6020808252810161096a81610c97565b60408101610cf88285610a35565b61086460208301846109dd565b600f8152602081016e15dc9bdb99c81c995c5d595cdd1259608a1b81529050610ad8565b6020808252810161096a81610d05565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610d6357610d63610d39565b5060010190565b600082610d7957610d79610c41565b500490565b634e487b7160e01b600052604160045260246000fd5b600082821015610da657610da6610d39565b500390565b60008219821115610dbe57610dbe610d39565b500190565b634e487b7160e01b600052603260045260246000fd5b61096a8183610bd8565b801515610979565b805161096a81610de3565b600060208284031215610e0b57610e0b600080fd5b600061078a8484610deb565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529050610cd4565b6020808252810161096a81610e17565b60268152602081017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b60208201529050610cd4565b6020808252810161096a81610e6c565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529050610ad8565b6020808252810161096a81610ebd565b6000610f09825190565b808452602084019350610f20818560208601610ba8565b601f01601f19169290920192915050565b602080825281016108648184610eff56fea2646970667358221220442963f0d239a0587b4f10b3b1f52848902df56af842f2214cf6250d9394e4bd64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "RandomNumberGenerator must be deployed before the lottery. Once the lottery contract is deployed, setLotteryAddress must be called. https://docs.chain.link/docs/vrf-contracts/",
        "params": {
          "_linkToken": "address of the LINK token",
          "_vrfCoordinator": "address of the VRF coordinator"
        }
      },
      "renounceOwnership()": {
        "details": "Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner."
      },
      "setFee(uint256)": {
        "params": {
          "_fee": "new fee (in LINK)"
        }
      },
      "setKeyHash(bytes32)": {
        "params": {
          "_keyHash": "new keyHash"
        }
      },
      "setLotteryAddress(address)": {
        "params": {
          "_degisLottery": "address of the PancakeSwap lottery"
        }
      },
      "transferOwnership(address)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "newOwner": "Address of the new owner"
        }
      },
      "withdrawTokens(address,uint256)": {
        "details": "Only callable by owner.",
        "params": {
          "_tokenAddress": "the address of the token to withdraw",
          "_tokenAmount": "the number of token amount to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "getRandomNumber()": {
        "notice": "Request randomness from Chainlink VRF"
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."
      },
      "setFee(uint256)": {
        "notice": "Change the fee"
      },
      "setKeyHash(bytes32)": {
        "notice": "Change the keyHash"
      },
      "setLotteryAddress(address)": {
        "notice": "Set the address for the DegisLottery"
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`)."
      },
      "withdrawTokens(address,uint256)": {
        "notice": "It allows the admin to withdraw tokens sent to the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 941,
        "contract": "contracts/lucky-box/RandomNumberGenerator.sol:RandomNumberGenerator",
        "label": "nonces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 21695,
        "contract": "contracts/lucky-box/RandomNumberGenerator.sol:RandomNumberGenerator",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11568,
        "contract": "contracts/lucky-box/RandomNumberGenerator.sol:RandomNumberGenerator",
        "label": "DegisLottery",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDegisLottery)11789"
      },
      {
        "astId": 11570,
        "contract": "contracts/lucky-box/RandomNumberGenerator.sol:RandomNumberGenerator",
        "label": "keyHash",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 11572,
        "contract": "contracts/lucky-box/RandomNumberGenerator.sol:RandomNumberGenerator",
        "label": "latestRequestId",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 11574,
        "contract": "contracts/lucky-box/RandomNumberGenerator.sol:RandomNumberGenerator",
        "label": "randomResult",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 11576,
        "contract": "contracts/lucky-box/RandomNumberGenerator.sol:RandomNumberGenerator",
        "label": "fee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 11578,
        "contract": "contracts/lucky-box/RandomNumberGenerator.sol:RandomNumberGenerator",
        "label": "latestLotteryId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDegisLottery)11789": {
        "encoding": "inplace",
        "label": "contract IDegisLottery",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}