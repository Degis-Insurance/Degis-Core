{
  "address": "0xa6F6cA49F038Aadc9D2420b1921d4e71E9384556",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint80",
          "name": "roundID",
          "type": "uint80"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeStamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "name": "LatestPriceGet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feedAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "PriceFeedChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        }
      ],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "priceFeedInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_feedAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x62f4f768006219d9f80ee665a0d907a417ddafdb356ca29d5d7e467e48c59eb5",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0xa6F6cA49F038Aadc9D2420b1921d4e71E9384556",
    "transactionIndex": 0,
    "gasUsed": "863962",
    "logsBloom": "0x
    "blockHash": "0xb55705af1a3d5df5690ec1c16e8e99a1d390664f48b62499b63536b927065345",
    "transactionHash": "0x62f4f768006219d9f80ee665a0d907a417ddafdb356ca29d5d7e467e48c59eb5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8978499,
        "transactionHash": "0x62f4f768006219d9f80ee665a0d907a417ddafdb356ca29d5d7e467e48c59eb5",
        "address": "0xa6F6cA49F038Aadc9D2420b1921d4e71E9384556",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001be1a151ba3d24f594ee971dc9b843f23b5ba80e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb55705af1a3d5df5690ec1c16e8e99a1d390664f48b62499b63536b927065345"
      }
    ],
    "blockNumber": 8978499,
    "cumulativeGasUsed": "863962",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "30acab01710ff2e31c19d5b31cfdd2e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"roundID\",\"type\":\"uint80\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"name\":\"LatestPriceGet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"PriceFeedChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"priceFeedInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_feedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The price from chainlink priceFeed has different decimals, be careful.\",\"kind\":\"dev\",\"methods\":{\"getLatestPrice(string)\":{\"params\":{\"_tokenName\":\"Address of the token\"},\"returns\":{\"_0\":\"price The latest price\"}},\"renounceOwnership()\":{\"details\":\"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.\"},\"setPriceFeed(string,address,uint256)\":{\"params\":{\"_decimals\":\"Decimals of this price feed service\",\"_feedAddress\":\"Price feed oracle address\",\"_tokenName\":\"Address of the token\"}},\"transferOwnership(address)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"newOwner\":\"Address of the new owner\"}}},\"title\":\"Price Getter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor function, initialize some price feed\"},\"getLatestPrice(string)\":{\"notice\":\"Get latest price of a token\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner.\"},\"setPriceFeed(string,address,uint256)\":{\"notice\":\"Set a price feed oracle address for a token\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).\"}},\"notice\":\"This is the contract for getting price feed from chainlink.         The contract will keep a record from tokenName => priceFeed Address.         Got the sponsorship and collaboration with Chainlink.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/naughty-price/PriceGetter.sol\":\"PriceGetter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/naughty-price/PriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n    *******         **********     ***********     *****     ***********\\n    *      *        *              *                 *       *\\n    *        *      *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     **********     *       *****     *       ***********\\n    *         *     *              *         *       *                 *\\n    *         *     *              *         *       *                 *\\n    *        *      *              *         *       *                 *\\n    *      *        *              *         *       *                 *\\n    *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.10;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\n\\n/**\\n * @title  Price Getter\\n * @notice This is the contract for getting price feed from chainlink.\\n *         The contract will keep a record from tokenName => priceFeed Address.\\n *         Got the sponsorship and collaboration with Chainlink.\\n * @dev    The price from chainlink priceFeed has different decimals, be careful.\\n */\\ncontract PriceGetter is Ownable {\\n    struct PriceFeedInfo {\\n        address priceFeedAddress;\\n        uint256 decimals;\\n    }\\n    // Use token name (string) as the mapping key\\n    // Should set the correct orginal token name\\n    mapping(string => PriceFeedInfo) public priceFeedInfo;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n    event PriceFeedChanged(\\n        string tokenName,\\n        address feedAddress,\\n        uint256 decimals\\n    );\\n\\n    event LatestPriceGet(\\n        uint80 roundID,\\n        int256 price,\\n        uint256 startedAt,\\n        uint256 timeStamp,\\n        uint80 answeredInRound\\n    );\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Constructor function, initialize some price feed\\n     */\\n    constructor() Ownable(msg.sender) {\\n        // Avalanche data feed addresses and decimals\\n        priceFeedInfo[\\\"AVAX\\\"] = PriceFeedInfo(\\n            0x0A77230d17318075983913bC2145DB16C7366156,\\n            8\\n        );\\n\\n        priceFeedInfo[\\\"ETH\\\"] = PriceFeedInfo(\\n            0x976B3D034E162d8bD72D6b9C989d545b839003b0,\\n            8\\n        );\\n\\n        priceFeedInfo[\\\"BTC\\\"] = PriceFeedInfo(\\n            0x2779D32d5166BAaa2B2b658333bA7e6Ec0C65743,\\n            8\\n        );\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Modifiers ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Can not give zero address\\n     */\\n    modifier notZeroAddress(address _address) {\\n        require(_address != address(0), \\\"Zero address\\\");\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Set a price feed oracle address for a token\\n     * @param _tokenName Address of the token\\n     * @param _feedAddress Price feed oracle address\\n     * @param _decimals Decimals of this price feed service\\n     */\\n    function setPriceFeed(\\n        string memory _tokenName,\\n        address _feedAddress,\\n        uint256 _decimals\\n    ) public onlyOwner notZeroAddress(_feedAddress) {\\n        require(_decimals <= 18, \\\"Too many decimals\\\");\\n        priceFeedInfo[_tokenName] = PriceFeedInfo(_feedAddress, _decimals);\\n\\n        emit PriceFeedChanged(_tokenName, _feedAddress, _decimals);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Main Functions *********************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get latest price of a token\\n     * @param _tokenName Address of the token\\n     * @return price The latest price\\n     */\\n    function getLatestPrice(string memory _tokenName) public returns (uint256) {\\n        PriceFeedInfo memory priceFeed = priceFeedInfo[_tokenName];\\n\\n        (\\n            uint80 roundID,\\n            int256 price,\\n            uint256 startedAt,\\n            uint256 timeStamp,\\n            uint80 answeredInRound\\n        ) = AggregatorV3Interface(priceFeed.priceFeedAddress).latestRoundData();\\n\\n        // require(price > 0, \\\"Only accept price that > 0\\\");\\n        if (price < 0) price = 0;\\n\\n        emit LatestPriceGet(\\n            roundID,\\n            price,\\n            startedAt,\\n            timeStamp,\\n            answeredInRound\\n        );\\n        // Transfer the result decimals\\n        uint256 finalPrice = uint256(price) * (10**(18 - priceFeed.decimals));\\n\\n        return finalPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x97281c7db514cead83cac14c65517586a0f044b44f8cd3e926f957b0b96870a9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x6fe5115c43db85920e7325c78060272343284628b8367ea986dab63747553dde\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev The owner can be set during deployment, not default to be msg.sender\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address _initialOwner) {\\n        _transferOwnership(_initialOwner);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. It will not be possible to call\\n     *         `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * @dev    Renouncing ownership will leave the contract without an owner,\\n     *         thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Can only be called by the current owner.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Internal function without access restriction.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x01872fb0c7277e79dbf69d60aad3ac917dfc22349ce6377d8e388287e4f31e88\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b503361001b81610161565b50604080518082018252730a77230d17318075983913bc2145db16c7366156815260086020820152905163082ac82b60e31b8152600190600401908152604080519182900360209081018320845181546001600160a01b039091166001600160a01b031990911617815593810151600194850155828201825273976b3d034e162d8bd72d6b9c989d545b839003b08352600890830152519091906100be906101c6565b908152604080519182900360209081018320845181546001600160a01b039091166001600160a01b0319909116178155938101516001948501558282018252732779d32d5166baaa2b2b658333ba7e6ec0c65743835260089083015251909190610127906101dd565b90815260405160209181900382019020825181546001600160a01b0319166001600160a01b039091161781559101516001909101556101e6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b919050565b6208aa8960eb1b81525b60030190565b6101b1816101b6565b6242544360e81b81526101c0565b6101b1816101cf565b610bb4806101f56000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100eb578063f2fde38b14610104578063f66a1b711461011757600080fd5b806316b3de69146100775780635b8c0d6c146100ce578063715018a6146100e3575b600080fd5b6100b76100853660046105d9565b80516020818301810180516001808352938301929094019190912092905281549101546001600160a01b039091169082565b6040516100c592919061063c565b60405180910390f35b6100e16100dc36600461068e565b610137565b005b6100e1610275565b6000546001600160a01b03166040516100c591906106f8565b6100e1610112366004610706565b6102ba565b61012a6101253660046105d9565b610325565b6040516100c59190610727565b3361014a6000546001600160a01b031690565b6001600160a01b0316146101795760405162461bcd60e51b815260040161017090610767565b60405180910390fd5b816001600160a01b0381166101a05760405162461bcd60e51b8152600401610170906107a9565b60128211156101c15760405162461bcd60e51b8152600401610170906107eb565b6040518060400160405280846001600160a01b03168152602001838152506001856040516101ef919061084d565b908152604051602091819003820181208351815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390911617815592909101516001909201919091557fe9a586c9ff4ccc70ffb98ab9cc2079d83dd33e0b4caa7f563ae0db088c62312e9061026790869086908690610889565b60405180910390a150505050565b336102886000546001600160a01b031690565b6001600160a01b0316146102ae5760405162461bcd60e51b815260040161017090610767565b6102b86000610479565b565b336102cd6000546001600160a01b031690565b6001600160a01b0316146102f35760405162461bcd60e51b815260040161017090610767565b6001600160a01b0381166103195760405162461bcd60e51b8152600401610170906108b6565b61032281610479565b50565b600080600183604051610338919061084d565b908152604080519182900360209081018320838301835280546001600160a01b03168085526001909101549184019190915281517ffeaf968c0000000000000000000000000000000000000000000000000000000081529151929350600092839283928392839263feaf968c9160048083019260a09291908290030181865afa1580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed919061093f565b94509450945094509450600084121561040557600093505b7fc7851f2a8f2b8a66cfb8738f664e014401b6b82af7958036c58001411ed923e4858585858560405161043c9594939291906109c9565b60405180910390a16000866020015160126104579190610a2b565b61046290600a610b50565b61046c9086610b5f565b9998505050505050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610512576105126104d6565b6040525050565b600061052460405190565b905061053082826104ec565b919050565b600067ffffffffffffffff82111561054f5761054f6104d6565b601f19601f83011660200192915050565b82818337506000910152565b600061057f61057a84610535565b610519565b90508281526020810184848401111561059a5761059a600080fd5b6105a5848285610560565b509392505050565b600082601f8301126105c1576105c1600080fd5b81356105d184826020860161056c565b949350505050565b6000602082840312156105ee576105ee600080fd5b813567ffffffffffffffff81111561060857610608600080fd5b6105d1848285016105ad565b60006001600160a01b0382165b92915050565b61063081610614565b82525050565b80610630565b6040810161064a8285610627565b6106576020830184610636565b9392505050565b61066781610614565b811461032257600080fd5b80356106218161065e565b80610667565b80356106218161067d565b6000806000606084860312156106a6576106a6600080fd5b833567ffffffffffffffff8111156106c0576106c0600080fd5b6106cc868287016105ad565b93505060206106dd86828701610672565b92505060406106ee86828701610683565b9150509250925092565b602081016106218284610627565b60006020828403121561071b5761071b600080fd5b60006105d18484610672565b602081016106218284610636565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b6020808252810161062181610735565b600c8152602081017f5a65726f2061646472657373000000000000000000000000000000000000000081529050610761565b6020808252810161062181610777565b60118152602081017f546f6f206d616e7920646563696d616c7300000000000000000000000000000081529050610761565b60208082528101610621816107b9565b60005b838110156108165781810151838201526020016107fe565b83811115610825576000848401525b50505050565b6000610835825190565b6108438185602086016107fb565b9290920192915050565b610621818361082b565b6000610861825190565b8084526020840193506108788185602086016107fb565b601f01601f19169290920192915050565b6060808252810161089a8186610857565b90506108a96020830185610627565b6105d16040830184610636565b6020808252810161062181602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b69ffffffffffffffffffff8116610667565b805161062181610917565b80516106218161067d565b600080600080600060a0868803121561095a5761095a600080fd5b60006109668888610929565b955050602061097788828901610934565b945050604061098888828901610934565b935050606061099988828901610934565b92505060806109aa88828901610929565b9150509295509295909350565b69ffffffffffffffffffff8116610630565b60a081016109d782886109b7565b6109e46020830187610636565b6109f16040830186610636565b6109fe6060830185610636565b610a0b60808301846109b7565b9695505050505050565b634e487b7160e01b600052601160045260246000fd5b600082821015610a3d57610a3d610a15565b500390565b80825b6001851115610a8157808604811115610a6057610a60610a15565b6001851615610a6e57908102905b8002610a7a8560011c90565b9450610a45565b94509492505050565b600082610a9957506001610657565b81610aa657506000610657565b8160018114610abc5760028114610ac657610af3565b6001915050610657565b60ff841115610ad757610ad7610a15565b8360020a915084821115610aed57610aed610a15565b50610657565b5060208310610133831016604e8410600b8410161715610b26575081810a83811115610b2157610b21610a15565b610657565b610b338484846001610a42565b92509050818404811115610b4957610b49610a15565b0292915050565b60006106576000198484610a8a565b6000816000190483118215151615610b7957610b79610a15565b50029056fea26469706673582212203b4f20f3231e58837544697e832d56e77afe608d8a8ad7cfed9f2b4bc80b2c7f64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100eb578063f2fde38b14610104578063f66a1b711461011757600080fd5b806316b3de69146100775780635b8c0d6c146100ce578063715018a6146100e3575b600080fd5b6100b76100853660046105d9565b80516020818301810180516001808352938301929094019190912092905281549101546001600160a01b039091169082565b6040516100c592919061063c565b60405180910390f35b6100e16100dc36600461068e565b610137565b005b6100e1610275565b6000546001600160a01b03166040516100c591906106f8565b6100e1610112366004610706565b6102ba565b61012a6101253660046105d9565b610325565b6040516100c59190610727565b3361014a6000546001600160a01b031690565b6001600160a01b0316146101795760405162461bcd60e51b815260040161017090610767565b60405180910390fd5b816001600160a01b0381166101a05760405162461bcd60e51b8152600401610170906107a9565b60128211156101c15760405162461bcd60e51b8152600401610170906107eb565b6040518060400160405280846001600160a01b03168152602001838152506001856040516101ef919061084d565b908152604051602091819003820181208351815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390911617815592909101516001909201919091557fe9a586c9ff4ccc70ffb98ab9cc2079d83dd33e0b4caa7f563ae0db088c62312e9061026790869086908690610889565b60405180910390a150505050565b336102886000546001600160a01b031690565b6001600160a01b0316146102ae5760405162461bcd60e51b815260040161017090610767565b6102b86000610479565b565b336102cd6000546001600160a01b031690565b6001600160a01b0316146102f35760405162461bcd60e51b815260040161017090610767565b6001600160a01b0381166103195760405162461bcd60e51b8152600401610170906108b6565b61032281610479565b50565b600080600183604051610338919061084d565b908152604080519182900360209081018320838301835280546001600160a01b03168085526001909101549184019190915281517ffeaf968c0000000000000000000000000000000000000000000000000000000081529151929350600092839283928392839263feaf968c9160048083019260a09291908290030181865afa1580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed919061093f565b94509450945094509450600084121561040557600093505b7fc7851f2a8f2b8a66cfb8738f664e014401b6b82af7958036c58001411ed923e4858585858560405161043c9594939291906109c9565b60405180910390a16000866020015160126104579190610a2b565b61046290600a610b50565b61046c9086610b5f565b9998505050505050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610512576105126104d6565b6040525050565b600061052460405190565b905061053082826104ec565b919050565b600067ffffffffffffffff82111561054f5761054f6104d6565b601f19601f83011660200192915050565b82818337506000910152565b600061057f61057a84610535565b610519565b90508281526020810184848401111561059a5761059a600080fd5b6105a5848285610560565b509392505050565b600082601f8301126105c1576105c1600080fd5b81356105d184826020860161056c565b949350505050565b6000602082840312156105ee576105ee600080fd5b813567ffffffffffffffff81111561060857610608600080fd5b6105d1848285016105ad565b60006001600160a01b0382165b92915050565b61063081610614565b82525050565b80610630565b6040810161064a8285610627565b6106576020830184610636565b9392505050565b61066781610614565b811461032257600080fd5b80356106218161065e565b80610667565b80356106218161067d565b6000806000606084860312156106a6576106a6600080fd5b833567ffffffffffffffff8111156106c0576106c0600080fd5b6106cc868287016105ad565b93505060206106dd86828701610672565b92505060406106ee86828701610683565b9150509250925092565b602081016106218284610627565b60006020828403121561071b5761071b600080fd5b60006105d18484610672565b602081016106218284610636565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b6020808252810161062181610735565b600c8152602081017f5a65726f2061646472657373000000000000000000000000000000000000000081529050610761565b6020808252810161062181610777565b60118152602081017f546f6f206d616e7920646563696d616c7300000000000000000000000000000081529050610761565b60208082528101610621816107b9565b60005b838110156108165781810151838201526020016107fe565b83811115610825576000848401525b50505050565b6000610835825190565b6108438185602086016107fb565b9290920192915050565b610621818361082b565b6000610861825190565b8084526020840193506108788185602086016107fb565b601f01601f19169290920192915050565b6060808252810161089a8186610857565b90506108a96020830185610627565b6105d16040830184610636565b6020808252810161062181602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b69ffffffffffffffffffff8116610667565b805161062181610917565b80516106218161067d565b600080600080600060a0868803121561095a5761095a600080fd5b60006109668888610929565b955050602061097788828901610934565b945050604061098888828901610934565b935050606061099988828901610934565b92505060806109aa88828901610929565b9150509295509295909350565b69ffffffffffffffffffff8116610630565b60a081016109d782886109b7565b6109e46020830187610636565b6109f16040830186610636565b6109fe6060830185610636565b610a0b60808301846109b7565b9695505050505050565b634e487b7160e01b600052601160045260246000fd5b600082821015610a3d57610a3d610a15565b500390565b80825b6001851115610a8157808604811115610a6057610a60610a15565b6001851615610a6e57908102905b8002610a7a8560011c90565b9450610a45565b94509492505050565b600082610a9957506001610657565b81610aa657506000610657565b8160018114610abc5760028114610ac657610af3565b6001915050610657565b60ff841115610ad757610ad7610a15565b8360020a915084821115610aed57610aed610a15565b50610657565b5060208310610133831016604e8410600b8410161715610b26575081810a83811115610b2157610b21610a15565b610657565b610b338484846001610a42565b92509050818404811115610b4957610b49610a15565b0292915050565b60006106576000198484610a8a565b6000816000190483118215151615610b7957610b79610a15565b50029056fea26469706673582212203b4f20f3231e58837544697e832d56e77afe608d8a8ad7cfed9f2b4bc80b2c7f64736f6c634300080a0033",
  "devdoc": {
    "details": "The price from chainlink priceFeed has different decimals, be careful.",
    "kind": "dev",
    "methods": {
      "getLatestPrice(string)": {
        "params": {
          "_tokenName": "Address of the token"
        },
        "returns": {
          "_0": "price The latest price"
        }
      },
      "renounceOwnership()": {
        "details": "Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner."
      },
      "setPriceFeed(string,address,uint256)": {
        "params": {
          "_decimals": "Decimals of this price feed service",
          "_feedAddress": "Price feed oracle address",
          "_tokenName": "Address of the token"
        }
      },
      "transferOwnership(address)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "newOwner": "Address of the new owner"
        }
      }
    },
    "title": "Price Getter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor function, initialize some price feed"
      },
      "getLatestPrice(string)": {
        "notice": "Get latest price of a token"
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."
      },
      "setPriceFeed(string,address,uint256)": {
        "notice": "Set a price feed oracle address for a token"
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`)."
      }
    },
    "notice": "This is the contract for getting price feed from chainlink.         The contract will keep a record from tokenName => priceFeed Address.         Got the sponsorship and collaboration with Chainlink.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31949,
        "contract": "contracts/naughty-price/PriceGetter.sol:PriceGetter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 29055,
        "contract": "contracts/naughty-price/PriceGetter.sol:PriceGetter",
        "label": "priceFeedInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_struct(PriceFeedInfo)29050_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_struct(PriceFeedInfo)29050_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct PriceGetter.PriceFeedInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PriceFeedInfo)29050_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PriceFeedInfo)29050_storage": {
        "encoding": "inplace",
        "label": "struct PriceGetter.PriceFeedInfo",
        "members": [
          {
            "astId": 29047,
            "contract": "contracts/naughty-price/PriceGetter.sol:PriceGetter",
            "label": "priceFeedAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 29049,
            "contract": "contracts/naughty-price/PriceGetter.sol:PriceGetter",
            "label": "decimals",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}