{
  "address": "0x68d8F4fEF5fC1Fac609E40E9Fc998e60db62C810",
  "abi": [
    {
      "inputs": [],
      "name": "ILM__NoDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ILM__NotActiveILM",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ILM__NotEnoughDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ILM__PairNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ILM__RoundNotOver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ILM__RoundOver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ILM__StablecoinNotPaired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ILM__StablecoinNotSupport",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ILM__WrongILMDeadline",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ILM__ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ILM__ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "policyToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "policyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "ILMFinish",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "policyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lptokenAddress",
          "type": "address"
        }
      ],
      "name": "ILMStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "policyToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_UINT256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        }
      ],
      "name": "approveStablecoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountBMin",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "degis",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountB",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyToken",
          "type": "address"
        }
      ],
      "name": "emergencyRestart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyToken",
          "type": "address"
        }
      ],
      "name": "emergencyStop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadlineForSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeRate",
          "type": "uint256"
        }
      ],
      "name": "finishILM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyToken",
          "type": "address"
        }
      ],
      "name": "getPairTotalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyToken",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_policyToken",
          "type": "address"
        }
      ],
      "name": "getUserDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_degis",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_policyCore",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_emergencyPool",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pairs",
      "outputs": [
        {
          "internalType": "enum NaughtyPriceILM.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "lptoken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ILMDeadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "naughtyPairAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "degisAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accDegisPerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyCore",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ILMDeadline",
          "type": "uint256"
        }
      ],
      "name": "startILM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "degisDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountB",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc5e6ba5ea4680e6fe0fbdf251cbeec6d3a326a0bd36ef25300eb652af48f8992",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x68d8F4fEF5fC1Fac609E40E9Fc998e60db62C810",
    "transactionIndex": 1,
    "gasUsed": "3881166",
    "logsBloom": "0x
    "blockHash": "0xab38ae5d87d6141abf41740464aa84bfd34dedd74bed0a26d2cc6e5708db5c56",
    "transactionHash": "0xc5e6ba5ea4680e6fe0fbdf251cbeec6d3a326a0bd36ef25300eb652af48f8992",
    "logs": [],
    "blockNumber": 9459913,
    "cumulativeGasUsed": "4801588",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dac4e5fe3f0ddff2793c693a8a6aab18",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ILM__NoDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ILM__NotActiveILM\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ILM__NotEnoughDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ILM__PairNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ILM__RoundNotOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ILM__RoundOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ILM__StablecoinNotPaired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ILM__StablecoinNotSupport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ILM__WrongILMDeadline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ILM__ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ILM__ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"policyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"policyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"ILMFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"policyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lptokenAddress\",\"type\":\"address\"}],\"name\":\"ILMStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"policyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"}],\"name\":\"approveStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMin\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"degis\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountB\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyToken\",\"type\":\"address\"}],\"name\":\"emergencyRestart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyToken\",\"type\":\"address\"}],\"name\":\"emergencyStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadlineForSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"finishILM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyToken\",\"type\":\"address\"}],\"name\":\"getPairTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyToken\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_policyToken\",\"type\":\"address\"}],\"name\":\"getUserDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_degis\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_policyCore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_emergencyPool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"enum NaughtyPriceILM.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"lptoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ILMDeadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"naughtyPairAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"degisAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDegisPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyCore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ILMDeadline\",\"type\":\"uint256\"}],\"name\":\"startILM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"degisDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountB\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveStablecoin(address)\":{\"params\":{\"_stablecoin\":\"Stablecoin address\"}},\"claim(address,address,uint256,uint256)\":{\"params\":{\"_amountAMin\":\"Minimum amount of policy token (slippage)\",\"_amountBMin\":\"Minimum amount of stablecoin (slippage)\",\"_policyToken\":\"Policy token address\",\"_stablecoin\":\"Stablecoin address\"}},\"deposit(address,address,uint256,uint256)\":{\"details\":\"Deposit only check the pair status not the deadline      There may be a zero ILM and we still need to deposit some asset to make it start      Anyone wants to enter ILM need to pay some DEG as entrance fee      The ratio is 100:1(usd:deg) and your fee is distributed to the users prior to you\",\"params\":{\"_amountA\":\"Amount of policy token (virtual)\",\"_amountB\":\"Amount of stablecoin (virtual)\",\"_policyToken\":\"Policy token address\",\"_stablecoin\":\"Stablecoin address\"}},\"emergencyRestart(address)\":{\"params\":{\"_policyToken\":\"Policy token address to be restarted\"}},\"emergencyStop(address)\":{\"params\":{\"_policyToken\":\"Policy token address to be stopped\"}},\"emergencyWithdraw(address,uint256)\":{\"params\":{\"_amount\":\"Token amount\",\"_token\":\"Token address\"}},\"finishILM(address,uint256,uint256)\":{\"details\":\"The swap pool for the protection token will be deployed with inital liquidity\\\\      The amount of initial liquidity will be the total amount of the pair      Can be called by any address\",\"params\":{\"_deadlineForSwap\":\"Pool deadline\",\"_feeRate\":\"Fee rate of the swap pool\",\"_policyToken\":\"Policy token address\"}},\"getPairTotalAmount(address)\":{\"params\":{\"_policyToken\":\"Policy token address\"},\"returns\":{\"totalAmount\":\"Total amount of a pair\"}},\"getPrice(address)\":{\"details\":\"Price has a scale of 1e12\",\"params\":{\"_policyToken\":\"Policy token address\"},\"returns\":{\"_0\":\"price Price of the token pair\"}},\"getUserDeposit(address,address)\":{\"params\":{\"_policyToken\":\"Policy token address\",\"_user\":\"User address\"}},\"initialize(address,address,address,address)\":{\"details\":\"Called only when deploying proxy contract\",\"params\":{\"_degis\":\"Degis token address\",\"_emergencyPool\":\"EmergencyPool contract address\",\"_policyCore\":\"PolicyCore contract address\",\"_router\":\"NaughtyRouter contract address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"startILM(address,address,uint256)\":{\"details\":\"A new lp token will be deployed when starting a new ILM round      It will have a special farming reward pool\",\"params\":{\"_ILMDeadline\":\"Deadline of ILM period\",\"_policyToken\":\"Policy token address\",\"_stablecoin\":\"Stablecoin address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,address,uint256,uint256)\":{\"details\":\"Only checks the status not the deadline\",\"params\":{\"_amountA\":\"Amount of policy token (virtual)\",\"_amountB\":\"Amount of stablecoin (virtual)\",\"_policyToken\":\"Policy token address\",\"_stablecoin\":\"Stablecoin address\"}},\"withdrawAll(address,address)\":{\"params\":{\"_policyToken\":\"Policy token address\",\"_stablecoin\":\"Stablecoin address\"}}},\"title\":\"Naughty Price Initial Liquidity Matching\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveStablecoin(address)\":{\"notice\":\"Approve stablecoins for naughty price contracts\"},\"claim(address,address,uint256,uint256)\":{\"notice\":\"Claim liquidity back\"},\"deposit(address,address,uint256,uint256)\":{\"notice\":\"Deposit stablecoin and choose the price\"},\"emergencyRestart(address)\":{\"notice\":\"Emergency restart ILM\"},\"emergencyStop(address)\":{\"notice\":\"Emergency stop ILM\"},\"emergencyWithdraw(address,uint256)\":{\"notice\":\"Emergency withdraw a certain token\"},\"finishILM(address,uint256,uint256)\":{\"notice\":\"Finish a round of ILM\"},\"getPairTotalAmount(address)\":{\"notice\":\"Get the total amount of a pair\"},\"getPrice(address)\":{\"notice\":\"Get the current price\"},\"getUserDeposit(address,address)\":{\"notice\":\"Get the amount of user's deposit\"},\"initialize(address,address,address,address)\":{\"notice\":\"Initialze function for proxy\"},\"startILM(address,address,uint256)\":{\"notice\":\"Start a new ILM round\"},\"withdraw(address,address,uint256,uint256)\":{\"notice\":\"Withdraw stablecoins\"},\"withdrawAll(address,address)\":{\"notice\":\"Withdraw all stablecoins of a certain policy token\"}},\"notice\":\"Naughty Price timeline: 1 -- 14 -- 5         The first day of each round would be the time for liquidity matching         User           - Select the naughty token           - Provide stablecoins into this contract & Select your price choice           - Change the amountA and amountB of this pair         When reach deadline           - Final price of ILM = Initial price of naughty price pair = amountA/amountB\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ILM/NaughtyPriceILM.sol\":\"NaughtyPriceILM\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x53a0bb51b8a505e04aaf065de27c0e31cadf38194f8a9a6ec92b7bcd3c5826e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"contracts/ILM/ILMToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract ILMToken is ERC20 {\\n    address public ILMContract;\\n\\n    constructor(\\n        address _ILM,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol) {\\n        ILMContract = _ILM;\\n    }\\n\\n    modifier onlyILM() {\\n        require(msg.sender == ILMContract, \\\"Only ILM\\\");\\n        _;\\n    }\\n\\n    function mint(address _to, uint256 _amount) public onlyILM {\\n        _mint(_to, _amount);\\n    }\\n\\n    function burn(address _to, uint256 _amount) public onlyILM {\\n        _burn(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcf9b9282f0ad2a6c7446909ce80d76aaf9985d7ef25a1c269f55183dea9b27be\",\"license\":\"GPL-3.0-or-later\"},\"contracts/ILM/NaughtyPriceILM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Decimals} from \\\"../utils/interfaces/IERC20Decimals.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {IPolicyCore} from \\\"../naughty-price/interfaces/IPolicyCore.sol\\\";\\nimport {INaughtyRouter} from \\\"../naughty-price/interfaces/INaughtyRouter.sol\\\";\\nimport {INaughtyPair} from \\\"../naughty-price/interfaces/INaughtyPair.sol\\\";\\nimport {ILMToken as LPToken} from \\\"./ILMToken.sol\\\";\\n\\n/**\\n * @title Naughty Price Initial Liquidity Matching\\n * @notice Naughty Price timeline: 1 -- 14 -- 5\\n *         The first day of each round would be the time for liquidity matching\\n *         User\\n *           - Select the naughty token\\n *           - Provide stablecoins into this contract & Select your price choice\\n *           - Change the amountA and amountB of this pair\\n *         When reach deadline\\n *           - Final price of ILM = Initial price of naughty price pair = amountA/amountB\\n */\\ncontract NaughtyPriceILM is OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constants **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Scale when calculating fee\\n    uint256 public constant SCALE = 1e12;\\n\\n    // Degis entrance fee = 1 / 100 deposit amount\\n    uint256 public constant FEE_DENOMINATOR = 100;\\n\\n    // Minimum deposit amount\\n    uint256 public constant MINIMUM_AMOUNT = 1e6;\\n\\n    // Uint256 maximum value\\n    uint256 public constant MAX_UINT256 = type(uint256).max;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Degis token address\\n    address public degis;\\n\\n    // PolicyCore, Router and EmergencyPool contract address\\n    address public policyCore;\\n    address public router;\\n    address public emergencyPool;\\n\\n    struct UserInfo {\\n        uint256 amountA;\\n        uint256 amountB;\\n        uint256 degisDebt;\\n    }\\n    // user address => policy token address => user info\\n    mapping(address => mapping(address => UserInfo)) public users;\\n\\n    // Status of an ILM round\\n    enum Status {\\n        BeforeStart,\\n        Active,\\n        Finished,\\n        Stopped\\n    }\\n\\n    struct PairInfo {\\n        Status status; // 0: before start 1: active 2: finished 3: stopped\\n        address lptoken; // lptoken address\\n        uint256 ILMDeadline; // deadline for initial liquidity matching\\n        address stablecoin; // stablecoin address\\n        uint256 amountA; // Amount of policy tokens\\n        uint256 amountB; // Amount of stablecoins\\n        address naughtyPairAddress; // Naughty pair address deployed when finished ILM\\n        // degis paid as fee\\n        uint256 degisAmount;\\n        uint256 accDegisPerShare;\\n    }\\n    // Policy Token Address => Pair Info\\n    mapping(address => PairInfo) public pairs;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event Deposit(\\n        address indexed policyToken,\\n        address indexed stablecoin,\\n        uint256 amountA,\\n        uint256 amountB\\n    );\\n    event Withdraw(\\n        address indexed policyToken,\\n        address indexed stablecoin,\\n        address indexed user,\\n        uint256 amountA,\\n        uint256 amountB\\n    );\\n    event EmergencyWithdraw(address owner, uint256 amount);\\n    event ILMFinish(\\n        address policyToken,\\n        address stablecoin,\\n        address poolAddress,\\n        uint256 amountA,\\n        uint256 amountB\\n    );\\n    event ILMStart(\\n        address policyToken,\\n        address stablecoin,\\n        uint256 deadline,\\n        address lptokenAddress\\n    );\\n    event Harvest(address user, uint256 reward);\\n    event Claim(address user, uint256 amountA, uint256 amountB);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Errors ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    error ILM__WrongILMDeadline();\\n    error ILM__ZeroAddress();\\n    error ILM__RoundOver();\\n    error ILM__PairNotActive();\\n    error ILM__RoundNotOver();\\n    error ILM__ZeroAmount();\\n    error ILM__NotActiveILM();\\n    error ILM__StablecoinNotPaired();\\n    error ILM__StablecoinNotSupport();\\n    error ILM__NoDeposit();\\n    error ILM__NotEnoughDeposit();\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Initialze function for proxy\\n     * @dev Called only when deploying proxy contract\\n     * @param _degis Degis token address\\n     * @param _policyCore PolicyCore contract address\\n     * @param _router NaughtyRouter contract address\\n     * @param _emergencyPool EmergencyPool contract address\\n     */\\n    function initialize(\\n        address _degis,\\n        address _policyCore,\\n        address _router,\\n        address _emergencyPool\\n    ) public initializer {\\n        if (_policyCore == address(0) || _router == address(0))\\n            revert ILM__ZeroAddress();\\n\\n        __Ownable_init();\\n\\n        degis = _degis;\\n        policyCore = _policyCore;\\n        router = _router;\\n\\n        emergencyPool = _emergencyPool;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Check whether a pair is active\\n     * @param _policyToken Policy token address\\n     */\\n    modifier activePair(address _policyToken) {\\n        if (pairs[_policyToken].status != Status.Active)\\n            revert ILM__PairNotActive();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Check whether is during ILM\\n     * @param _policyToken Policy token address\\n     */\\n    modifier duringILM(address _policyToken) {\\n        if (block.timestamp > pairs[_policyToken].ILMDeadline)\\n            revert ILM__RoundOver();\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get the current price\\n     * @dev Price has a scale of 1e12\\n     * @param _policyToken Policy token address\\n     * @return price Price of the token pair\\n     */\\n    function getPrice(address _policyToken) external view returns (uint256) {\\n        uint256 amountA = pairs[_policyToken].amountA;\\n        uint256 amountB = pairs[_policyToken].amountB;\\n        return (amountA * SCALE) / amountB;\\n    }\\n\\n    /**\\n     * @notice Get the total amount of a pair\\n     * @param _policyToken Policy token address\\n     * @return totalAmount Total amount of a pair\\n     */\\n    function getPairTotalAmount(address _policyToken)\\n        external\\n        view\\n        returns (uint256 totalAmount)\\n    {\\n        totalAmount = pairs[_policyToken].amountA + pairs[_policyToken].amountB;\\n    }\\n\\n    /**\\n     * @notice Get the amount of user's deposit\\n     * @param _user User address\\n     * @param _policyToken Policy token address\\n     */\\n    function getUserDeposit(address _user, address _policyToken)\\n        external\\n        view\\n        returns (uint256 amountA, uint256 amountB)\\n    {\\n        amountA = users[_user][_policyToken].amountA;\\n        amountB = users[_user][_policyToken].amountB;\\n    }\\n\\n    /**\\n     * @notice Emergency stop ILM\\n     * @param _policyToken Policy token address to be stopped\\n     */\\n    function emergencyStop(address _policyToken) external onlyOwner {\\n        pairs[_policyToken].status = Status.Stopped;\\n    }\\n\\n    /**\\n     * @notice Emergency restart ILM\\n     * @param _policyToken Policy token address to be restarted\\n     */\\n    function emergencyRestart(address _policyToken) external onlyOwner {\\n        pairs[_policyToken].status = Status.Active;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Start a new ILM round\\n     * @dev A new lp token will be deployed when starting a new ILM round\\n     *      It will have a special farming reward pool\\n     * @param _policyToken Policy token address\\n     * @param _stablecoin Stablecoin address\\n     * @param _ILMDeadline Deadline of ILM period\\n     */\\n    function startILM(\\n        address _policyToken,\\n        address _stablecoin,\\n        uint256 _ILMDeadline\\n    ) external onlyOwner {\\n        // Get policy token name & Check if this policy token exists\\n        // The check is inside policy core contract\\n        string memory policyTokenName = IPolicyCore(policyCore)\\n            .findNamebyAddress(_policyToken);\\n\\n        // Check if the stablecoin is supported\\n        bool isSupported = IPolicyCore(policyCore).supportedStablecoin(\\n            _stablecoin\\n        );\\n        if (!isSupported) revert ILM__StablecoinNotSupport();\\n\\n        // The deadline for ILM can not be later than the policy token deadline\\n        uint256 policyTokenDeadline = (\\n            IPolicyCore(policyCore).getPolicyTokenInfo(policyTokenName)\\n        ).deadline;\\n        if (_ILMDeadline >= policyTokenDeadline) revert ILM__WrongILMDeadline();\\n\\n        PairInfo storage pair = pairs[_policyToken];\\n        // Update the status\\n        pair.status = Status.Active;\\n        pair.stablecoin = _stablecoin;\\n        pair.ILMDeadline = _ILMDeadline;\\n\\n        // Deploy a new ERC20 LP Token\\n        string memory LPTokenName = string(\\n            abi.encodePacked(\\\"ILM-\\\", policyTokenName)\\n        );\\n        address lpTokenAddress = _deployLPToken(LPTokenName);\\n\\n        // Record the lptoken address\\n        pair.lptoken = lpTokenAddress;\\n\\n        // Pre-approve the stablecoin for later deposit\\n        IERC20(_policyToken).approve(router, MAX_UINT256);\\n\\n        emit ILMStart(_policyToken, _stablecoin, _ILMDeadline, lpTokenAddress);\\n    }\\n\\n    /**\\n     * @notice Finish a round of ILM\\n     * @dev The swap pool for the protection token will be deployed with inital liquidity\\\\\\n     *      The amount of initial liquidity will be the total amount of the pair\\n     *      Can be called by any address\\n     * @param _policyToken Policy token address\\n     * @param _deadlineForSwap Pool deadline\\n     * @param _feeRate Fee rate of the swap pool\\n     */\\n    function finishILM(\\n        address _policyToken,\\n        uint256 _deadlineForSwap,\\n        uint256 _feeRate\\n    ) external activePair(_policyToken) {\\n        PairInfo memory pair = pairs[_policyToken];\\n\\n        // Pair status is 1 and passed deadline => can finish ILM\\n        if (block.timestamp <= pair.ILMDeadline) revert ILM__RoundNotOver();\\n        if (pair.amountA + pair.amountB == 0) revert ILM__NoDeposit();\\n\\n        // Update the status of this pair\\n        pairs[_policyToken].status = Status.Finished;\\n\\n        // Get policy token name\\n        string memory policyTokenName = IPolicyCore(policyCore)\\n            .findNamebyAddress(_policyToken);\\n\\n        // Deploy a new pool and return the pool address\\n        address poolAddress = IPolicyCore(policyCore).deployPool(\\n            policyTokenName,\\n            pair.stablecoin,\\n            _deadlineForSwap,\\n            _feeRate // maximum = 1000 = 100%\\n        );\\n        pairs[_policyToken].naughtyPairAddress = poolAddress;\\n\\n        // Approval prepration for withdraw liquidity\\n        INaughtyPair(poolAddress).approve(router, MAX_UINT256);\\n\\n        // Add initial liquidity to the pool\\n        // Zero slippage\\n        INaughtyRouter(router).addLiquidityWithUSD(\\n            _policyToken,\\n            pair.stablecoin,\\n            pair.amountA,\\n            pair.amountB,\\n            pair.amountA,\\n            pair.amountB,\\n            address(this),\\n            block.timestamp + 60\\n        );\\n\\n        emit ILMFinish(\\n            _policyToken,\\n            pair.stablecoin,\\n            poolAddress,\\n            pair.amountA,\\n            pair.amountB\\n        );\\n    }\\n\\n    /**\\n     * @notice Deposit stablecoin and choose the price\\n     * @dev Deposit only check the pair status not the deadline\\n     *      There may be a zero ILM and we still need to deposit some asset to make it start\\n     *      Anyone wants to enter ILM need to pay some DEG as entrance fee\\n     *      The ratio is 100:1(usd:deg) and your fee is distributed to the users prior to you\\n     * @param _policyToken Policy token address\\n     * @param _stablecoin Stablecoin address\\n     * @param _amountA Amount of policy token (virtual)\\n     * @param _amountB Amount of stablecoin (virtual)\\n     */\\n    function deposit(\\n        address _policyToken,\\n        address _stablecoin,\\n        uint256 _amountA,\\n        uint256 _amountB\\n    ) external activePair(_policyToken) {\\n        if (_amountA + _amountB < MINIMUM_AMOUNT) revert ILM__ZeroAmount();\\n        if (_stablecoin != pairs[_policyToken].stablecoin)\\n            revert ILM__StablecoinNotPaired();\\n\\n        uint256 amountToDeposit = _amountA + _amountB;\\n\\n        // Every 100usd pay 1 degis\\n        uint256 decimalDiff = 18 - IERC20Decimals(_stablecoin).decimals();\\n        uint256 degisToPay = (amountToDeposit * 10**decimalDiff) /\\n            FEE_DENOMINATOR;\\n\\n        // Update the info about deg entrance fee when deposit\\n        _updateWhenDeposit(\\n            _policyToken,\\n            amountToDeposit,\\n            degisToPay,\\n            decimalDiff\\n        );\\n\\n        PairInfo storage pair = pairs[_policyToken];\\n        UserInfo storage user = users[msg.sender][_policyToken];\\n\\n        // Update deg record and transfer degis token\\n        pair.degisAmount += degisToPay;\\n        IERC20(degis).safeTransferFrom(msg.sender, address(this), degisToPay);\\n\\n        // Update the status\\n        pair.amountA += _amountA;\\n        pair.amountB += _amountB;\\n        user.amountA += _amountA;\\n        user.amountB += _amountB;\\n\\n        // Transfer tokens\\n        IERC20(_stablecoin).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amountToDeposit\\n        );\\n\\n        // Distribute the lptoken\\n        address lpToken = pairs[_policyToken].lptoken;\\n        LPToken(lpToken).mint(msg.sender, amountToDeposit);\\n\\n        emit Deposit(_policyToken, _stablecoin, _amountA, _amountB);\\n    }\\n\\n    /**\\n     * @notice Withdraw stablecoins\\n     * @dev Only checks the status not the deadline\\n     * @param _policyToken Policy token address\\n     * @param _stablecoin Stablecoin address\\n     * @param _amountA Amount of policy token (virtual)\\n     * @param _amountB Amount of stablecoin (virtual)\\n     */\\n    function withdraw(\\n        address _policyToken,\\n        address _stablecoin,\\n        uint256 _amountA,\\n        uint256 _amountB\\n    ) public activePair(_policyToken) {\\n        UserInfo memory currentUserInfo = users[msg.sender][_policyToken];\\n\\n        // Check if the user has enough tokens to withdraw\\n        if (currentUserInfo.amountA + currentUserInfo.amountB == 0)\\n            revert ILM__NoDeposit();\\n        if (\\n            _amountA > currentUserInfo.amountA ||\\n            _amountB > currentUserInfo.amountB\\n        ) revert ILM__NotEnoughDeposit();\\n\\n        PairInfo storage pair = pairs[_policyToken];\\n        UserInfo storage user = users[msg.sender][_policyToken];\\n\\n        // Update status when withdraw\\n        uint256 degisToWithdraw = (pair.accDegisPerShare *\\n            (currentUserInfo.amountA + currentUserInfo.amountB)) /\\n            SCALE -\\n            currentUserInfo.degisDebt;\\n\\n        if (degisToWithdraw > 0) {\\n            // Degis will be withdrawed to emergency pool, not the user\\n            uint256 reward = _safeTokenTransfer(\\n                degis,\\n                emergencyPool,\\n                degisToWithdraw\\n            );\\n            emit Harvest(emergencyPool, reward);\\n        }\\n\\n        // Update the user's amount and pool's amount\\n        pair.amountA -= _amountA;\\n        pair.amountB -= _amountB;\\n        user.amountA -= _amountA;\\n        user.amountB -= _amountB;\\n\\n        uint256 amountToWithdraw = _amountA + _amountB;\\n\\n        // Withdraw stablecoins to the user\\n        _safeTokenTransfer(_stablecoin, msg.sender, amountToWithdraw);\\n\\n        // Burn the lptokens\\n        LPToken(pair.lptoken).burn(msg.sender, amountToWithdraw);\\n\\n        // Update the user debt\\n        user.degisDebt =\\n            ((user.amountA + user.amountB) * pair.accDegisPerShare) /\\n            SCALE;\\n\\n        emit Withdraw(\\n            _policyToken,\\n            _stablecoin,\\n            msg.sender,\\n            _amountA,\\n            _amountB\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraw all stablecoins of a certain policy token\\n     * @param _policyToken Policy token address\\n     * @param _stablecoin Stablecoin address\\n     */\\n    function withdrawAll(address _policyToken, address _stablecoin) external {\\n        uint256 amounAMax = users[msg.sender][_policyToken].amountA;\\n        uint256 amounBMax = users[msg.sender][_policyToken].amountB;\\n\\n        withdraw(_policyToken, _stablecoin, amounAMax, amounBMax);\\n    }\\n\\n    /**\\n     * @notice Claim liquidity back\\n     * @param _policyToken Policy token address\\n     * @param _stablecoin Stablecoin address\\n     * @param _amountAMin Minimum amount of policy token (slippage)\\n     * @param _amountBMin Minimum amount of stablecoin (slippage)\\n     */\\n    function claim(\\n        address _policyToken,\\n        address _stablecoin,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin\\n    ) external {\\n        UserInfo memory user = users[msg.sender][_policyToken];\\n\\n        if (user.amountA + user.amountB == 0) revert ILM__NotEnoughDeposit();\\n\\n        address naughtyPair = pairs[_policyToken].naughtyPairAddress;\\n        address lptoken = pairs[_policyToken].lptoken;\\n\\n        // Total liquidity owned by the pool\\n        uint256 totalLiquidity = INaughtyPair(naughtyPair).balanceOf(\\n            address(this)\\n        );\\n\\n        // User's liquidity amount\\n        uint256 userLiquidity = (LPToken(lptoken).balanceOf(msg.sender) *\\n            totalLiquidity) / LPToken(lptoken).totalSupply();\\n\\n        _updateWhenClaim(_policyToken);\\n\\n        // Remove liquidity\\n        (uint256 amountA, uint256 amountB) = INaughtyRouter(router)\\n            .removeLiquidity(\\n                _policyToken,\\n                _stablecoin,\\n                userLiquidity,\\n                _amountAMin,\\n                _amountBMin,\\n                msg.sender,\\n                block.timestamp + 60\\n            );\\n\\n        // Update user quota\\n        IPolicyCore(policyCore).updateUserQuota(msg.sender, _stablecoin, amountA);\\n\\n        delete users[msg.sender][_policyToken];\\n\\n        // Burn the user's lp tokens\\n        LPToken(lptoken).burn(\\n            msg.sender,\\n            LPToken(lptoken).balanceOf(msg.sender)\\n        );\\n\\n        emit Claim(msg.sender, amountA, amountB);\\n    }\\n\\n    /**\\n     * @notice Emergency withdraw a certain token\\n     * @param _token Token address\\n     * @param _amount Token amount\\n     */\\n    function emergencyWithdraw(address _token, uint256 _amount) external {\\n        IERC20(_token).safeTransfer(owner(), _amount);\\n\\n        emit EmergencyWithdraw(owner(), _amount);\\n    }\\n\\n    /**\\n     * @notice Approve stablecoins for naughty price contracts\\n     * @param _stablecoin Stablecoin address\\n     */\\n    function approveStablecoin(address _stablecoin) external {\\n        IERC20(_stablecoin).approve(router, MAX_UINT256);\\n        IERC20(_stablecoin).approve(policyCore, MAX_UINT256);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Deploy the new lp token for a round\\n     * @param _name Name of the lp token\\n     * @return lpTokenAddress Address of the lp token\\n     */\\n    function _deployLPToken(string memory _name) internal returns (address) {\\n        address lpTokenAddress = address(\\n            new LPToken(address(this), _name, _name)\\n        );\\n        return lpTokenAddress;\\n    }\\n\\n    /**\\n     * @notice Safely transfer tokens\\n     * @param _token Token address\\n     * @param _receiver Receiver address\\n     * @param _amount Amount of tokens\\n     * @return realAmount Real amount that is transferred\\n     */\\n    function _safeTokenTransfer(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n\\n        if (_amount > balance) {\\n            IERC20(_token).safeTransfer(_receiver, balance);\\n            return balance;\\n        } else {\\n            IERC20(_token).safeTransfer(_receiver, _amount);\\n            return _amount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Update debt & fee distribution\\n     * @param _policyToken Policy token address\\n     * @param _usdAmount Amount of stablecoins input\\n     * @param _degAmount Amount of degis input\\n     */\\n    function _updateWhenDeposit(\\n        address _policyToken,\\n        uint256 _usdAmount,\\n        uint256 _degAmount,\\n        uint256 _decimalDiff\\n    ) internal {\\n        PairInfo storage pair = pairs[_policyToken];\\n\\n        // If this is the first user, accDegisPerShare = 1e16\\n        // No debt\\n        if (pair.degisAmount == 0) {\\n            pair.accDegisPerShare =\\n                (SCALE * 10**_decimalDiff) /\\n                FEE_DENOMINATOR;\\n            return;\\n        }\\n\\n        UserInfo storage user = users[msg.sender][_policyToken];\\n\\n        // Update accDegisPerShare first\\n        pair.accDegisPerShare +=\\n            (_degAmount * SCALE) /\\n            (pair.amountA + pair.amountB);\\n\\n        uint256 currentUserDeposit = user.amountA + user.amountB;\\n        // If user has deposited before, distribute the deg reward first\\n        // Pending reward is calculated with the new degisPerShare value\\n        if (currentUserDeposit > 0) {\\n            uint256 pendingReward = (currentUserDeposit *\\n                pair.accDegisPerShare) /\\n                SCALE -\\n                user.degisDebt;\\n\\n            uint256 reward = _safeTokenTransfer(\\n                degis,\\n                msg.sender,\\n                pendingReward\\n            );\\n            emit Harvest(msg.sender, reward);\\n        }\\n\\n        // Update user debt\\n        user.degisDebt =\\n            (pair.accDegisPerShare * (currentUserDeposit + _usdAmount)) /\\n            SCALE;\\n    }\\n\\n    /**\\n     * @notice Update degis reward when claim\\n     * @param _policyToken Policy token address\\n     */\\n    function _updateWhenClaim(address _policyToken) internal {\\n        PairInfo storage pair = pairs[_policyToken];\\n\\n        UserInfo storage user = users[msg.sender][_policyToken];\\n\\n        uint256 pendingReward = ((user.amountA + user.amountB) *\\n            pair.accDegisPerShare) /\\n            SCALE -\\n            user.degisDebt;\\n\\n        uint256 reward = _safeTokenTransfer(degis, msg.sender, pendingReward);\\n        emit Harvest(msg.sender, reward);\\n    }\\n}\\n\",\"keccak256\":\"0x89ddb3c791d319f2e08fa2292482af01a02743d6a0e18634205fd9c86a94cd97\",\"license\":\"MIT\"},\"contracts/naughty-price/interfaces/INaughtyPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface INaughtyPair is IERC20 {\\n    function initialize(\\n        address _token0,\\n        address _token1,\\n        uint256 _deadline,\\n        uint256 _feeRate\\n    ) external;\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function feeRate() external view returns (uint256);\\n\\n    function deadline() external view returns (uint256);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 _reserve0, uint112 _reserve1);\\n\\n    function swap(\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n\\n    function burn(address) external returns (uint256, uint256);\\n\\n    function mint(address) external returns (uint256);\\n\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0x9e8350da8ead9e167ad8274005d55b5c2dd8ba878947e0eda58da10f70a6b0aa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/interfaces/INaughtyRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.10;\\n\\ninterface INaughtyRouter {\\n    function addLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountADesired,\\n        uint256 _amountBDesired,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin,\\n        address _to,\\n        uint256 _deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityWithUSD(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountADesired,\\n        uint256 _amountBDesired,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin,\\n        address _to,\\n        uint256 _deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _liquidity,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function swapExactTokensforTokens(\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xbe88f17d76880e1f8e6a74be9eb6cb3b4114380fbfd90a8f605b8ea798041dfc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/interfaces/IPolicyCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface IPolicyCore {\\n    struct PolicyTokenInfo {\\n        address policyTokenAddress;\\n        bool isCall;\\n        uint256 nameDecimals; // decimals of the name generation\\n        uint256 tokenDecimals; // decimals of the policy token\\n        uint256 strikePrice;\\n        uint256 deadline;\\n        uint256 settleTimestamp;\\n    }\\n\\n    /**\\n     * @notice Find the address by its name\\n     */\\n    function findAddressbyName(string memory _policyTokenName)\\n        external\\n        view\\n        returns (address _policyTokenAddress);\\n\\n    /**\\n     * @notice Find the name by address\\n     */\\n    function findNamebyAddress(address _policyTokenAddress)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Check whether the stablecoin is supported\\n     */\\n    function supportedStablecoin(address _coinAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    function delegateDeposit(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function deployPool(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _poolDeadline,\\n        uint256 _feeRate\\n    ) external returns (address);\\n\\n    function getPolicyTokenInfo(string memory _policyTokenName)\\n        external\\n        view\\n        returns (PolicyTokenInfo memory);\\n\\n    function updateUserQuota(\\n        address _user,\\n        address _policyToken,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7fa671876d2a8a1bb994de6dcd680e81a972939bc99b2d47b064c93da3d4a149\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/interfaces/IERC20Decimals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.10;\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xacb791f2cbb5756d937bfa2ee24497f9ba50f866a7ddf4443914c893e05ca2d0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614598806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620001dd5760003560e01c80636632a96d116200010d578063d73792a911620000a3578063f2fde38b116200007a578063f2fde38b1462000444578063f887ea40146200045b578063f8c8765e146200046f578063fe33b302146200048657600080fd5b8063d73792a9146200041a578063e30145e01462000423578063eced5526146200043757600080fd5b80638da5cb5b11620000e45780638da5cb5b14620003c657806395ccea6714620003d8578063a27cd0e814620003ef578063a59b3645146200040657600080fd5b80636632a96d146200038e578063715018a614620003a55780637bfe950c14620003af57600080fd5b806326af4832116200018357806341976e09116200015a57806341976e0914620002fb5780634a72185114620003125780634f54cf8f14620003295780635e80536a146200034057600080fd5b806326af483214620002b757806329fd200714620002ce57806333a581d214620002f157600080fd5b806320e8c56511620001b857806320e8c565146200026f57806323d7bcb31462000286578063257d9bb814620002ac57600080fd5b806309cae2c814620001e2578063148c658c14620001fb57806315dd337d1462000258575b600080fd5b620001f9620001f3366004620024c9565b62000504565b005b6200023f6200020c366004620024c9565b6001600160a01b039182166000908152606960209081526040808320939094168252919091522080546001909101549091565b6040516200024f92919062002514565b60405180910390f35b620001f96200026936600462002547565b62000543565b620001f9620002803660046200259f565b6200091f565b6200029d620002973660046200260d565b62000cb7565b6040516200024f919062002632565b6200029d620f424081565b620001f9620002c83660046200259f565b62000cec565b606554620002e2906001600160a01b031681565b6040516200024f91906200264d565b6200029d60001981565b6200029d6200030c3660046200260d565b62001197565b620001f9620003233660046200260d565b620011e0565b620001f96200033a3660046200265d565b6200123a565b6200037d62000351366004620024c9565b606960209081526000928352604080842090915290825290208054600182015460029092015490919083565b6040516200024f9392919062002698565b620001f96200039f3660046200260d565b620016a3565b620001f9620016fb565b620001f9620003c03660046200259f565b62001736565b6033546001600160a01b0316620002e2565b620001f9620003e9366004620026c6565b62001ad5565b620001f9620004003660046200260d565b62001b4f565b606854620002e2906001600160a01b031681565b6200029d606481565b606654620002e2906001600160a01b031681565b6200029d64e8d4a5100081565b620001f9620004553660046200260d565b62001c50565b606754620002e2906001600160a01b031681565b620001f962000480366004620026ff565b62001cb4565b620004ed620004973660046200260d565b606a602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460079097015460ff8716976101009097046001600160a01b0390811697958116959216919089565b6040516200024f99989796959493929190620027b3565b3360009081526069602090815260408083206001600160a01b0386168452909152902080546001909101546200053d8484848462001736565b50505050565b6033546001600160a01b03163314620005795760405162461bcd60e51b815260040162000570906200287d565b60405180910390fd5b606654604051631c040ef160e11b81526000916001600160a01b0316906338081de290620005ac9087906004016200264d565b600060405180830381865afa158015620005ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620005f49190810190620029b5565b6066546040517f5cb3b14f0000000000000000000000000000000000000000000000000000000081529192506000916001600160a01b0390911690635cb3b14f90620006459087906004016200264d565b602060405180830381865afa15801562000663573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000689919062002a0c565b905080620006c3576040517fcd3966a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6066546040517fd9e85c840000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063d9e85c84906200070f90869060040162002a66565b60e060405180830381865afa1580156200072d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000753919062002b48565b60a00151905080841062000793576040517f7b884d0e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0386166000908152606a602052604090208054600190829060ff19168280021790555060028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038816179055600181018590556040516000906200080490869060200162002b92565b60405160208183030381529060405290506000620008228262001de8565b83546001600160a01b03808316610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff90921691909117855560675460405163095ea7b360e01b81529293508b82169263095ea7b3926200088e9216906000199060040162002bc4565b6020604051808303816000875af1158015620008ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008d4919062002a0c565b507f6ea6ad3ca002ab8f03809d36e8eaadb449ac327b72310b4727feaaa2191debd0898989846040516200090c949392919062002bd4565b60405180910390a1505050505050505050565b8360016001600160a01b0382166000908152606a602052604090205460ff16600381111562000952576200095262002761565b146200097157604051631667fd6360e31b815260040160405180910390fd5b620f424062000981838562002c30565b1015620009ba576040517f120ed7c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038086166000908152606a602052604090206002015485821691161462000a14576040517fe93fc48e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600062000a22838562002c30565b90506000856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000a65573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a8b919062002c62565b62000a9890601262002c87565b60ff1690506000606462000aae83600a62002dda565b62000aba908562002deb565b62000ac6919062002e23565b905062000ad68884838562001e2f565b6001600160a01b0388166000818152606a60209081526040808320338452606983528184209484529390915281206006830180549192859262000b1b90849062002c30565b909155505060655462000b3a906001600160a01b031633308662001ff0565b8782600301600082825462000b50919062002c30565b925050819055508682600401600082825462000b6d919062002c30565b909155505080548890829060009062000b8890849062002c30565b925050819055508681600101600082825462000ba5919062002c30565b9091555062000bc290506001600160a01b038a1633308862001ff0565b6001600160a01b03808b166000908152606a6020526040908190205490517f40c10f190000000000000000000000000000000000000000000000000000000081526101009091049091169081906340c10f199062000c279033908a9060040162002bc4565b600060405180830381600087803b15801562000c4257600080fd5b505af115801562000c57573d6000803e3d6000fd5b50505050896001600160a01b03168b6001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d78b8b60405162000ca292919062002514565b60405180910390a35050505050505050505050565b6001600160a01b0381166000908152606a60205260408120600481015460039091015462000ce6919062002c30565b92915050565b3360009081526069602090815260408083206001600160a01b03881684528252918290208251606081018452815480825260018301549382018490526002909201549381019390935262000d41919062002c30565b60000362000d62576040516343f6c61d60e01b815260040160405180910390fd5b6001600160a01b038086166000908152606a60205260408082206005810154905491516370a0823160e01b815290841693610100909204909116919083906370a082319062000db69030906004016200264d565b602060405180830381865afa15801562000dd4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dfa919062002e3a565b90506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000e3d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e63919062002e3a565b6040516370a0823160e01b815283906001600160a01b038616906370a082319062000e939033906004016200264d565b602060405180830381865afa15801562000eb1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ed7919062002e3a565b62000ee3919062002deb565b62000eef919062002e23565b905062000efc8962002079565b60675460009081906001600160a01b031663baa2abde8c8c868d8d3362000f2542603c62002c30565b6040518863ffffffff1660e01b815260040162000f49979695949392919062002e5f565b60408051808303816000875af115801562000f68573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f8e919062002ed5565b6066546040517fe01f8e4b0000000000000000000000000000000000000000000000000000000081529294509092506001600160a01b03169063e01f8e4b9062000fe19033908e90879060040162002f0e565b600060405180830381600087803b15801562000ffc57600080fd5b505af115801562001011573d6000803e3d6000fd5b5050505060696000336001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160a01b03166001600160a01b03168152602001908152602001600020600080820160009055600182016000905560028201600090555050846001600160a01b0316639dc29fac33876001600160a01b03166370a08231336040518263ffffffff1660e01b8152600401620010b691906200264d565b602060405180830381865afa158015620010d4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010fa919062002e3a565b6040518363ffffffff1660e01b81526004016200111992919062002bc4565b600060405180830381600087803b1580156200113457600080fd5b505af115801562001149573d6000803e3d6000fd5b505050507f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf7338383604051620011829392919062002f2d565b60405180910390a15050505050505050505050565b6001600160a01b0381166000908152606a60205260408120600381015460049091015480620011cc64e8d4a510008462002deb565b620011d8919062002e23565b949350505050565b6033546001600160a01b031633146200120d5760405162461bcd60e51b815260040162000570906200287d565b6001600160a01b0381166000908152606a6020526040902080546001919060ff191682805b021790555050565b8260016001600160a01b0382166000908152606a602052604090205460ff1660038111156200126d576200126d62002761565b146200128c57604051631667fd6360e31b815260040160405180910390fd5b6001600160a01b0384166000908152606a6020526040808220815161012081019092528054829060ff166003811115620012ca57620012ca62002761565b6003811115620012de57620012de62002761565b815281546001600160a01b036101009182900481166020840152600184015460408085019190915260028501548216606085015260038501546080850152600485015460a0850152600585015490911660c0840152600684015460e0840152600790930154910152810151909150421162001385576040517fe95501d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060a0015181608001516200139b919062002c30565b600003620013bc576040516309899a2960e01b815260040160405180910390fd5b6001600160a01b038581166000908152606a6020526040808220805460ff191660021790556066549051631c040ef160e11b8152919216906338081de2906200140a9089906004016200264d565b600060405180830381865afa15801562001428573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620014529190810190620029b5565b60665460608401516040517fbb9febaf0000000000000000000000000000000000000000000000000000000081529293506000926001600160a01b039092169163bb9febaf91620014ad918691908b908b9060040162002f3d565b6020604051808303816000875af1158015620014cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014f3919062002f7f565b6001600160a01b038881166000908152606a602052604090819020600501805473ffffffffffffffffffffffffffffffffffffffff1916848416908117909155606754915163095ea7b360e01b81529394509263095ea7b392620015609216906000199060040162002bc4565b6020604051808303816000875af115801562001580573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015a6919062002a0c565b506067546060840151608085015160a08601516001600160a01b0390931692632d2cac24928b929091818130620015df42603c62002c30565b6040518963ffffffff1660e01b81526004016200160498979695949392919062002fa4565b6060604051808303816000875af115801562001624573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200164a91906200302b565b5050507febfc813979aeb299817f3ac454ec6a4b9627229ae579f3203c040f8bc463bdab8784606001518386608001518760a001516040516200169295949392919062003079565b60405180910390a150505050505050565b6033546001600160a01b03163314620016d05760405162461bcd60e51b815260040162000570906200287d565b6001600160a01b0381166000908152606a6020526040902080546003919060ff191660018362001232565b6033546001600160a01b03163314620017285760405162461bcd60e51b815260040162000570906200287d565b62001734600062002155565b565b8360016001600160a01b0382166000908152606a602052604090205460ff16600381111562001769576200176962002761565b146200178857604051631667fd6360e31b815260040160405180910390fd5b3360009081526069602090815260408083206001600160a01b038916845282529182902082516060810184528154808252600183015493820184905260029092015493810193909352620017dd919062002c30565b600003620017fe576040516309899a2960e01b815260040160405180910390fd5b8051841180620018115750806020015183115b1562001830576040516343f6c61d60e01b815260040160405180910390fd5b6001600160a01b0386166000818152606a6020908152604080832033845260698352818420948452938252808320908501519185015185519193929164e8d4a51000916200187e9162002c30565b85600701546200188f919062002deb565b6200189b919062002e23565b620018a79190620030cf565b905080156200191e57606554606854600091620018d2916001600160a01b03918216911684620021b4565b6068546040519192507fc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba9162001914916001600160a01b031690849062002bc4565b60405180910390a1505b86836003016000828254620019349190620030cf565b9250508190555085836004016000828254620019519190620030cf565b90915550508154879083906000906200196c908490620030cf565b9250508190555085826001016000828254620019899190620030cf565b90915550600090506200199d878962002c30565b9050620019ac893383620021b4565b5083546040517f9dc29fac0000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b031690639dc29fac90620019fd903390859060040162002bc4565b600060405180830381600087803b15801562001a1857600080fd5b505af115801562001a2d573d6000803e3d6000fd5b50505060078501546001850154855464e8d4a51000935062001a50919062002c30565b62001a5c919062002deb565b62001a68919062002e23565b8360020181905550336001600160a01b0316896001600160a01b03168b6001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db8b8b60405162001ac192919062002514565b60405180910390a450505050505050505050565b62001afe62001aec6033546001600160a01b031690565b6001600160a01b038416908362002274565b7f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969562001b326033546001600160a01b031690565b8260405162001b4392919062002bc4565b60405180910390a15050565b60675460405163095ea7b360e01b81526001600160a01b038381169263095ea7b39262001b8792909116906000199060040162002bc4565b6020604051808303816000875af115801562001ba7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bcd919062002a0c565b5060665460405163095ea7b360e01b81526001600160a01b038381169263095ea7b39262001c0692909116906000199060040162002bc4565b6020604051808303816000875af115801562001c26573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c4c919062002a0c565b5050565b6033546001600160a01b0316331462001c7d5760405162461bcd60e51b815260040162000570906200287d565b6001600160a01b03811662001ca65760405162461bcd60e51b8152600401620005709062003130565b62001cb18162002155565b50565b600054610100900460ff1662001cd15760005460ff161562001cd5565b303b155b62001cf45760405162461bcd60e51b815260040162000570906200319b565b600054610100900460ff1615801562001d17576000805461ffff19166101011790555b6001600160a01b038416158062001d3557506001600160a01b038316155b1562001d6d576040517fff056daf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62001d776200229b565b606580546001600160a01b0380881673ffffffffffffffffffffffffffffffffffffffff199283161790925560668054878416908316179055606780548684169083161790556068805492851692909116919091179055801562001de1576000805461ff00191690555b5050505050565b60008030838460405162001dfc9062002485565b62001e0a93929190620031ad565b604051809103906000f08015801562001e27573d6000803e3d6000fd5b509392505050565b6001600160a01b0384166000908152606a60205260408120600681015490910362001e8c57606462001e6383600a62002dda565b62001e749064e8d4a5100062002deb565b62001e80919062002e23565b6007909101556200053d565b3360009081526069602090815260408083206001600160a01b038916845290915290206004820154600383015462001ec5919062002c30565b62001ed664e8d4a510008662002deb565b62001ee2919062002e23565b82600701600082825462001ef7919062002c30565b90915550506001810154815460009162001f119162002c30565b9050801562001fb0576000826002015464e8d4a5100085600701548462001f39919062002deb565b62001f45919062002e23565b62001f519190620030cf565b60655490915060009062001f70906001600160a01b03163384620021b4565b90507fc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba338260405162001fa592919062002bc4565b60405180910390a150505b64e8d4a5100062001fc2878362002c30565b846007015462001fd3919062002deb565b62001fdf919062002e23565b826002018190555050505050505050565b6200053d846323b872dd60e01b858585604051602401620020149392919062002f0e565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152620022cf565b6001600160a01b0381166000818152606a6020908152604080832033845260698352818420948452939091528120600281015460078401546001830154835493949364e8d4a510009291620020ce9162002c30565b620020da919062002deb565b620020e6919062002e23565b620020f29190620030cf565b60655490915060009062002111906001600160a01b03163384620021b4565b90507fc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba33826040516200214692919062002bc4565b60405180910390a15050505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080846001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401620021e591906200264d565b602060405180830381865afa15801562002203573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002229919062002e3a565b90508083111562002252576200224a6001600160a01b038616858362002274565b90506200226d565b620022686001600160a01b038616858562002274565b829150505b9392505050565b620022968363a9059cbb60e01b84846040516024016200201492919062002bc4565b505050565b600054610100900460ff16620022c55760405162461bcd60e51b8152600401620005709062003240565b6200173462002366565b600062002326826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200239b9092919063ffffffff16565b80519091501562002296578080602001905181019062002347919062002a0c565b620022965760405162461bcd60e51b81526004016200057090620032ab565b600054610100900460ff16620023905760405162461bcd60e51b8152600401620005709062003240565b620017343362002155565b6060620011d8848460008585843b620023c85760405162461bcd60e51b81526004016200057090620032f0565b600080866001600160a01b03168587604051620023e6919062003302565b60006040518083038185875af1925050503d806000811462002425576040519150601f19603f3d011682016040523d82523d6000602084013e6200242a565b606091505b50915091506200243c82828662002447565b979650505050505050565b60608315620024585750816200226d565b825115620024695782518084602001fd5b8160405162461bcd60e51b815260040162000570919062002a66565b611254806200330f83390190565b60006001600160a01b03821662000ce6565b620024b08162002493565b811462001cb157600080fd5b803562000ce681620024a5565b60008060408385031215620024e157620024e1600080fd5b6000620024ef8585620024bc565b92505060206200250285828601620024bc565b9150509250929050565b805b82525050565b604081016200252482856200250c565b6200226d60208301846200250c565b80620024b0565b803562000ce68162002533565b600080600060608486031215620025615762002561600080fd5b60006200256f8686620024bc565b93505060206200258286828701620024bc565b925050604062002595868287016200253a565b9150509250925092565b60008060008060808587031215620025ba57620025ba600080fd5b6000620025c88787620024bc565b9450506020620025db87828801620024bc565b9350506040620025ee878288016200253a565b925050606062002601878288016200253a565b91505092959194509250565b600060208284031215620026245762002624600080fd5b6000620011d88484620024bc565b6020810162000ce682846200250c565b6200250e8162002493565b6020810162000ce6828462002642565b600080600060608486031215620026775762002677600080fd5b6000620026858686620024bc565b935050602062002582868287016200253a565b60608101620026a882866200250c565b620026b760208301856200250c565b620011d860408301846200250c565b60008060408385031215620026de57620026de600080fd5b6000620026ec8585620024bc565b925050602062002502858286016200253a565b600080600080608085870312156200271a576200271a600080fd5b6000620027288787620024bc565b94505060206200273b87828801620024bc565b93505060406200274e87828801620024bc565b92505060606200260187828801620024bc565b634e487b7160e01b600052602160045260246000fd5b6004811062001cb15762001cb162002761565b80620027968162002777565b919050565b600062000ce6826200278a565b6200250e816200279b565b6101208101620027c4828c620027a8565b620027d3602083018b62002642565b620027e2604083018a6200250c565b620027f1606083018962002642565b6200280060808301886200250c565b6200280f60a08301876200250c565b6200281e60c083018662002642565b6200282d60e08301856200250c565b6200283d6101008301846200250c565b9a9950505050505050505050565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b6020808252810162000ce6816200284b565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715620028ce57620028ce6200288f565b6040525050565b6000620028e160405190565b9050620027968282620028a5565b600067ffffffffffffffff8211156200290c576200290c6200288f565b601f19601f83011660200192915050565b60005b838110156200293a57818101518382015260200162002920565b838111156200053d5750506000910152565b6000620029636200295d84620028ef565b620028d5565b905082815260208101848484011115620029805762002980600080fd5b62001e278482856200291d565b600082601f830112620029a357620029a3600080fd5b8151620011d88482602086016200294c565b600060208284031215620029cc57620029cc600080fd5b815167ffffffffffffffff811115620029e857620029e8600080fd5b620011d8848285016200298d565b801515620024b0565b805162000ce681620029f6565b60006020828403121562002a235762002a23600080fd5b6000620011d88484620029ff565b600062002a3c825190565b80845260208401935062002a558185602086016200291d565b601f01601f19169290920192915050565b602080825281016200226d818462002a31565b805162000ce681620024a5565b805162000ce68162002533565b600060e0828403121562002aaa5762002aaa600080fd5b62002ab660e0620028d5565b9050600062002ac6848462002a79565b90820152602062002ada84848301620029ff565b90820152604062002aee8484830162002a86565b90820152606062002b028484830162002a86565b90820152608062002b168484830162002a86565b9082015260a062002b2a8484830162002a86565b9082015260c062002b3e8484830162002a86565b9082015292915050565b600060e0828403121562002b5f5762002b5f600080fd5b6000620011d8848462002a93565b600062002b78825190565b62002b888185602086016200291d565b9290920192915050565b7f494c4d2d00000000000000000000000000000000000000000000000000000000815260040162000ce6818362002b6d565b6040810162002524828562002642565b6080810162002be4828762002642565b62002bf3602083018662002642565b62002c0260408301856200250c565b62002c11606083018462002642565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111562002c465762002c4662002c1a565b500190565b60ff8116620024b0565b805162000ce68162002c4b565b60006020828403121562002c795762002c79600080fd5b6000620011d8848462002c55565b60ff9081169082165b915060008282101562002ca75762002ca762002c1a565b500390565b80825b600185111562002cf25780860481111562002cce5762002cce62002c1a565b600185161562002cdd57908102905b800262002cea8560011c90565b945062002caf565b94509492505050565b60008262002d0c575060016200226d565b8162002d1b575060006200226d565b816001811462002d34576002811462002d3f5762002d73565b60019150506200226d565b60ff84111562002d535762002d5362002c1a565b8360020a91508482111562002d6c5762002d6c62002c1a565b506200226d565b5060208310610133831016604e8410600b841016171562002dab575081810a8381111562002da55762002da562002c1a565b6200226d565b62002dba848484600162002cac565b9250905081840481111562002dd35762002dd362002c1a565b0292915050565b60006200226d600019848462002cfb565b600081600019048311821515161562002e085762002e0862002c1a565b500290565b634e487b7160e01b600052601260045260246000fd5b60008262002e355762002e3562002e0d565b500490565b60006020828403121562002e515762002e51600080fd5b6000620011d8848462002a86565b60e0810162002e6f828a62002642565b62002e7e602083018962002642565b62002e8d60408301886200250c565b62002e9c60608301876200250c565b62002eab60808301866200250c565b62002eba60a083018562002642565b62002ec960c08301846200250c565b98975050505050505050565b6000806040838503121562002eed5762002eed600080fd5b600062002efb858562002a86565b9250506020620025028582860162002a86565b6060810162002f1e828662002642565b620026b7602083018562002642565b60608101620026a8828662002642565b6080808252810162002f50818762002a31565b905062002f61602083018662002642565b62002f7060408301856200250c565b62002c1160608301846200250c565b60006020828403121562002f965762002f96600080fd5b6000620011d8848462002a79565b610100810162002fb5828b62002642565b62002fc4602083018a62002642565b62002fd360408301896200250c565b62002fe260608301886200250c565b62002ff160808301876200250c565b6200300060a08301866200250c565b6200300f60c083018562002642565b6200301e60e08301846200250c565b9998505050505050505050565b600080600060608486031215620030455762003045600080fd5b600062003053868662002a86565b9350506020620030668682870162002a86565b9250506040620025958682870162002a86565b60a0810162003089828862002642565b62003098602083018762002642565b620030a7604083018662002642565b620030b660608301856200250c565b620030c560808301846200250c565b9695505050505050565b8162002c90565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015290505b60400190565b6020808252810162000ce681620030d6565b602e8152602081017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181527f647920696e697469616c697a6564000000000000000000000000000000000000602082015290506200312a565b6020808252810162000ce68162003142565b60608101620031bd828662002642565b8181036020830152620031d1818562002a31565b9050818103604083015262002c11818462002a31565b602b8152602081017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015290506200312a565b6020808252810162000ce681620031e7565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f74207375636365656400000000000000000000000000000000000000000000602082015290506200312a565b6020808252810162000ce68162003252565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000008152905062002877565b6020808252810162000ce681620032bd565b62000ce6818362002b6d56fe60806040523480156200001157600080fd5b5060405162001254380380620012548339810160408190526200003491620002ad565b8151829082906200004d90600390602085019062000090565b5080516200006390600490602084019062000090565b5050600580546001600160a01b0319166001600160a01b0395909516949094179093555062000387915050565b8280546200009e9062000357565b90600052602060002090601f016020900481019282620000c257600085556200010d565b82601f10620000dd57805160ff19168380011785556200010d565b828001600101855582156200010d579182015b828111156200010d578251825591602001919060010190620000f0565b506200011b9291506200011f565b5090565b5b808211156200011b576000815560010162000120565b60006001600160a01b0382165b92915050565b620001548162000136565b81146200016057600080fd5b50565b8051620001438162000149565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681016001600160401b0381118282101715620001ae57620001ae62000170565b6040525050565b6000620001c160405190565b9050620001cf828262000186565b919050565b60006001600160401b03821115620001f057620001f062000170565b601f19601f83011660200192915050565b60005b838110156200021e57818101518382015260200162000204565b838111156200022e576000848401525b50505050565b60006200024b6200024584620001d4565b620001b5565b905082815260208101848484011115620002685762000268600080fd5b6200027584828562000201565b509392505050565b600082601f830112620002935762000293600080fd5b8151620002a584826020860162000234565b949350505050565b600080600060608486031215620002c757620002c7600080fd5b6000620002d5868662000163565b602086015190945090506001600160401b03811115620002f857620002f8600080fd5b62000306868287016200027d565b604086015190935090506001600160401b03811115620003295762000329600080fd5b62000337868287016200027d565b9150509250925092565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200036c57607f821691505b60208210810362000381576200038162000341565b50919050565b610ebd80620003976000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636978531a1161008c5780639dc29fac116100665780639dc29fac146101d9578063a457c2d7146101ec578063a9059cbb146101ff578063dd62ed3e1461021257600080fd5b80636978531a1461018857806370a08231146101a857806395d89b41146101d157600080fd5b806323b872dd116100c857806323b872dd1461013e578063313ce56714610151578063395093511461016057806340c10f191461017357600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461012d575b600080fd5b6100f761024b565b6040516101049190610831565b60405180910390f35b61012061011b36600461088d565b6102dd565b60405161010491906108d4565b6002545b60405161010491906108e8565b61012061014c3660046108f6565b6102f4565b6012604051610104919061094f565b61012061016e36600461088d565b610366565b61018661018136600461088d565b6103a2565b005b60055461019b906001600160a01b031681565b6040516101049190610966565b6101316101b6366004610974565b6001600160a01b031660009081526020819052604090205490565b6100f76103da565b6101866101e736600461088d565b6103e9565b6101206101fa36600461088d565b61041d565b61012061020d36600461088d565b610478565b61013161022036600461099d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461025a906109e6565b80601f0160208091040260200160405190810160405280929190818152602001828054610286906109e6565b80156102d35780601f106102a8576101008083540402835291602001916102d3565b820191906000526020600020905b8154815290600101906020018083116102b657829003601f168201915b5050505050905090565b60006102ea338484610485565b5060015b92915050565b6000610301848484610539565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561034e5760405162461bcd60e51b815260040161034590610a6c565b60405180910390fd5b61035b8533858403610485565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102ea91859061039d908690610a92565b610485565b6005546001600160a01b031633146103cc5760405162461bcd60e51b815260040161034590610ade565b6103d6828261064e565b5050565b60606004805461025a906109e6565b6005546001600160a01b031633146104135760405162461bcd60e51b815260040161034590610ade565b6103d68282610702565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104615760405162461bcd60e51b815260040161034590610b46565b61046e3385858403610485565b5060019392505050565b60006102ea338484610539565b6001600160a01b0383166104ab5760405162461bcd60e51b815260040161034590610bae565b6001600160a01b0382166104d15760405162461bcd60e51b815260040161034590610c16565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061052c9085906108e8565b60405180910390a3505050565b6001600160a01b03831661055f5760405162461bcd60e51b815260040161034590610c7e565b6001600160a01b0382166105855760405162461bcd60e51b815260040161034590610ce6565b6001600160a01b038316600090815260208190526040902054818110156105be5760405162461bcd60e51b815260040161034590610d4e565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906105f5908490610a92565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161063f91906108e8565b60405180910390a35b50505050565b6001600160a01b0382166106745760405162461bcd60e51b815260040161034590610d90565b80600260008282546106869190610a92565b90915550506001600160a01b038216600090815260208190526040812080548392906106b3908490610a92565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106f69085906108e8565b60405180910390a35050565b6001600160a01b0382166107285760405162461bcd60e51b815260040161034590610df8565b6001600160a01b038216600090815260208190526040902054818110156107615760405162461bcd60e51b815260040161034590610e60565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610790908490610e70565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061052c9086906108e8565b60005b838110156107ee5781810151838201526020016107d6565b838111156106485750506000910152565b6000610809825190565b8084526020840193506108208185602086016107d3565b601f01601f19169290920192915050565b6020808252810161084281846107ff565b9392505050565b60006001600160a01b0382166102ee565b61086381610849565b811461086e57600080fd5b50565b80356102ee8161085a565b80610863565b80356102ee8161087c565b600080604083850312156108a3576108a3600080fd5b60006108af8585610871565b92505060206108c085828601610882565b9150509250929050565b8015155b82525050565b602081016102ee82846108ca565b806108ce565b602081016102ee82846108e2565b60008060006060848603121561090e5761090e600080fd5b600061091a8686610871565b935050602061092b86828701610871565b925050604061093c86828701610882565b9150509250925092565b60ff81166108ce565b602081016102ee8284610946565b6108ce81610849565b602081016102ee828461095d565b60006020828403121561098957610989600080fd5b60006109958484610871565b949350505050565b600080604083850312156109b3576109b3600080fd5b60006109bf8585610871565b92505060206108c085828601610871565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806109fa57607f821691505b602082108103610a0c57610a0c6109d0565b50919050565b60288152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206181527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015290505b60400190565b602080825281016102ee81610a12565b634e487b7160e01b600052601160045260246000fd5b60008219821115610aa557610aa5610a7c565b500190565b60088152602081017f4f6e6c7920494c4d000000000000000000000000000000000000000000000000815290505b60200190565b602080825281016102ee81610aaa565b60258152602081017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781527f207a65726f00000000000000000000000000000000000000000000000000000060208201529050610a66565b602080825281016102ee81610aee565b60248152602081017f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481527f726573730000000000000000000000000000000000000000000000000000000060208201529050610a66565b602080825281016102ee81610b56565b60228152602081017f45524332303a20617070726f766520746f20746865207a65726f20616464726581527f737300000000000000000000000000000000000000000000000000000000000060208201529050610a66565b602080825281016102ee81610bbe565b60258152602081017f45524332303a207472616e736665722066726f6d20746865207a65726f20616481527f647265737300000000000000000000000000000000000000000000000000000060208201529050610a66565b602080825281016102ee81610c26565b60238152602081017f45524332303a207472616e7366657220746f20746865207a65726f206164647281527f657373000000000000000000000000000000000000000000000000000000000060208201529050610a66565b602080825281016102ee81610c8e565b60268152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206281527f616c616e6365000000000000000000000000000000000000000000000000000060208201529050610a66565b602080825281016102ee81610cf6565b601f8152602081017f45524332303a206d696e7420746f20746865207a65726f20616464726573730081529050610ad8565b602080825281016102ee81610d5e565b60218152602081017f45524332303a206275726e2066726f6d20746865207a65726f2061646472657381527f730000000000000000000000000000000000000000000000000000000000000060208201529050610a66565b602080825281016102ee81610da0565b60228152602081017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e81527f636500000000000000000000000000000000000000000000000000000000000060208201529050610a66565b602080825281016102ee81610e08565b600082821015610e8257610e82610a7c565b50039056fea264697066735822122071f5150dfe13d35997d89d889cff2c20e9a942db70e210c7b374e3dd6493704964736f6c634300080d0033a264697066735822122040d4359b01730b7676191fdd71010996750eaa448223d983b3d7276634748ed064736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveStablecoin(address)": {
        "params": {
          "_stablecoin": "Stablecoin address"
        }
      },
      "claim(address,address,uint256,uint256)": {
        "params": {
          "_amountAMin": "Minimum amount of policy token (slippage)",
          "_amountBMin": "Minimum amount of stablecoin (slippage)",
          "_policyToken": "Policy token address",
          "_stablecoin": "Stablecoin address"
        }
      },
      "deposit(address,address,uint256,uint256)": {
        "details": "Deposit only check the pair status not the deadline      There may be a zero ILM and we still need to deposit some asset to make it start      Anyone wants to enter ILM need to pay some DEG as entrance fee      The ratio is 100:1(usd:deg) and your fee is distributed to the users prior to you",
        "params": {
          "_amountA": "Amount of policy token (virtual)",
          "_amountB": "Amount of stablecoin (virtual)",
          "_policyToken": "Policy token address",
          "_stablecoin": "Stablecoin address"
        }
      },
      "emergencyRestart(address)": {
        "params": {
          "_policyToken": "Policy token address to be restarted"
        }
      },
      "emergencyStop(address)": {
        "params": {
          "_policyToken": "Policy token address to be stopped"
        }
      },
      "emergencyWithdraw(address,uint256)": {
        "params": {
          "_amount": "Token amount",
          "_token": "Token address"
        }
      },
      "finishILM(address,uint256,uint256)": {
        "details": "The swap pool for the protection token will be deployed with inital liquidity\\      The amount of initial liquidity will be the total amount of the pair      Can be called by any address",
        "params": {
          "_deadlineForSwap": "Pool deadline",
          "_feeRate": "Fee rate of the swap pool",
          "_policyToken": "Policy token address"
        }
      },
      "getPairTotalAmount(address)": {
        "params": {
          "_policyToken": "Policy token address"
        },
        "returns": {
          "totalAmount": "Total amount of a pair"
        }
      },
      "getPrice(address)": {
        "details": "Price has a scale of 1e12",
        "params": {
          "_policyToken": "Policy token address"
        },
        "returns": {
          "_0": "price Price of the token pair"
        }
      },
      "getUserDeposit(address,address)": {
        "params": {
          "_policyToken": "Policy token address",
          "_user": "User address"
        }
      },
      "initialize(address,address,address,address)": {
        "details": "Called only when deploying proxy contract",
        "params": {
          "_degis": "Degis token address",
          "_emergencyPool": "EmergencyPool contract address",
          "_policyCore": "PolicyCore contract address",
          "_router": "NaughtyRouter contract address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "startILM(address,address,uint256)": {
        "details": "A new lp token will be deployed when starting a new ILM round      It will have a special farming reward pool",
        "params": {
          "_ILMDeadline": "Deadline of ILM period",
          "_policyToken": "Policy token address",
          "_stablecoin": "Stablecoin address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address,address,uint256,uint256)": {
        "details": "Only checks the status not the deadline",
        "params": {
          "_amountA": "Amount of policy token (virtual)",
          "_amountB": "Amount of stablecoin (virtual)",
          "_policyToken": "Policy token address",
          "_stablecoin": "Stablecoin address"
        }
      },
      "withdrawAll(address,address)": {
        "params": {
          "_policyToken": "Policy token address",
          "_stablecoin": "Stablecoin address"
        }
      }
    },
    "title": "Naughty Price Initial Liquidity Matching",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveStablecoin(address)": {
        "notice": "Approve stablecoins for naughty price contracts"
      },
      "claim(address,address,uint256,uint256)": {
        "notice": "Claim liquidity back"
      },
      "deposit(address,address,uint256,uint256)": {
        "notice": "Deposit stablecoin and choose the price"
      },
      "emergencyRestart(address)": {
        "notice": "Emergency restart ILM"
      },
      "emergencyStop(address)": {
        "notice": "Emergency stop ILM"
      },
      "emergencyWithdraw(address,uint256)": {
        "notice": "Emergency withdraw a certain token"
      },
      "finishILM(address,uint256,uint256)": {
        "notice": "Finish a round of ILM"
      },
      "getPairTotalAmount(address)": {
        "notice": "Get the total amount of a pair"
      },
      "getPrice(address)": {
        "notice": "Get the current price"
      },
      "getUserDeposit(address,address)": {
        "notice": "Get the amount of user's deposit"
      },
      "initialize(address,address,address,address)": {
        "notice": "Initialze function for proxy"
      },
      "startILM(address,address,uint256)": {
        "notice": "Start a new ILM round"
      },
      "withdraw(address,address,uint256,uint256)": {
        "notice": "Withdraw stablecoins"
      },
      "withdrawAll(address,address)": {
        "notice": "Withdraw all stablecoins of a certain policy token"
      }
    },
    "notice": "Naughty Price timeline: 1 -- 14 -- 5         The first day of each round would be the time for liquidity matching         User           - Select the naughty token           - Provide stablecoins into this contract & Select your price choice           - Change the amountA and amountB of this pair         When reach deadline           - Final price of ILM = Initial price of naughty price pair = amountA/amountB",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2523,
        "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2526,
        "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3760,
        "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2403,
        "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 2515,
        "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8806,
        "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
        "label": "degis",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 8808,
        "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
        "label": "policyCore",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 8810,
        "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
        "label": "router",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 8812,
        "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
        "label": "emergencyPool",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 8826,
        "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
        "label": "users",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)8819_storage))"
      },
      {
        "astId": 8856,
        "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
        "label": "pairs",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_struct(PairInfo)8851_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Status)8831": {
        "encoding": "inplace",
        "label": "enum NaughtyPriceILM.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)8819_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct NaughtyPriceILM.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)8819_storage)"
      },
      "t_mapping(t_address,t_struct(PairInfo)8851_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NaughtyPriceILM.PairInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PairInfo)8851_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)8819_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NaughtyPriceILM.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)8819_storage"
      },
      "t_struct(PairInfo)8851_storage": {
        "encoding": "inplace",
        "label": "struct NaughtyPriceILM.PairInfo",
        "members": [
          {
            "astId": 8834,
            "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Status)8831"
          },
          {
            "astId": 8836,
            "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
            "label": "lptoken",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8838,
            "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
            "label": "ILMDeadline",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8840,
            "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
            "label": "stablecoin",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 8842,
            "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
            "label": "amountA",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8844,
            "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
            "label": "amountB",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8846,
            "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
            "label": "naughtyPairAddress",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 8848,
            "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
            "label": "degisAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8850,
            "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
            "label": "accDegisPerShare",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(UserInfo)8819_storage": {
        "encoding": "inplace",
        "label": "struct NaughtyPriceILM.UserInfo",
        "members": [
          {
            "astId": 8814,
            "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
            "label": "amountA",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8816,
            "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
            "label": "amountB",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8818,
            "contract": "contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM",
            "label": "degisDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}