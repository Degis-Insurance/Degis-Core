{
  "address": "0x5DB0E3aaED693833958f93704Cd0475e090bbbeb",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AdminTokenRecovery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        }
      ],
      "name": "LotteryClose",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "injectedAmount",
          "type": "uint256"
        }
      ],
      "name": "LotteryInjection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "countWinningTickets",
          "type": "uint256"
        }
      ],
      "name": "LotteryNumberDrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceTicketInDegis",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[4]",
          "name": "rewardsBreakdown",
          "type": "uint256[4]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "injectedAmount",
          "type": "uint256"
        }
      ],
      "name": "LotteryOpen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxNumber",
          "type": "uint256"
        }
      ],
      "name": "MaxNumberTicketsEachTimeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "randomGenerator",
          "type": "address"
        }
      ],
      "name": "NewRandomGenerator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        }
      ],
      "name": "TicketsClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPrice",
          "type": "uint256"
        }
      ],
      "name": "TicketsPurchased",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISCOUNT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DegisToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TICKET_NUMBER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TREASURY_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TICKET_NUMBER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_ticketNumbers",
          "type": "uint32[]"
        }
      ],
      "name": "buyTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_randomGeneratorAddress",
          "type": "address"
        }
      ],
      "name": "changeRandomGenerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "claimAllTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_ticketIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_brackets",
          "type": "uint32[]"
        }
      ],
      "name": "claimTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "closeLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentLotteryId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentTicketId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_autoInjection",
          "type": "bool"
        }
      ],
      "name": "drawFinalNumberAndMakeLotteryClaimable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_degis",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_randomGenerator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "injectFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lotteries",
      "outputs": [
        {
          "internalType": "enum DegisLotteryV2.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "treasuryFee",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "finalNumber",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstTicketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstTicketIdNextRound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountCollected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumberTicketsEachTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingInjectionNextLottery",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomGenerator",
      "outputs": [
        {
          "internalType": "contract IRandomNumberGenerator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverWrongTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxNumber",
          "type": "uint256"
        }
      ],
      "name": "setMaxNumberTicketsEachTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256[4]",
          "name": "_rewardsBreakdown",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "startLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tickets",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "number",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewAllLottery",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum DegisLotteryV2.Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "treasuryFee",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "endTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "finalNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "ticketPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256[4]",
              "name": "rewardsBreakdown",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256[4]",
              "name": "rewardPerTicketInBracket",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256[4]",
              "name": "countWinnersPerBracket",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256",
              "name": "firstTicketId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "firstTicketIdNextRound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountCollected",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct DegisLotteryV2.Lottery[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ticketIds",
          "type": "uint256[]"
        }
      ],
      "name": "viewNumbersPerTicketId",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ticketId",
          "type": "uint256"
        }
      ],
      "name": "viewRewardsForTicketId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "viewWalletTicketIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x242439a4d04768a6a4ccb7d1b31a39ce1b493fd2e325cf963e6d31a754b6a534",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x5DB0E3aaED693833958f93704Cd0475e090bbbeb",
    "transactionIndex": 0,
    "gasUsed": "3425827",
    "logsBloom": "0x
    "blockHash": "0x1b86f63682592c23f9a6a3d632eb296e0e106b1e3f28066352bc344bc74d25c7",
    "transactionHash": "0x242439a4d04768a6a4ccb7d1b31a39ce1b493fd2e325cf963e6d31a754b6a534",
    "logs": [],
    "blockNumber": 10877441,
    "cumulativeGasUsed": "3425827",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b909dc3452f02a88fc934a14abdf895c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"LotteryClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"injectedAmount\",\"type\":\"uint256\"}],\"name\":\"LotteryInjection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"countWinningTickets\",\"type\":\"uint256\"}],\"name\":\"LotteryNumberDrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceTicketInDegis\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"rewardsBreakdown\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"injectedAmount\",\"type\":\"uint256\"}],\"name\":\"LotteryOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxNumber\",\"type\":\"uint256\"}],\"name\":\"MaxNumberTicketsEachTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"randomGenerator\",\"type\":\"address\"}],\"name\":\"NewRandomGenerator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"TicketsClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"}],\"name\":\"TicketsPurchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISCOUNT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DegisToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TICKET_NUMBER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TREASURY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TICKET_NUMBER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_ticketNumbers\",\"type\":\"uint32[]\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_randomGeneratorAddress\",\"type\":\"address\"}],\"name\":\"changeRandomGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"claimAllTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_ticketIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_brackets\",\"type\":\"uint32[]\"}],\"name\":\"claimTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"closeLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTicketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_autoInjection\",\"type\":\"bool\"}],\"name\":\"drawFinalNumberAndMakeLotteryClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_degis\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomGenerator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"injectFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteries\",\"outputs\":[{\"internalType\":\"enum DegisLotteryV2.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"treasuryFee\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstTicketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstTicketIdNextRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberTicketsEachTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingInjectionNextLottery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomGenerator\",\"outputs\":[{\"internalType\":\"contract IRandomNumberGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxNumber\",\"type\":\"uint256\"}],\"name\":\"setMaxNumberTicketsEachTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"_rewardsBreakdown\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"startLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"number\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAllLottery\",\"outputs\":[{\"components\":[{\"internalType\":\"enum DegisLotteryV2.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"treasuryFee\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"rewardsBreakdown\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"rewardPerTicketInBracket\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"countWinnersPerBracket\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"firstTicketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstTicketIdNextRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct DegisLotteryV2.Lottery[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ticketIds\",\"type\":\"uint256[]\"}],\"name\":\"viewNumbersPerTicketId\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketId\",\"type\":\"uint256\"}],\"name\":\"viewRewardsForTicketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"viewWalletTicketIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyTickets(uint32[])\":{\"details\":\"Need to transfer the 4-digit number to a 5-digit number to be used here (+10000)      Can not be called by a smart contract      Can only purchase in the current round\",\"params\":{\"_ticketNumbers\":\"Array of ticket numbers between 10,000 and 19,999\"}},\"changeRandomGenerator(address)\":{\"details\":\"The calls to functions are used to verify the new generator implements them properly. It is necessary to wait for the VRF response before starting a round. Callable only by the contract owner\",\"params\":{\"_randomGeneratorAddress\":\"address of the random generator\"}},\"claimAllTickets(uint256)\":{\"details\":\"Callable by users only, not contract      Gas cost may be oversized, recommended to get brackets offchain first\",\"params\":{\"_lotteryId\":\"Lottery id\"}},\"claimTickets(uint256,uint256[],uint32[])\":{\"details\":\"Callable by users only, not contract\",\"params\":{\"_brackets\":\"Bracket / prize level of each ticket\",\"_lotteryId\":\"Lottery id\",\"_ticketIds\":\"Array of ticket ids\"}},\"closeLottery(uint256)\":{\"details\":\"Callable only by the owner\",\"params\":{\"_lotteryId\":\"lottery round\"}},\"drawFinalNumberAndMakeLotteryClaimable(uint256,bool)\":{\"params\":{\"_autoInjection\":\"Auto inject funds into next lottery\",\"_lotteryId\":\"Lottery round\"}},\"initialize(address,address)\":{\"details\":\"RandomNumberGenerator must be deployed prior to this contract\",\"params\":{\"_degis\":\"Address of DEG\",\"_randomGenerator\":\"Address of the RandomGenerator contract used to work with ChainLink VRF\"}},\"injectFunds(uint256)\":{\"params\":{\"_amount\":\"Amount to inject\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverWrongTokens(address,uint256)\":{\"params\":{\"_tokenAddress\":\"the address of the token to withdraw\",\"_tokenAmount\":\"token amount to withdraw\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMaxNumberTicketsEachTime(uint256)\":{\"params\":{\"_maxNumber\":\"Max number each time\"}},\"setTreasury(address)\":{\"params\":{\"_treasury\":\"wallet address\"}},\"startLottery(uint256,uint256,uint256[4],uint256)\":{\"params\":{\"_endTime\":\"EndTime of the lottery\",\"_fee\":\"Treasury fee (10,000 = 100%, 100 = 1%) (set as 0)\",\"_rewardsBreakdown\":\"Breakdown of rewards per bracket (must sum to 10,000)(100 <=> 1)\",\"_ticketPrice\":\"Price of each ticket without discount\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"viewAllLottery()\":{\"returns\":{\"_0\":\"Array of all lottery information\"}},\"viewNumbersPerTicketId(uint256[])\":{\"params\":{\"_ticketIds\":\": array of _ticketId\"}},\"viewRewardsForTicketId(uint256,uint256)\":{\"details\":\"This function will help to find the highest prize bracket      But this computation is encouraged to be done off-chain      Better to get bracket first and then call \\\"_calculateRewardsForTicketId()\\\"\",\"params\":{\"_lotteryId\":\"Lottery round\",\"_ticketId\":\"Ticket id\"},\"returns\":{\"_0\":\"reward Ticket reward\"}},\"viewWalletTicketIds(address,uint256)\":{\"params\":{\"_wallet\":\"address to check owned tickets\"},\"returns\":{\"_0\":\"_lotteryId lottery id to verify ownership\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyTickets(uint32[])\":{\"notice\":\"Buy tickets for the current lottery round\"},\"changeRandomGenerator(address)\":{\"notice\":\"Change the random generator contract address\"},\"claimAllTickets(uint256)\":{\"notice\":\"Claim all winning tickets for a lottery round\"},\"claimTickets(uint256,uint256[],uint32[])\":{\"notice\":\"Claim winning tickets\"},\"closeLottery(uint256)\":{\"notice\":\"Close a lottery\"},\"drawFinalNumberAndMakeLotteryClaimable(uint256,bool)\":{\"notice\":\"Draw the final number, calculate reward in Degis for each group, and make this lottery claimable (need to wait for the random generator)\"},\"initialize(address,address)\":{\"notice\":\"Initialize function\"},\"injectFunds(uint256)\":{\"notice\":\"Inject funds\"},\"recoverWrongTokens(address,uint256)\":{\"notice\":\"Recover wrong tokens sent to the contract, only by the owner All tokens except Degis and USDC are wrong tokens\"},\"setMaxNumberTicketsEachTime(uint256)\":{\"notice\":\"Set max number can buy/claim/redeem each time\"},\"setTreasury(address)\":{\"notice\":\"Set treasury wallet address\"},\"startLottery(uint256,uint256,uint256[4],uint256)\":{\"notice\":\"Start the lottery\"},\"viewAllLottery()\":{\"notice\":\"View all lottery information\"},\"viewNumbersPerTicketId(uint256[])\":{\"notice\":\"View ticker statuses and numbers for an array of ticket ids\"},\"viewRewardsForTicketId(uint256,uint256)\":{\"notice\":\"View rewards for a given ticket in a given lottery round\"},\"viewWalletTicketIds(address,uint256)\":{\"notice\":\"Get the reward per ticket in 4 brackets\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lucky-box/DegisLotteryV2.sol\":\"DegisLotteryV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"contracts/lucky-box/DegisLotteryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./interfaces/IRandomNumberGenerator.sol\\\";\\r\\nimport \\\"./MathLib.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract DegisLotteryV2 is ReentrancyGuardUpgradeable, OwnableUpgradeable {\\r\\n    using MathLib for uint256;\\r\\n    using MathLib for int128;\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************* Constants **************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    // Fee\\r\\n    uint256 public constant MAX_TREASURY_FEE = 3000; // 30%\\r\\n\\r\\n    // Ticket numbers\\r\\n    uint32 public constant MIN_TICKET_NUMBER = 10000;\\r\\n    uint32 public constant MAX_TICKET_NUMBER = 19999;\\r\\n\\r\\n    uint256 public constant DEFAULT_PRICE = 10 ether;\\r\\n\\r\\n    // 98% for each extra ticket\\r\\n    uint256 public constant DISCOUNT_DIVISOR = 98;\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************* Variables **************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    IERC20 public DegisToken;\\r\\n    IRandomNumberGenerator public randomGenerator;\\r\\n\\r\\n    address public treasury;\\r\\n\\r\\n    uint256 public currentLotteryId; // Total Rounds\\r\\n    uint256 public currentTicketId; // Total Tickets\\r\\n\\r\\n    uint256 public maxNumberTicketsEachTime;\\r\\n\\r\\n    uint256 public pendingInjectionNextLottery;\\r\\n\\r\\n    enum Status {\\r\\n        Pending,\\r\\n        Open,\\r\\n        Close,\\r\\n        Claimable\\r\\n    }\\r\\n\\r\\n    struct Lottery {\\r\\n        // Slot 1\\r\\n        Status status; // uint8\\r\\n        uint8 treasuryFee; // 500: 5% // 200: 2% // 50: 0.5%\\r\\n        uint32 startTime;\\r\\n        uint32 endTime;\\r\\n        uint32 finalNumber;\\r\\n        // Slot 2,3...\\r\\n        uint256 ticketPrice; // 10\\r\\n        uint256[4] rewardsBreakdown; // 0: 1 matching number // 3: 4 matching numbers\\r\\n        uint256[4] rewardPerTicketInBracket;\\r\\n        uint256[4] countWinnersPerBracket;\\r\\n        uint256 firstTicketId;\\r\\n        uint256 firstTicketIdNextRound;\\r\\n        uint256 amountCollected; // Total prize pool\\r\\n        uint256 pendingRewards; // Rewards that are not yet claimed\\r\\n    }\\r\\n    // lotteryId => Lottery Info\\r\\n    mapping(uint256 => Lottery) public lotteries;\\r\\n\\r\\n    struct Ticket {\\r\\n        uint32 number;\\r\\n        address owner;\\r\\n    }\\r\\n    // Ticket Id => Ticket Info\\r\\n    mapping(uint256 => Ticket) public tickets;\\r\\n\\r\\n    // lotteryId => (Lucky Number => Total Amount of this number)\\r\\n    // e.g. in lottery round 3, 10 Tickets are sold with \\\"11234\\\": 3 => (11234 => 10)\\r\\n    mapping(uint256 => mapping(uint32 => uint256))\\r\\n        private _numberTicketsPerLotteryId;\\r\\n\\r\\n    // Keep track of user ticket ids for a given lotteryId\\r\\n\\r\\n    // User Address => Lottery Round => Tickets\\r\\n    mapping(address => mapping(uint256 => uint256[])) private _userTicketIds;\\r\\n\\r\\n    mapping(uint32 => uint32) private _bracketCalculator;\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // *************************************** Events ***************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    event MaxNumberTicketsEachTimeChanged(\\r\\n        uint256 oldMaxNumber,\\r\\n        uint256 newMaxNumber\\r\\n    );\\r\\n    event AdminTokenRecovery(address token, uint256 amount);\\r\\n    event LotteryClose(uint256 indexed lotteryId);\\r\\n    event LotteryInjection(uint256 indexed lotteryId, uint256 injectedAmount);\\r\\n    event LotteryOpen(\\r\\n        uint256 indexed lotteryId,\\r\\n        uint256 startTime,\\r\\n        uint256 endTime,\\r\\n        uint256 priceTicketInDegis,\\r\\n        uint256[4] rewardsBreakdown,\\r\\n        uint256 injectedAmount\\r\\n    );\\r\\n    event LotteryNumberDrawn(\\r\\n        uint256 indexed lotteryId,\\r\\n        uint256 finalNumber,\\r\\n        uint256 countWinningTickets\\r\\n    );\\r\\n\\r\\n    event NewRandomGenerator(address indexed randomGenerator);\\r\\n    event TicketsPurchased(\\r\\n        address indexed buyer,\\r\\n        uint256 indexed lotteryId,\\r\\n        uint256 number,\\r\\n        uint256 totalPrice\\r\\n    );\\r\\n    event TicketsClaim(\\r\\n        address indexed claimer,\\r\\n        uint256 amount,\\r\\n        uint256 indexed lotteryId\\r\\n    );\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************* Constructor ************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize function\\r\\n     *\\r\\n     * @dev RandomNumberGenerator must be deployed prior to this contract\\r\\n     *\\r\\n     * @param _degis           Address of DEG\\r\\n     * @param _randomGenerator Address of the RandomGenerator contract used to work with ChainLink VRF\\r\\n     */\\r\\n    function initialize(address _degis, address _randomGenerator)\\r\\n        public\\r\\n        initializer\\r\\n    {\\r\\n        __Ownable_init();\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n\\r\\n        DegisToken = IERC20(_degis);\\r\\n        randomGenerator = IRandomNumberGenerator(_randomGenerator);\\r\\n\\r\\n        maxNumberTicketsEachTime = 10;\\r\\n\\r\\n        _bracketCalculator[0] = 1;\\r\\n        _bracketCalculator[1] = 11;\\r\\n        _bracketCalculator[2] = 111;\\r\\n        _bracketCalculator[3] = 1111;\\r\\n        currentTicketId = 1;\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************** Modifiers *************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Only EOA accounts to participate\\r\\n     */\\r\\n    modifier notContract() {\\r\\n        require(!_isContract(msg.sender), \\\"Contract not allowed\\\");\\r\\n        require(msg.sender == tx.origin, \\\"Proxy contract not allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************ View Functions ************************************ //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Get the reward per ticket in 4 brackets\\r\\n     *\\r\\n     * @param _wallet address to check owned tickets\\r\\n     *\\r\\n     * @return _lotteryId lottery id to verify ownership\\r\\n     */\\r\\n    function viewWalletTicketIds(address _wallet, uint256 _lotteryId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256[] memory result = _userTicketIds[_wallet][_lotteryId];\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View all lottery information\\r\\n     *\\r\\n     * @return Array of all lottery information\\r\\n     */\\r\\n    function viewAllLottery() external view returns (Lottery[] memory) {\\r\\n        Lottery[] memory allLottery = new Lottery[](currentLotteryId);\\r\\n        for (uint256 i = 1; i <= currentLotteryId; i++) {\\r\\n            allLottery[i - 1] = lotteries[i];\\r\\n        }\\r\\n        return allLottery;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View ticker statuses and numbers for an array of ticket ids\\r\\n     * @param _ticketIds: array of _ticketId\\r\\n     */\\r\\n    function viewNumbersPerTicketId(uint256[] calldata _ticketIds)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            /// ticketIdsNumbersAndStatuses\\r\\n            uint32[] memory\\r\\n        )\\r\\n    {\\r\\n        uint256 length = _ticketIds.length;\\r\\n        uint32[] memory ticketNumbers = new uint32[](length);\\r\\n\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            ticketNumbers[i] = tickets[_ticketIds[i]].number;\\r\\n        }\\r\\n\\r\\n        return (ticketNumbers);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View rewards for a given ticket in a given lottery round\\r\\n     *\\r\\n     * @dev This function will help to find the highest prize bracket\\r\\n     *      But this computation is encouraged to be done off-chain\\r\\n     *      Better to get bracket first and then call \\\"_calculateRewardsForTicketId()\\\"\\r\\n     *\\r\\n     * @param _lotteryId Lottery round\\r\\n     * @param _ticketId  Ticket id\\r\\n     *\\r\\n     * @return reward Ticket reward\\r\\n     */\\r\\n    function viewRewardsForTicketId(uint256 _lotteryId, uint256 _ticketId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Check lottery is in claimable status\\r\\n        if (lotteries[_lotteryId].status != Status.Claimable) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        console.log(\\\"id 1\\\", lotteries[_lotteryId].firstTicketIdNextRound);\\r\\n        console.log(\\\"id 2\\\", lotteries[_lotteryId].firstTicketId);\\r\\n\\r\\n        // Check ticketId is within range\\r\\n        if (\\r\\n            lotteries[_lotteryId].firstTicketIdNextRound < _ticketId ||\\r\\n            lotteries[_lotteryId].firstTicketId > _ticketId\\r\\n        ) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // Only calculate prize for the highest bracket\\r\\n        uint32 highestBracket = _getBracket(_lotteryId, _ticketId);\\r\\n\\r\\n        console.log(\\\"highestBracket: \\\", highestBracket);\\r\\n\\r\\n        return\\r\\n            _calculateRewardsForTicketId(_lotteryId, _ticketId, highestBracket);\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************ Set Functions ************************************* //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Set max number can buy/claim/redeem each time\\r\\n     *\\r\\n     * @param _maxNumber Max number each time\\r\\n     */\\r\\n    function setMaxNumberTicketsEachTime(uint256 _maxNumber)\\r\\n        external\\r\\n        /// setMaxTicketsPerLottery\\r\\n        onlyOwner\\r\\n    {\\r\\n        emit MaxNumberTicketsEachTimeChanged(\\r\\n            maxNumberTicketsEachTime,\\r\\n            _maxNumber\\r\\n        );\\r\\n        maxNumberTicketsEachTime = _maxNumber;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set treasury wallet address\\r\\n     *\\r\\n     * @param _treasury wallet address\\r\\n     */\\r\\n    function setTreasury(address _treasury) external onlyOwner {\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************ Main Functions ************************************ //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Buy tickets for the current lottery round\\r\\n     *\\r\\n     * @dev Need to transfer the 4-digit number to a 5-digit number to be used here (+10000)\\r\\n     *      Can not be called by a smart contract\\r\\n     *      Can only purchase in the current round\\r\\n     *\\r\\n     * @param _ticketNumbers Array of ticket numbers between 10,000 and 19,999\\r\\n     */\\r\\n    function buyTickets(uint32[] calldata _ticketNumbers)\\r\\n        external\\r\\n        notContract\\r\\n        nonReentrant\\r\\n    {\\r\\n        uint256 amountToBuy = _ticketNumbers.length;\\r\\n        require(amountToBuy > 0, \\\"No tickets are being bought\\\");\\r\\n        require(amountToBuy <= maxNumberTicketsEachTime, \\\"Too many tickets\\\");\\r\\n        // Gas savings\\r\\n        uint256 currentRound = currentLotteryId;\\r\\n        require(\\r\\n            lotteries[currentRound].status == Status.Open,\\r\\n            \\\"Round not open\\\"\\r\\n        );\\r\\n\\r\\n        // Calculate the number of DEG to pay\\r\\n        uint256 degToPay = _calculateTotalPrice(\\r\\n            lotteries[currentRound].ticketPrice,\\r\\n            amountToBuy\\r\\n        );\\r\\n\\r\\n        // Transfer degis tokens to this contract\\r\\n        DegisToken.transferFrom(msg.sender, address(this), degToPay);\\r\\n\\r\\n        // Increase prize pool amount\\r\\n        lotteries[currentRound].amountCollected += degToPay;\\r\\n\\r\\n        // Record the tickets bought\\r\\n        for (uint256 i; i < amountToBuy; ) {\\r\\n            uint32 currentTicketNumber = _ticketNumbers[i];\\r\\n\\r\\n            require(\\r\\n                (currentTicketNumber >= MIN_TICKET_NUMBER) &&\\r\\n                    (currentTicketNumber <= MAX_TICKET_NUMBER),\\r\\n                \\\"Ticket number is outside range\\\"\\r\\n            );\\r\\n\\r\\n            // Used when drawing the prize\\r\\n            _numberTicketsPerLotteryId[currentRound][\\r\\n                1 + (currentTicketNumber % 10)\\r\\n            ]++;\\r\\n            _numberTicketsPerLotteryId[currentRound][\\r\\n                11 + (currentTicketNumber % 100)\\r\\n            ]++;\\r\\n            _numberTicketsPerLotteryId[currentRound][\\r\\n                111 + (currentTicketNumber % 1000)\\r\\n            ]++;\\r\\n            _numberTicketsPerLotteryId[currentRound][\\r\\n                1111 + (currentTicketNumber % 10000)\\r\\n            ]++;\\r\\n\\r\\n            // Gas savings\\r\\n            uint256 ticketId = currentTicketId;\\r\\n\\r\\n            // Store this ticket number to the user's record\\r\\n            _userTicketIds[msg.sender][currentRound].push(ticketId);\\r\\n\\r\\n            // Store this ticket number to global ticket state\\r\\n            Ticket storage newTicket = tickets[ticketId];\\r\\n            newTicket.number = currentTicketNumber;\\r\\n            newTicket.owner = msg.sender;\\r\\n\\r\\n            // Increase total lottery ticket number\\r\\n            unchecked {\\r\\n                ++currentTicketId;\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit TicketsPurchased(msg.sender, currentRound, amountToBuy, degToPay);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim winning tickets\\r\\n     *\\r\\n     * @dev Callable by users only, not contract\\r\\n     *\\r\\n     * @param _lotteryId Lottery id\\r\\n     * @param _ticketIds Array of ticket ids\\r\\n     * @param _brackets  Bracket / prize level of each ticket\\r\\n     */\\r\\n    function claimTickets(\\r\\n        uint256 _lotteryId,\\r\\n        uint256[] calldata _ticketIds,\\r\\n        uint32[] calldata _brackets\\r\\n    ) external notContract nonReentrant {\\r\\n        require(\\r\\n            lotteries[_lotteryId].status == Status.Claimable,\\r\\n            \\\"Not claimable\\\"\\r\\n        );\\r\\n\\r\\n        uint256 ticketAmount = _ticketIds.length;\\r\\n        require(ticketAmount == _brackets.length, \\\"Not same length\\\");\\r\\n        require(ticketAmount > 0, \\\"No tickets\\\");\\r\\n        require(\\r\\n            ticketAmount <= maxNumberTicketsEachTime,\\r\\n            \\\"Too many tickets to claim\\\"\\r\\n        );\\r\\n\\r\\n        uint256 rewardToTransfer;\\r\\n\\r\\n        for (uint256 i; i < ticketAmount; ) {\\r\\n            uint256 thisTicketId = _ticketIds[i];\\r\\n\\r\\n            // Check the ticket id is inside the range\\r\\n            require(\\r\\n                thisTicketId >= lotteries[_lotteryId].firstTicketId,\\r\\n                \\\"Ticket id too small\\\"\\r\\n            );\\r\\n            require(\\r\\n                thisTicketId <= lotteries[_lotteryId].firstTicketIdNextRound,\\r\\n                \\\"Ticket id too large\\\"\\r\\n            );\\r\\n\\r\\n            // Check the ticket is owned by the user and reset this ticket\\r\\n            require(\\r\\n                msg.sender == tickets[thisTicketId].owner,\\r\\n                \\\"Not the ticket owner or already claimed\\\"\\r\\n            );\\r\\n            tickets[thisTicketId].owner = address(0);\\r\\n\\r\\n            uint256 rewardForTicketId = _calculateRewardsForTicketId(\\r\\n                _lotteryId,\\r\\n                thisTicketId,\\r\\n                _brackets[i]\\r\\n            );\\r\\n            require(rewardForTicketId > 0, \\\"No prize\\\");\\r\\n\\r\\n            // If not claiming the highest prize, check if the user has a higher prize\\r\\n            if (_brackets[i] < 3) {\\r\\n                require(\\r\\n                    _calculateRewardsForTicketId(\\r\\n                        _lotteryId,\\r\\n                        thisTicketId,\\r\\n                        _brackets[i] + 1\\r\\n                    ) == 0,\\r\\n                    \\\"Only highest prize\\\"\\r\\n                );\\r\\n            }\\r\\n\\r\\n            // Increase the reward to transfer\\r\\n            rewardToTransfer += rewardForTicketId;\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Transfer the prize to winner\\r\\n        lotteries[_lotteryId].pendingRewards -= rewardToTransfer;\\r\\n\\r\\n        console.log(\\\"reward to transafer:\\\", rewardToTransfer);\\r\\n\\r\\n        // Transfer the prize to the user\\r\\n        DegisToken.transfer(msg.sender, rewardToTransfer);\\r\\n\\r\\n        emit TicketsClaim(msg.sender, rewardToTransfer, _lotteryId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all winning tickets for a lottery round\\r\\n     *\\r\\n     * @dev Callable by users only, not contract\\r\\n     *      Gas cost may be oversized, recommended to get brackets offchain first\\r\\n     *\\r\\n     * @param _lotteryId Lottery id\\r\\n     */\\r\\n    function claimAllTickets(uint256 _lotteryId)\\r\\n        external\\r\\n        notContract\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(\\r\\n            lotteries[_lotteryId].status == Status.Claimable,\\r\\n            \\\"this round of lottery are not ready for claiming\\\"\\r\\n        );\\r\\n\\r\\n        uint256 rewardToTransfer;\\r\\n\\r\\n        for (uint256 i; i < _userTicketIds[msg.sender][_lotteryId].length; ) {\\r\\n            uint256 thisTicketId = _userTicketIds[msg.sender][_lotteryId][i];\\r\\n\\r\\n            Ticket memory thisTicket = tickets[thisTicketId];\\r\\n\\r\\n            require(msg.sender == thisTicket.owner, \\\"Not the ticket owner\\\");\\r\\n\\r\\n            uint32 highestBracket = _getBracket(_lotteryId, thisTicketId);\\r\\n            if (highestBracket < 4) {\\r\\n                uint256 rewardForTicketId = _calculateRewardsForTicketId(\\r\\n                    _lotteryId,\\r\\n                    thisTicketId,\\r\\n                    highestBracket\\r\\n                );\\r\\n                rewardToTransfer += rewardForTicketId;\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Transfer the prize to winner\\r\\n        lotteries[_lotteryId].pendingRewards -= rewardToTransfer;\\r\\n\\r\\n        DegisToken.transfer(msg.sender, rewardToTransfer);\\r\\n\\r\\n        emit TicketsClaim(msg.sender, rewardToTransfer, _lotteryId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Start the lottery\\r\\n     *\\r\\n     * @param _endTime          EndTime of the lottery\\r\\n     * @param _ticketPrice      Price of each ticket without discount\\r\\n     * @param _rewardsBreakdown Breakdown of rewards per bracket (must sum to 10,000)(100 <=> 1)\\r\\n     * @param _fee              Treasury fee (10,000 = 100%, 100 = 1%) (set as 0)\\r\\n     */\\r\\n    function startLottery(\\r\\n        uint256 _endTime,\\r\\n        uint256 _ticketPrice,\\r\\n        uint256[4] calldata _rewardsBreakdown,\\r\\n        uint256 _fee\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            (currentLotteryId == 0) ||\\r\\n                (lotteries[currentLotteryId].status == Status.Claimable),\\r\\n            \\\"Wrong status\\\"\\r\\n        );\\r\\n\\r\\n        require(_fee <= MAX_TREASURY_FEE, \\\"Treasury fee too high\\\");\\r\\n\\r\\n        require(\\r\\n            (_rewardsBreakdown[0] +\\r\\n                _rewardsBreakdown[1] +\\r\\n                _rewardsBreakdown[2] +\\r\\n                _rewardsBreakdown[3]) <= 10000,\\r\\n            \\\"Rewards breakdown too high\\\"\\r\\n        );\\r\\n\\r\\n        // If price is provided, use it\\r\\n        // Or use the default price\\r\\n        uint256 price = _ticketPrice > 0 ? _ticketPrice : DEFAULT_PRICE;\\r\\n\\r\\n        // Gas savings\\r\\n        uint256 currentId = ++currentLotteryId;\\r\\n\\r\\n        Lottery storage newLottery = lotteries[currentId];\\r\\n\\r\\n        newLottery.status = Status.Open;\\r\\n        newLottery.startTime = uint32(block.timestamp);\\r\\n        newLottery.endTime = uint32(_endTime);\\r\\n        newLottery.ticketPrice = price;\\r\\n        newLottery.rewardsBreakdown = _rewardsBreakdown;\\r\\n        newLottery.treasuryFee = uint8(_fee);\\r\\n        newLottery.amountCollected = pendingInjectionNextLottery;\\r\\n        newLottery.firstTicketId = currentTicketId;\\r\\n\\r\\n        emit LotteryOpen(\\r\\n            currentId,\\r\\n            block.timestamp,\\r\\n            _endTime,\\r\\n            price,\\r\\n            _rewardsBreakdown,\\r\\n            pendingInjectionNextLottery\\r\\n        );\\r\\n\\r\\n        pendingInjectionNextLottery = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Close a lottery\\r\\n     * @param _lotteryId lottery round\\r\\n     * @dev Callable only by the owner\\r\\n     */\\r\\n    function closeLottery(uint256 _lotteryId) external onlyOwner nonReentrant {\\r\\n        require(\\r\\n            lotteries[_lotteryId].status == Status.Open,\\r\\n            \\\"this lottery is not open currently\\\"\\r\\n        );\\r\\n\\r\\n        // require(\\r\\n        //     block.timestamp > _lotteries[_lotteryId].endTime,\\r\\n        //     \\\"this lottery has not reached the end time, only can be closed after the end time\\\"\\r\\n        // );\\r\\n\\r\\n        // Request a random number from the generator\\r\\n        randomGenerator.getRandomNumber();\\r\\n\\r\\n        // Update the lottery status to \\\"Close\\\"\\r\\n        lotteries[_lotteryId].status = Status.Close;\\r\\n\\r\\n        emit LotteryClose(_lotteryId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Draw the final number, calculate reward in Degis for each group,\\r\\n               and make this lottery claimable (need to wait for the random generator)\\r\\n     *\\r\\n     * @param _lotteryId     Lottery round\\r\\n     * @param _autoInjection Auto inject funds into next lottery\\r\\n     */\\r\\n    function drawFinalNumberAndMakeLotteryClaimable(\\r\\n        uint256 _lotteryId,\\r\\n        bool _autoInjection\\r\\n    ) external onlyOwner nonReentrant {\\r\\n        require(\\r\\n            lotteries[_lotteryId].status == Status.Close,\\r\\n            \\\"Lottery not closed\\\"\\r\\n        );\\r\\n        require(\\r\\n            _lotteryId == randomGenerator.latestLotteryId(),\\r\\n            \\\"Final number not drawn\\\"\\r\\n        );\\r\\n        require(treasury != address(0), \\\"Treasury is not set\\\");\\r\\n\\r\\n        // Get the final lucky numbers from randomGenerator\\r\\n        uint32 finalNumber = randomGenerator.randomResult();\\r\\n\\r\\n        Lottery storage lottery = lotteries[_lotteryId];\\r\\n\\r\\n        // Gas savings\\r\\n        uint256 totalPrize = lottery.amountCollected;\\r\\n\\r\\n        // Prize distributed to users\\r\\n        uint256 amountToWinners = (totalPrize * 8000) / 10000;\\r\\n\\r\\n        // (20% - treasuryFee) will go to next round\\r\\n        uint256 amountToNextLottery = (totalPrize *\\r\\n            (2000 - lottery.treasuryFee)) / 10000;\\r\\n\\r\\n        // Remaining part goes to treasury\\r\\n        uint256 amountToTreasury = totalPrize -\\r\\n            amountToWinners -\\r\\n            amountToNextLottery;\\r\\n\\r\\n        // Initialize a number to count addresses in all the previous bracket\\r\\n        // Ensure that a ticket is not counted several times in different brackets\\r\\n        uint256 numberAddressesInPreviousBracket;\\r\\n\\r\\n        // Calculate prizes for each bracket, starting from the highest one\\r\\n        for (uint32 i; i < 4; ) {\\r\\n            uint32 j = 3 - i;\\r\\n\\r\\n            // Get transformed winning number\\r\\n            uint32 transformedWinningNumber = _bracketCalculator[j] +\\r\\n                (finalNumber % (uint32(10)**(j + 1)));\\r\\n\\r\\n            // Amount of winning tickets for this number\\r\\n            uint256 winningAmount = _numberTicketsPerLotteryId[_lotteryId][\\r\\n                transformedWinningNumber\\r\\n            ];\\r\\n\\r\\n            // Amount of winners for this bracket\\r\\n            // Remove those already have higher bracket reward\\r\\n            lottery.countWinnersPerBracket[j] =\\r\\n                winningAmount -\\r\\n                numberAddressesInPreviousBracket;\\r\\n\\r\\n            // Check if there are winners for this bracket\\r\\n            if (winningAmount != numberAddressesInPreviousBracket) {\\r\\n                // B. If rewards at this bracket are > 0, calculate, else, report the numberAddresses from previous bracket\\r\\n                if (lottery.rewardsBreakdown[j] != 0) {\\r\\n                    lottery.rewardPerTicketInBracket[j] =\\r\\n                        ((lottery.rewardsBreakdown[j] * amountToWinners) /\\r\\n                            (winningAmount -\\r\\n                                numberAddressesInPreviousBracket)) /\\r\\n                        10000;\\r\\n\\r\\n                    lottery.pendingRewards +=\\r\\n                        (lottery.rewardsBreakdown[j] * amountToWinners) /\\r\\n                        10000;\\r\\n                }\\r\\n                // No winners, prize added to the amount to withdraw to treasury\\r\\n            } else {\\r\\n                lottery.rewardPerTicketInBracket[j] = 0;\\r\\n                amountToTreasury +=\\r\\n                    (lottery.rewardsBreakdown[j] * amountToWinners) /\\r\\n                    10000;\\r\\n            }\\r\\n\\r\\n            // Update numberAddressesInPreviousBracket\\r\\n            numberAddressesInPreviousBracket = winningAmount;\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Update internal statuses for this lottery round\\r\\n        lottery.finalNumber = finalNumber;\\r\\n        lottery.status = Status.Claimable;\\r\\n        lottery.firstTicketIdNextRound = currentTicketId;\\r\\n\\r\\n        // If auto injection is on, reinject funds into next lottery\\r\\n        if (_autoInjection) {\\r\\n            pendingInjectionNextLottery = amountToNextLottery;\\r\\n        }\\r\\n\\r\\n        // Transfer prize to treasury address\\r\\n        if (amountToTreasury > 0) {\\r\\n            DegisToken.transfer(treasury, amountToTreasury);\\r\\n        }\\r\\n\\r\\n        emit LotteryNumberDrawn(\\r\\n            currentLotteryId,\\r\\n            finalNumber, // final result for this round\\r\\n            numberAddressesInPreviousBracket // total winners\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the random generator contract address\\r\\n     * @dev The calls to functions are used to verify the new generator implements them properly.\\r\\n     * It is necessary to wait for the VRF response before starting a round.\\r\\n     * Callable only by the contract owner\\r\\n     * @param _randomGeneratorAddress address of the random generator\\r\\n     */\\r\\n    function changeRandomGenerator(address _randomGeneratorAddress)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        // We do not change the generator when a round has not been claimable\\r\\n        require(\\r\\n            lotteries[currentLotteryId].status == Status.Claimable,\\r\\n            \\\"current lottery is not claimable\\\"\\r\\n        );\\r\\n\\r\\n        // Request a random number from the new generator\\r\\n        IRandomNumberGenerator(_randomGeneratorAddress).getRandomNumber();\\r\\n\\r\\n        // Get the finalNumber based on the randomResult\\r\\n        IRandomNumberGenerator(_randomGeneratorAddress).randomResult();\\r\\n\\r\\n        // Set the new address\\r\\n        randomGenerator = IRandomNumberGenerator(_randomGeneratorAddress);\\r\\n\\r\\n        emit NewRandomGenerator(_randomGeneratorAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Inject funds\\r\\n     *\\r\\n     * @param _amount Amount to inject\\r\\n     */\\r\\n    function injectFunds(uint256 _amount) external {\\r\\n        uint256 currentRound = currentLotteryId;\\r\\n\\r\\n        // Only inject when current round is open\\r\\n        require(\\r\\n            lotteries[currentRound].status == Status.Open,\\r\\n            \\\"Round not open\\\"\\r\\n        );\\r\\n\\r\\n        // Update the amount collected for this round\\r\\n        lotteries[currentRound].amountCollected += _amount;\\r\\n\\r\\n        // Transfer DEG\\r\\n        DegisToken.transferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        emit LotteryInjection(currentRound, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Recover wrong tokens sent to the contract, only by the owner\\r\\n               All tokens except Degis and USDC are wrong tokens\\r\\n     * @param _tokenAddress the address of the token to withdraw\\r\\n     * @param _tokenAmount token amount to withdraw\\r\\n     */\\r\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_tokenAddress != address(DegisToken), \\\"Cannot be DEGIS token\\\");\\r\\n\\r\\n        IERC20(_tokenAddress).transfer(address(msg.sender), _tokenAmount);\\r\\n\\r\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // *********************************** Internal Functions ********************************* //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    // /**\\r\\n    //  * @notice View rewards for a given ticket in a given lottery round\\r\\n    //  *\\r\\n    //  * @dev This function will help to find the highest prize bracket\\r\\n    //  *      But this computation is encouraged to be done off-chain\\r\\n    //  *      Better to get bracket first and then call \\\"_calculateRewardsForTicketId()\\\"\\r\\n    //  *\\r\\n    //  * @param _lotteryId Lottery round\\r\\n    //  * @param _ticketId  Ticket id\\r\\n    //  *\\r\\n    //  * @return reward Ticket reward\\r\\n    //  */\\r\\n    // function viewRewardsForTicketId(uint256 _lotteryId, uint256 _ticketId)\\r\\n    //     external\\r\\n    //     view\\r\\n    //     returns (uint256)\\r\\n    // {\\r\\n    //     // Check lottery is in claimable status\\r\\n    //     if (lotteries[_lotteryId].status != Status.Claimable) {\\r\\n    //         return 0;\\r\\n    //     }\\r\\n\\r\\n    //     // Check ticketId is within range\\r\\n    //     if (\\r\\n    //         lotteries[_lotteryId].firstTicketIdNextRound < _ticketId ||\\r\\n    //         lotteries[_lotteryId].firstTicketId >= _ticketId\\r\\n    //     ) {\\r\\n    //         return 0;\\r\\n    //     }\\r\\n\\r\\n    //     uint32 highestBracket = _getBracket(_lotteryId, _ticketId);\\r\\n\\r\\n    //     if (highestBracket > 3) return 0;\\r\\n    //     else\\r\\n    //         return\\r\\n    //             _calculateRewardsForTicketId(\\r\\n    //                 _lotteryId,\\r\\n    //                 _ticketId,\\r\\n    //                 highestBracket\\r\\n    //             );\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate total price when buying many tickets\\r\\n     *         1 ticket = 100%  2 tickets = 98%  3 tickets = 98% * 98 % ...\\r\\n     *         Maximum discount: 98% ^ 10 \\u2248 82%\\r\\n     *\\r\\n     * @param _price Ticket price in DEG\\r\\n     * @param _num   Number of tickets to be bought\\r\\n     *\\r\\n     * @return totalPrice Total price in DEG\\r\\n     */\\r\\n    function _calculateTotalPrice(uint256 _price, uint256 _num)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 totalPrice)\\r\\n    {\\r\\n        totalPrice = (_price * _num * (DISCOUNT_DIVISOR**_num)) / 100**_num;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice returns highest bracket a ticket number falls into\\r\\n     *\\r\\n     * @param _lotteryId Lottery round\\r\\n     * @param _ticketId  Ticket id\\r\\n     */\\r\\n    function _getBracket(uint256 _lotteryId, uint256 _ticketId)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint32 highestBracket)\\r\\n    {\\r\\n        uint32 userNumber = tickets[_ticketId].number;\\r\\n\\r\\n        // Retrieve the winning number combination\\r\\n        uint32 finalNumber = lotteries[_lotteryId].finalNumber;\\r\\n\\r\\n        // 3 => highest prize\\r\\n        // 4 => no prize\\r\\n        highestBracket = 4;\\r\\n        for (uint32 i = 1; i <= 4; ++i) {\\r\\n            if (finalNumber % (uint32(10)**i) == userNumber % (uint32(10)**i)) {\\r\\n                highestBracket = i - 1;\\r\\n            } else {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate rewards for a given ticket\\r\\n     * @param _lotteryId: lottery id\\r\\n     * @param _ticketId: ticket id\\r\\n     * @param _bracket: bracket for the ticketId to verify the claim and calculate rewards\\r\\n     */\\r\\n    function _calculateRewardsForTicketId(\\r\\n        uint256 _lotteryId,\\r\\n        uint256 _ticketId,\\r\\n        uint32 _bracket\\r\\n    ) internal view returns (uint256) {\\r\\n        // Retrieve the user number combination from the ticketId\\r\\n        uint32 userNumber = tickets[_ticketId].number;\\r\\n\\r\\n        // Retrieve the winning number combination\\r\\n        uint32 finalNumber = lotteries[_lotteryId].finalNumber;\\r\\n\\r\\n        // Apply transformation to verify the claim provided by the user is true\\r\\n        uint32 ts = uint32(10)**(_bracket + 1);\\r\\n\\r\\n        uint32 transformedWinningNumber = _bracketCalculator[_bracket] +\\r\\n            (finalNumber % ts);\\r\\n        uint32 transformedUserNumber = _bracketCalculator[_bracket] +\\r\\n            (userNumber % ts);\\r\\n\\r\\n        // Confirm that the two transformed numbers are the same\\r\\n        if (transformedWinningNumber == transformedUserNumber) {\\r\\n            return lotteries[_lotteryId].rewardPerTicketInBracket[_bracket];\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // /**\\r\\n    //  * @notice View user ticket ids, numbers, and statuses of user for a given lottery\\r\\n    //  * @param _user: user address\\r\\n    //  * @param _lotteryId: lottery round\\r\\n    //  * @param _cursor: cursor to start where to retrieve the tickets\\r\\n    //  * @param _size: the number of tickets to retrieve\\r\\n    //  */\\r\\n    // e.g. Alice, round 10, check her ticket-30 to ticket-35\\r\\n    // function viewUserInfoForLotteryId(\\r\\n    //     address _user,\\r\\n    //     uint256 _lotteryId,\\r\\n    //     uint256 _cursor,\\r\\n    //     uint256 _size\\r\\n    // )\\r\\n    //     external\\r\\n    //     view\\r\\n    //     returns (\\r\\n    //         uint256[] memory,\\r\\n    //         uint32[] memory,\\r\\n    //         bool[] memory,\\r\\n    //         uint256\\r\\n    //     )\\r\\n    // {\\r\\n    //     uint256 length = _size;\\r\\n    //     uint256 amount = _userTicketIds[_user][_lotteryId].length;\\r\\n\\r\\n    //     if (length > (amount - _cursor)) {\\r\\n    //         length = amount - _cursor;\\r\\n    //     }\\r\\n\\r\\n    //     uint256[] memory lotteryTicketIds = new uint256[](length);\\r\\n    //     uint32[] memory ticketNumbers = new uint32[](length);\\r\\n    //     bool[] memory ticketStatuses = new bool[](length);\\r\\n\\r\\n    //     for (uint256 i = 0; i < length; i++) {\\r\\n    //         lotteryTicketIds[i] = _userTicketIds[_user][i + _cursor];\\r\\n    //         ticketNumbers[i] = tickets[lotteryTicketIds[i]].number;\\r\\n    //         ticketStatuses[i] = tickets[lotteryTicketIds[i]].isRedeemed;\\r\\n    //     }\\r\\n\\r\\n    //     return (\\r\\n    //         lotteryTicketIds,\\r\\n    //         ticketNumbers,\\r\\n    //         ticketStatuses,\\r\\n    //         _cursor + length\\r\\n    //     );\\r\\n    // }\\r\\n\\r\\n    // /**\\r\\n    //  * @notice View user ticket ids, numbers, and statuses of user for a given lottery\\r\\n    //  * @param _user: user address\\r\\n    //  */\\r\\n    // e.g. Alice, round 10, check her ticket-30 to ticket-35\\r\\n    // function viewUserInfo(address _user)\\r\\n    //     external\\r\\n    //     view\\r\\n    //     returns (uint256[] memory, Ticket[] memory)\\r\\n    // {\\r\\n    //     uint256 length = _userTicketIds[_user].length;\\r\\n\\r\\n    //     uint256[] memory ticketIds = new uint256[](length);\\r\\n    //     Ticket[] memory userTickets = new Ticket[](length);\\r\\n\\r\\n    //     for (uint256 i = 0; i < length; i++) {\\r\\n    //         ticketIds[i] = _userTicketIds[_user][i];\\r\\n    //         userTickets[i] = tickets[ticketIds[i]];\\r\\n    //     }\\r\\n\\r\\n    //     return (ticketIds, userTickets);\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @notice Check if an address is a contract\\r\\n     */\\r\\n    function _isContract(address _addr) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(_addr)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2eca5a9a72a39f4ed8d1c4605472b8470ba0d58d81523d2f53f169fe4265029f\",\"license\":\"MIT\"},\"contracts/lucky-box/MathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nlibrary MathLib {\\r\\n    /*\\r\\n     * Minimum value signed 64.64-bit fixed point number may have.\\r\\n     */\\r\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\r\\n\\r\\n    /*\\r\\n     * Maximum value signed 64.64-bit fixed point number may have.\\r\\n     */\\r\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n    function log_2(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x > 0);\\r\\n\\r\\n            int256 msb = 0;\\r\\n            int256 xc = x;\\r\\n            if (xc >= 0x10000000000000000) {\\r\\n                xc >>= 64;\\r\\n                msb += 64;\\r\\n            }\\r\\n            if (xc >= 0x100000000) {\\r\\n                xc >>= 32;\\r\\n                msb += 32;\\r\\n            }\\r\\n            if (xc >= 0x10000) {\\r\\n                xc >>= 16;\\r\\n                msb += 16;\\r\\n            }\\r\\n            if (xc >= 0x100) {\\r\\n                xc >>= 8;\\r\\n                msb += 8;\\r\\n            }\\r\\n            if (xc >= 0x10) {\\r\\n                xc >>= 4;\\r\\n                msb += 4;\\r\\n            }\\r\\n            if (xc >= 0x4) {\\r\\n                xc >>= 2;\\r\\n                msb += 2;\\r\\n            }\\r\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\r\\n\\r\\n            int256 result = (msb - 64) << 64;\\r\\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\\r\\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\r\\n                ux *= ux;\\r\\n                uint256 b = ux >> 255;\\r\\n                ux >>= 127 + b;\\r\\n                result += bit * int256(b);\\r\\n            }\\r\\n\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mul(int128 x, int128 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            int256 result = (int256(x) * y) >> 64;\\r\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\r\\n     * number.  Revert on overflow.\\r\\n     *\\r\\n     * @param x unsigned 256-bit integer number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function fromUInt(uint256 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x <= 0x7FFFFFFFFFFFFFFF);\\r\\n            return int128(int256(x << 64));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\r\\n     * number rounding down.  Revert on underflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return unsigned 64-bit integer number\\r\\n     */\\r\\n    function toUInt(int128 x) internal pure returns (uint64) {\\r\\n        unchecked {\\r\\n            require(x >= 0);\\r\\n            return uint64(uint128(x >> 64));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function ln(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x > 0);\\r\\n\\r\\n            return\\r\\n                int128(\\r\\n                    int256(\\r\\n                        (uint256(int256(log_2(x))) *\\r\\n                            0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128\\r\\n                    )\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x21471017623aac4b21e8418422be56953a6ac5a624c843ed3241052a899f3ccb\",\"license\":\"MIT\"},\"contracts/lucky-box/interfaces/IRandomNumberGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IRandomNumberGenerator {\\r\\n    /**\\r\\n     * @notice Views random result\\r\\n     */\\r\\n    function getRandomNumber() external;\\r\\n\\r\\n    function randomResult() external view returns (uint32);\\r\\n\\r\\n    function latestLotteryId() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xc83817926026b237e889454bf6768fa637230200619c7e5f4a40d2ab3eb92e6e\",\"license\":\"GPL-3.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613d21806100206000396000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c80636be4097c1161012a578063c6e761a9116100bd578063e359ebec1161008c578063f0f4426011610071578063f0f44260146104fb578063f2b3c8091461050e578063f2fde38b1461051757600080fd5b8063e359ebec146104d3578063e8589ac8146104e657600080fd5b8063c6e761a91461047a578063c914914f1461049a578063dcbad90d146104ad578063e1059fe5146104c057600080fd5b806398359fa1116100f957806398359fa11461042e5780639d8ca53114610441578063b3e3649b14610454578063c38de5391461046757600080fd5b80636be4097c14610403578063715018a61461040c5780637250e45d146104145780638da5cb5b1461041d57600080fd5b806344848a99116101a257806361d027b31161017157806361d027b3146103b2578063656f8a25146103d257806365dc59d6146103da578063686465b8146103fa57600080fd5b806344848a9914610325578063485cc9551461033857806350b447121461034b5780635b0d64c21461039257600080fd5b80631b6c743b116101de5780631b6c743b146102db5780631e6425fd146102ea5780632149485d146102ff5780633f138d4b1461031257600080fd5b80630ab2b0861461021057806312a9769d1461022f5780631398e0761461023857806314a0792f146102c5575b600080fd5b610219609c5481565b604051610226919061286f565b60405180910390f35b610219609d5481565b6102af610246366004612895565b609e60205260009081526040902080546001820154600e830154600f840154601085015460119095015460ff8086169661010087049091169563ffffffff62010000820481169666010000000000008304821696600160501b909304909116949093919290918a565b6040516102269a99989796959493929190612914565b6102ce61271081565b60405161022691906129a9565b610219678ac7230489e8000081565b6102fd6102f8366004612895565b61052a565b005b61021961030d3660046129b7565b61059d565b6102fd610320366004612a19565b61071f565b6102fd610333366004612895565b610826565b6102fd610346366004612a3b565b610ab3565b610384610359366004612895565b609f6020526000908152604090205463ffffffff81169064010000000090046001600160a01b031682565b604051610226929190612a77565b6103a56103a0366004612ae4565b610c3a565b6040516102269190612b8a565b6099546103c5906001600160a01b031681565b6040516102269190612b9b565b610219606281565b6097546103ed906001600160a01b031681565b6040516102269190612beb565b610219609b5481565b610219609a5481565b6102fd610d10565b6102ce614e1f81565b6065546001600160a01b03166103c5565b6102fd61043c366004612bf9565b610d46565b6102fd61044f366004612895565b610ec2565b6102fd610462366004612c2e565b611005565b6102fd610475366004612ca5565b611201565b61048d610488366004612a19565b611766565b6040516102269190612d1f565b6102fd6104a8366004612d30565b6117db565b6098546103ed906001600160a01b031681565b6102fd6104ce366004612ae4565b611c05565b6102fd6104e1366004612895565b61202e565b6104ee61214d565b6040516102269190612f3c565b6102fd610509366004612bf9565b61235d565b610219610bb881565b6102fd610525366004612bf9565b6123b6565b6065546001600160a01b0316331461055d5760405162461bcd60e51b815260040161055490612f7d565b60405180910390fd5b7f67d06ff5b9d79811174a2f0df6d9be98aa3b3f9ae311716140cb1b0668c11843609c5482604051610590929190612f8d565b60405180910390a1609c55565b600060036000848152609e602052604090205460ff1660038111156105c4576105c46128b6565b146105d157506000610719565b6106266040518060400160405280600481526020017f6964203100000000000000000000000000000000000000000000000000000000815250609e6000868152602001908152602001600020600f0154612412565b61067b6040518060400160405280600481526020017f6964203200000000000000000000000000000000000000000000000000000000815250609e6000868152602001908152602001600020600e0154612412565b6000838152609e60205260409020600f01548211806106aa57506000838152609e60205260409020600e015482105b156106b757506000610719565b60006106c38484612489565b905061070a6040518060400160405280601081526020017f68696768657374427261636b65743a20000000000000000000000000000000008152508263ffffffff16612412565b610715848483612537565b9150505b92915050565b6065546001600160a01b031633146107495760405162461bcd60e51b815260040161055490612f7d565b6097546001600160a01b03908116908316036107775760405162461bcd60e51b815260040161055490612fda565b60405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb906107a59033908590600401612fea565b6020604051808303816000875af11580156107c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e89190613003565b507f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab78129828260405161081a929190612fea565b60405180910390a15050565b333b156108455760405162461bcd60e51b815260040161055490613056565b3332146108645760405162461bcd60e51b815260040161055490613098565b6002600154036108865760405162461bcd60e51b8152600401610554906130da565b600260015560036000828152609e602052604090205460ff1660038111156108b0576108b06128b6565b146108cd5760405162461bcd60e51b815260040161055490613144565b6000805b33600090815260a1602090815260408083208684529091529020548110156109cc5733600090815260a160209081526040808320868452909152812080548390811061091f5761091f613154565b6000918252602080832090910154808352609f825260409283902083518085019094525463ffffffff811684526001600160a01b0364010000000090910416918301829052925033146109845760405162461bcd60e51b81526004016105549061319c565b60006109908684612489565b905060048163ffffffff1610156109be5760006109ae878584612537565b90506109ba81876131c2565b9550505b8360010193505050506108d1565b506000828152609e6020526040812060110180548392906109ee9084906131da565b909155505060975460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610a259033908590600401612fea565b6020604051808303816000875af1158015610a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a689190613003565b5081336001600160a01b03167f0fdeb33b5931b477077383757e0ba077bd3d8eddfa2cc711c54ad2d3a0cfac6583604051610aa3919061286f565b60405180910390a3505060018055565b600054610100900460ff16610ace5760005460ff1615610ad2565b303b155b610aee5760405162461bcd60e51b81526004016105549061324d565b600054610100900460ff16158015610b10576000805461ffff19166101011790555b610b18612639565b610b20612668565b609780546001600160a01b0380861673ffffffffffffffffffffffffffffffffffffffff19928316179092556098805492851692909116919091179055600a609c5560a26020527f8fa6f0ecb9543d3381552e96aa43533c7f086066e38816919ea0cfae371b342a805463ffffffff1990811660019081179092557f87286cc7b9cf8a377e677776b2644ce858185998d33108f493bdc3c2f07b983680548216600b1790557f984fb507cc15174c9c2666d8998832bf192b808658c1b8547c17c86e40ea581480548216606f17905560036000527f4ed878d3ddcb61d84861a74cb3bb4189ee298a8a85e8f1b99bcffb157f7e18848054909116610457179055609b558015610c35576000805461ff00191690555b505050565b60608160008167ffffffffffffffff811115610c5857610c5861325d565b604051908082528060200260200182016040528015610c81578160200160208202803683370190505b50905060005b82811015610d0757609f6000878784818110610ca557610ca5613154565b90506020020135815260200190815260200160002060000160009054906101000a900463ffffffff16828281518110610ce057610ce0613154565b63ffffffff9092166020928302919091019091015280610cff81613273565b915050610c87565b50949350505050565b6065546001600160a01b03163314610d3a5760405162461bcd60e51b815260040161055490612f7d565b610d446000612695565b565b6065546001600160a01b03163314610d705760405162461bcd60e51b815260040161055490612f7d565b6003609a546000908152609e602052604090205460ff166003811115610d9857610d986128b6565b14610db55760405162461bcd60e51b8152600401610554906132bc565b806001600160a01b031663dbdff2c16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610df057600080fd5b505af1158015610e04573d6000803e3d6000fd5b50505050806001600160a01b03166342619f666040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6a91906132e3565b506098805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f383f8cb39dfa7c3fb901a460dd449ea924868f0a92ff03da64740fffa5f1de6290600090a250565b6065546001600160a01b03163314610eec5760405162461bcd60e51b815260040161055490612f7d565b600260015403610f0e5760405162461bcd60e51b8152600401610554906130da565b600260019081556000828152609e602052604090205460ff166003811115610f3857610f386128b6565b14610f555760405162461bcd60e51b81526004016105549061335c565b609860009054906101000a90046001600160a01b03166001600160a01b031663dbdff2c16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610fa557600080fd5b505af1158015610fb9573d6000803e3d6000fd5b5050506000828152609e6020526040808220805460ff19166002179055518392507f8bc84e5d97533c428862626ac41fe7bc09b1ea2ed5e9e330d84092db8df153669190a25060018055565b6065546001600160a01b0316331461102f5760405162461bcd60e51b815260040161055490612f7d565b609a54158061106357506003609a546000908152609e602052604090205460ff166003811115611061576110616128b6565b145b61107f5760405162461bcd60e51b81526004016105549061339e565b610bb88111156110a15760405162461bcd60e51b8152600401610554906133e0565b612710606083013560408401356110bd602086013586356131c2565b6110c791906131c2565b6110d191906131c2565b11156110ef5760405162461bcd60e51b815260040161055490613422565b600080841161110657678ac7230489e80000611108565b835b90506000609a6000815461111b90613273565b91829055506000818152609e60205260409020805469ffffffffffffffff00ff1916620100004263ffffffff9081169190910269ffffffff0000000000001916919091176601000000000000918a16919091021760019081178255810184905590915061118d6002820186600461277b565b50805461ff00191661010060ff861602178155609d80546010830155609b54600e8301555460405183917f5e7c17be0c6c11472c23d5df180e5136efb90395ccff56f1fcfb8db6b5a0a235916111eb9142918c9189918c919061344a565b60405180910390a250506000609d555050505050565b6065546001600160a01b0316331461122b5760405162461bcd60e51b815260040161055490612f7d565b60026001540361124d5760405162461bcd60e51b8152600401610554906130da565b600260018190556000838152609e602052604090205460ff166003811115611277576112776128b6565b146112945760405162461bcd60e51b8152600401610554906134c9565b609860009054906101000a90046001600160a01b03166001600160a01b031663eed8e1ee6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130b91906134e4565b82146113295760405162461bcd60e51b815260040161055490613537565b6099546001600160a01b03166113515760405162461bcd60e51b815260040161055490613579565b609854604080517f42619f6600000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916342619f669160048083019260209291908290030181865afa1580156113b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d891906132e3565b6000848152609e60205260408120601081015492935091906127106113ff83611f40613589565b61140991906135be565b83549091506000906127109061142990610100900460ff166107d06135d2565b6114379061ffff1685613589565b61144191906135be565b905060008161145084866131da565b61145a91906131da565b90506000805b60048163ffffffff16101561165b57600061147c8260036135e0565b9050600061148b8260016135f0565b61149690600a613728565b6114a0908b61374b565b63ffffffff808416600090815260a260205260409020546114c29291166135f0565b60008d815260a06020908152604080832063ffffffff851684529091529020549091506114ef85826131da565b8a600a018463ffffffff166004811061150a5761150a613154565b01558085146115ee57896002018363ffffffff166004811061152e5761152e613154565b0154156115e95761271061154286836131da565b898c6002018663ffffffff166004811061155e5761155e613154565b015461156a9190613589565b61157491906135be565b61157e91906135be565b8a6006018463ffffffff166004811061159957611599613154565b01556127108860028c0163ffffffff8616600481106115ba576115ba613154565b01546115c69190613589565b6115d091906135be565b8a60110160008282546115e391906131c2565b90915550505b61164f565b60008a6006018463ffffffff166004811061160b5761160b613154565b01556127108860028c0163ffffffff86166004811061162c5761162c613154565b01546116389190613589565b61164291906135be565b61164c90876131c2565b95505b93505050600101611460565b5085546dffffffff000000000000000000ff191660ff19600160501b63ffffffff8a160216176003178655609b54600f870155871561169a57609d8390555b811561171b5760975460995460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926116d6929116908690600401612fea565b6020604051808303816000875af11580156116f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117199190613003565b505b609a547f98e31a6607b8b15b4d5b91de54f4c09ffe4c4cf162aa532c70b5213754e2e703888360405161174f929190613784565b60405180910390a250506001805550505050505050565b6001600160a01b038216600090815260a16020908152604080832084845282528083208054825181850281018501909352808352606094938301828280156117cd57602002820191906000526020600020905b8154815260200190600101908083116117b9575b509398975050505050505050565b333b156117fa5760405162461bcd60e51b815260040161055490613056565b3332146118195760405162461bcd60e51b815260040161055490613098565b60026001540361183b5760405162461bcd60e51b8152600401610554906130da565b600260015560036000868152609e602052604090205460ff166003811115611865576118656128b6565b146118825760405162461bcd60e51b8152600401610554906137c4565b828181146118a25760405162461bcd60e51b815260040161055490613806565b600081116118c25760405162461bcd60e51b815260040161055490613848565b609c548111156118e45760405162461bcd60e51b81526004016105549061388a565b6000805b82811015611adb57600087878381811061190457611904613154565b905060200201359050609e60008a8152602001908152602001600020600e01548110156119435760405162461bcd60e51b8152600401610554906138cc565b6000898152609e60205260409020600f01548111156119745760405162461bcd60e51b81526004016105549061390e565b6000818152609f602052604090205464010000000090046001600160a01b031633146119b25760405162461bcd60e51b815260040161055490613976565b6000818152609f6020526040812080547fffffffffffffffff0000000000000000000000000000000000000000ffffffff169055611a178a838989878181106119fd576119fd613154565b9050602002016020810190611a129190613991565b612537565b905060008111611a395760405162461bcd60e51b8152600401610554906139e4565b6003878785818110611a4d57611a4d613154565b9050602002016020810190611a629190613991565b63ffffffff161015611ac257611aa58a83898987818110611a8557611a85613154565b9050602002016020810190611a9a9190613991565b611a129060016135f0565b15611ac25760405162461bcd60e51b815260040161055490613a26565b611acc81856131c2565b935082600101925050506118e8565b506000878152609e602052604081206011018054839290611afd9084906131da565b909155505060408051808201909152601481527f72657761726420746f207472616e73616665723a0000000000000000000000006020820152611b409082612412565b60975460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611b729033908590600401612fea565b6020604051808303816000875af1158015611b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb59190613003565b5086336001600160a01b03167f0fdeb33b5931b477077383757e0ba077bd3d8eddfa2cc711c54ad2d3a0cfac6583604051611bf0919061286f565b60405180910390a35050600180555050505050565b333b15611c245760405162461bcd60e51b815260040161055490613056565b333214611c435760405162461bcd60e51b815260040161055490613098565b600260015403611c655760405162461bcd60e51b8152600401610554906130da565b60026001558080611c885760405162461bcd60e51b815260040161055490613a68565b609c54811115611caa5760405162461bcd60e51b815260040161055490613aaa565b609a5460016000828152609e602052604090205460ff166003811115611cd257611cd26128b6565b14611cef5760405162461bcd60e51b815260040161055490613aec565b6000818152609e6020526040812060010154611d0b90846126f4565b6097546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd90611d4090339030908690600401613afc565b6020604051808303816000875af1158015611d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d839190613003565b506000828152609e602052604081206010018054839290611da59084906131c2565b90915550600090505b83811015611fde576000868683818110611dca57611dca613154565b9050602002016020810190611ddf9190613991565b905061271063ffffffff821610801590611e015750614e1f63ffffffff821611155b611e1d5760405162461bcd60e51b815260040161055490613b5e565b600084815260a06020526040812090611e37600a8461374b565b611e429060016135f0565b63ffffffff16815260208101919091526040016000908120805491611e6683613273565b9091555050600084815260a06020526040812090611e8560648461374b565b611e9090600b6135f0565b63ffffffff16815260208101919091526040016000908120805491611eb483613273565b9091555050600084815260a06020526040812090611ed46103e88461374b565b611edf90606f6135f0565b63ffffffff16815260208101919091526040016000908120805491611f0383613273565b9091555050600084815260a06020526040812090611f236127108461374b565b611f2f906104576135f0565b63ffffffff16815260208101919091526040016000908120805491611f5383613273565b9091555050609b805433600081815260a1602090815260408083208a8452825280832080546001818101835591855283852001869055948352609f909152902080546401000000009092027fffffffffffffffff00000000000000000000000000000000000000000000000090921663ffffffff909516949094171790925580548201905501611dae565b5081336001600160a01b03167fc7c1448de202b1838ad1d7fae75dbd69dc79f98d656f7b30f08dc451c9ab7ff8858460405161201b929190612f8d565b60405180910390a3505060018055505050565b609a5460016000828152609e602052604090205460ff166003811115612056576120566128b6565b146120735760405162461bcd60e51b815260040161055490613aec565b6000818152609e6020526040812060100180548492906120949084906131c2565b90915550506097546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906120cd90339030908790600401613afc565b6020604051808303816000875af11580156120ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121109190613003565b50807f1bbd659dd628a25f7ff2eabb69c74a56939c539728282275c1c9c1a2d3e3404983604051612141919061286f565b60405180910390a25050565b60606000609a5467ffffffffffffffff81111561216c5761216c61325d565b6040519080825280602002602001820160405280156121a557816020015b6121926127b9565b81526020019060019003908161218a5790505b50905060015b609a548111612357576000818152609e60205260409081902081516101a081019092528054829060ff1660038111156121e6576121e66128b6565b60038111156121f7576121f76128b6565b8152815460ff610100820416602083015263ffffffff62010000820481166040808501919091526601000000000000830482166060850152600160501b90920416608080840191909152600184015460a084015281519081019182905260c09092019190600284019060049082845b81548152602001906001019080831161226657505050918352505060408051608081019182905260209092019190600684019060049082845b81548152602001906001019080831161229f57505050918352505060408051608081019182905260209092019190600a84019060049082845b8154815260200190600101908083116122d8575050509183525050600e8201546020820152600f820154604082015260108201546060820152601190910154608090910152826123296001846131da565b8151811061233957612339613154565b6020026020010181905250808061234f90613273565b9150506121ab565b50919050565b6065546001600160a01b031633146123875760405162461bcd60e51b815260040161055490612f7d565b6099805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6065546001600160a01b031633146123e05760405162461bcd60e51b815260040161055490612f7d565b6001600160a01b0381166124065760405162461bcd60e51b815260040161055490613bc6565b61240f81612695565b50565b6124858282604051602401612428929190613c38565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f9710a9d00000000000000000000000000000000000000000000000000000000017905261272a565b5050565b6000818152609f6020908152604080832054858452609e9092529091205460049163ffffffff90811691600160501b90041660015b60048163ffffffff161161252e576124d781600a613728565b6124e1908461374b565b63ffffffff166124f282600a613728565b6124fc908461374b565b63ffffffff1603612519576125126001826135e0565b935061251e565b61252e565b61252781613c58565b90506124be565b50505092915050565b6000828152609f6020908152604080832054868452609e90925282205463ffffffff91821691600160501b90910416826125728560016135f0565b61257d90600a613728565b9050600061258b828461374b565b63ffffffff808816600090815260a260205260409020546125ad9291166135f0565b905060006125bb838661374b565b63ffffffff808916600090815260a260205260409020546125dd9291166135f0565b90508063ffffffff168263ffffffff1603612628576000898152609e6020526040902060060163ffffffff88166004811061261a5761261a613154565b015495505050505050612632565b6000955050505050505b9392505050565b600054610100900460ff166126605760405162461bcd60e51b815260040161055490613ccc565b610d4461274b565b600054610100900460ff1661268f5760405162461bcd60e51b815260040161055490613ccc565b60018055565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000612701826064613cdc565b61270c836062613cdc565b6127168486613589565b6127209190613589565b61263291906135be565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600054610100900460ff166127725760405162461bcd60e51b815260040161055490613ccc565b610d4433612695565b82600481019282156127a9579160200282015b828111156127a957823582559160200191906001019061278e565b506127b5929150612834565b5090565b604080516101a08101909152806000815260006020820181905260408201819052606082018190526080820181905260a082015260c0016127f8612849565b8152602001612805612849565b8152602001612812612849565b8152602001600081526020016000815260200160008152602001600081525090565b5b808211156127b55760008155600101612835565b60405180608001604052806004906020820280368337509192915050565b805b82525050565b602081016107198284612867565b805b811461240f57600080fd5b80356107198161287d565b6000602082840312156128aa576128aa600080fd5b6000610715848461288a565b634e487b7160e01b600052602160045260246000fd5b6004811061240f5761240f6128b6565b806128e6816128cc565b919050565b6000610719826128dc565b612869816128eb565b60ff8116612869565b63ffffffff8116612869565b6101408101612923828d6128f6565b612930602083018c6128ff565b61293d604083018b612908565b61294a606083018a612908565b6129576080830189612908565b61296460a0830188612867565b61297160c0830187612867565b61297e60e0830186612867565b61298c610100830185612867565b61299a610120830184612867565b9b9a5050505050505050505050565b602081016107198284612908565b600080604083850312156129cd576129cd600080fd5b60006129d9858561288a565b92505060206129ea8582860161288a565b9150509250929050565b60006001600160a01b038216610719565b61287f816129f4565b803561071981612a05565b60008060408385031215612a2f57612a2f600080fd5b60006129d98585612a0e565b60008060408385031215612a5157612a51600080fd5b6000612a5d8585612a0e565b92505060206129ea85828601612a0e565b612869816129f4565b60408101612a858285612908565b6126326020830184612a6e565b60008083601f840112612aa757612aa7600080fd5b50813567ffffffffffffffff811115612ac257612ac2600080fd5b602083019150836020820283011115612add57612add600080fd5b9250929050565b60008060208385031215612afa57612afa600080fd5b823567ffffffffffffffff811115612b1457612b14600080fd5b612b2085828601612a92565b92509250509250929050565b612b368282612908565b5060200190565b60200190565b6000612b4d825190565b808452602093840193830160005b82811015612b80578151612b6f8782612b2c565b965050602082019150600101612b5b565b5093949350505050565b602080825281016126328184612b43565b602081016107198284612a6e565b60006107196001600160a01b038316612bc0565b90565b6001600160a01b031690565b600061071982612ba9565b600061071982612bcc565b61286981612bd7565b602081016107198284612be2565b600060208284031215612c0e57612c0e600080fd5b60006107158484612a0e565b806080810183101561071957610719600080fd5b60008060008060e08587031215612c4757612c47600080fd5b6000612c53878761288a565b9450506020612c648782880161288a565b9350506040612c7587828801612c1a565b92505060c0612c868782880161288a565b91505092959194509250565b80151561287f565b803561071981612c92565b60008060408385031215612cbb57612cbb600080fd5b6000612cc7858561288a565b92505060206129ea85828601612c9a565b612b368282612867565b6000612cec825190565b808452602093840193830160005b82811015612b80578151612d0e8782612cd8565b965050602082019150600101612cfa565b602080825281016126328184612ce2565b600080600080600060608688031215612d4b57612d4b600080fd5b6000612d57888861288a565b955050602086013567ffffffffffffffff811115612d7757612d77600080fd5b612d8388828901612a92565b9450945050604086013567ffffffffffffffff811115612da557612da5600080fd5b612db188828901612a92565b92509250509295509295909350565b60048160005b82811015612deb578151612dda8682612cd8565b955050602082019150600101612dc6565b5050505050565b8051612dfe83826128f6565b506020810151612e1160208401826128ff565b506040810151612e246040840182612908565b506060810151612e376060840182612908565b506080810151612e4a6080840182612908565b5060a0810151612e5d60a0840182612867565b5060c0810151612e7060c0840182612dc0565b5060e0810151612e84610140840182612dc0565b50610100810151612e996101c0840182612dc0565b50610120810151612eae610240840182612867565b50610140810151612ec3610260840182612867565b50610160810151612ed8610280840182612867565b50610180810151610c356102a0840182612867565b612ef78282612df2565b506102c00190565b6000612f09825190565b808452602093840193830160005b82811015612b80578151612f2b8782612eed565b965050602082019150600101612f17565b602080825281016126328184612eff565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152612b3d565b6020808252810161071981612f4d565b60408101612f9b8285612867565b6126326020830184612867565b60158152602081017f43616e6e6f7420626520444547495320746f6b656e000000000000000000000081529050612b3d565b6020808252810161071981612fa8565b60408101612f9b8285612a6e565b805161071981612c92565b60006020828403121561301857613018600080fd5b60006107158484612ff8565b60148152602081017f436f6e7472616374206e6f7420616c6c6f77656400000000000000000000000081529050612b3d565b6020808252810161071981613024565b601a8152602081017f50726f787920636f6e7472616374206e6f7420616c6c6f77656400000000000081529050612b3d565b6020808252810161071981613066565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050612b3d565b60208082528101610719816130a8565b60308152602081017f7468697320726f756e64206f66206c6f747465727920617265206e6f7420726581527f61647920666f7220636c61696d696e6700000000000000000000000000000000602082015290505b60400190565b60208082528101610719816130ea565b634e487b7160e01b600052603260045260246000fd5b60148152602081017f4e6f7420746865207469636b6574206f776e657200000000000000000000000081529050612b3d565b602080825281016107198161316a565b634e487b7160e01b600052601160045260246000fd5b600082198211156131d5576131d56131ac565b500190565b815b91506000828210156131f0576131f06131ac565b500390565b602e8152602081017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181527f647920696e697469616c697a65640000000000000000000000000000000000006020820152905061313e565b60208082528101610719816131f5565b634e487b7160e01b600052604160045260246000fd5b600060018201613285576132856131ac565b5060010190565b60208082527f63757272656e74206c6f7474657279206973206e6f7420636c61696d61626c659101908152612b3d565b602080825281016107198161328c565b63ffffffff811661287f565b8051610719816132cc565b6000602082840312156132f8576132f8600080fd5b600061071584846132d8565b60228152602081017f74686973206c6f7474657279206973206e6f74206f70656e2063757272656e7481527f6c790000000000000000000000000000000000000000000000000000000000006020820152905061313e565b6020808252810161071981613304565b600c8152602081017f57726f6e6720737461747573000000000000000000000000000000000000000081529050612b3d565b602080825281016107198161336c565b60158152602081017f54726561737572792066656520746f6f2068696768000000000000000000000081529050612b3d565b60208082528101610719816133ae565b601a8152602081017f5265776172647320627265616b646f776e20746f6f206869676800000000000081529050612b3d565b60208082528101610719816133f0565b82818337506000910152565b61248560808383613432565b61010081016134598288612867565b6134666020830187612867565b6134736040830186612867565b613480606083018561343e565b61348d60e0830184612867565b9695505050505050565b60128152602081017f4c6f7474657279206e6f7420636c6f736564000000000000000000000000000081529050612b3d565b6020808252810161071981613497565b80516107198161287d565b6000602082840312156134f9576134f9600080fd5b600061071584846134d9565b60168152602081017f46696e616c206e756d626572206e6f7420647261776e0000000000000000000081529050612b3d565b6020808252810161071981613505565b60138152602081017f5472656173757279206973206e6f74207365740000000000000000000000000081529050612b3d565b6020808252810161071981613547565b60008160001904831182151516156135a3576135a36131ac565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826135cd576135cd6135a8565b500490565b61ffff9081169082166131dc565b63ffffffff9081169082166131dc565b63ffffffff8116905063ffffffff8216915060008263ffffffff038211156131d5576131d56131ac565b80825b600185111561365957808604811115613638576136386131ac565b600185161561364657908102905b80026136528560011c90565b945061361d565b94509492505050565b60008261367157506001612632565b8161367e57506000612632565b8160018114613694576002811461369e576136cb565b6001915050612632565b60ff8411156136af576136af6131ac565b8360020a9150848211156136c5576136c56131ac565b50612632565b5060208310610133831016604e8410600b84101617156136fe575081810a838111156136f9576136f96131ac565b612632565b61370b848484600161361a565b92509050818404811115613721576137216131ac565b0292915050565b63ffffffff8116905063ffffffff82169150600061263263ffffffff8484613662565b63ffffffff9182169116600082613764576137646135a8565b500690565b6000610719612bbd63ffffffff841681565b61286981613769565b60408101612f9b828561377b565b600d8152602081017f4e6f7420636c61696d61626c650000000000000000000000000000000000000081529050612b3d565b6020808252810161071981613792565b600f8152602081017f4e6f742073616d65206c656e677468000000000000000000000000000000000081529050612b3d565b60208082528101610719816137d4565b600a8152602081017f4e6f207469636b6574730000000000000000000000000000000000000000000081529050612b3d565b6020808252810161071981613816565b60198152602081017f546f6f206d616e79207469636b65747320746f20636c61696d0000000000000081529050612b3d565b6020808252810161071981613858565b60138152602081017f5469636b657420696420746f6f20736d616c6c0000000000000000000000000081529050612b3d565b602080825281016107198161389a565b60138152602081017f5469636b657420696420746f6f206c617267650000000000000000000000000081529050612b3d565b60208082528101610719816138dc565b60278152602081017f4e6f7420746865207469636b6574206f776e6572206f7220616c72656164792081527f636c61696d6564000000000000000000000000000000000000000000000000006020820152905061313e565b602080825281016107198161391e565b8035610719816132cc565b6000602082840312156139a6576139a6600080fd5b60006107158484613986565b60088152602081017f4e6f207072697a6500000000000000000000000000000000000000000000000081529050612b3d565b60208082528101610719816139b2565b60128152602081017f4f6e6c792068696768657374207072697a65000000000000000000000000000081529050612b3d565b60208082528101610719816139f4565b601b8152602081017f4e6f207469636b65747320617265206265696e6720626f75676874000000000081529050612b3d565b6020808252810161071981613a36565b60108152602081017f546f6f206d616e79207469636b6574730000000000000000000000000000000081529050612b3d565b6020808252810161071981613a78565b600e8152602081017f526f756e64206e6f74206f70656e00000000000000000000000000000000000081529050612b3d565b6020808252810161071981613aba565b60608101613b0a8286612a6e565b613b176020830185612a6e565b613b246040830184612867565b949350505050565b601e8152602081017f5469636b6574206e756d626572206973206f7574736964652072616e6765000081529050612b3d565b6020808252810161071981613b2c565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f64647265737300000000000000000000000000000000000000000000000000006020820152905061313e565b6020808252810161071981613b6e565b60005b83811015613bf1578181015183820152602001613bd9565b83811115613c00576000848401525b50505050565b6000613c10825190565b808452602084019350613c27818560208601613bd6565b601f01601f19169290920192915050565b60408082528101613c498185613c06565b90506126326020830184612867565b63ffffffff16600063fffffffe198201613285576132856131ac565b602b8152602081017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981527f6e697469616c697a696e670000000000000000000000000000000000000000006020820152905061313e565b6020808252810161071981613c74565b6000612632600019848461366256fea264697066735822122027d020a78acbaa027e7d5408230d7ec2a4a1d1224ba02b9a09ae8bc67702245e64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061020b5760003560e01c80636be4097c1161012a578063c6e761a9116100bd578063e359ebec1161008c578063f0f4426011610071578063f0f44260146104fb578063f2b3c8091461050e578063f2fde38b1461051757600080fd5b8063e359ebec146104d3578063e8589ac8146104e657600080fd5b8063c6e761a91461047a578063c914914f1461049a578063dcbad90d146104ad578063e1059fe5146104c057600080fd5b806398359fa1116100f957806398359fa11461042e5780639d8ca53114610441578063b3e3649b14610454578063c38de5391461046757600080fd5b80636be4097c14610403578063715018a61461040c5780637250e45d146104145780638da5cb5b1461041d57600080fd5b806344848a99116101a257806361d027b31161017157806361d027b3146103b2578063656f8a25146103d257806365dc59d6146103da578063686465b8146103fa57600080fd5b806344848a9914610325578063485cc9551461033857806350b447121461034b5780635b0d64c21461039257600080fd5b80631b6c743b116101de5780631b6c743b146102db5780631e6425fd146102ea5780632149485d146102ff5780633f138d4b1461031257600080fd5b80630ab2b0861461021057806312a9769d1461022f5780631398e0761461023857806314a0792f146102c5575b600080fd5b610219609c5481565b604051610226919061286f565b60405180910390f35b610219609d5481565b6102af610246366004612895565b609e60205260009081526040902080546001820154600e830154600f840154601085015460119095015460ff8086169661010087049091169563ffffffff62010000820481169666010000000000008304821696600160501b909304909116949093919290918a565b6040516102269a99989796959493929190612914565b6102ce61271081565b60405161022691906129a9565b610219678ac7230489e8000081565b6102fd6102f8366004612895565b61052a565b005b61021961030d3660046129b7565b61059d565b6102fd610320366004612a19565b61071f565b6102fd610333366004612895565b610826565b6102fd610346366004612a3b565b610ab3565b610384610359366004612895565b609f6020526000908152604090205463ffffffff81169064010000000090046001600160a01b031682565b604051610226929190612a77565b6103a56103a0366004612ae4565b610c3a565b6040516102269190612b8a565b6099546103c5906001600160a01b031681565b6040516102269190612b9b565b610219606281565b6097546103ed906001600160a01b031681565b6040516102269190612beb565b610219609b5481565b610219609a5481565b6102fd610d10565b6102ce614e1f81565b6065546001600160a01b03166103c5565b6102fd61043c366004612bf9565b610d46565b6102fd61044f366004612895565b610ec2565b6102fd610462366004612c2e565b611005565b6102fd610475366004612ca5565b611201565b61048d610488366004612a19565b611766565b6040516102269190612d1f565b6102fd6104a8366004612d30565b6117db565b6098546103ed906001600160a01b031681565b6102fd6104ce366004612ae4565b611c05565b6102fd6104e1366004612895565b61202e565b6104ee61214d565b6040516102269190612f3c565b6102fd610509366004612bf9565b61235d565b610219610bb881565b6102fd610525366004612bf9565b6123b6565b6065546001600160a01b0316331461055d5760405162461bcd60e51b815260040161055490612f7d565b60405180910390fd5b7f67d06ff5b9d79811174a2f0df6d9be98aa3b3f9ae311716140cb1b0668c11843609c5482604051610590929190612f8d565b60405180910390a1609c55565b600060036000848152609e602052604090205460ff1660038111156105c4576105c46128b6565b146105d157506000610719565b6106266040518060400160405280600481526020017f6964203100000000000000000000000000000000000000000000000000000000815250609e6000868152602001908152602001600020600f0154612412565b61067b6040518060400160405280600481526020017f6964203200000000000000000000000000000000000000000000000000000000815250609e6000868152602001908152602001600020600e0154612412565b6000838152609e60205260409020600f01548211806106aa57506000838152609e60205260409020600e015482105b156106b757506000610719565b60006106c38484612489565b905061070a6040518060400160405280601081526020017f68696768657374427261636b65743a20000000000000000000000000000000008152508263ffffffff16612412565b610715848483612537565b9150505b92915050565b6065546001600160a01b031633146107495760405162461bcd60e51b815260040161055490612f7d565b6097546001600160a01b03908116908316036107775760405162461bcd60e51b815260040161055490612fda565b60405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb906107a59033908590600401612fea565b6020604051808303816000875af11580156107c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e89190613003565b507f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab78129828260405161081a929190612fea565b60405180910390a15050565b333b156108455760405162461bcd60e51b815260040161055490613056565b3332146108645760405162461bcd60e51b815260040161055490613098565b6002600154036108865760405162461bcd60e51b8152600401610554906130da565b600260015560036000828152609e602052604090205460ff1660038111156108b0576108b06128b6565b146108cd5760405162461bcd60e51b815260040161055490613144565b6000805b33600090815260a1602090815260408083208684529091529020548110156109cc5733600090815260a160209081526040808320868452909152812080548390811061091f5761091f613154565b6000918252602080832090910154808352609f825260409283902083518085019094525463ffffffff811684526001600160a01b0364010000000090910416918301829052925033146109845760405162461bcd60e51b81526004016105549061319c565b60006109908684612489565b905060048163ffffffff1610156109be5760006109ae878584612537565b90506109ba81876131c2565b9550505b8360010193505050506108d1565b506000828152609e6020526040812060110180548392906109ee9084906131da565b909155505060975460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610a259033908590600401612fea565b6020604051808303816000875af1158015610a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a689190613003565b5081336001600160a01b03167f0fdeb33b5931b477077383757e0ba077bd3d8eddfa2cc711c54ad2d3a0cfac6583604051610aa3919061286f565b60405180910390a3505060018055565b600054610100900460ff16610ace5760005460ff1615610ad2565b303b155b610aee5760405162461bcd60e51b81526004016105549061324d565b600054610100900460ff16158015610b10576000805461ffff19166101011790555b610b18612639565b610b20612668565b609780546001600160a01b0380861673ffffffffffffffffffffffffffffffffffffffff19928316179092556098805492851692909116919091179055600a609c5560a26020527f8fa6f0ecb9543d3381552e96aa43533c7f086066e38816919ea0cfae371b342a805463ffffffff1990811660019081179092557f87286cc7b9cf8a377e677776b2644ce858185998d33108f493bdc3c2f07b983680548216600b1790557f984fb507cc15174c9c2666d8998832bf192b808658c1b8547c17c86e40ea581480548216606f17905560036000527f4ed878d3ddcb61d84861a74cb3bb4189ee298a8a85e8f1b99bcffb157f7e18848054909116610457179055609b558015610c35576000805461ff00191690555b505050565b60608160008167ffffffffffffffff811115610c5857610c5861325d565b604051908082528060200260200182016040528015610c81578160200160208202803683370190505b50905060005b82811015610d0757609f6000878784818110610ca557610ca5613154565b90506020020135815260200190815260200160002060000160009054906101000a900463ffffffff16828281518110610ce057610ce0613154565b63ffffffff9092166020928302919091019091015280610cff81613273565b915050610c87565b50949350505050565b6065546001600160a01b03163314610d3a5760405162461bcd60e51b815260040161055490612f7d565b610d446000612695565b565b6065546001600160a01b03163314610d705760405162461bcd60e51b815260040161055490612f7d565b6003609a546000908152609e602052604090205460ff166003811115610d9857610d986128b6565b14610db55760405162461bcd60e51b8152600401610554906132bc565b806001600160a01b031663dbdff2c16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610df057600080fd5b505af1158015610e04573d6000803e3d6000fd5b50505050806001600160a01b03166342619f666040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6a91906132e3565b506098805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f383f8cb39dfa7c3fb901a460dd449ea924868f0a92ff03da64740fffa5f1de6290600090a250565b6065546001600160a01b03163314610eec5760405162461bcd60e51b815260040161055490612f7d565b600260015403610f0e5760405162461bcd60e51b8152600401610554906130da565b600260019081556000828152609e602052604090205460ff166003811115610f3857610f386128b6565b14610f555760405162461bcd60e51b81526004016105549061335c565b609860009054906101000a90046001600160a01b03166001600160a01b031663dbdff2c16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610fa557600080fd5b505af1158015610fb9573d6000803e3d6000fd5b5050506000828152609e6020526040808220805460ff19166002179055518392507f8bc84e5d97533c428862626ac41fe7bc09b1ea2ed5e9e330d84092db8df153669190a25060018055565b6065546001600160a01b0316331461102f5760405162461bcd60e51b815260040161055490612f7d565b609a54158061106357506003609a546000908152609e602052604090205460ff166003811115611061576110616128b6565b145b61107f5760405162461bcd60e51b81526004016105549061339e565b610bb88111156110a15760405162461bcd60e51b8152600401610554906133e0565b612710606083013560408401356110bd602086013586356131c2565b6110c791906131c2565b6110d191906131c2565b11156110ef5760405162461bcd60e51b815260040161055490613422565b600080841161110657678ac7230489e80000611108565b835b90506000609a6000815461111b90613273565b91829055506000818152609e60205260409020805469ffffffffffffffff00ff1916620100004263ffffffff9081169190910269ffffffff0000000000001916919091176601000000000000918a16919091021760019081178255810184905590915061118d6002820186600461277b565b50805461ff00191661010060ff861602178155609d80546010830155609b54600e8301555460405183917f5e7c17be0c6c11472c23d5df180e5136efb90395ccff56f1fcfb8db6b5a0a235916111eb9142918c9189918c919061344a565b60405180910390a250506000609d555050505050565b6065546001600160a01b0316331461122b5760405162461bcd60e51b815260040161055490612f7d565b60026001540361124d5760405162461bcd60e51b8152600401610554906130da565b600260018190556000838152609e602052604090205460ff166003811115611277576112776128b6565b146112945760405162461bcd60e51b8152600401610554906134c9565b609860009054906101000a90046001600160a01b03166001600160a01b031663eed8e1ee6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130b91906134e4565b82146113295760405162461bcd60e51b815260040161055490613537565b6099546001600160a01b03166113515760405162461bcd60e51b815260040161055490613579565b609854604080517f42619f6600000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916342619f669160048083019260209291908290030181865afa1580156113b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d891906132e3565b6000848152609e60205260408120601081015492935091906127106113ff83611f40613589565b61140991906135be565b83549091506000906127109061142990610100900460ff166107d06135d2565b6114379061ffff1685613589565b61144191906135be565b905060008161145084866131da565b61145a91906131da565b90506000805b60048163ffffffff16101561165b57600061147c8260036135e0565b9050600061148b8260016135f0565b61149690600a613728565b6114a0908b61374b565b63ffffffff808416600090815260a260205260409020546114c29291166135f0565b60008d815260a06020908152604080832063ffffffff851684529091529020549091506114ef85826131da565b8a600a018463ffffffff166004811061150a5761150a613154565b01558085146115ee57896002018363ffffffff166004811061152e5761152e613154565b0154156115e95761271061154286836131da565b898c6002018663ffffffff166004811061155e5761155e613154565b015461156a9190613589565b61157491906135be565b61157e91906135be565b8a6006018463ffffffff166004811061159957611599613154565b01556127108860028c0163ffffffff8616600481106115ba576115ba613154565b01546115c69190613589565b6115d091906135be565b8a60110160008282546115e391906131c2565b90915550505b61164f565b60008a6006018463ffffffff166004811061160b5761160b613154565b01556127108860028c0163ffffffff86166004811061162c5761162c613154565b01546116389190613589565b61164291906135be565b61164c90876131c2565b95505b93505050600101611460565b5085546dffffffff000000000000000000ff191660ff19600160501b63ffffffff8a160216176003178655609b54600f870155871561169a57609d8390555b811561171b5760975460995460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926116d6929116908690600401612fea565b6020604051808303816000875af11580156116f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117199190613003565b505b609a547f98e31a6607b8b15b4d5b91de54f4c09ffe4c4cf162aa532c70b5213754e2e703888360405161174f929190613784565b60405180910390a250506001805550505050505050565b6001600160a01b038216600090815260a16020908152604080832084845282528083208054825181850281018501909352808352606094938301828280156117cd57602002820191906000526020600020905b8154815260200190600101908083116117b9575b509398975050505050505050565b333b156117fa5760405162461bcd60e51b815260040161055490613056565b3332146118195760405162461bcd60e51b815260040161055490613098565b60026001540361183b5760405162461bcd60e51b8152600401610554906130da565b600260015560036000868152609e602052604090205460ff166003811115611865576118656128b6565b146118825760405162461bcd60e51b8152600401610554906137c4565b828181146118a25760405162461bcd60e51b815260040161055490613806565b600081116118c25760405162461bcd60e51b815260040161055490613848565b609c548111156118e45760405162461bcd60e51b81526004016105549061388a565b6000805b82811015611adb57600087878381811061190457611904613154565b905060200201359050609e60008a8152602001908152602001600020600e01548110156119435760405162461bcd60e51b8152600401610554906138cc565b6000898152609e60205260409020600f01548111156119745760405162461bcd60e51b81526004016105549061390e565b6000818152609f602052604090205464010000000090046001600160a01b031633146119b25760405162461bcd60e51b815260040161055490613976565b6000818152609f6020526040812080547fffffffffffffffff0000000000000000000000000000000000000000ffffffff169055611a178a838989878181106119fd576119fd613154565b9050602002016020810190611a129190613991565b612537565b905060008111611a395760405162461bcd60e51b8152600401610554906139e4565b6003878785818110611a4d57611a4d613154565b9050602002016020810190611a629190613991565b63ffffffff161015611ac257611aa58a83898987818110611a8557611a85613154565b9050602002016020810190611a9a9190613991565b611a129060016135f0565b15611ac25760405162461bcd60e51b815260040161055490613a26565b611acc81856131c2565b935082600101925050506118e8565b506000878152609e602052604081206011018054839290611afd9084906131da565b909155505060408051808201909152601481527f72657761726420746f207472616e73616665723a0000000000000000000000006020820152611b409082612412565b60975460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611b729033908590600401612fea565b6020604051808303816000875af1158015611b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb59190613003565b5086336001600160a01b03167f0fdeb33b5931b477077383757e0ba077bd3d8eddfa2cc711c54ad2d3a0cfac6583604051611bf0919061286f565b60405180910390a35050600180555050505050565b333b15611c245760405162461bcd60e51b815260040161055490613056565b333214611c435760405162461bcd60e51b815260040161055490613098565b600260015403611c655760405162461bcd60e51b8152600401610554906130da565b60026001558080611c885760405162461bcd60e51b815260040161055490613a68565b609c54811115611caa5760405162461bcd60e51b815260040161055490613aaa565b609a5460016000828152609e602052604090205460ff166003811115611cd257611cd26128b6565b14611cef5760405162461bcd60e51b815260040161055490613aec565b6000818152609e6020526040812060010154611d0b90846126f4565b6097546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd90611d4090339030908690600401613afc565b6020604051808303816000875af1158015611d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d839190613003565b506000828152609e602052604081206010018054839290611da59084906131c2565b90915550600090505b83811015611fde576000868683818110611dca57611dca613154565b9050602002016020810190611ddf9190613991565b905061271063ffffffff821610801590611e015750614e1f63ffffffff821611155b611e1d5760405162461bcd60e51b815260040161055490613b5e565b600084815260a06020526040812090611e37600a8461374b565b611e429060016135f0565b63ffffffff16815260208101919091526040016000908120805491611e6683613273565b9091555050600084815260a06020526040812090611e8560648461374b565b611e9090600b6135f0565b63ffffffff16815260208101919091526040016000908120805491611eb483613273565b9091555050600084815260a06020526040812090611ed46103e88461374b565b611edf90606f6135f0565b63ffffffff16815260208101919091526040016000908120805491611f0383613273565b9091555050600084815260a06020526040812090611f236127108461374b565b611f2f906104576135f0565b63ffffffff16815260208101919091526040016000908120805491611f5383613273565b9091555050609b805433600081815260a1602090815260408083208a8452825280832080546001818101835591855283852001869055948352609f909152902080546401000000009092027fffffffffffffffff00000000000000000000000000000000000000000000000090921663ffffffff909516949094171790925580548201905501611dae565b5081336001600160a01b03167fc7c1448de202b1838ad1d7fae75dbd69dc79f98d656f7b30f08dc451c9ab7ff8858460405161201b929190612f8d565b60405180910390a3505060018055505050565b609a5460016000828152609e602052604090205460ff166003811115612056576120566128b6565b146120735760405162461bcd60e51b815260040161055490613aec565b6000818152609e6020526040812060100180548492906120949084906131c2565b90915550506097546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906120cd90339030908790600401613afc565b6020604051808303816000875af11580156120ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121109190613003565b50807f1bbd659dd628a25f7ff2eabb69c74a56939c539728282275c1c9c1a2d3e3404983604051612141919061286f565b60405180910390a25050565b60606000609a5467ffffffffffffffff81111561216c5761216c61325d565b6040519080825280602002602001820160405280156121a557816020015b6121926127b9565b81526020019060019003908161218a5790505b50905060015b609a548111612357576000818152609e60205260409081902081516101a081019092528054829060ff1660038111156121e6576121e66128b6565b60038111156121f7576121f76128b6565b8152815460ff610100820416602083015263ffffffff62010000820481166040808501919091526601000000000000830482166060850152600160501b90920416608080840191909152600184015460a084015281519081019182905260c09092019190600284019060049082845b81548152602001906001019080831161226657505050918352505060408051608081019182905260209092019190600684019060049082845b81548152602001906001019080831161229f57505050918352505060408051608081019182905260209092019190600a84019060049082845b8154815260200190600101908083116122d8575050509183525050600e8201546020820152600f820154604082015260108201546060820152601190910154608090910152826123296001846131da565b8151811061233957612339613154565b6020026020010181905250808061234f90613273565b9150506121ab565b50919050565b6065546001600160a01b031633146123875760405162461bcd60e51b815260040161055490612f7d565b6099805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6065546001600160a01b031633146123e05760405162461bcd60e51b815260040161055490612f7d565b6001600160a01b0381166124065760405162461bcd60e51b815260040161055490613bc6565b61240f81612695565b50565b6124858282604051602401612428929190613c38565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f9710a9d00000000000000000000000000000000000000000000000000000000017905261272a565b5050565b6000818152609f6020908152604080832054858452609e9092529091205460049163ffffffff90811691600160501b90041660015b60048163ffffffff161161252e576124d781600a613728565b6124e1908461374b565b63ffffffff166124f282600a613728565b6124fc908461374b565b63ffffffff1603612519576125126001826135e0565b935061251e565b61252e565b61252781613c58565b90506124be565b50505092915050565b6000828152609f6020908152604080832054868452609e90925282205463ffffffff91821691600160501b90910416826125728560016135f0565b61257d90600a613728565b9050600061258b828461374b565b63ffffffff808816600090815260a260205260409020546125ad9291166135f0565b905060006125bb838661374b565b63ffffffff808916600090815260a260205260409020546125dd9291166135f0565b90508063ffffffff168263ffffffff1603612628576000898152609e6020526040902060060163ffffffff88166004811061261a5761261a613154565b015495505050505050612632565b6000955050505050505b9392505050565b600054610100900460ff166126605760405162461bcd60e51b815260040161055490613ccc565b610d4461274b565b600054610100900460ff1661268f5760405162461bcd60e51b815260040161055490613ccc565b60018055565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000612701826064613cdc565b61270c836062613cdc565b6127168486613589565b6127209190613589565b61263291906135be565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600054610100900460ff166127725760405162461bcd60e51b815260040161055490613ccc565b610d4433612695565b82600481019282156127a9579160200282015b828111156127a957823582559160200191906001019061278e565b506127b5929150612834565b5090565b604080516101a08101909152806000815260006020820181905260408201819052606082018190526080820181905260a082015260c0016127f8612849565b8152602001612805612849565b8152602001612812612849565b8152602001600081526020016000815260200160008152602001600081525090565b5b808211156127b55760008155600101612835565b60405180608001604052806004906020820280368337509192915050565b805b82525050565b602081016107198284612867565b805b811461240f57600080fd5b80356107198161287d565b6000602082840312156128aa576128aa600080fd5b6000610715848461288a565b634e487b7160e01b600052602160045260246000fd5b6004811061240f5761240f6128b6565b806128e6816128cc565b919050565b6000610719826128dc565b612869816128eb565b60ff8116612869565b63ffffffff8116612869565b6101408101612923828d6128f6565b612930602083018c6128ff565b61293d604083018b612908565b61294a606083018a612908565b6129576080830189612908565b61296460a0830188612867565b61297160c0830187612867565b61297e60e0830186612867565b61298c610100830185612867565b61299a610120830184612867565b9b9a5050505050505050505050565b602081016107198284612908565b600080604083850312156129cd576129cd600080fd5b60006129d9858561288a565b92505060206129ea8582860161288a565b9150509250929050565b60006001600160a01b038216610719565b61287f816129f4565b803561071981612a05565b60008060408385031215612a2f57612a2f600080fd5b60006129d98585612a0e565b60008060408385031215612a5157612a51600080fd5b6000612a5d8585612a0e565b92505060206129ea85828601612a0e565b612869816129f4565b60408101612a858285612908565b6126326020830184612a6e565b60008083601f840112612aa757612aa7600080fd5b50813567ffffffffffffffff811115612ac257612ac2600080fd5b602083019150836020820283011115612add57612add600080fd5b9250929050565b60008060208385031215612afa57612afa600080fd5b823567ffffffffffffffff811115612b1457612b14600080fd5b612b2085828601612a92565b92509250509250929050565b612b368282612908565b5060200190565b60200190565b6000612b4d825190565b808452602093840193830160005b82811015612b80578151612b6f8782612b2c565b965050602082019150600101612b5b565b5093949350505050565b602080825281016126328184612b43565b602081016107198284612a6e565b60006107196001600160a01b038316612bc0565b90565b6001600160a01b031690565b600061071982612ba9565b600061071982612bcc565b61286981612bd7565b602081016107198284612be2565b600060208284031215612c0e57612c0e600080fd5b60006107158484612a0e565b806080810183101561071957610719600080fd5b60008060008060e08587031215612c4757612c47600080fd5b6000612c53878761288a565b9450506020612c648782880161288a565b9350506040612c7587828801612c1a565b92505060c0612c868782880161288a565b91505092959194509250565b80151561287f565b803561071981612c92565b60008060408385031215612cbb57612cbb600080fd5b6000612cc7858561288a565b92505060206129ea85828601612c9a565b612b368282612867565b6000612cec825190565b808452602093840193830160005b82811015612b80578151612d0e8782612cd8565b965050602082019150600101612cfa565b602080825281016126328184612ce2565b600080600080600060608688031215612d4b57612d4b600080fd5b6000612d57888861288a565b955050602086013567ffffffffffffffff811115612d7757612d77600080fd5b612d8388828901612a92565b9450945050604086013567ffffffffffffffff811115612da557612da5600080fd5b612db188828901612a92565b92509250509295509295909350565b60048160005b82811015612deb578151612dda8682612cd8565b955050602082019150600101612dc6565b5050505050565b8051612dfe83826128f6565b506020810151612e1160208401826128ff565b506040810151612e246040840182612908565b506060810151612e376060840182612908565b506080810151612e4a6080840182612908565b5060a0810151612e5d60a0840182612867565b5060c0810151612e7060c0840182612dc0565b5060e0810151612e84610140840182612dc0565b50610100810151612e996101c0840182612dc0565b50610120810151612eae610240840182612867565b50610140810151612ec3610260840182612867565b50610160810151612ed8610280840182612867565b50610180810151610c356102a0840182612867565b612ef78282612df2565b506102c00190565b6000612f09825190565b808452602093840193830160005b82811015612b80578151612f2b8782612eed565b965050602082019150600101612f17565b602080825281016126328184612eff565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152612b3d565b6020808252810161071981612f4d565b60408101612f9b8285612867565b6126326020830184612867565b60158152602081017f43616e6e6f7420626520444547495320746f6b656e000000000000000000000081529050612b3d565b6020808252810161071981612fa8565b60408101612f9b8285612a6e565b805161071981612c92565b60006020828403121561301857613018600080fd5b60006107158484612ff8565b60148152602081017f436f6e7472616374206e6f7420616c6c6f77656400000000000000000000000081529050612b3d565b6020808252810161071981613024565b601a8152602081017f50726f787920636f6e7472616374206e6f7420616c6c6f77656400000000000081529050612b3d565b6020808252810161071981613066565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050612b3d565b60208082528101610719816130a8565b60308152602081017f7468697320726f756e64206f66206c6f747465727920617265206e6f7420726581527f61647920666f7220636c61696d696e6700000000000000000000000000000000602082015290505b60400190565b60208082528101610719816130ea565b634e487b7160e01b600052603260045260246000fd5b60148152602081017f4e6f7420746865207469636b6574206f776e657200000000000000000000000081529050612b3d565b602080825281016107198161316a565b634e487b7160e01b600052601160045260246000fd5b600082198211156131d5576131d56131ac565b500190565b815b91506000828210156131f0576131f06131ac565b500390565b602e8152602081017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181527f647920696e697469616c697a65640000000000000000000000000000000000006020820152905061313e565b60208082528101610719816131f5565b634e487b7160e01b600052604160045260246000fd5b600060018201613285576132856131ac565b5060010190565b60208082527f63757272656e74206c6f7474657279206973206e6f7420636c61696d61626c659101908152612b3d565b602080825281016107198161328c565b63ffffffff811661287f565b8051610719816132cc565b6000602082840312156132f8576132f8600080fd5b600061071584846132d8565b60228152602081017f74686973206c6f7474657279206973206e6f74206f70656e2063757272656e7481527f6c790000000000000000000000000000000000000000000000000000000000006020820152905061313e565b6020808252810161071981613304565b600c8152602081017f57726f6e6720737461747573000000000000000000000000000000000000000081529050612b3d565b602080825281016107198161336c565b60158152602081017f54726561737572792066656520746f6f2068696768000000000000000000000081529050612b3d565b60208082528101610719816133ae565b601a8152602081017f5265776172647320627265616b646f776e20746f6f206869676800000000000081529050612b3d565b60208082528101610719816133f0565b82818337506000910152565b61248560808383613432565b61010081016134598288612867565b6134666020830187612867565b6134736040830186612867565b613480606083018561343e565b61348d60e0830184612867565b9695505050505050565b60128152602081017f4c6f7474657279206e6f7420636c6f736564000000000000000000000000000081529050612b3d565b6020808252810161071981613497565b80516107198161287d565b6000602082840312156134f9576134f9600080fd5b600061071584846134d9565b60168152602081017f46696e616c206e756d626572206e6f7420647261776e0000000000000000000081529050612b3d565b6020808252810161071981613505565b60138152602081017f5472656173757279206973206e6f74207365740000000000000000000000000081529050612b3d565b6020808252810161071981613547565b60008160001904831182151516156135a3576135a36131ac565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826135cd576135cd6135a8565b500490565b61ffff9081169082166131dc565b63ffffffff9081169082166131dc565b63ffffffff8116905063ffffffff8216915060008263ffffffff038211156131d5576131d56131ac565b80825b600185111561365957808604811115613638576136386131ac565b600185161561364657908102905b80026136528560011c90565b945061361d565b94509492505050565b60008261367157506001612632565b8161367e57506000612632565b8160018114613694576002811461369e576136cb565b6001915050612632565b60ff8411156136af576136af6131ac565b8360020a9150848211156136c5576136c56131ac565b50612632565b5060208310610133831016604e8410600b84101617156136fe575081810a838111156136f9576136f96131ac565b612632565b61370b848484600161361a565b92509050818404811115613721576137216131ac565b0292915050565b63ffffffff8116905063ffffffff82169150600061263263ffffffff8484613662565b63ffffffff9182169116600082613764576137646135a8565b500690565b6000610719612bbd63ffffffff841681565b61286981613769565b60408101612f9b828561377b565b600d8152602081017f4e6f7420636c61696d61626c650000000000000000000000000000000000000081529050612b3d565b6020808252810161071981613792565b600f8152602081017f4e6f742073616d65206c656e677468000000000000000000000000000000000081529050612b3d565b60208082528101610719816137d4565b600a8152602081017f4e6f207469636b6574730000000000000000000000000000000000000000000081529050612b3d565b6020808252810161071981613816565b60198152602081017f546f6f206d616e79207469636b65747320746f20636c61696d0000000000000081529050612b3d565b6020808252810161071981613858565b60138152602081017f5469636b657420696420746f6f20736d616c6c0000000000000000000000000081529050612b3d565b602080825281016107198161389a565b60138152602081017f5469636b657420696420746f6f206c617267650000000000000000000000000081529050612b3d565b60208082528101610719816138dc565b60278152602081017f4e6f7420746865207469636b6574206f776e6572206f7220616c72656164792081527f636c61696d6564000000000000000000000000000000000000000000000000006020820152905061313e565b602080825281016107198161391e565b8035610719816132cc565b6000602082840312156139a6576139a6600080fd5b60006107158484613986565b60088152602081017f4e6f207072697a6500000000000000000000000000000000000000000000000081529050612b3d565b60208082528101610719816139b2565b60128152602081017f4f6e6c792068696768657374207072697a65000000000000000000000000000081529050612b3d565b60208082528101610719816139f4565b601b8152602081017f4e6f207469636b65747320617265206265696e6720626f75676874000000000081529050612b3d565b6020808252810161071981613a36565b60108152602081017f546f6f206d616e79207469636b6574730000000000000000000000000000000081529050612b3d565b6020808252810161071981613a78565b600e8152602081017f526f756e64206e6f74206f70656e00000000000000000000000000000000000081529050612b3d565b6020808252810161071981613aba565b60608101613b0a8286612a6e565b613b176020830185612a6e565b613b246040830184612867565b949350505050565b601e8152602081017f5469636b6574206e756d626572206973206f7574736964652072616e6765000081529050612b3d565b6020808252810161071981613b2c565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f64647265737300000000000000000000000000000000000000000000000000006020820152905061313e565b6020808252810161071981613b6e565b60005b83811015613bf1578181015183820152602001613bd9565b83811115613c00576000848401525b50505050565b6000613c10825190565b808452602084019350613c27818560208601613bd6565b601f01601f19169290920192915050565b60408082528101613c498185613c06565b90506126326020830184612867565b63ffffffff16600063fffffffe198201613285576132856131ac565b602b8152602081017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981527f6e697469616c697a696e670000000000000000000000000000000000000000006020820152905061313e565b6020808252810161071981613c74565b6000612632600019848461366256fea264697066735822122027d020a78acbaa027e7d5408230d7ec2a4a1d1224ba02b9a09ae8bc67702245e64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyTickets(uint32[])": {
        "details": "Need to transfer the 4-digit number to a 5-digit number to be used here (+10000)      Can not be called by a smart contract      Can only purchase in the current round",
        "params": {
          "_ticketNumbers": "Array of ticket numbers between 10,000 and 19,999"
        }
      },
      "changeRandomGenerator(address)": {
        "details": "The calls to functions are used to verify the new generator implements them properly. It is necessary to wait for the VRF response before starting a round. Callable only by the contract owner",
        "params": {
          "_randomGeneratorAddress": "address of the random generator"
        }
      },
      "claimAllTickets(uint256)": {
        "details": "Callable by users only, not contract      Gas cost may be oversized, recommended to get brackets offchain first",
        "params": {
          "_lotteryId": "Lottery id"
        }
      },
      "claimTickets(uint256,uint256[],uint32[])": {
        "details": "Callable by users only, not contract",
        "params": {
          "_brackets": "Bracket / prize level of each ticket",
          "_lotteryId": "Lottery id",
          "_ticketIds": "Array of ticket ids"
        }
      },
      "closeLottery(uint256)": {
        "details": "Callable only by the owner",
        "params": {
          "_lotteryId": "lottery round"
        }
      },
      "drawFinalNumberAndMakeLotteryClaimable(uint256,bool)": {
        "params": {
          "_autoInjection": "Auto inject funds into next lottery",
          "_lotteryId": "Lottery round"
        }
      },
      "initialize(address,address)": {
        "details": "RandomNumberGenerator must be deployed prior to this contract",
        "params": {
          "_degis": "Address of DEG",
          "_randomGenerator": "Address of the RandomGenerator contract used to work with ChainLink VRF"
        }
      },
      "injectFunds(uint256)": {
        "params": {
          "_amount": "Amount to inject"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverWrongTokens(address,uint256)": {
        "params": {
          "_tokenAddress": "the address of the token to withdraw",
          "_tokenAmount": "token amount to withdraw"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMaxNumberTicketsEachTime(uint256)": {
        "params": {
          "_maxNumber": "Max number each time"
        }
      },
      "setTreasury(address)": {
        "params": {
          "_treasury": "wallet address"
        }
      },
      "startLottery(uint256,uint256,uint256[4],uint256)": {
        "params": {
          "_endTime": "EndTime of the lottery",
          "_fee": "Treasury fee (10,000 = 100%, 100 = 1%) (set as 0)",
          "_rewardsBreakdown": "Breakdown of rewards per bracket (must sum to 10,000)(100 <=> 1)",
          "_ticketPrice": "Price of each ticket without discount"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "viewAllLottery()": {
        "returns": {
          "_0": "Array of all lottery information"
        }
      },
      "viewNumbersPerTicketId(uint256[])": {
        "params": {
          "_ticketIds": ": array of _ticketId"
        }
      },
      "viewRewardsForTicketId(uint256,uint256)": {
        "details": "This function will help to find the highest prize bracket      But this computation is encouraged to be done off-chain      Better to get bracket first and then call \"_calculateRewardsForTicketId()\"",
        "params": {
          "_lotteryId": "Lottery round",
          "_ticketId": "Ticket id"
        },
        "returns": {
          "_0": "reward Ticket reward"
        }
      },
      "viewWalletTicketIds(address,uint256)": {
        "params": {
          "_wallet": "address to check owned tickets"
        },
        "returns": {
          "_0": "_lotteryId lottery id to verify ownership"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyTickets(uint32[])": {
        "notice": "Buy tickets for the current lottery round"
      },
      "changeRandomGenerator(address)": {
        "notice": "Change the random generator contract address"
      },
      "claimAllTickets(uint256)": {
        "notice": "Claim all winning tickets for a lottery round"
      },
      "claimTickets(uint256,uint256[],uint32[])": {
        "notice": "Claim winning tickets"
      },
      "closeLottery(uint256)": {
        "notice": "Close a lottery"
      },
      "drawFinalNumberAndMakeLotteryClaimable(uint256,bool)": {
        "notice": "Draw the final number, calculate reward in Degis for each group, and make this lottery claimable (need to wait for the random generator)"
      },
      "initialize(address,address)": {
        "notice": "Initialize function"
      },
      "injectFunds(uint256)": {
        "notice": "Inject funds"
      },
      "recoverWrongTokens(address,uint256)": {
        "notice": "Recover wrong tokens sent to the contract, only by the owner All tokens except Degis and USDC are wrong tokens"
      },
      "setMaxNumberTicketsEachTime(uint256)": {
        "notice": "Set max number can buy/claim/redeem each time"
      },
      "setTreasury(address)": {
        "notice": "Set treasury wallet address"
      },
      "startLottery(uint256,uint256,uint256[4],uint256)": {
        "notice": "Start the lottery"
      },
      "viewAllLottery()": {
        "notice": "View all lottery information"
      },
      "viewNumbersPerTicketId(uint256[])": {
        "notice": "View ticker statuses and numbers for an array of ticket ids"
      },
      "viewRewardsForTicketId(uint256,uint256)": {
        "notice": "View rewards for a given ticket in a given lottery round"
      },
      "viewWalletTicketIds(address,uint256)": {
        "notice": "Get the reward per ticket in 4 brackets"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2523,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2526,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2715,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2759,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3760,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2403,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 2515,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 22138,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "DegisToken",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IERC20)5363"
      },
      {
        "astId": 22141,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "randomGenerator",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IRandomNumberGenerator)24481"
      },
      {
        "astId": 22143,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "treasury",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 22145,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "currentLotteryId",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 22147,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "currentTicketId",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 22149,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "maxNumberTicketsEachTime",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 22151,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "pendingInjectionNextLottery",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 22195,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "lotteries",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_uint256,t_struct(Lottery)22190_storage)"
      },
      {
        "astId": 22205,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "tickets",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_uint256,t_struct(Ticket)22200_storage)"
      },
      {
        "astId": 22211,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "_numberTicketsPerLotteryId",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_uint256,t_mapping(t_uint32,t_uint256))"
      },
      {
        "astId": 22218,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "_userTicketIds",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 22222,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "_bracketCalculator",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_uint32,t_uint32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)5363": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRandomNumberGenerator)24481": {
        "encoding": "inplace",
        "label": "contract IRandomNumberGenerator",
        "numberOfBytes": "20"
      },
      "t_enum(Status)22156": {
        "encoding": "inplace",
        "label": "enum DegisLotteryV2.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Lottery)22190_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DegisLotteryV2.Lottery)",
        "numberOfBytes": "32",
        "value": "t_struct(Lottery)22190_storage"
      },
      "t_mapping(t_uint256,t_struct(Ticket)22200_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DegisLotteryV2.Ticket)",
        "numberOfBytes": "32",
        "value": "t_struct(Ticket)22200_storage"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_struct(Lottery)22190_storage": {
        "encoding": "inplace",
        "label": "struct DegisLotteryV2.Lottery",
        "members": [
          {
            "astId": 22159,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Status)22156"
          },
          {
            "astId": 22161,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "treasuryFee",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 22163,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "startTime",
            "offset": 2,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 22165,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "endTime",
            "offset": 6,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 22167,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "finalNumber",
            "offset": 10,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 22169,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "ticketPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 22173,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "rewardsBreakdown",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 22177,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "rewardPerTicketInBracket",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 22181,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "countWinnersPerBracket",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 22183,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "firstTicketId",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 22185,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "firstTicketIdNextRound",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 22187,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "amountCollected",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          },
          {
            "astId": 22189,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "pendingRewards",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "576"
      },
      "t_struct(Ticket)22200_storage": {
        "encoding": "inplace",
        "label": "struct DegisLotteryV2.Ticket",
        "members": [
          {
            "astId": 22197,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 22199,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "owner",
            "offset": 4,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}