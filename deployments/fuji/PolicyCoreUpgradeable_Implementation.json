{
  "address": "0xA7cB7152eB4a207Af3d3b6FD5c4dda45db6b5B06",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "policyTokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DelegateDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "policyTokenName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isHappened",
          "type": "bool"
        }
      ],
      "name": "FinalResultSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldILM",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newILM",
          "type": "address"
        }
      ],
      "name": "ILMChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldIncomeSharing",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newIncomeSharing",
          "type": "address"
        }
      ],
      "name": "IncomeSharingChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldToLottery",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newToLottery",
          "type": "uint256"
        }
      ],
      "name": "IncomeToLotteryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLotteryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLotteryAddress",
          "type": "address"
        }
      ],
      "name": "LotteryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRouter",
          "type": "address"
        }
      ],
      "name": "NaughtyRouterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newStablecoin",
          "type": "address"
        }
      ],
      "name": "NewStablecoinAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenDecimals",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "settleTimestamp",
          "type": "uint256"
        }
      ],
      "name": "PolicyTokenDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "policyTokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stopIndex",
          "type": "uint256"
        }
      ],
      "name": "PolicyTokensSettledForUsers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "policyTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        }
      ],
      "name": "PoolDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "policyTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initLiquidityA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initLiquidityB",
          "type": "uint256"
        }
      ],
      "name": "PoolDeployedWithInitialLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "policyTokenName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "policyTokenName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RedeemAfterSettlement",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "policyTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UpdateUserQuota",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ILMContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isCall",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_round",
          "type": "string"
        }
      ],
      "name": "_generateName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStablecoin",
          "type": "address"
        }
      ],
      "name": "addStablecoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allDepositors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPolicyTokens",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        }
      ],
      "name": "collectIncome",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "delegateDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isCall",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_nameDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_round",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_settleTimestamp",
          "type": "uint256"
        }
      ],
      "name": "deployPolicyToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeRate",
          "type": "uint256"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract INaughtyFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        }
      ],
      "name": "findAddressbyName",
      "outputs": [
        {
          "internalType": "address",
          "name": "policyTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyTokenAddress",
          "type": "address"
        }
      ],
      "name": "findNamebyAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "policyTokenName",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "policyTokenAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isCall",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "nameDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strikePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "settleTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct PolicyCore.PolicyTokenInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        }
      ],
      "name": "getPolicyTokenInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "policyTokenAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isCall",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "nameDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strikePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "settleTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct PolicyCore.PolicyTokenInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_policyTokenAddress",
          "type": "address"
        }
      ],
      "name": "getUserQuota",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_quota",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incomeSharing",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceGetter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lottery",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "naughtyRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingIncomeToLottery",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingIncomeToSharing",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "policyTokenAddressToName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "policyTokenInfoMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "policyTokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isCall",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "nameDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "settleTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceGetter",
      "outputs": [
        {
          "internalType": "contract IPriceGetter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        }
      ],
      "name": "redeemAfterSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ILM",
          "type": "address"
        }
      ],
      "name": "setILMContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_incomeSharing",
          "type": "address"
        }
      ],
      "name": "setIncomeSharing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toLottery",
          "type": "uint256"
        }
      ],
      "name": "setIncomeToLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lotteryAddress",
          "type": "address"
        }
      ],
      "name": "setLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setNaughtyRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stopIndex",
          "type": "uint256"
        }
      ],
      "name": "settleAllPolicyTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        }
      ],
      "name": "settleFinalResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "settleResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isHappened",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "alreadySettled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "currentDistributionIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedStablecoin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toLotteryPart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_policyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "updateUserQuota",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whichStablecoin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9fcbcd3f467b3c47746b1d7b4dd143ae413ea60a39beec2b180d08e2b39590e3",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0xA7cB7152eB4a207Af3d3b6FD5c4dda45db6b5B06",
    "transactionIndex": 2,
    "gasUsed": "4142076",
    "logsBloom": "0x
    "blockHash": "0xf43c6a361c7479fd96757644f01f4f6ec67e7f34d485c5fa63d4452dfbecb964",
    "transactionHash": "0x9fcbcd3f467b3c47746b1d7b4dd143ae413ea60a39beec2b180d08e2b39590e3",
    "logs": [],
    "blockNumber": 9459341,
    "cumulativeGasUsed": "5064532",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dac4e5fe3f0ddff2793c693a8a6aab18",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"policyTokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DelegateDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"policyTokenName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isHappened\",\"type\":\"bool\"}],\"name\":\"FinalResultSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldILM\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newILM\",\"type\":\"address\"}],\"name\":\"ILMChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldIncomeSharing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newIncomeSharing\",\"type\":\"address\"}],\"name\":\"IncomeSharingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldToLottery\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newToLottery\",\"type\":\"uint256\"}],\"name\":\"IncomeToLotteryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLotteryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLotteryAddress\",\"type\":\"address\"}],\"name\":\"LotteryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"NaughtyRouterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newStablecoin\",\"type\":\"address\"}],\"name\":\"NewStablecoinAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settleTimestamp\",\"type\":\"uint256\"}],\"name\":\"PolicyTokenDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"policyTokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stopIndex\",\"type\":\"uint256\"}],\"name\":\"PolicyTokensSettledForUsers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"policyTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"}],\"name\":\"PoolDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"policyTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initLiquidityA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initLiquidityB\",\"type\":\"uint256\"}],\"name\":\"PoolDeployedWithInitialLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"policyTokenName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"policyTokenName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemAfterSettlement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"policyTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateUserQuota\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ILMContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isCall\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_round\",\"type\":\"string\"}],\"name\":\"_generateName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStablecoin\",\"type\":\"address\"}],\"name\":\"addStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDepositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPolicyTokens\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"}],\"name\":\"collectIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"delegateDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isCall\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_nameDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_round\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_settleTimestamp\",\"type\":\"uint256\"}],\"name\":\"deployPolicyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract INaughtyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"}],\"name\":\"findAddressbyName\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"policyTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyTokenAddress\",\"type\":\"address\"}],\"name\":\"findNamebyAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"policyTokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"policyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nameDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settleTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct PolicyCore.PolicyTokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"}],\"name\":\"getPolicyTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"policyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nameDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settleTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct PolicyCore.PolicyTokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_policyTokenAddress\",\"type\":\"address\"}],\"name\":\"getUserQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_quota\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incomeSharing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceGetter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lottery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"naughtyRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingIncomeToLottery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingIncomeToSharing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"policyTokenAddressToName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"policyTokenInfoMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"policyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nameDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settleTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceGetter\",\"outputs\":[{\"internalType\":\"contract IPriceGetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"}],\"name\":\"redeemAfterSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ILM\",\"type\":\"address\"}],\"name\":\"setILMContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incomeSharing\",\"type\":\"address\"}],\"name\":\"setIncomeSharing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toLottery\",\"type\":\"uint256\"}],\"name\":\"setIncomeToLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotteryAddress\",\"type\":\"address\"}],\"name\":\"setLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setNaughtyRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stopIndex\",\"type\":\"uint256\"}],\"name\":\"settleAllPolicyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"}],\"name\":\"settleFinalResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"settleResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isHappened\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"alreadySettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currentDistributionIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedStablecoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLotteryPart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_policyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateUserQuota\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whichStablecoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Most of the functions to be called from outside will use the name of policyToken         rather than the address (easy to read).         Other variables or functions still use address to index.         The rule of policyToken naming is:              Original Token Name(with decimals) + Strike Price + Lower or Higher + Date         E.g.  AVAX_30.0_L_2101, BTC_30000.0_L_2102, ETH_8000.0_H_2109         (the original name need to be the same as in the chainlink oracle)         There are three decimals for a policy token:              1. Name decimals: Only for generating the name of policyToken              2. Token decimals: The decimals of the policyToken                 (should be the same as the paired stablecoin)              3. Price decimals: Always 18. The oracle result will be transferred for settlement\",\"kind\":\"dev\",\"methods\":{\"_generateName(string,uint256,uint256,bool,string)\":{\"params\":{\"_decimals\":\"Decimals of the name generation (0,1=>1, 2=>2)\",\"_isCall\":\"The policy's payoff is triggered when higher(true) or lower(false)\",\"_round\":\"Round of the policy, named by <month><day> (e.g. 0320, 1215)\",\"_strikePrice\":\"Strike price of the policy (18 decimals)\",\"_tokenName\":\"Name of the stike token (BTC, ETH, AVAX...)\"}},\"addStablecoin(address)\":{\"params\":{\"_newStablecoin\":\"Address of the new stablecoin\"}},\"claim(string,address,uint256)\":{\"details\":\"It is done after result settlement and only if the result is true\",\"params\":{\"_amount\":\"Amount of stablecoin\",\"_policyTokenName\":\"Name of the policy token\",\"_stablecoin\":\"Address of the stable coin\"}},\"collectIncome(address)\":{\"details\":\"Can be done by anyone, only when there is some income to be distributed\",\"params\":{\"_stablecoin\":\"Address of stablecoin\"}},\"delegateDeposit(string,address,uint256,address)\":{\"details\":\"Only called by the router contract\",\"params\":{\"_amount\":\"Amount of stablecoin\",\"_policyTokenName\":\"Name of the policy token\",\"_stablecoin\":\"Address of the sable coin\",\"_user\":\"Address to receive the policy tokens\"}},\"deployPolicyToken(string,address,bool,uint256,uint256,uint256,string,uint256,uint256)\":{\"details\":\"Only the owner can deploy new policy token      The name form is like \\\"AVAX_50_L_2203\\\" and is built inside the contract.\",\"params\":{\"_deadline\":\"Deadline of this policy token (deposit / redeem / swap)\",\"_isCall\":\"The policy is for higher or lower than the strike price (call / put)\",\"_nameDecimals\":\"Decimals of this token's name (0~18)\",\"_round\":\"Round of the token (e.g. 2203 -> expired at 22 March)\",\"_settleTimestamp\":\"Can settle after this timestamp (for oracle)\",\"_stablecoin\":\"Address of the stablecoin (Just for check decimals here)\",\"_strikePrice\":\"Strike price of the policy (have already been transferred with 1e18)\",\"_tokenDecimals\":\"Decimals of this token's value (0~18) (same as paired stablecoin)\",\"_tokenName\":\"Name of the original token (e.g. AVAX, BTC, ETH...)\"}},\"deployPool(string,address,uint256,uint256)\":{\"params\":{\"_feeRate\":\"Fee rate given to LP holders\",\"_policyTokenName\":\"Name of the policy token\",\"_poolDeadline\":\"Swapping deadline of the pool (normally the same as the token's deadline)\",\"_stablecoin\":\"Address of the stable coin\"}},\"deposit(string,address,uint256)\":{\"params\":{\"_amount\":\"Amount of stablecoin\",\"_policyTokenName\":\"Name of the policy token\",\"_stablecoin\":\"Address of the stable coin\"}},\"findAddressbyName(string)\":{\"params\":{\"_policyTokenName\":\"Name of the policy token (e.g. \\\"AVAX_30_L_2103\\\")\"},\"returns\":{\"policyTokenAddress\":\"Address of the policy token\"}},\"findNamebyAddress(address)\":{\"params\":{\"_policyTokenAddress\":\"Address of the policy token\"},\"returns\":{\"policyTokenName\":\"Name of the policy token\"}},\"getAllTokens()\":{\"details\":\"Include all active&expired tokens\",\"returns\":{\"_0\":\"tokensInfo Token information list\"}},\"getPolicyTokenInfo(string)\":{\"params\":{\"_policyTokenName\":\"Name of the policy token (e.g. \\\"AVAX30L202103\\\")\"},\"returns\":{\"_0\":\"policyTokenInfo PolicyToken detail information\"}},\"getUserQuota(address,address)\":{\"params\":{\"_policyTokenAddress\":\"Address of the policy token\",\"_user\":\"Address of the user to be checked\"},\"returns\":{\"_quota\":\"User's quota result\"}},\"initialize(address,address,address)\":{\"params\":{\"_factory\":\"Address of naughty factory\",\"_priceGetter\":\"Address of the oracle contract\",\"_usdc\":\"USDC.e is the first stablecoin supported in the pool\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(string,address,uint256)\":{\"details\":\"Redeem happens before the deadline and is different from claim/settle\",\"params\":{\"_amount\":\"Amount to redeem\",\"_policyTokenName\":\"Name of the policy token\",\"_stablecoin\":\"Address of the stablecoin\"}},\"redeemAfterSettlement(string,address)\":{\"params\":{\"_policyTokenName\":\"Name of the policy token\",\"_stablecoin\":\"Address of the stablecoin\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setILMContract(address)\":{\"params\":{\"_ILM\":\"Address of the new ILM\"}},\"setIncomeSharing(address)\":{\"params\":{\"_incomeSharing\":\"Address of the new incomeSharing\"}},\"setIncomeToLottery(uint256)\":{\"details\":\"The remaining part will be distributed to incomeSharing\",\"params\":{\"_toLottery\":\"Proportion to lottery\"}},\"setLottery(address)\":{\"params\":{\"_lotteryAddress\":\"Address of the new lottery\"}},\"setNaughtyRouter(address)\":{\"params\":{\"_router\":\"Address of the new naughty router\"}},\"settleAllPolicyTokens(string,address,uint256,uint256)\":{\"details\":\"Take care of the gas cost and can use the _startIndex and _stopIndex to control the size\",\"params\":{\"_policyTokenName\":\"Name of policy token\",\"_stablecoin\":\"Address of stablecoin\",\"_startIndex\":\"Settlement start index\",\"_stopIndex\":\"Settlement stop index\"}},\"settleFinalResult(string)\":{\"params\":{\"_policyTokenName\":\"Name of the policy token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateUserQuota(address,address,uint256)\":{\"details\":\"When you claim your liquidity from ILM, you will get normal quota as you are using policyCore\",\"params\":{\"_amount\":\"Quota amount\",\"_policyToken\":\"PolicyToken address\",\"_user\":\"User address\"}}},\"title\":\"PolicyCore\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_generateName(string,uint256,uint256,bool,string)\":{\"notice\":\"Generate the policy token name\"},\"addStablecoin(address)\":{\"notice\":\"Add a new supported stablecoin\"},\"claim(string,address,uint256)\":{\"notice\":\"Claim a payoff based on policy tokens\"},\"collectIncome(address)\":{\"notice\":\"Collect the income\"},\"delegateDeposit(string,address,uint256,address)\":{\"notice\":\"Delegate deposit (deposit and mint for other addresses)\"},\"deployPolicyToken(string,address,bool,uint256,uint256,uint256,string,uint256,uint256)\":{\"notice\":\"Deploy a new policy token and return the token address\"},\"deployPool(string,address,uint256,uint256)\":{\"notice\":\"Deploy a new pair (pool)\"},\"deposit(string,address,uint256)\":{\"notice\":\"Deposit stablecoins and get policy tokens\"},\"findAddressbyName(string)\":{\"notice\":\"Find the token address by its name\"},\"findNamebyAddress(address)\":{\"notice\":\"Find the token name by its address\"},\"getAllTokens()\":{\"notice\":\"Get the information about all the tokens\"},\"getPolicyTokenInfo(string)\":{\"notice\":\"Find the token information by its name\"},\"getUserQuota(address,address)\":{\"notice\":\"Get a user's quota for a certain policy token\"},\"initialize(address,address,address)\":{\"notice\":\"Constructor, for some addresses\"},\"redeem(string,address,uint256)\":{\"notice\":\"Burn policy tokens and redeem stablecoins\"},\"redeemAfterSettlement(string,address)\":{\"notice\":\"Redeem policy tokens and get stablecoins by the user himeself\"},\"setILMContract(address)\":{\"notice\":\"Change the address of ILM\"},\"setIncomeSharing(address)\":{\"notice\":\"Change the address of emergency pool\"},\"setIncomeToLottery(uint256)\":{\"notice\":\"Change the income part to lottery\"},\"setLottery(address)\":{\"notice\":\"Change the address of lottery\"},\"setNaughtyRouter(address)\":{\"notice\":\"Change the address of naughty router\"},\"settleAllPolicyTokens(string,address,uint256,uint256)\":{\"notice\":\"Settle the policies for the users when insurance events do not happen         Funds are automatically distributed back to the depositors\"},\"settleFinalResult(string)\":{\"notice\":\"Get the final price from the PriceGetter contract\"},\"updateUserQuota(address,address,uint256)\":{\"notice\":\"Update user quota from ILM when claim\"}},\"notice\":\"Core logic of Naughty Price Product         Preset:              (Done in the naughtyFactory contract)              1. Deploy policyToken contract              2. Deploy policyToken-Stablecoin pool contract         User Interaction:              1. Deposit Stablecoin and mint PolicyTokens              2. Redeem their Stablecoin and burn the PolicyTokens (before settlement)              3. Claim for payout with PolicyTokens (after settlement)         PolicyTokens are minted with the ratio 1:1 to Stablecoin         The PolicyTokens are traded in the pool with CFMM (xy=k)         When the event happens, a PolicyToken can be burned for claiming 1 Stablecoin.         When the event does not happen, the PolicyToken depositors can         redeem their 1 deposited Stablecoin\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/naughty-price/PolicyCore.sol\":\"PolicyCore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"contracts/libraries/StringsUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUtils {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @notice Bytes to string (not human-readable form)\\n     * @param _bytes Input bytes\\n     * @return stringBytes String form of the bytes\\n     */\\n    function byToString(bytes32 _bytes) internal pure returns (string memory) {\\n        return uintToHexString(uint256(_bytes), 32);\\n    }\\n\\n    /**\\n     * @notice Transfer address to string (not change the content)\\n     * @param _addr Input address\\n     * @return stringAddress String form of the address\\n     */\\n    function addressToString(address _addr)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return uintToHexString(uint256(uint160(_addr)), 20);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function uintToString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function uintToHexString(uint256 value)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return uintToHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function uintToHexString(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xa2c517877ea89e548f3e0e73e43902bdd73e938c19169258407fd5e19615a4c9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/PolicyCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n    *******         **********     ***********     *****     ***********\\n    *      *        *              *                 *       *\\n    *        *      *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     **********     *       *****     *       ***********\\n    *         *     *              *         *       *                 *\\n    *         *     *              *         *       *                 *\\n    *        *      *              *         *       *                 *\\n    *      *        *              *         *       *                 *\\n    *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.10;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {StringsUtils} from \\\"../libraries/StringsUtils.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {IERC20Decimals} from \\\"../utils/interfaces/IERC20Decimals.sol\\\";\\nimport {IPriceGetter} from \\\"./interfaces/IPriceGetter.sol\\\";\\nimport {INaughtyFactory} from \\\"./interfaces/INaughtyFactory.sol\\\";\\nimport {INPPolicyToken} from \\\"./interfaces/INPPolicyToken.sol\\\";\\n\\n/**\\n * @title  PolicyCore\\n * @notice Core logic of Naughty Price Product\\n *         Preset:\\n *              (Done in the naughtyFactory contract)\\n *              1. Deploy policyToken contract\\n *              2. Deploy policyToken-Stablecoin pool contract\\n *         User Interaction:\\n *              1. Deposit Stablecoin and mint PolicyTokens\\n *              2. Redeem their Stablecoin and burn the PolicyTokens (before settlement)\\n *              3. Claim for payout with PolicyTokens (after settlement)\\n *         PolicyTokens are minted with the ratio 1:1 to Stablecoin\\n *         The PolicyTokens are traded in the pool with CFMM (xy=k)\\n *         When the event happens, a PolicyToken can be burned for claiming 1 Stablecoin.\\n *         When the event does not happen, the PolicyToken depositors can\\n *         redeem their 1 deposited Stablecoin\\n *\\n * @dev    Most of the functions to be called from outside will use the name of policyToken\\n *         rather than the address (easy to read).\\n *         Other variables or functions still use address to index.\\n *         The rule of policyToken naming is:\\n *              Original Token Name(with decimals) + Strike Price + Lower or Higher + Date\\n *         E.g.  AVAX_30.0_L_2101, BTC_30000.0_L_2102, ETH_8000.0_H_2109\\n *         (the original name need to be the same as in the chainlink oracle)\\n *         There are three decimals for a policy token:\\n *              1. Name decimals: Only for generating the name of policyToken\\n *              2. Token decimals: The decimals of the policyToken\\n *                 (should be the same as the paired stablecoin)\\n *              3. Price decimals: Always 18. The oracle result will be transferred for settlement\\n */\\n\\ncontract PolicyCore is OwnableUpgradeable {\\n    using StringsUtils for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Factory contract, responsible for deploying new contracts\\n    INaughtyFactory public factory;\\n\\n    // Oracle contract, responsible for getting the final price\\n    IPriceGetter public priceGetter;\\n\\n    // Lottery address\\n    address public lottery;\\n\\n    // Income sharing contract address\\n    address public incomeSharing;\\n\\n    // Naughty Router contract address\\n    address public naughtyRouter;\\n\\n    // Contract for initial liquidity matching\\n    address public ILMContract;\\n\\n    // Income to lottery ratio (max 10)\\n    uint256 public toLotteryPart;\\n\\n    struct PolicyTokenInfo {\\n        address policyTokenAddress;\\n        bool isCall;\\n        uint256 nameDecimals; // decimals of the name generation\\n        uint256 tokenDecimals; // decimals of the policy token\\n        uint256 strikePrice;\\n        uint256 deadline;\\n        uint256 settleTimestamp;\\n    }\\n    // Policy token name => Policy token information\\n    mapping(string => PolicyTokenInfo) public policyTokenInfoMapping;\\n\\n    // Policy token address => Policy token name\\n    mapping(address => string) public policyTokenAddressToName;\\n\\n    // Policy token name list\\n    string[] public allPolicyTokens;\\n\\n    // Stablecoin address => Supported or not\\n    mapping(address => bool) public supportedStablecoin;\\n\\n    // Policy token address => Stablecoin address\\n    mapping(address => address) public whichStablecoin;\\n\\n    // PolicyToken => Strike Token (e.g. AVAX30L202101 address => AVAX address)\\n    mapping(address => string) policyTokenToOriginal;\\n\\n    // User Address => Token Address => User Quota Amount\\n    mapping(address => mapping(address => uint256)) userQuota;\\n\\n    // Policy token address => All the depositors for this round\\n    // (store all the depositors in an array)\\n    mapping(address => address[]) public allDepositors;\\n\\n    struct SettlementInfo {\\n        uint256 price;\\n        bool isHappened;\\n        bool alreadySettled;\\n        uint256 currentDistributionIndex;\\n    }\\n    // Policy token address => Settlement result information\\n    mapping(address => SettlementInfo) public settleResult;\\n\\n    mapping(address => uint256) public pendingIncomeToLottery;\\n    mapping(address => uint256) public pendingIncomeToSharing;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Events ******************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event LotteryChanged(address oldLotteryAddress, address newLotteryAddress);\\n    event IncomeSharingChanged(\\n        address oldIncomeSharing,\\n        address newIncomeSharing\\n    );\\n    event NaughtyRouterChanged(address oldRouter, address newRouter);\\n    event ILMChanged(address oldILM, address newILM);\\n    event IncomeToLotteryChanged(uint256 oldToLottery, uint256 newToLottery);\\n    event PolicyTokenDeployed(\\n        string tokenName,\\n        address tokenAddress,\\n        uint256 tokenDecimals,\\n        uint256 deadline,\\n        uint256 settleTimestamp\\n    );\\n    event PoolDeployed(\\n        address poolAddress,\\n        address policyTokenAddress,\\n        address stablecoin\\n    );\\n    event PoolDeployedWithInitialLiquidity(\\n        address poolAddress,\\n        address policyTokenAddress,\\n        address stablecoin,\\n        uint256 initLiquidityA,\\n        uint256 initLiquidityB\\n    );\\n    event Deposit(\\n        address indexed userAddress,\\n        string indexed policyTokenName,\\n        address indexed stablecoin,\\n        uint256 amount\\n    );\\n    event DelegateDeposit(\\n        address payerAddress,\\n        address userAddress,\\n        string policyTokenName,\\n        address stablecoin,\\n        uint256 amount\\n    );\\n    event Redeem(\\n        address indexed userAddress,\\n        string indexed policyTokenName,\\n        address indexed stablecoin,\\n        uint256 amount\\n    );\\n    event RedeemAfterSettlement(\\n        address indexed userAddress,\\n        string indexed policyTokenName,\\n        address indexed stablecoin,\\n        uint256 amount\\n    );\\n    event FinalResultSettled(\\n        string _policyTokenName,\\n        uint256 price,\\n        bool isHappened\\n    );\\n    event NewStablecoinAdded(address _newStablecoin);\\n    event PolicyTokensSettledForUsers(\\n        string policyTokenName,\\n        address stablecoin,\\n        uint256 startIndex,\\n        uint256 stopIndex\\n    );\\n    event UpdateUserQuota(\\n        address user,\\n        address policyTokenAddress,\\n        uint256 amount\\n    );\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Constructor, for some addresses\\n     * @param _usdc USDC.e is the first stablecoin supported in the pool\\n     * @param _factory Address of naughty factory\\n     * @param _priceGetter Address of the oracle contract\\n     */\\n    function initialize(\\n        address _usdc,\\n        address _factory,\\n        address _priceGetter\\n    ) public initializer {\\n        __Ownable_init();\\n\\n        // Add the first stablecoin supported\\n        supportedStablecoin[_usdc] = true;\\n\\n        // Initialize the interfaces\\n        factory = INaughtyFactory(_factory);\\n        priceGetter = IPriceGetter(_priceGetter);\\n\\n        // 20% to lottery, 80% to income sharing\\n        toLotteryPart = 2;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Check if this stablecoin is supported\\n     * @param _stablecoin Stablecoin address\\n     */\\n    modifier validStablecoin(address _stablecoin) {\\n        require(\\n            supportedStablecoin[_stablecoin] == true,\\n            \\\"Do not support this stablecoin currently\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Check whether the policy token is paired with this stablecoin\\n     * @param _policyTokenName Policy token name\\n     * @param _stablecoin Stablecoin address\\n     */\\n    modifier validPolicyTokenWithStablecoin(\\n        string memory _policyTokenName,\\n        address _stablecoin\\n    ) {\\n        address policyTokenAddress = findAddressbyName(_policyTokenName);\\n        require(\\n            whichStablecoin[policyTokenAddress] == _stablecoin,\\n            \\\"Invalid policytoken with stablecoin\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Check if the policy token has been deployed, used when deploying pools\\n     * @param _policyTokenName Name of the policy token inside the pair\\n     */\\n    modifier deployedPolicy(string memory _policyTokenName) {\\n        require(\\n            policyTokenInfoMapping[_policyTokenName].policyTokenAddress !=\\n                address(0),\\n            \\\"This policy token has not been deployed, please deploy it first\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Deposit/Redeem/Swap only before deadline\\n     * @dev Each pool will also have this deadline\\n     *      That needs to be set inside naughtyFactory\\n     * @param _policyTokenName Name of the policy token\\n     */\\n    modifier beforeDeadline(string memory _policyTokenName) {\\n        uint256 deadline = policyTokenInfoMapping[_policyTokenName].deadline;\\n        require(\\n            block.timestamp <= deadline,\\n            \\\"Can not deposit/redeem, has passed the deadline\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Can only settle the result after the \\\"_settleTimestamp\\\"\\n     * @param _policyTokenName Name of the policy token\\n     */\\n    modifier afterSettlement(string memory _policyTokenName) {\\n        uint256 settleTimestamp = policyTokenInfoMapping[_policyTokenName]\\n            .settleTimestamp;\\n        require(\\n            block.timestamp >= settleTimestamp,\\n            \\\"Can not settle/claim, have not reached settleTimestamp\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Avoid multiple settlements\\n     * @param _policyTokenName Name of the policy token\\n     */\\n    modifier notAlreadySettled(string memory _policyTokenName) {\\n        address policyTokenAddress = findAddressbyName(_policyTokenName);\\n        require(\\n            settleResult[policyTokenAddress].alreadySettled == false,\\n            \\\"This policy has already been settled\\\"\\n        );\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Find the token address by its name\\n     * @param _policyTokenName Name of the policy token (e.g. \\\"AVAX_30_L_2103\\\")\\n     * @return policyTokenAddress Address of the policy token\\n     */\\n    function findAddressbyName(string memory _policyTokenName)\\n        public\\n        view\\n        returns (address policyTokenAddress)\\n    {\\n        policyTokenAddress = policyTokenInfoMapping[_policyTokenName]\\n            .policyTokenAddress;\\n\\n        require(policyTokenAddress != address(0), \\\"Policy token not found\\\");\\n    }\\n\\n    /**\\n     * @notice Find the token name by its address\\n     * @param _policyTokenAddress Address of the policy token\\n     * @return policyTokenName Name of the policy token\\n     */\\n    function findNamebyAddress(address _policyTokenAddress)\\n        public\\n        view\\n        returns (string memory policyTokenName)\\n    {\\n        policyTokenName = policyTokenAddressToName[_policyTokenAddress];\\n\\n        require(bytes(policyTokenName).length > 0, \\\"Policy name not found\\\");\\n    }\\n\\n    /**\\n     * @notice Find the token information by its name\\n     * @param _policyTokenName Name of the policy token (e.g. \\\"AVAX30L202103\\\")\\n     * @return policyTokenInfo PolicyToken detail information\\n     */\\n    function getPolicyTokenInfo(string memory _policyTokenName)\\n        public\\n        view\\n        returns (PolicyTokenInfo memory)\\n    {\\n        return policyTokenInfoMapping[_policyTokenName];\\n    }\\n\\n    /**\\n     * @notice Get a user's quota for a certain policy token\\n     * @param _user Address of the user to be checked\\n     * @param _policyTokenAddress Address of the policy token\\n     * @return _quota User's quota result\\n     */\\n    function getUserQuota(address _user, address _policyTokenAddress)\\n        external\\n        view\\n        returns (uint256 _quota)\\n    {\\n        _quota = userQuota[_user][_policyTokenAddress];\\n    }\\n\\n    /**\\n     * @notice Get the information about all the tokens\\n     * @dev Include all active&expired tokens\\n     * @return tokensInfo Token information list\\n     */\\n    function getAllTokens() external view returns (PolicyTokenInfo[] memory) {\\n        uint256 length = allPolicyTokens.length;\\n        PolicyTokenInfo[] memory tokensInfo = new PolicyTokenInfo[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            tokensInfo[i] = policyTokenInfoMapping[allPolicyTokens[i]];\\n        }\\n\\n        return tokensInfo;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Add a new supported stablecoin\\n     * @param _newStablecoin Address of the new stablecoin\\n     */\\n    function addStablecoin(address _newStablecoin) external onlyOwner {\\n        supportedStablecoin[_newStablecoin] = true;\\n        emit NewStablecoinAdded(_newStablecoin);\\n    }\\n\\n    /**\\n     * @notice Change the address of lottery\\n     * @param _lotteryAddress Address of the new lottery\\n     */\\n    function setLottery(address _lotteryAddress) external onlyOwner {\\n        emit LotteryChanged(lottery, _lotteryAddress);\\n        lottery = _lotteryAddress;\\n    }\\n\\n    /**\\n     * @notice Change the address of emergency pool\\n     * @param _incomeSharing Address of the new incomeSharing\\n     */\\n    function setIncomeSharing(address _incomeSharing) external onlyOwner {\\n        emit IncomeSharingChanged(incomeSharing, _incomeSharing);\\n        incomeSharing = _incomeSharing;\\n    }\\n\\n    /**\\n     * @notice Change the address of naughty router\\n     * @param _router Address of the new naughty router\\n     */\\n    function setNaughtyRouter(address _router) external onlyOwner {\\n        emit NaughtyRouterChanged(naughtyRouter, _router);\\n        naughtyRouter = _router;\\n    }\\n\\n    /**\\n     * @notice Change the address of ILM\\n     * @param _ILM Address of the new ILM\\n     */\\n    function setILMContract(address _ILM) external onlyOwner {\\n        emit ILMChanged(ILMContract, _ILM);\\n        ILMContract = _ILM;\\n    }\\n\\n    /**\\n     * @notice Change the income part to lottery\\n     * @dev The remaining part will be distributed to incomeSharing\\n     * @param _toLottery Proportion to lottery\\n     */\\n    function setIncomeToLottery(uint256 _toLottery) external onlyOwner {\\n        require(_toLottery <= 10, \\\"Max 10\\\");\\n        emit IncomeToLotteryChanged(toLotteryPart, _toLottery);\\n        toLotteryPart = _toLottery;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Deploy a new policy token and return the token address\\n     * @dev Only the owner can deploy new policy token\\n     *      The name form is like \\\"AVAX_50_L_2203\\\" and is built inside the contract.\\n     * @param _tokenName Name of the original token (e.g. AVAX, BTC, ETH...)\\n     * @param _stablecoin Address of the stablecoin (Just for check decimals here)\\n     * @param _isCall The policy is for higher or lower than the strike price (call / put)\\n     * @param _nameDecimals Decimals of this token's name (0~18)\\n     * @param _tokenDecimals Decimals of this token's value (0~18) (same as paired stablecoin)\\n     * @param _strikePrice Strike price of the policy (have already been transferred with 1e18)\\n     * @param _round Round of the token (e.g. 2203 -> expired at 22 March)\\n     * @param _deadline Deadline of this policy token (deposit / redeem / swap)\\n     * @param _settleTimestamp Can settle after this timestamp (for oracle)\\n     */\\n    function deployPolicyToken(\\n        string memory _tokenName,\\n        address _stablecoin,\\n        bool _isCall,\\n        uint256 _nameDecimals,\\n        uint256 _tokenDecimals,\\n        uint256 _strikePrice,\\n        string memory _round,\\n        uint256 _deadline,\\n        uint256 _settleTimestamp\\n    ) external onlyOwner {\\n        require(\\n            _nameDecimals <= 18 && _tokenDecimals <= 18,\\n            \\\"Too many decimals\\\"\\n        );\\n        require(\\n            IERC20Decimals(_stablecoin).decimals() == _tokenDecimals,\\n            \\\"Decimals not paired\\\"\\n        );\\n\\n        require(_deadline > block.timestamp, \\\"Wrong deadline\\\");\\n        require(_settleTimestamp >= _deadline, \\\"Wrong settleTimestamp\\\");\\n\\n        // Generate the policy token name\\n        string memory policyTokenName = _generateName(\\n            _tokenName,\\n            _nameDecimals,\\n            _strikePrice,\\n            _isCall,\\n            _round\\n        );\\n        // Deploy a new policy token by the factory contract\\n        address policyTokenAddress = factory.deployPolicyToken(\\n            policyTokenName,\\n            _tokenDecimals\\n        );\\n\\n        // Store the policyToken information in the mapping\\n        policyTokenInfoMapping[policyTokenName] = PolicyTokenInfo(\\n            policyTokenAddress,\\n            _isCall,\\n            _nameDecimals,\\n            _tokenDecimals,\\n            _strikePrice,\\n            _deadline,\\n            _settleTimestamp\\n        );\\n\\n        // Keep the record from policy token to original token\\n        policyTokenToOriginal[policyTokenAddress] = _tokenName;\\n\\n        // Record the address to name mapping\\n        policyTokenAddressToName[policyTokenAddress] = policyTokenName;\\n\\n        // Push the policytokenName into the list\\n        allPolicyTokens.push(policyTokenName);\\n\\n        emit PolicyTokenDeployed(\\n            policyTokenName,\\n            policyTokenAddress,\\n            _tokenDecimals,\\n            _deadline,\\n            _settleTimestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Deploy a new pair (pool)\\n     * @param _policyTokenName Name of the policy token\\n     * @param _stablecoin Address of the stable coin\\n     * @param _poolDeadline Swapping deadline of the pool (normally the same as the token's deadline)\\n     * @param _feeRate Fee rate given to LP holders\\n     */\\n    function deployPool(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _poolDeadline,\\n        uint256 _feeRate\\n    )\\n        external\\n        validStablecoin(_stablecoin)\\n        deployedPolicy(_policyTokenName)\\n        returns (address)\\n    {\\n        require(\\n            msg.sender == owner() || msg.sender == ILMContract,\\n            \\\"Only owner or ILM\\\"\\n        );\\n\\n        require(_poolDeadline > block.timestamp, \\\"Wrong deadline\\\");\\n        require(\\n            _poolDeadline == policyTokenInfoMapping[_policyTokenName].deadline,\\n            \\\"Policy token and pool deadline not the same\\\"\\n        );\\n        address policyTokenAddress = findAddressbyName(_policyTokenName);\\n\\n        address poolAddress = _deployPool(\\n            policyTokenAddress,\\n            _stablecoin,\\n            _poolDeadline,\\n            _feeRate\\n        );\\n\\n        emit PoolDeployed(poolAddress, policyTokenAddress, _stablecoin);\\n\\n        return poolAddress;\\n    }\\n\\n    /**\\n     * @notice Deposit stablecoins and get policy tokens\\n     * @param _policyTokenName Name of the policy token\\n     * @param _stablecoin Address of the stable coin\\n     * @param _amount Amount of stablecoin\\n     */\\n    function deposit(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _amount\\n    )\\n        public\\n        beforeDeadline(_policyTokenName)\\n        validPolicyTokenWithStablecoin(_policyTokenName, _stablecoin)\\n    {\\n        require(_amount > 0, \\\"Zero Amount\\\");\\n        _deposit(_policyTokenName, _stablecoin, _amount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Delegate deposit (deposit and mint for other addresses)\\n     * @dev Only called by the router contract\\n     * @param _policyTokenName Name of the policy token\\n     * @param _stablecoin Address of the sable coin\\n     * @param _amount Amount of stablecoin\\n     * @param _user Address to receive the policy tokens\\n     */\\n    function delegateDeposit(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _amount,\\n        address _user\\n    )\\n        external\\n        beforeDeadline(_policyTokenName)\\n        validPolicyTokenWithStablecoin(_policyTokenName, _stablecoin)\\n    {\\n        require(\\n            msg.sender == naughtyRouter,\\n            \\\"Only the router contract can delegate\\\"\\n        );\\n        require(_amount > 0, \\\"Zero Amount\\\");\\n\\n        _deposit(_policyTokenName, _stablecoin, _amount, _user);\\n\\n        emit DelegateDeposit(\\n            msg.sender,\\n            _user,\\n            _policyTokenName,\\n            _stablecoin,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Burn policy tokens and redeem stablecoins\\n     * @dev Redeem happens before the deadline and is different from claim/settle\\n     * @param _policyTokenName Name of the policy token\\n     * @param _stablecoin Address of the stablecoin\\n     * @param _amount Amount to redeem\\n     */\\n    function redeem(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _amount\\n    )\\n        public\\n        beforeDeadline(_policyTokenName)\\n        validPolicyTokenWithStablecoin(_policyTokenName, _stablecoin)\\n    {\\n        address policyTokenAddress = findAddressbyName(_policyTokenName);\\n\\n        // Check if the user has enough quota (quota is only for those who mint policy tokens)\\n        require(\\n            userQuota[msg.sender][policyTokenAddress] >= _amount,\\n            \\\"User's quota not sufficient\\\"\\n        );\\n\\n        // Update quota\\n        userQuota[msg.sender][policyTokenAddress] -= _amount;\\n\\n        // Charge 1% Fee when redeem / claim\\n        uint256 amountWithFee = _chargeFee(_stablecoin, _amount);\\n\\n        // Transfer back the stablecoin\\n        IERC20(_stablecoin).safeTransfer(msg.sender, amountWithFee);\\n\\n        // Burn the policy tokens\\n        INPPolicyToken policyToken = INPPolicyToken(policyTokenAddress);\\n        policyToken.burn(msg.sender, _amount);\\n\\n        emit Redeem(msg.sender, _policyTokenName, _stablecoin, _amount);\\n    }\\n\\n    /**\\n     * @notice Redeem policy tokens and get stablecoins by the user himeself\\n     * @param _policyTokenName Name of the policy token\\n     * @param _stablecoin Address of the stablecoin\\n     */\\n    function redeemAfterSettlement(\\n        string memory _policyTokenName,\\n        address _stablecoin\\n    )\\n        public\\n        afterSettlement(_policyTokenName)\\n        validPolicyTokenWithStablecoin(_policyTokenName, _stablecoin)\\n    {\\n        address policyTokenAddress = findAddressbyName(_policyTokenName);\\n\\n        // Copy to memory (will not change the result)\\n        SettlementInfo memory result = settleResult[policyTokenAddress];\\n\\n        // Must have got the final price\\n        require(\\n            result.price != 0 && result.alreadySettled,\\n            \\\"Have not got the oracle result\\\"\\n        );\\n\\n        // The event must be \\\"not happend\\\"\\n        require(\\n            result.isHappened == false,\\n            \\\"Only call this function when the event does not happen\\\"\\n        );\\n\\n        uint256 quota = userQuota[msg.sender][policyTokenAddress];\\n        // User must have quota because this is for depositors when event not happens\\n        require(\\n            quota > 0,\\n            \\\"No quota, you did not deposit and mint policy tokens before\\\"\\n        );\\n\\n        // Charge 1% Fee when redeem / claim\\n        uint256 amountWithFee = _chargeFee(_stablecoin, quota);\\n\\n        // Send back stablecoins directly\\n        IERC20(_stablecoin).safeTransfer(msg.sender, amountWithFee);\\n\\n        // Delete the userQuota storage\\n        delete userQuota[msg.sender][policyTokenAddress];\\n\\n        emit RedeemAfterSettlement(\\n            msg.sender,\\n            _policyTokenName,\\n            _stablecoin,\\n            amountWithFee\\n        );\\n    }\\n\\n    /**\\n     * @notice Claim a payoff based on policy tokens\\n     * @dev It is done after result settlement and only if the result is true\\n     * @param _policyTokenName Name of the policy token\\n     * @param _stablecoin Address of the stable coin\\n     * @param _amount Amount of stablecoin\\n     */\\n    function claim(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _amount\\n    )\\n        public\\n        afterSettlement(_policyTokenName)\\n        validPolicyTokenWithStablecoin(_policyTokenName, _stablecoin)\\n    {\\n        address policyTokenAddress = findAddressbyName(_policyTokenName);\\n\\n        // Copy to memory (will not change the result)\\n        SettlementInfo memory result = settleResult[policyTokenAddress];\\n\\n        // Check if we have already settle the final price\\n        require(\\n            result.price != 0 && result.alreadySettled,\\n            \\\"Have not got the oracle result\\\"\\n        );\\n\\n        // Check if the event happens\\n        require(\\n            result.isHappened,\\n            \\\"The result does not happen, you can not claim\\\"\\n        );\\n\\n        // Charge 1% fee\\n        uint256 amountWithFee = _chargeFee(_stablecoin, _amount);\\n\\n        IERC20(_stablecoin).safeTransfer(msg.sender, amountWithFee);\\n\\n        // Users must have enough policy tokens to claim\\n        INPPolicyToken policyToken = INPPolicyToken(policyTokenAddress);\\n\\n        // Burn the policy tokens\\n        policyToken.burn(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Get the final price from the PriceGetter contract\\n     * @param _policyTokenName Name of the policy token\\n     */\\n    function settleFinalResult(string memory _policyTokenName)\\n        public\\n        afterSettlement(_policyTokenName)\\n        notAlreadySettled(_policyTokenName)\\n    {\\n        address policyTokenAddress = findAddressbyName(_policyTokenName);\\n\\n        SettlementInfo storage result = settleResult[policyTokenAddress];\\n\\n        // Get the strike token name\\n        string memory originalTokenName = policyTokenToOriginal[\\n            policyTokenAddress\\n        ];\\n\\n        // Get the final price from oracle\\n        uint256 price = priceGetter.getLatestPrice(originalTokenName);\\n\\n        // Record the price\\n        result.alreadySettled = true;\\n        result.price = price;\\n\\n        PolicyTokenInfo memory policyTokenInfo = policyTokenInfoMapping[\\n            _policyTokenName\\n        ];\\n\\n        // Get the final result\\n        bool situationT1 = (price >= policyTokenInfo.strikePrice) &&\\n            policyTokenInfo.isCall;\\n        bool situationT2 = (price <= policyTokenInfo.strikePrice) &&\\n            !policyTokenInfo.isCall;\\n\\n        bool isHappened = (situationT1 || situationT2) ? true : false;\\n\\n        // Record the result\\n        result.isHappened = isHappened;\\n\\n        emit FinalResultSettled(_policyTokenName, price, isHappened);\\n    }\\n\\n    /**\\n     * @notice Settle the policies for the users when insurance events do not happen\\n     *         Funds are automatically distributed back to the depositors\\n     * @dev    Take care of the gas cost and can use the _startIndex and _stopIndex to control the size\\n     * @param _policyTokenName Name of policy token\\n     * @param _stablecoin Address of stablecoin\\n     * @param _startIndex Settlement start index\\n     * @param _stopIndex Settlement stop index\\n     */\\n    function settleAllPolicyTokens(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _startIndex,\\n        uint256 _stopIndex\\n    ) public onlyOwner {\\n        address policyTokenAddress = findAddressbyName(_policyTokenName);\\n\\n        // Copy to memory (will not change the result)\\n        SettlementInfo memory result = settleResult[policyTokenAddress];\\n\\n        // Must have got the final price\\n        require(\\n            result.price != 0 && result.alreadySettled == true,\\n            \\\"Have not got the oracle result\\\"\\n        );\\n\\n        // The event must be \\\"not happend\\\"\\n        require(\\n            result.isHappened == false,\\n            \\\"Only call this function when the event does not happen\\\"\\n        );\\n\\n        // Store the amount to collect to lottery and emergency pool\\n        uint256 amountToCollect = 0;\\n\\n        // Length of all depositors for this policy token\\n        uint256 length = allDepositors[policyTokenAddress].length;\\n\\n        require(\\n            result.currentDistributionIndex <= length,\\n            \\\"Have distributed all\\\"\\n        );\\n\\n        // Settle the policies in [_startIndex, _stopIndex)\\n        if (_startIndex == 0 && _stopIndex == 0) {\\n            amountToCollect += _settlePolicy(\\n                policyTokenAddress,\\n                _stablecoin,\\n                0,\\n                length\\n            );\\n\\n            // Update the distribution index for this policy token\\n            settleResult[policyTokenAddress].currentDistributionIndex = length;\\n\\n            emit PolicyTokensSettledForUsers(\\n                _policyTokenName,\\n                _stablecoin,\\n                0,\\n                length\\n            );\\n        } else {\\n            require(\\n                result.currentDistributionIndex == _startIndex,\\n                \\\"You need to start from the last distribution point\\\"\\n            );\\n            require(_stopIndex < length, \\\"Invalid stop index\\\");\\n\\n            amountToCollect += _settlePolicy(\\n                policyTokenAddress,\\n                _stablecoin,\\n                _startIndex,\\n                _stopIndex\\n            );\\n\\n            // Update the distribution index for this policy token\\n            settleResult[policyTokenAddress]\\n                .currentDistributionIndex = _stopIndex;\\n\\n            emit PolicyTokensSettledForUsers(\\n                _policyTokenName,\\n                _stablecoin,\\n                _startIndex,\\n                _stopIndex\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Collect the income\\n     * @dev Can be done by anyone, only when there is some income to be distributed\\n     * @param _stablecoin Address of stablecoin\\n     */\\n    function collectIncome(address _stablecoin) public {\\n        require(\\n            lottery != address(0) && incomeSharing != address(0),\\n            \\\"Please set the lottery & incomeSharing address\\\"\\n        );\\n\\n        uint256 amountToLottery = pendingIncomeToLottery[_stablecoin];\\n        uint256 amountToSharing = pendingIncomeToSharing[_stablecoin];\\n        require(\\n            amountToLottery > 0 || amountToSharing > 0,\\n            \\\"No pending income\\\"\\n        );\\n\\n        IERC20(_stablecoin).safeTransfer(lottery, amountToLottery);\\n        IERC20(_stablecoin).safeTransfer(incomeSharing, amountToSharing);\\n\\n        pendingIncomeToLottery[_stablecoin] = 0;\\n        pendingIncomeToSharing[_stablecoin] = 0;\\n    }\\n\\n    /**\\n     * @notice Update user quota from ILM when claim\\n     * @dev When you claim your liquidity from ILM, you will get normal quota as you are using policyCore\\n     * @param _user User address\\n     * @param _policyToken PolicyToken address\\n     * @param _amount Quota amount\\n     */\\n    function updateUserQuota(\\n        address _user,\\n        address _policyToken,\\n        uint256 _amount\\n    ) external {\\n        require(msg.sender == ILMContract, \\\"Only ILM\\\");\\n\\n        userQuota[_user][_policyToken] = _amount;\\n\\n        emit UpdateUserQuota(_user, _policyToken, _amount);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Finish deploying a pool\\n     * @param _policyTokenAddress Address of the policy token\\n     * @param _stablecoin Address of the stable coin\\n     * @param _poolDeadline Swapping deadline of the pool (normally the same as the token's deadline)\\n     * @param _feeRate Fee rate given to LP holders\\n     * @return poolAddress Address of the pool\\n     */\\n    function _deployPool(\\n        address _policyTokenAddress,\\n        address _stablecoin,\\n        uint256 _poolDeadline,\\n        uint256 _feeRate\\n    ) internal returns (address) {\\n        // Deploy a new pool (policyToken <=> stablecoin)\\n        address poolAddress = factory.deployPool(\\n            _policyTokenAddress,\\n            _stablecoin,\\n            _poolDeadline,\\n            _feeRate\\n        );\\n\\n        // Record the mapping\\n        whichStablecoin[_policyTokenAddress] = _stablecoin;\\n\\n        return poolAddress;\\n    }\\n\\n    /**\\n     * @notice Finish Deposit\\n     * @param _policyTokenName Name of the policy token\\n     * @param _stablecoin Address of the sable coin\\n     * @param _amount Amount of stablecoin\\n     * @param _user Address to receive the policy tokens\\n     */\\n    function _deposit(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _amount,\\n        address _user\\n    ) internal {\\n        address policyTokenAddress = findAddressbyName(_policyTokenName);\\n\\n        // If this is the first deposit, store the user address\\n        if (userQuota[_user][policyTokenAddress] == 0) {\\n            allDepositors[policyTokenAddress].push(_user);\\n        }\\n\\n        // Update the user quota\\n        userQuota[_user][policyTokenAddress] += _amount;\\n\\n        // Transfer stablecoins to this contract\\n        IERC20(_stablecoin).safeTransferFrom(_user, address(this), _amount);\\n\\n        INPPolicyToken policyToken = INPPolicyToken(policyTokenAddress);\\n\\n        // Mint new policy tokens\\n        policyToken.mint(_user, _amount);\\n\\n        emit Deposit(_user, _policyTokenName, _stablecoin, _amount);\\n    }\\n\\n    /**\\n     * @notice Settle the policy when the event does not happen\\n     * @param _policyTokenAddress Address of policy token\\n     * @param _stablecoin Address of stable coin\\n     * @param _start Start index\\n     * @param _stop Stop index\\n     */\\n    function _settlePolicy(\\n        address _policyTokenAddress,\\n        address _stablecoin,\\n        uint256 _start,\\n        uint256 _stop\\n    ) internal returns (uint256 amountRemaining) {\\n        for (uint256 i = _start; i < _stop; i++) {\\n            address user = allDepositors[_policyTokenAddress][i];\\n            uint256 amount = userQuota[user][_policyTokenAddress];\\n            // Charge fee\\n            uint256 amountWithFee = _chargeFee(_stablecoin, amount);\\n\\n            if (amountWithFee > 0) {\\n                IERC20(_stablecoin).safeTransfer(user, amountWithFee);\\n                delete userQuota[user][_policyTokenAddress];\\n\\n                // Accumulate the remaining part that will be collected later\\n                amountRemaining += amount - amountWithFee;\\n            } else continue;\\n        }\\n    }\\n\\n    /**\\n     * @notice Charge fee when redeem / claim\\n     * @param _stablecoin Stablecoin address\\n     * @param _amount Amount to redeem / claim\\n     * @return amountWithFee Amount with fee\\n     */\\n    function _chargeFee(address _stablecoin, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 amountWithFee = (_amount * 990) / 1000;\\n        uint256 amountToCollect = _amount - amountWithFee;\\n\\n        uint256 amountToLottery = (amountToCollect * toLotteryPart) / 10;\\n\\n        pendingIncomeToLottery[_stablecoin] += amountToLottery;\\n        pendingIncomeToSharing[_stablecoin] +=\\n            amountToCollect -\\n            amountToLottery;\\n\\n        return amountWithFee;\\n    }\\n\\n    /**\\n     * @notice Generate the policy token name\\n     * @param _tokenName Name of the stike token (BTC, ETH, AVAX...)\\n     * @param _decimals Decimals of the name generation (0,1=>1, 2=>2)\\n     * @param _strikePrice Strike price of the policy (18 decimals)\\n     * @param _isCall The policy's payoff is triggered when higher(true) or lower(false)\\n     * @param _round Round of the policy, named by <month><day> (e.g. 0320, 1215)\\n     */\\n    function _generateName(\\n        string memory _tokenName,\\n        uint256 _decimals,\\n        uint256 _strikePrice,\\n        bool _isCall,\\n        string memory _round\\n    ) public pure returns (string memory) {\\n        // The direction is \\\"H\\\"(Call) or \\\"L\\\"(Put)\\n        string memory direction = _isCall ? \\\"H\\\" : \\\"L\\\";\\n\\n        // Integer part of the strike price (12e18 => 12)\\n        uint256 intPart = _strikePrice / 1e18;\\n        require(intPart > 0, \\\"Invalid int part\\\");\\n\\n        // Decimal part of the strike price (1234e16 => 34)\\n        // Can not start with 0 (e.g. 1204e16 => 0 this is incorrect, will revert in next step)\\n        uint256 decimalPart = _frac(_strikePrice) / (10**(18 - _decimals));\\n        if (_decimals >= 2)\\n            require(decimalPart > 10**(_decimals - 1), \\\"Invalid decimal part\\\");\\n\\n        // Combine the string\\n        string memory name = string(\\n            abi.encodePacked(\\n                _tokenName,\\n                \\\"_\\\",\\n                intPart.uintToString(),\\n                \\\".\\\",\\n                decimalPart.uintToString(),\\n                \\\"_\\\",\\n                direction,\\n                \\\"_\\\",\\n                _round\\n            )\\n        );\\n        return name;\\n    }\\n\\n    function _frac(uint256 x) internal pure returns (uint256 result) {\\n        uint256 SCALE = 1e18;\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0251ee2a04f98f95eab65911ec4ea9c6e00584cdb2d7259536847dd9af023c26\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/interfaces/INPPolicyToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface INPPolicyToken is IERC20 {\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x33e7a46799f18b1c4750e596ba8cbd47d1d506dac87a5d258da50ee4b133ca36\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/interfaces/INaughtyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface INaughtyFactory {\\n    function getPairAddress(address _tokenAddress1, address _tokenAddress2)\\n        external\\n        view\\n        returns (address);\\n\\n    function deployPolicyToken(\\n        string memory _policyTokenName,\\n        uint256 _decimals\\n    ) external returns (address);\\n\\n    function deployPool(\\n        address _policyTokenAddress,\\n        address _stablecoin,\\n        uint256 _deadline,\\n        uint256 _feeRate\\n    ) external returns (address);\\n\\n    function incomeMaker() external view returns (address);\\n\\n    function incomeMakerProportion() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x52954621ef71dc1217e56e802c04e93f21a8776a8fe6b886ca8b0a2b6e1ab720\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/interfaces/IPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface IPriceGetter {\\n    function getPriceFeedAddress(string memory _tokenName)\\n        external\\n        view\\n        returns (address);\\n\\n    function setPriceFeed(string memory _tokenName, address _feedAddress)\\n        external;\\n\\n    function getLatestPrice(string memory _tokenName)\\n        external\\n        returns (uint256 _price);\\n}\\n\",\"keccak256\":\"0xd59b115c1d588248cf2606a5a133bcb0e323f14557de9b1bea597fb3d3c3264d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/interfaces/IERC20Decimals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.10;\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xacb791f2cbb5756d937bfa2ee24497f9ba50f866a7ddf4443914c893e05ca2d0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Most of the functions to be called from outside will use the name of policyToken         rather than the address (easy to read).         Other variables or functions still use address to index.         The rule of policyToken naming is:              Original Token Name(with decimals) + Strike Price + Lower or Higher + Date         E.g.  AVAX_30.0_L_2101, BTC_30000.0_L_2102, ETH_8000.0_H_2109         (the original name need to be the same as in the chainlink oracle)         There are three decimals for a policy token:              1. Name decimals: Only for generating the name of policyToken              2. Token decimals: The decimals of the policyToken                 (should be the same as the paired stablecoin)              3. Price decimals: Always 18. The oracle result will be transferred for settlement",
    "kind": "dev",
    "methods": {
      "_generateName(string,uint256,uint256,bool,string)": {
        "params": {
          "_decimals": "Decimals of the name generation (0,1=>1, 2=>2)",
          "_isCall": "The policy's payoff is triggered when higher(true) or lower(false)",
          "_round": "Round of the policy, named by <month><day> (e.g. 0320, 1215)",
          "_strikePrice": "Strike price of the policy (18 decimals)",
          "_tokenName": "Name of the stike token (BTC, ETH, AVAX...)"
        }
      },
      "addStablecoin(address)": {
        "params": {
          "_newStablecoin": "Address of the new stablecoin"
        }
      },
      "claim(string,address,uint256)": {
        "details": "It is done after result settlement and only if the result is true",
        "params": {
          "_amount": "Amount of stablecoin",
          "_policyTokenName": "Name of the policy token",
          "_stablecoin": "Address of the stable coin"
        }
      },
      "collectIncome(address)": {
        "details": "Can be done by anyone, only when there is some income to be distributed",
        "params": {
          "_stablecoin": "Address of stablecoin"
        }
      },
      "delegateDeposit(string,address,uint256,address)": {
        "details": "Only called by the router contract",
        "params": {
          "_amount": "Amount of stablecoin",
          "_policyTokenName": "Name of the policy token",
          "_stablecoin": "Address of the sable coin",
          "_user": "Address to receive the policy tokens"
        }
      },
      "deployPolicyToken(string,address,bool,uint256,uint256,uint256,string,uint256,uint256)": {
        "details": "Only the owner can deploy new policy token      The name form is like \"AVAX_50_L_2203\" and is built inside the contract.",
        "params": {
          "_deadline": "Deadline of this policy token (deposit / redeem / swap)",
          "_isCall": "The policy is for higher or lower than the strike price (call / put)",
          "_nameDecimals": "Decimals of this token's name (0~18)",
          "_round": "Round of the token (e.g. 2203 -> expired at 22 March)",
          "_settleTimestamp": "Can settle after this timestamp (for oracle)",
          "_stablecoin": "Address of the stablecoin (Just for check decimals here)",
          "_strikePrice": "Strike price of the policy (have already been transferred with 1e18)",
          "_tokenDecimals": "Decimals of this token's value (0~18) (same as paired stablecoin)",
          "_tokenName": "Name of the original token (e.g. AVAX, BTC, ETH...)"
        }
      },
      "deployPool(string,address,uint256,uint256)": {
        "params": {
          "_feeRate": "Fee rate given to LP holders",
          "_policyTokenName": "Name of the policy token",
          "_poolDeadline": "Swapping deadline of the pool (normally the same as the token's deadline)",
          "_stablecoin": "Address of the stable coin"
        }
      },
      "deposit(string,address,uint256)": {
        "params": {
          "_amount": "Amount of stablecoin",
          "_policyTokenName": "Name of the policy token",
          "_stablecoin": "Address of the stable coin"
        }
      },
      "findAddressbyName(string)": {
        "params": {
          "_policyTokenName": "Name of the policy token (e.g. \"AVAX_30_L_2103\")"
        },
        "returns": {
          "policyTokenAddress": "Address of the policy token"
        }
      },
      "findNamebyAddress(address)": {
        "params": {
          "_policyTokenAddress": "Address of the policy token"
        },
        "returns": {
          "policyTokenName": "Name of the policy token"
        }
      },
      "getAllTokens()": {
        "details": "Include all active&expired tokens",
        "returns": {
          "_0": "tokensInfo Token information list"
        }
      },
      "getPolicyTokenInfo(string)": {
        "params": {
          "_policyTokenName": "Name of the policy token (e.g. \"AVAX30L202103\")"
        },
        "returns": {
          "_0": "policyTokenInfo PolicyToken detail information"
        }
      },
      "getUserQuota(address,address)": {
        "params": {
          "_policyTokenAddress": "Address of the policy token",
          "_user": "Address of the user to be checked"
        },
        "returns": {
          "_quota": "User's quota result"
        }
      },
      "initialize(address,address,address)": {
        "params": {
          "_factory": "Address of naughty factory",
          "_priceGetter": "Address of the oracle contract",
          "_usdc": "USDC.e is the first stablecoin supported in the pool"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(string,address,uint256)": {
        "details": "Redeem happens before the deadline and is different from claim/settle",
        "params": {
          "_amount": "Amount to redeem",
          "_policyTokenName": "Name of the policy token",
          "_stablecoin": "Address of the stablecoin"
        }
      },
      "redeemAfterSettlement(string,address)": {
        "params": {
          "_policyTokenName": "Name of the policy token",
          "_stablecoin": "Address of the stablecoin"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setILMContract(address)": {
        "params": {
          "_ILM": "Address of the new ILM"
        }
      },
      "setIncomeSharing(address)": {
        "params": {
          "_incomeSharing": "Address of the new incomeSharing"
        }
      },
      "setIncomeToLottery(uint256)": {
        "details": "The remaining part will be distributed to incomeSharing",
        "params": {
          "_toLottery": "Proportion to lottery"
        }
      },
      "setLottery(address)": {
        "params": {
          "_lotteryAddress": "Address of the new lottery"
        }
      },
      "setNaughtyRouter(address)": {
        "params": {
          "_router": "Address of the new naughty router"
        }
      },
      "settleAllPolicyTokens(string,address,uint256,uint256)": {
        "details": "Take care of the gas cost and can use the _startIndex and _stopIndex to control the size",
        "params": {
          "_policyTokenName": "Name of policy token",
          "_stablecoin": "Address of stablecoin",
          "_startIndex": "Settlement start index",
          "_stopIndex": "Settlement stop index"
        }
      },
      "settleFinalResult(string)": {
        "params": {
          "_policyTokenName": "Name of the policy token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateUserQuota(address,address,uint256)": {
        "details": "When you claim your liquidity from ILM, you will get normal quota as you are using policyCore",
        "params": {
          "_amount": "Quota amount",
          "_policyToken": "PolicyToken address",
          "_user": "User address"
        }
      }
    },
    "title": "PolicyCore",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_generateName(string,uint256,uint256,bool,string)": {
        "notice": "Generate the policy token name"
      },
      "addStablecoin(address)": {
        "notice": "Add a new supported stablecoin"
      },
      "claim(string,address,uint256)": {
        "notice": "Claim a payoff based on policy tokens"
      },
      "collectIncome(address)": {
        "notice": "Collect the income"
      },
      "delegateDeposit(string,address,uint256,address)": {
        "notice": "Delegate deposit (deposit and mint for other addresses)"
      },
      "deployPolicyToken(string,address,bool,uint256,uint256,uint256,string,uint256,uint256)": {
        "notice": "Deploy a new policy token and return the token address"
      },
      "deployPool(string,address,uint256,uint256)": {
        "notice": "Deploy a new pair (pool)"
      },
      "deposit(string,address,uint256)": {
        "notice": "Deposit stablecoins and get policy tokens"
      },
      "findAddressbyName(string)": {
        "notice": "Find the token address by its name"
      },
      "findNamebyAddress(address)": {
        "notice": "Find the token name by its address"
      },
      "getAllTokens()": {
        "notice": "Get the information about all the tokens"
      },
      "getPolicyTokenInfo(string)": {
        "notice": "Find the token information by its name"
      },
      "getUserQuota(address,address)": {
        "notice": "Get a user's quota for a certain policy token"
      },
      "initialize(address,address,address)": {
        "notice": "Constructor, for some addresses"
      },
      "redeem(string,address,uint256)": {
        "notice": "Burn policy tokens and redeem stablecoins"
      },
      "redeemAfterSettlement(string,address)": {
        "notice": "Redeem policy tokens and get stablecoins by the user himeself"
      },
      "setILMContract(address)": {
        "notice": "Change the address of ILM"
      },
      "setIncomeSharing(address)": {
        "notice": "Change the address of emergency pool"
      },
      "setIncomeToLottery(uint256)": {
        "notice": "Change the income part to lottery"
      },
      "setLottery(address)": {
        "notice": "Change the address of lottery"
      },
      "setNaughtyRouter(address)": {
        "notice": "Change the address of naughty router"
      },
      "settleAllPolicyTokens(string,address,uint256,uint256)": {
        "notice": "Settle the policies for the users when insurance events do not happen         Funds are automatically distributed back to the depositors"
      },
      "settleFinalResult(string)": {
        "notice": "Get the final price from the PriceGetter contract"
      },
      "updateUserQuota(address,address,uint256)": {
        "notice": "Update user quota from ILM when claim"
      }
    },
    "notice": "Core logic of Naughty Price Product         Preset:              (Done in the naughtyFactory contract)              1. Deploy policyToken contract              2. Deploy policyToken-Stablecoin pool contract         User Interaction:              1. Deposit Stablecoin and mint PolicyTokens              2. Redeem their Stablecoin and burn the PolicyTokens (before settlement)              3. Claim for payout with PolicyTokens (after settlement)         PolicyTokens are minted with the ratio 1:1 to Stablecoin         The PolicyTokens are traded in the pool with CFMM (xy=k)         When the event happens, a PolicyToken can be burned for claiming 1 Stablecoin.         When the event does not happen, the PolicyToken depositors can         redeem their 1 deposited Stablecoin",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2523,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2526,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3760,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2403,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 2515,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 31077,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "factory",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(INaughtyFactory)33205"
      },
      {
        "astId": 31080,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "priceGetter",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IPriceGetter)33480"
      },
      {
        "astId": 31082,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "lottery",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 31084,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "incomeSharing",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 31086,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "naughtyRouter",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 31088,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "ILMContract",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 31090,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "toLotteryPart",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 31110,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "policyTokenInfoMapping",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_string_memory_ptr,t_struct(PolicyTokenInfo)31105_storage)"
      },
      {
        "astId": 31114,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "policyTokenAddressToName",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 31117,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "allPolicyTokens",
        "offset": 0,
        "slot": "110",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 31121,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "supportedStablecoin",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 31125,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "whichStablecoin",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 31129,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "policyTokenToOriginal",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 31135,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "userQuota",
        "offset": 0,
        "slot": "114",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 31140,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "allDepositors",
        "offset": 0,
        "slot": "115",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 31154,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "settleResult",
        "offset": 0,
        "slot": "116",
        "type": "t_mapping(t_address,t_struct(SettlementInfo)31149_storage)"
      },
      {
        "astId": 31158,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "pendingIncomeToLottery",
        "offset": 0,
        "slot": "117",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 31162,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "pendingIncomeToSharing",
        "offset": 0,
        "slot": "118",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INaughtyFactory)33205": {
        "encoding": "inplace",
        "label": "contract INaughtyFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceGetter)33480": {
        "encoding": "inplace",
        "label": "contract IPriceGetter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_struct(SettlementInfo)31149_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PolicyCore.SettlementInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SettlementInfo)31149_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_struct(PolicyTokenInfo)31105_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct PolicyCore.PolicyTokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PolicyTokenInfo)31105_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PolicyTokenInfo)31105_storage": {
        "encoding": "inplace",
        "label": "struct PolicyCore.PolicyTokenInfo",
        "members": [
          {
            "astId": 31092,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "policyTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 31094,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "isCall",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 31096,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "nameDecimals",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 31098,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "tokenDecimals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 31100,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "strikePrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 31102,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "deadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 31104,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "settleTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(SettlementInfo)31149_storage": {
        "encoding": "inplace",
        "label": "struct PolicyCore.SettlementInfo",
        "members": [
          {
            "astId": 31142,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 31144,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "isHappened",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 31146,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "alreadySettled",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 31148,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "currentDistributionIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}