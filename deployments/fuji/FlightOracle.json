{
  "address": "0x472e3155dCd756477Bbf3Da5cdaB266E2e0291Ea",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyFlow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newJobId",
          "type": "bytes32"
        }
      ],
      "name": "JobIdChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "OracleAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPolicyFlow",
          "type": "address"
        }
      ],
      "name": "PolicyFlowChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_data",
          "type": "uint256"
        }
      ],
      "name": "fulfill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainlinkTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jobId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_payment",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_url",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_path",
          "type": "string"
        },
        {
          "internalType": "int256",
          "name": "_times",
          "type": "int256"
        }
      ],
      "name": "newOracleRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyFlow",
      "outputs": [
        {
          "internalType": "contract IPolicyFlow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_newJobId",
          "type": "bytes32"
        }
      ],
      "name": "setJobId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOracle",
          "type": "address"
        }
      ],
      "name": "setOracleAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyFlow",
          "type": "address"
        }
      ],
      "name": "setPolicyFlow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4909331b55c8dfc274f0797b7a40816c45c38d95de6cab3f799ea796548493fe",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x472e3155dCd756477Bbf3Da5cdaB266E2e0291Ea",
    "transactionIndex": 1,
    "gasUsed": "1359052",
    "logsBloom": "0x
    "blockHash": "0xe1a3c383e0c8202733da10a4d5d34651941ad9a7ed8c65833991f2504608c279",
    "transactionHash": "0x4909331b55c8dfc274f0797b7a40816c45c38d95de6cab3f799ea796548493fe",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5445589,
        "transactionHash": "0x4909331b55c8dfc274f0797b7a40816c45c38d95de6cab3f799ea796548493fe",
        "address": "0x472e3155dCd756477Bbf3Da5cdaB266E2e0291Ea",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001be1a151ba3d24f594ee971dc9b843f23b5ba80e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe1a3c383e0c8202733da10a4d5d34651941ad9a7ed8c65833991f2504608c279"
      }
    ],
    "blockNumber": 5445589,
    "cumulativeGasUsed": "1422192",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAFB5b1191243fC9B2880485F7FdAaD51183DF47C",
    "0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846"
  ],
  "numDeployments": 1,
  "solcInputHash": "8dd2e6135d939db293bda9b7f143597f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyFlow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newJobId\",\"type\":\"bytes32\"}],\"name\":\"JobIdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPolicyFlow\",\"type\":\"address\"}],\"name\":\"PolicyFlowChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_data\",\"type\":\"uint256\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jobId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"_times\",\"type\":\"int256\"}],\"name\":\"newOracleRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyFlow\",\"outputs\":[{\"internalType\":\"contract IPolicyFlow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newJobId\",\"type\":\"bytes32\"}],\"name\":\"setJobId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyFlow\",\"type\":\"address\"}],\"name\":\"setPolicyFlow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Remember to set the url, oracleAddress and jobId         If there are multiple oracle providers in the future, this contract may need to be updated.\",\"kind\":\"dev\",\"methods\":{\"fulfill(bytes32,uint256)\":{\"details\":\"The recordChainlinkFulfillment protects this function from being called      by anyone other than the oracle address that the request was sent to\",\"params\":{\"_data\":\"The answer provided by the oracle\",\"_requestId\":\"The ID that was generated for the request\"}},\"getChainlinkTokenAddress()\":{\"details\":\"This is the public implementation for chainlinkTokenAddress, which is      an internal method of the ChainlinkClient contract\"},\"newOracleRequest(uint256,string,string,int256)\":{\"details\":\"This function ignores the stored Oracle contract address and      will instead send the request to the address specified\",\"params\":{\"_path\":\"The dot-delimited path to parse of the response\",\"_payment\":\"Payment to the oracle\",\"_times\":\"The number to multiply the result by\",\"_url\":\"The URL to fetch data from\"}},\"renounceOwnership()\":{\"details\":\"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"newOwner\":\"Address of the new owner\"}}},\"title\":\"Flight Oracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Need the address of LINK token on specific network\"},\"fulfill(bytes32,uint256)\":{\"notice\":\"The fulfill method from requests created by this contract\"},\"getChainlinkTokenAddress()\":{\"notice\":\"Returns the address of the LINK token\"},\"newOracleRequest(uint256,string,string,int256)\":{\"notice\":\"Creates a request to the specified Oracle contract address\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner.\"},\"setJobId(bytes32)\":{\"notice\":\"Set a new job id\"},\"setOracleAddress(address)\":{\"notice\":\"Set the oracle address\"},\"setPolicyFlow(address)\":{\"notice\":\"Change the policy flow contract address\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).\"}},\"notice\":\"This is the flight oracle contract.         Called by policyFlow contract and send the request to chainlink node.         After receiving the result, call the policyFlow contract to do the settlement.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/miserable-flight/FlightOracle.sol\":\"FlightOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"contracts/miserable-flight/FlightOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\nimport \\\"./interfaces/IPolicyFlow.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\n\\n/**\\n * @title  Flight Oracle\\n * @notice This is the flight oracle contract.\\n *         Called by policyFlow contract and send the request to chainlink node.\\n *         After receiving the result, call the policyFlow contract to do the settlement.\\n * @dev    Remember to set the url, oracleAddress and jobId\\n *         If there are multiple oracle providers in the future, this contract may need to be updated.\\n */\\ncontract FlightOracle is ChainlinkClient, Ownable {\\n    using Chainlink for Chainlink.Request;\\n\\n    IPolicyFlow public policyFlow;\\n\\n    address public oracleAddress;\\n    bytes32 public jobId;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event OracleAddressChanged(address newOracle);\\n    event JobIdChanged(bytes32 newJobId);\\n    event PolicyFlowChanged(address newPolicyFlow);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Need the address of LINK token on specific network\\n     */\\n    constructor(address _policyFlow, address _link) {\\n        policyFlow = IPolicyFlow(_policyFlow);\\n\\n        setChainlinkToken(_link);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Only the policyFlow can call some functions\\n    modifier onlyPolicyFlow() {\\n        require(\\n            msg.sender == address(policyFlow),\\n            \\\"Only the policyflow can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Returns the address of the LINK token\\n     * @dev This is the public implementation for chainlinkTokenAddress, which is\\n     *      an internal method of the ChainlinkClient contract\\n     */\\n    function getChainlinkTokenAddress() external view returns (address) {\\n        return chainlinkTokenAddress();\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Set the oracle address\\n     */\\n    function setOracleAddress(address _newOracle) external onlyOwner {\\n        oracleAddress = _newOracle;\\n        emit OracleAddressChanged(_newOracle);\\n    }\\n\\n    /**\\n     * @notice Set a new job id\\n     */\\n    function setJobId(bytes32 _newJobId) external onlyOwner {\\n        jobId = _newJobId;\\n        emit JobIdChanged(_newJobId);\\n    }\\n\\n    /**\\n     * @notice Change the policy flow contract address\\n     */\\n    function setPolicyFlow(address _policyFlow) external onlyOwner {\\n        policyFlow = IPolicyFlow(_policyFlow);\\n        emit PolicyFlowChanged(_policyFlow);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Creates a request to the specified Oracle contract address\\n     * @dev This function ignores the stored Oracle contract address and\\n     *      will instead send the request to the address specified\\n     * @param _payment Payment to the oracle\\n     * @param _url The URL to fetch data from\\n     * @param _path The dot-delimited path to parse of the response\\n     * @param _times The number to multiply the result by\\n     */\\n    function newOracleRequest(\\n        uint256 _payment,\\n        string memory _url,\\n        string memory _path,\\n        int256 _times\\n    ) public onlyPolicyFlow returns (bytes32) {\\n        require(\\n            oracleAddress != address(0) && jobId != 0,\\n            \\\"Please first set the oracle address & jobId\\\"\\n        );\\n\\n        Chainlink.Request memory req = buildChainlinkRequest(\\n            jobId,\\n            address(this),\\n            this.fulfill.selector\\n        );\\n        req.add(\\\"url\\\", _url);\\n        req.add(\\\"path\\\", _path);\\n        req.addInt(\\\"times\\\", _times);\\n        return sendChainlinkRequestTo(oracleAddress, req, _payment);\\n    }\\n\\n    /**\\n     * @notice The fulfill method from requests created by this contract\\n     * @dev The recordChainlinkFulfillment protects this function from being called\\n     *      by anyone other than the oracle address that the request was sent to\\n     * @param _requestId The ID that was generated for the request\\n     * @param _data The answer provided by the oracle\\n     */\\n    function fulfill(bytes32 _requestId, uint256 _data)\\n        public\\n        recordChainlinkFulfillment(_requestId)\\n    {\\n        policyFlow.finalSettlement(_requestId, _data);\\n    }\\n}\\n\",\"keccak256\":\"0xf625a29a553450f143e53719f5c3a5093e6654513248ebdeb48de89376b4a620\",\"license\":\"MIT\"},\"contracts/miserable-flight/interfaces/IPolicyFlow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IPolicyStruct.sol\\\";\\n\\n/**\\n * @title  IPolicyFlow\\n * @notice This is the interface of PolicyFlow contract.\\n *         Contains some type definations, event list and function declarations.\\n */\\ninterface IPolicyFlow is IPolicyStruct {\\n    /// @notice Function declarations\\n\\n    /// @notice Apply for a new policy\\n    function newApplication(\\n        uint256 _productId,\\n        string memory _flightNumber,\\n        uint256 _premium,\\n        uint256 _departureTimestamp,\\n        uint256 _landingTimestamp,\\n        uint256 _deadline,\\n        bytes calldata signature\\n    ) external returns (uint256 policyId);\\n\\n    /// @notice Start a new claim request\\n    function newClaimRequest(\\n        uint256 _policyId,\\n        string memory _flightNumber,\\n        string memory _timestamp,\\n        string memory _path,\\n        bool _forceUpdate\\n    ) external;\\n\\n    /// @notice View a user's policy info\\n    function viewUserPolicy(address)\\n        external\\n        view\\n        returns (PolicyInfo[] memory);\\n\\n    /// @notice Get the policy info by its policyId\\n    function getPolicyInfoById(uint256)\\n        external\\n        view\\n        returns (PolicyInfo memory);\\n\\n    /// @notice Update when the policy token is transferred to another owner\\n    function policyOwnerTransfer(\\n        uint256,\\n        address,\\n        address\\n    ) external;\\n\\n    /// @notice Do the final settlement when receiving the oracle result\\n    function finalSettlement(bytes32 _requestId, uint256 _result) external;\\n}\\n\",\"keccak256\":\"0x94564edba9916c3407fbdd8a6185710c2bd0597688376fb34d9ce38a676bdf12\",\"license\":\"MIT\"},\"contracts/miserable-flight/interfaces/IPolicyStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IPolicyStruct {\\n    enum PolicyStatus {\\n        INI,\\n        SOLD,\\n        DECLINED,\\n        EXPIRED,\\n        CLAIMED\\n    }\\n\\n    struct PolicyInfo {\\n        uint256 productId;\\n        address buyerAddress;\\n        uint256 policyId;\\n        string flightNumber;\\n        uint256 premium;\\n        uint256 payoff;\\n        uint256 purchaseTimestamp;\\n        uint256 departureTimestamp;\\n        uint256 landingTimestamp;\\n        PolicyStatus status;\\n        bool alreadySettled;\\n        uint256 delayResult;\\n    }\\n}\\n\",\"keccak256\":\"0x910a474af4e70bfa6c626ffe338885cd60e81deded33827de1592ace3c9c7d48\",\"license\":\"MIT\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xb06279e6f1b96475d682c29d19535cc444d7b2e4aa60c8c7b4b0f032230ebff0\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. It will not be possible to call\\n     *         `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * @dev    Renouncing ownership will leave the contract without an owner,\\n     *         thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Can only be called by the current owner.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Internal function without access restriction.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x573a48e60c5226b8470bc2d8ba1f4436c89d865fc83de5449de9d8af0c8cb81a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260016004553480156200001657600080fd5b506040516200174d3803806200174d83398101604081905262000039916200011a565b62000044336200008e565b600780546001600160a01b0319166001600160a01b0384161790556200008681600280546001600160a01b0319166001600160a01b0392909216919091179055565b50506200015d565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0382165b92915050565b620000fe81620000e0565b81146200010a57600080fd5b50565b8051620000ed81620000f3565b60008060408385031215620001325762000132600080fd5b60006200014085856200010d565b925050602062000153858286016200010d565b9150509250929050565b6115e0806200016d6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b146101385780639a66455f14610152578063a89ae4ba14610172578063c2939d9714610185578063f2fde38b1461018e578063f42f6283146101a157600080fd5b80634357855e146100b957806343d387f8146100ce5780634c69c00f146100f7578063508954f81461010a5780635c326caf1461011d578063715018a614610130575b600080fd5b6100cc6100c7366004610da8565b6101a9565b005b6007546100e1906001600160a01b031681565b6040516100ee9190610e1b565b60405180910390f35b6100cc610105366004610e3d565b610296565b6100cc610118366004610e5e565b610325565b6100cc61012b366004610e3d565b610393565b6100cc610417565b6006546001600160a01b03165b6040516100ee9190610e88565b610165610160366004610f90565b61045c565b6040516100ee919061102e565b600854610145906001600160a01b031681565b61016560095481565b6100cc61019c366004610e3d565b610571565b6101456105dc565b60008281526005602052604090205482906001600160a01b031633146101ea5760405162461bcd60e51b81526004016101e190611081565b60405180910390fd5b60008181526005602052604080822080546001600160a01b03191690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a2600754604051631a397db960e01b81526001600160a01b0390911690631a397db99061025f9086908690600401611091565b600060405180830381600087803b15801561027957600080fd5b505af115801561028d573d6000803e3d6000fd5b50505050505050565b336102a96006546001600160a01b031690565b6001600160a01b0316146102cf5760405162461bcd60e51b81526004016101e1906110ac565b600880546001600160a01b0319166001600160a01b0383161790556040517fe420b96152542f57ce3d2d26d939a3c2860a82361801ad0a970a3badc32d538e9061031a908390610e88565b60405180910390a150565b336103386006546001600160a01b031690565b6001600160a01b03161461035e5760405162461bcd60e51b81526004016101e1906110ac565b60098190556040517f4dc4dbbae4d8f049d23aba312d2228dde16dd56f1d37f309f14fa9599ff5d9b09061031a90839061102e565b336103a66006546001600160a01b031690565b6001600160a01b0316146103cc5760405162461bcd60e51b81526004016101e1906110ac565b600780546001600160a01b0319166001600160a01b0383161790556040517f5555268576901f37625e3ab2764fd0bbb1f18eea39aa25cccf978984252021069061031a908390610e88565b3361042a6006546001600160a01b031690565b6001600160a01b0316146104505760405162461bcd60e51b81526004016101e1906110ac565b61045a60006105f5565b565b6007546000906001600160a01b031633146104895760405162461bcd60e51b81526004016101e19061112b565b6008546001600160a01b0316158015906104a4575060095415155b6104c05760405162461bcd60e51b81526004016101e190611181565b60006104d660095430634357855e60e01b610647565b6040805180820190915260038152621d5c9b60ea1b60208201529091506104ff9082908761066e565b6040805180820190915260048152630e0c2e8d60e31b60208201526105269082908661066e565b60408051808201909152600581526474696d657360d81b602082015261054e90829085610691565b600854610565906001600160a01b031682886106af565b9150505b949350505050565b336105846006546001600160a01b031690565b6001600160a01b0316146105aa5760405162461bcd60e51b81526004016101e1906110ac565b6001600160a01b0381166105d05760405162461bcd60e51b81526004016101e1906111d2565b6105d9816105f5565b50565b60006105f06002546001600160a01b031690565b905090565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61064f610d55565b610657610d55565b61066381868686610742565b9150505b9392505050565b608083015161067d908361077f565b608083015161068c908261077f565b505050565b60808301516106a0908361077f565b608083015161068c9082610796565b6004546000906106c08160016111f8565b600455835160408086015160808701515191516000936320214ca360e11b936106f89386938493923092918a9160019160240161127e565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050610738868386846107f9565b9695505050505050565b61074a610d55565b61075a8560800151610100610908565b50509183526001600160a01b031660208301526001600160e01b031916604082015290565b61078c8260038351610973565b61068c8282610a80565b67ffffffffffffffff198112156107b5576107b18282610aa7565b5050565b6001600160401b038113156107ce576107b18282610ae7565b600081126107e2576107b182600083610973565b6107b18260016107f4846000196112fb565b610973565b6000308460405160200161080e929190611363565b60408051808303601f1901815282825280516020918201206000818152600590925291812080546001600160a01b0319166001600160a01b038a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a2600254604051630200057560e51b81526001600160a01b0390911690634000aea0906108a99088908790879060040161137a565b6020604051808303816000875af11580156108c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ec91906113c3565b6105695760405162461bcd60e51b81526004016101e190611422565b604080518082019091526060815260006020820152610928602083611448565b1561095057610938602083611448565b61094390602061145c565b61094d90836111f8565b91505b506020808301829052604080518085526000815283019091019052815b92915050565b6017816001600160401b03161161099d576109978360e0600585901b168317610b08565b50505050565b60ff816001600160401b0316116109d9576109c3836018611fe0600586901b1617610b08565b50610997836001600160401b0383166001610b2d565b61ffff816001600160401b031611610a1657610a00836019611fe0600586901b1617610b08565b50610997836001600160401b0383166002610b2d565b63ffffffff816001600160401b031611610a5557610a3f83601a611fe0600586901b1617610b08565b50610997836001600160401b0383166004610b2d565b610a6a83601b611fe0600586901b1617610b08565b50610997836001600160401b0383166008610b2d565b60408051808201909152606081526000602082015261066783846000015151848551610b53565b610ab28260c3610b08565b506107b182610ac3836000196112fb565b604051602001610ad3919061102e565b604051602081830303815290604052610c3d565b610af28260c2610b08565b506107b18282604051602001610ad3919061102e565b6040805180820190915260608152600060208201526106678384600001515184610c4a565b604080518082019091526060815260006020820152610569848560000151518585610ca6565b6040805180820190915260608152600060208201528251821115610b7657600080fd5b6020850151610b8583866111f8565b1115610bb857610bb885610ba887602001518786610ba391906111f8565b610d27565b610bb390600261146e565b610d3e565b600080865180518760208301019350808887011115610bd75787860182525b505050602084015b60208410610c175780518252610bf66020836111f8565b9150610c036020826111f8565b9050610c1060208561145c565b9350610bdf565b51815160001960208690036101000a019081169019919091161790525083949350505050565b61078c8260028351610973565b60408051808201909152606081526000602082015283602001518310610c7f57610c7f8485602001516002610bb3919061146e565b835180516020858301018481535080851415610c9c576001810182525b5093949350505050565b6040805180820190915260608152600060208201526020850151610cca85846111f8565b1115610cde57610cde85610ba886856111f8565b60006001610cee8461010061159b565b610cf8919061145c565b9050855183868201018583198251161781525080518487011115610d1c5783860181525b509495945050505050565b600081831115610d3857508161096d565b50919050565b8151610d4a8383610908565b506109978382610a80565b6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b805b81146105d957600080fd5b803561096d81610d90565b60008060408385031215610dbe57610dbe600080fd5b6000610dca8585610d9d565b9250506020610ddb85828601610d9d565b9150509250929050565b60006001600160a01b03821661096d565b600061096d82610de5565b600061096d82610df6565b610e1581610e01565b82525050565b6020810161096d8284610e0c565b610d9281610de5565b803561096d81610e29565b600060208284031215610e5257610e52600080fd5b60006105698484610e32565b600060208284031215610e7357610e73600080fd5b60006105698484610d9d565b610e1581610de5565b6020810161096d8284610e7f565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715610ed157610ed1610e96565b6040525050565b6000610ee360405190565b9050610eef8282610eac565b919050565b60006001600160401b03821115610f0d57610f0d610e96565b601f19601f8301165b60200192915050565b82818337506000910152565b6000610f3e610f3984610ef4565b610ed8565b905082815260208101848484011115610f5957610f59600080fd5b610f64848285610f1f565b509392505050565b600082601f830112610f8057610f80600080fd5b8135610569848260208601610f2b565b60008060008060808587031215610fa957610fa9600080fd5b6000610fb58787610d9d565b94505060208501356001600160401b03811115610fd457610fd4600080fd5b610fe087828801610f6c565b93505060408501356001600160401b03811115610fff57610fff600080fd5b61100b87828801610f6c565b925050606061101c87828801610d9d565b91505092959194509250565b80610e15565b6020810161096d8284611028565b60288152602081017f536f75726365206d75737420626520746865206f7261636c65206f6620746865815267081c995c5d595cdd60c21b602082015290505b60400190565b6020808252810161096d8161103c565b6040810161109f8285611028565b6106676020830184611028565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408301526060820161096d565b602a8152602081017f4f6e6c792074686520706f6c696379666c6f772063616e2063616c6c207468698152693990333ab731ba34b7b760b11b6020820152905061107b565b6020808252810161096d816110e6565b602b8152602081017f506c656173652066697273742073657420746865206f7261636c65206164647281526a195cdcc809881a9bd8925960aa1b6020820152905061107b565b6020808252810161096d8161113b565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b6020820152905061107b565b6020808252810161096d81611191565b634e487b7160e01b600052601160045260246000fd5b6000821982111561120b5761120b6111e2565b500190565b6001600160e01b03198116610e15565b60005b8381101561123b578181015183820152602001611223565b838111156109975750506000910152565b6000611256825190565b80845260208401935061126d818560208601611220565b601f01601f19169290920192915050565b610100810161128d828b610e7f565b61129a602083018a611028565b6112a76040830189611028565b6112b46060830188610e7f565b6112c16080830187611210565b6112ce60a0830186611028565b6112db60c0830185611028565b81810360e08301526112ed818461124c565b9a9950505050505050505050565b600080831215600160ff1b840183121615611318576113186111e2565b600083126001600160ff1b03840183131615611336576113366111e2565b500390565b600061096d8260601b90565b600061096d8261133b565b610e1561135e82610e01565b611347565b61136d8184611352565b601401610f168183611028565b606081016113888286610e7f565b6113956020830185611028565b81810360408301526113a7818461124c565b95945050505050565b801515610d92565b805161096d816113b0565b6000602082840312156113d8576113d8600080fd5b600061056984846113b8565b60238152602081017f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261815262636c6560e81b6020820152905061107b565b6020808252810161096d816113e4565b634e487b7160e01b600052601260045260246000fd5b60008261145757611457611432565b500690565b600082821015611336576113366111e2565b6000816000190483118215151615611488576114886111e2565b500290565b80825b60018511156114cc578086048111156114ab576114ab6111e2565b60018516156114b957908102905b80026114c58560011c90565b9450611490565b94509492505050565b6000826114e457506001610667565b816114f157506000610667565b816001811461150757600281146115115761153e565b6001915050610667565b60ff841115611522576115226111e2565b8360020a915084821115611538576115386111e2565b50610667565b5060208310610133831016604e8410600b8410161715611571575081810a8381111561156c5761156c6111e2565b610667565b61157e848484600161148d565b92509050818404811115611594576115946111e2565b0292915050565b600061066760001984846114d556fea2646970667358221220f79df3982409d9cd0d8927fc90dd9047a7710446986bb57a7910166c03a89b1664736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b146101385780639a66455f14610152578063a89ae4ba14610172578063c2939d9714610185578063f2fde38b1461018e578063f42f6283146101a157600080fd5b80634357855e146100b957806343d387f8146100ce5780634c69c00f146100f7578063508954f81461010a5780635c326caf1461011d578063715018a614610130575b600080fd5b6100cc6100c7366004610da8565b6101a9565b005b6007546100e1906001600160a01b031681565b6040516100ee9190610e1b565b60405180910390f35b6100cc610105366004610e3d565b610296565b6100cc610118366004610e5e565b610325565b6100cc61012b366004610e3d565b610393565b6100cc610417565b6006546001600160a01b03165b6040516100ee9190610e88565b610165610160366004610f90565b61045c565b6040516100ee919061102e565b600854610145906001600160a01b031681565b61016560095481565b6100cc61019c366004610e3d565b610571565b6101456105dc565b60008281526005602052604090205482906001600160a01b031633146101ea5760405162461bcd60e51b81526004016101e190611081565b60405180910390fd5b60008181526005602052604080822080546001600160a01b03191690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a2600754604051631a397db960e01b81526001600160a01b0390911690631a397db99061025f9086908690600401611091565b600060405180830381600087803b15801561027957600080fd5b505af115801561028d573d6000803e3d6000fd5b50505050505050565b336102a96006546001600160a01b031690565b6001600160a01b0316146102cf5760405162461bcd60e51b81526004016101e1906110ac565b600880546001600160a01b0319166001600160a01b0383161790556040517fe420b96152542f57ce3d2d26d939a3c2860a82361801ad0a970a3badc32d538e9061031a908390610e88565b60405180910390a150565b336103386006546001600160a01b031690565b6001600160a01b03161461035e5760405162461bcd60e51b81526004016101e1906110ac565b60098190556040517f4dc4dbbae4d8f049d23aba312d2228dde16dd56f1d37f309f14fa9599ff5d9b09061031a90839061102e565b336103a66006546001600160a01b031690565b6001600160a01b0316146103cc5760405162461bcd60e51b81526004016101e1906110ac565b600780546001600160a01b0319166001600160a01b0383161790556040517f5555268576901f37625e3ab2764fd0bbb1f18eea39aa25cccf978984252021069061031a908390610e88565b3361042a6006546001600160a01b031690565b6001600160a01b0316146104505760405162461bcd60e51b81526004016101e1906110ac565b61045a60006105f5565b565b6007546000906001600160a01b031633146104895760405162461bcd60e51b81526004016101e19061112b565b6008546001600160a01b0316158015906104a4575060095415155b6104c05760405162461bcd60e51b81526004016101e190611181565b60006104d660095430634357855e60e01b610647565b6040805180820190915260038152621d5c9b60ea1b60208201529091506104ff9082908761066e565b6040805180820190915260048152630e0c2e8d60e31b60208201526105269082908661066e565b60408051808201909152600581526474696d657360d81b602082015261054e90829085610691565b600854610565906001600160a01b031682886106af565b9150505b949350505050565b336105846006546001600160a01b031690565b6001600160a01b0316146105aa5760405162461bcd60e51b81526004016101e1906110ac565b6001600160a01b0381166105d05760405162461bcd60e51b81526004016101e1906111d2565b6105d9816105f5565b50565b60006105f06002546001600160a01b031690565b905090565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61064f610d55565b610657610d55565b61066381868686610742565b9150505b9392505050565b608083015161067d908361077f565b608083015161068c908261077f565b505050565b60808301516106a0908361077f565b608083015161068c9082610796565b6004546000906106c08160016111f8565b600455835160408086015160808701515191516000936320214ca360e11b936106f89386938493923092918a9160019160240161127e565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050610738868386846107f9565b9695505050505050565b61074a610d55565b61075a8560800151610100610908565b50509183526001600160a01b031660208301526001600160e01b031916604082015290565b61078c8260038351610973565b61068c8282610a80565b67ffffffffffffffff198112156107b5576107b18282610aa7565b5050565b6001600160401b038113156107ce576107b18282610ae7565b600081126107e2576107b182600083610973565b6107b18260016107f4846000196112fb565b610973565b6000308460405160200161080e929190611363565b60408051808303601f1901815282825280516020918201206000818152600590925291812080546001600160a01b0319166001600160a01b038a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a2600254604051630200057560e51b81526001600160a01b0390911690634000aea0906108a99088908790879060040161137a565b6020604051808303816000875af11580156108c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ec91906113c3565b6105695760405162461bcd60e51b81526004016101e190611422565b604080518082019091526060815260006020820152610928602083611448565b1561095057610938602083611448565b61094390602061145c565b61094d90836111f8565b91505b506020808301829052604080518085526000815283019091019052815b92915050565b6017816001600160401b03161161099d576109978360e0600585901b168317610b08565b50505050565b60ff816001600160401b0316116109d9576109c3836018611fe0600586901b1617610b08565b50610997836001600160401b0383166001610b2d565b61ffff816001600160401b031611610a1657610a00836019611fe0600586901b1617610b08565b50610997836001600160401b0383166002610b2d565b63ffffffff816001600160401b031611610a5557610a3f83601a611fe0600586901b1617610b08565b50610997836001600160401b0383166004610b2d565b610a6a83601b611fe0600586901b1617610b08565b50610997836001600160401b0383166008610b2d565b60408051808201909152606081526000602082015261066783846000015151848551610b53565b610ab28260c3610b08565b506107b182610ac3836000196112fb565b604051602001610ad3919061102e565b604051602081830303815290604052610c3d565b610af28260c2610b08565b506107b18282604051602001610ad3919061102e565b6040805180820190915260608152600060208201526106678384600001515184610c4a565b604080518082019091526060815260006020820152610569848560000151518585610ca6565b6040805180820190915260608152600060208201528251821115610b7657600080fd5b6020850151610b8583866111f8565b1115610bb857610bb885610ba887602001518786610ba391906111f8565b610d27565b610bb390600261146e565b610d3e565b600080865180518760208301019350808887011115610bd75787860182525b505050602084015b60208410610c175780518252610bf66020836111f8565b9150610c036020826111f8565b9050610c1060208561145c565b9350610bdf565b51815160001960208690036101000a019081169019919091161790525083949350505050565b61078c8260028351610973565b60408051808201909152606081526000602082015283602001518310610c7f57610c7f8485602001516002610bb3919061146e565b835180516020858301018481535080851415610c9c576001810182525b5093949350505050565b6040805180820190915260608152600060208201526020850151610cca85846111f8565b1115610cde57610cde85610ba886856111f8565b60006001610cee8461010061159b565b610cf8919061145c565b9050855183868201018583198251161781525080518487011115610d1c5783860181525b509495945050505050565b600081831115610d3857508161096d565b50919050565b8151610d4a8383610908565b506109978382610a80565b6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b805b81146105d957600080fd5b803561096d81610d90565b60008060408385031215610dbe57610dbe600080fd5b6000610dca8585610d9d565b9250506020610ddb85828601610d9d565b9150509250929050565b60006001600160a01b03821661096d565b600061096d82610de5565b600061096d82610df6565b610e1581610e01565b82525050565b6020810161096d8284610e0c565b610d9281610de5565b803561096d81610e29565b600060208284031215610e5257610e52600080fd5b60006105698484610e32565b600060208284031215610e7357610e73600080fd5b60006105698484610d9d565b610e1581610de5565b6020810161096d8284610e7f565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715610ed157610ed1610e96565b6040525050565b6000610ee360405190565b9050610eef8282610eac565b919050565b60006001600160401b03821115610f0d57610f0d610e96565b601f19601f8301165b60200192915050565b82818337506000910152565b6000610f3e610f3984610ef4565b610ed8565b905082815260208101848484011115610f5957610f59600080fd5b610f64848285610f1f565b509392505050565b600082601f830112610f8057610f80600080fd5b8135610569848260208601610f2b565b60008060008060808587031215610fa957610fa9600080fd5b6000610fb58787610d9d565b94505060208501356001600160401b03811115610fd457610fd4600080fd5b610fe087828801610f6c565b93505060408501356001600160401b03811115610fff57610fff600080fd5b61100b87828801610f6c565b925050606061101c87828801610d9d565b91505092959194509250565b80610e15565b6020810161096d8284611028565b60288152602081017f536f75726365206d75737420626520746865206f7261636c65206f6620746865815267081c995c5d595cdd60c21b602082015290505b60400190565b6020808252810161096d8161103c565b6040810161109f8285611028565b6106676020830184611028565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408301526060820161096d565b602a8152602081017f4f6e6c792074686520706f6c696379666c6f772063616e2063616c6c207468698152693990333ab731ba34b7b760b11b6020820152905061107b565b6020808252810161096d816110e6565b602b8152602081017f506c656173652066697273742073657420746865206f7261636c65206164647281526a195cdcc809881a9bd8925960aa1b6020820152905061107b565b6020808252810161096d8161113b565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b6020820152905061107b565b6020808252810161096d81611191565b634e487b7160e01b600052601160045260246000fd5b6000821982111561120b5761120b6111e2565b500190565b6001600160e01b03198116610e15565b60005b8381101561123b578181015183820152602001611223565b838111156109975750506000910152565b6000611256825190565b80845260208401935061126d818560208601611220565b601f01601f19169290920192915050565b610100810161128d828b610e7f565b61129a602083018a611028565b6112a76040830189611028565b6112b46060830188610e7f565b6112c16080830187611210565b6112ce60a0830186611028565b6112db60c0830185611028565b81810360e08301526112ed818461124c565b9a9950505050505050505050565b600080831215600160ff1b840183121615611318576113186111e2565b600083126001600160ff1b03840183131615611336576113366111e2565b500390565b600061096d8260601b90565b600061096d8261133b565b610e1561135e82610e01565b611347565b61136d8184611352565b601401610f168183611028565b606081016113888286610e7f565b6113956020830185611028565b81810360408301526113a7818461124c565b95945050505050565b801515610d92565b805161096d816113b0565b6000602082840312156113d8576113d8600080fd5b600061056984846113b8565b60238152602081017f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261815262636c6560e81b6020820152905061107b565b6020808252810161096d816113e4565b634e487b7160e01b600052601260045260246000fd5b60008261145757611457611432565b500690565b600082821015611336576113366111e2565b6000816000190483118215151615611488576114886111e2565b500290565b80825b60018511156114cc578086048111156114ab576114ab6111e2565b60018516156114b957908102905b80026114c58560011c90565b9450611490565b94509492505050565b6000826114e457506001610667565b816114f157506000610667565b816001811461150757600281146115115761153e565b6001915050610667565b60ff841115611522576115226111e2565b8360020a915084821115611538576115386111e2565b50610667565b5060208310610133831016604e8410600b8410161715611571575081810a8381111561156c5761156c6111e2565b610667565b61157e848484600161148d565b92509050818404811115611594576115946111e2565b0292915050565b600061066760001984846114d556fea2646970667358221220f79df3982409d9cd0d8927fc90dd9047a7710446986bb57a7910166c03a89b1664736f6c634300080a0033",
  "devdoc": {
    "details": "Remember to set the url, oracleAddress and jobId         If there are multiple oracle providers in the future, this contract may need to be updated.",
    "kind": "dev",
    "methods": {
      "fulfill(bytes32,uint256)": {
        "details": "The recordChainlinkFulfillment protects this function from being called      by anyone other than the oracle address that the request was sent to",
        "params": {
          "_data": "The answer provided by the oracle",
          "_requestId": "The ID that was generated for the request"
        }
      },
      "getChainlinkTokenAddress()": {
        "details": "This is the public implementation for chainlinkTokenAddress, which is      an internal method of the ChainlinkClient contract"
      },
      "newOracleRequest(uint256,string,string,int256)": {
        "details": "This function ignores the stored Oracle contract address and      will instead send the request to the address specified",
        "params": {
          "_path": "The dot-delimited path to parse of the response",
          "_payment": "Payment to the oracle",
          "_times": "The number to multiply the result by",
          "_url": "The URL to fetch data from"
        }
      },
      "renounceOwnership()": {
        "details": "Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "newOwner": "Address of the new owner"
        }
      }
    },
    "title": "Flight Oracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Need the address of LINK token on specific network"
      },
      "fulfill(bytes32,uint256)": {
        "notice": "The fulfill method from requests created by this contract"
      },
      "getChainlinkTokenAddress()": {
        "notice": "Returns the address of the LINK token"
      },
      "newOracleRequest(uint256,string,string,int256)": {
        "notice": "Creates a request to the specified Oracle contract address"
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."
      },
      "setJobId(bytes32)": {
        "notice": "Set a new job id"
      },
      "setOracleAddress(address)": {
        "notice": "Set the oracle address"
      },
      "setPolicyFlow(address)": {
        "notice": "Change the policy flow contract address"
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`)."
      }
    },
    "notice": "This is the flight oracle contract.         Called by policyFlow contract and send the request to chainlink node.         After receiving the result, call the policyFlow contract to do the settlement.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/miserable-flight/FlightOracle.sol:FlightOracle",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)1191"
      },
      {
        "astId": 321,
        "contract": "contracts/miserable-flight/FlightOracle.sol:FlightOracle",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 324,
        "contract": "contracts/miserable-flight/FlightOracle.sol:FlightOracle",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1286"
      },
      {
        "astId": 327,
        "contract": "contracts/miserable-flight/FlightOracle.sol:FlightOracle",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1366"
      },
      {
        "astId": 330,
        "contract": "contracts/miserable-flight/FlightOracle.sol:FlightOracle",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 334,
        "contract": "contracts/miserable-flight/FlightOracle.sol:FlightOracle",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 21715,
        "contract": "contracts/miserable-flight/FlightOracle.sol:FlightOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 12214,
        "contract": "contracts/miserable-flight/FlightOracle.sol:FlightOracle",
        "label": "policyFlow",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IPolicyFlow)15304"
      },
      {
        "astId": 12216,
        "contract": "contracts/miserable-flight/FlightOracle.sol:FlightOracle",
        "label": "oracleAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 12218,
        "contract": "contracts/miserable-flight/FlightOracle.sol:FlightOracle",
        "label": "jobId",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)1191": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IPolicyFlow)15304": {
        "encoding": "inplace",
        "label": "contract IPolicyFlow",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1286": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1366": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}