{
  "address": "0xFa386114788b133e9289e53e6C6f2a50Ac31E260",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_insurancePool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_policyToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sigManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buyerToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thresholdMin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thresholdMax",
          "type": "uint256"
        }
      ],
      "name": "DelayThresholdChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "FeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "FlightOracleChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "policyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "FulfilledOracleRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxPayoff",
          "type": "uint256"
        }
      ],
      "name": "MaxPayoffChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinTime",
          "type": "uint256"
        }
      ],
      "name": "MinTimeBeforeDepartureChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_policyID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "NewPolicyApplication",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "newUrl",
          "type": "string"
        }
      ],
      "name": "OracleUrlChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "policyID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "PolicyClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "policyID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "PolicyDeclined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "policyID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "PolicyExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "PolicyOwnerTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "policyID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "PolicySold",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELAY_THRESHOLD_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DELAY_THRESHOLD_MIN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FLIGHT_STATUS_URL",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PAYOFF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TIME_BEFORE_DEPARTURE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRODUCT_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyerToken",
      "outputs": [
        {
          "internalType": "contract IBuyerToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "changeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMaxPayoff",
          "type": "uint256"
        }
      ],
      "name": "changeMaxPayoff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMinTime",
          "type": "uint256"
        }
      ],
      "name": "changeMinTimeBeforeDeparture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_result",
          "type": "uint256"
        }
      ],
      "name": "finalSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        }
      ],
      "name": "findPolicyBuyerById",
      "outputs": [
        {
          "internalType": "address",
          "name": "buyerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flightOracle",
      "outputs": [
        {
          "internalType": "contract IFlightOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        }
      ],
      "name": "getPolicyInfoById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "productId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "policyId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "flightNumber",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "premium",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "payoff",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "departureTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "landingTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum IPolicyStruct.PolicyStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "alreadySettled",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "delayResult",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPolicyStruct.PolicyInfo",
          "name": "policy",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insurancePool",
      "outputs": [
        {
          "internalType": "contract IInsurancePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_flightNumber",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_premium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_departureTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_landingDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "newApplication",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_flightNumber",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_path",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_forceUpdate",
          "type": "bool"
        }
      ],
      "name": "newClaimRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "policyList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "policyId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "flightNumber",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payoff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchaseTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "departureTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "landingTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum IPolicyStruct.PolicyStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "alreadySettled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "delayResult",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_oldOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "policyOwnerTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyToken",
      "outputs": [
        {
          "internalType": "contract IFDPolicyToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_thresholdMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_thresholdMax",
          "type": "uint256"
        }
      ],
      "name": "setDelayThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        }
      ],
      "name": "setFlightOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_url",
          "type": "string"
        }
      ],
      "name": "setURL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sigManager",
      "outputs": [
        {
          "internalType": "contract ISigManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPolicies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "viewUserPolicy",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "productId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "policyId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "flightNumber",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "premium",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "payoff",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "departureTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "landingTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum IPolicyStruct.PolicyStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "alreadySettled",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "delayResult",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPolicyStruct.PolicyInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x726afea5a4b87f2c3d3cb10c3eb3e60df3d4ce0d4582a6d120b9486536e98826",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0xFa386114788b133e9289e53e6C6f2a50Ac31E260",
    "transactionIndex": 1,
    "gasUsed": "2697487",
    "logsBloom": "0x
    "blockHash": "0x798ee345b9e99f7f98d50976ed0efbf8e7228176c08712b8f047795bd012113f",
    "transactionHash": "0x726afea5a4b87f2c3d3cb10c3eb3e60df3d4ce0d4582a6d120b9486536e98826",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5752853,
        "transactionHash": "0x726afea5a4b87f2c3d3cb10c3eb3e60df3d4ce0d4582a6d120b9486536e98826",
        "address": "0xFa386114788b133e9289e53e6C6f2a50Ac31E260",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001be1a151ba3d24f594ee971dc9b843f23b5ba80e"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x798ee345b9e99f7f98d50976ed0efbf8e7228176c08712b8f047795bd012113f"
      }
    ],
    "blockNumber": 5752853,
    "cumulativeGasUsed": "2902977",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x282C7467E106683Fd070471892B9B641774Af1Cd",
    "0xaC7a5583529dBD460872da11D53C3ff1aC718D4a",
    "0x21F29504b491D5Dd8ac61eae298aD055bBF2EE32",
    "0xeF010f870150d288ddb80615a2813b257e56938A"
  ],
  "numDeployments": 1,
  "solcInputHash": "46df6d014b4023a393b5c8e466a83619",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_insurancePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_policyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sigManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyerToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thresholdMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thresholdMax\",\"type\":\"uint256\"}],\"name\":\"DelayThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"FlightOracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"FulfilledOracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxPayoff\",\"type\":\"uint256\"}],\"name\":\"MaxPayoffChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinTime\",\"type\":\"uint256\"}],\"name\":\"MinTimeBeforeDepartureChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_policyID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NewPolicyApplication\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newUrl\",\"type\":\"string\"}],\"name\":\"OracleUrlChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"policyID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PolicyClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"policyID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PolicyDeclined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"policyID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PolicyExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"PolicyOwnerTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"policyID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PolicySold\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELAY_THRESHOLD_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELAY_THRESHOLD_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLIGHT_STATUS_URL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PAYOFF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TIME_BEFORE_DEPARTURE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRODUCT_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyerToken\",\"outputs\":[{\"internalType\":\"contract IBuyerToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxPayoff\",\"type\":\"uint256\"}],\"name\":\"changeMaxPayoff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinTime\",\"type\":\"uint256\"}],\"name\":\"changeMinTimeBeforeDeparture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_result\",\"type\":\"uint256\"}],\"name\":\"finalSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"findPolicyBuyerById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flightOracle\",\"outputs\":[{\"internalType\":\"contract IFlightOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"getPolicyInfoById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"flightNumber\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"departureTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"landingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum IPolicyStruct.PolicyStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"alreadySettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"delayResult\",\"type\":\"uint256\"}],\"internalType\":\"struct IPolicyStruct.PolicyInfo\",\"name\":\"policy\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurancePool\",\"outputs\":[{\"internalType\":\"contract IInsurancePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_flightNumber\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_departureTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_landingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"newApplication\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_flightNumber\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_forceUpdate\",\"type\":\"bool\"}],\"name\":\"newClaimRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"policyList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"flightNumber\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"departureTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"landingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum IPolicyStruct.PolicyStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"alreadySettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"delayResult\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"policyOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyToken\",\"outputs\":[{\"internalType\":\"contract IFDPolicyToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thresholdMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_thresholdMax\",\"type\":\"uint256\"}],\"name\":\"setDelayThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setFlightOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"setURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sigManager\",\"outputs\":[{\"internalType\":\"contract ISigManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPolicies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserPolicy\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"flightNumber\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"departureTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"landingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum IPolicyStruct.PolicyStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"alreadySettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"delayResult\",\"type\":\"uint256\"}],\"internalType\":\"struct IPolicyStruct.PolicyInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeFee(uint256)\":{\"params\":{\"_fee\":\"New oracle fee\"}},\"changeMaxPayoff(uint256)\":{\"params\":{\"_newMaxPayoff\":\"New maxpayoff amount\"}},\"changeMinTimeBeforeDeparture(uint256)\":{\"params\":{\"_newMinTime\":\"New time set\"}},\"finalSettlement(bytes32,uint256)\":{\"params\":{\"_requestId\":\"Chainlink request id\",\"_result\":\"Delay result (minutes) given by oracle\"}},\"findPolicyBuyerById(uint256)\":{\"params\":{\"_policyId\":\"Unique policy Id (uint256)\"},\"returns\":{\"buyerAddress\":\"The buyer of this policy\"}},\"getPolicyInfoById(uint256)\":{\"params\":{\"_policyId\":\"Total count/order of the policy = NFT tokenId\"},\"returns\":{\"policy\":\"A struct of information about this policy\"}},\"newApplication(uint256,string,uint256,uint256,uint256,uint256,bytes)\":{\"details\":\"The transaction should have the signature from the backend server\",\"params\":{\"_deadline\":\"Deadline for this purchase request\",\"_departureTimestamp\":\"Departure date of this flight (unix timestamp in s, not ms!)\",\"_flightNumber\":\"Flight number in string (e.g. \\\"AQ1299\\\")\",\"_landingDate\":\"Landing date of this flight (uinx timestamp in s, not ms!)\",\"_premium\":\"Premium of this policy (decimals: 18)\",\"_productId\":\"ID of the purchased product (0: flightdelay; 1,2,3...: others)\",\"signature\":\"Use web3.eth.sign(hash(data), account) to generate the signature\"}},\"newClaimRequest(uint256,string,uint256,string,bool)\":{\"params\":{\"_flightNumber\":\"The flight number\",\"_forceUpdate\":\"Owner can force to update\",\"_path\":\"Which data in json needs to get\",\"_policyId\":\"The total order/id of the policy\",\"_timestamp\":\"The flight departure timestamp\"}},\"policyOwnerTransfer(uint256,address,address)\":{\"details\":\"This function is called by the ERC721 contract of PolicyToken\",\"params\":{\"_newOwner\":\"The new owner\",\"_oldOwner\":\"The initial owner\",\"_tokenId\":\"Token Id of the policy token\"}},\"renounceOwnership()\":{\"details\":\"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.\"},\"setDelayThreshold(uint256,uint256)\":{\"params\":{\"_thresholdMax\":\"New maximum threshold\",\"_thresholdMin\":\"New minimum threshold\"}},\"setFlightOracle(address)\":{\"params\":{\"_oracleAddress\":\"New oracle address\"}},\"transferOwnership(address)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"newOwner\":\"Address of the new owner\"}},\"viewUserPolicy(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"userPolicies User's all policy details\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeFee(uint256)\":{\"notice\":\"Change the oracle fee\"},\"changeMaxPayoff(uint256)\":{\"notice\":\"Change the max payoff\"},\"changeMinTimeBeforeDeparture(uint256)\":{\"notice\":\"How long before departure when users can not buy new policies\"},\"finalSettlement(bytes32,uint256)\":{\"notice\":\"Do the final settlement, called by FlightOracle contract\"},\"findPolicyBuyerById(uint256)\":{\"notice\":\"Get the policy buyer by policyId\"},\"getPolicyInfoById(uint256)\":{\"notice\":\"Get the policyInfo from its count/order\"},\"newApplication(uint256,string,uint256,uint256,uint256,uint256,bytes)\":{\"notice\":\"Buy a new flight delay policy\"},\"newClaimRequest(uint256,string,uint256,string,bool)\":{\"notice\":\"Make a claim request\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"policyOwnerTransfer(uint256,address,address)\":{\"notice\":\"Update information when a policy token's ownership has been transferred\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner.\"},\"setDelayThreshold(uint256,uint256)\":{\"notice\":\"Set the new delay threshold used for calculating payoff\"},\"setFlightOracle(address)\":{\"notice\":\"Change the oracle address\"},\"setURL(string)\":{\"notice\":\"Set a new url\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).\"},\"viewUserPolicy(address)\":{\"notice\":\"Show a user's policies (all)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/miserable-flight/PolicyFlow.sol\":\"PolicyFlow\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x872ba21af7c1f0ae04a715beca31e8fcac764d6c8762940b0fe1bfb6ed8e86f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x42c041cfe2fba75264baa64c4c3c55b128e6667b54331df87028cc4da0a9606e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9\",\"license\":\"MIT\"},\"contracts/miserable-flight/PolicyFlow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\n\\nimport \\\"../tokens/interfaces/IBuyerToken.sol\\\";\\nimport \\\"./interfaces/ISigManager.sol\\\";\\nimport \\\"./interfaces/IFDPolicyToken.sol\\\";\\nimport \\\"./interfaces/IFlightOracle.sol\\\";\\nimport \\\"./interfaces/IInsurancePool.sol\\\";\\n\\nimport \\\"./interfaces/IPolicyStruct.sol\\\";\\nimport \\\"./abstracts/PolicyParameters.sol\\\";\\n\\ncontract PolicyFlow is IPolicyStruct, PolicyParameters, Ownable {\\n    // Other contracts\\n    IBuyerToken public buyerToken;\\n    ISigManager public sigManager;\\n    IFDPolicyToken public policyToken;\\n    IFlightOracle public flightOracle;\\n    IInsurancePool public insurancePool;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    string public FLIGHT_STATUS_URL =\\n        \\\"https://18.163.254.50:3207/flight_status?\\\";\\n\\n    uint256 public totalPolicies;\\n\\n    uint256 public fee;\\n\\n    mapping(uint256 => PolicyInfo) public policyList;\\n\\n    mapping(address => uint256[]) userPolicyList;\\n\\n    mapping(bytes32 => uint256) requestList;\\n\\n    mapping(uint256 => uint256) delayResultList;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n    event FeeChanged(uint256 newFee);\\n    event MaxPayoffChanged(uint256 newMaxPayoff);\\n    event MinTimeBeforeDepartureChanged(uint256 newMinTime);\\n    event FlightOracleChanged(address newOracle);\\n    event OracleUrlChanged(string newUrl);\\n    event DelayThresholdChanged(uint256 thresholdMin, uint256 thresholdMax);\\n\\n    event NewPolicyApplication(uint256 _policyID, address indexed user);\\n    event PolicySold(uint256 policyID, address indexed user);\\n    event PolicyDeclined(uint256 policyID, address indexed user);\\n    event PolicyClaimed(uint256 policyID, address indexed user);\\n    event PolicyExpired(uint256 policyID, address indexed user);\\n    event FulfilledOracleRequest(uint256 policyId, bytes32 requestId);\\n    event PolicyOwnerTransfer(uint256 indexed tokenId, address newOwner);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(\\n        address _insurancePool,\\n        address _policyToken,\\n        address _sigManager,\\n        address _buyerToken\\n    ) {\\n        insurancePool = IInsurancePool(_insurancePool);\\n        policyToken = IFDPolicyToken(_policyToken);\\n        sigManager = ISigManager(_sigManager);\\n        buyerToken = IBuyerToken(_buyerToken);\\n    }\\n\\n    // ----------------------------------------------------------------------------------- //\\n    // ************************************ Modifiers ************************************ //\\n    // ----------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @dev This modifier uses assert which means this error should never happens.\\n     */\\n    modifier validAddress() {\\n        assert(msg.sender != address(0));\\n        _;\\n    }\\n\\n    // ----------------------------------------------------------------------------------- //\\n    // ********************************* View Functions ********************************** //\\n    // ----------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Show a user's policies (all)\\n     * @param _user User's address\\n     * @return userPolicies User's all policy details\\n     */\\n    function viewUserPolicy(address _user)\\n        external\\n        view\\n        returns (PolicyInfo[] memory)\\n    {\\n        uint256 userPolicyAmount = userPolicyList[_user].length;\\n        require(userPolicyAmount > 0, \\\"No policy for this user\\\");\\n\\n        PolicyInfo[] memory result = new PolicyInfo[](userPolicyAmount);\\n\\n        for (uint256 i = 0; i < userPolicyAmount; i++) {\\n            uint256 policyId = userPolicyList[_user][i];\\n\\n            result[i] = policyList[policyId];\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get the policyInfo from its count/order\\n     * @param _policyId Total count/order of the policy = NFT tokenId\\n     * @return policy A struct of information about this policy\\n     */\\n    // TODO: If still need this function\\n    function getPolicyInfoById(uint256 _policyId)\\n        public\\n        view\\n        returns (PolicyInfo memory policy)\\n    {\\n        policy = policyList[_policyId];\\n    }\\n\\n    /**\\n     * @notice Get the policy buyer by policyId\\n     * @param _policyId Unique policy Id (uint256)\\n     * @return buyerAddress The buyer of this policy\\n     */\\n    // TODO: If still need this function\\n    function findPolicyBuyerById(uint256 _policyId)\\n        public\\n        view\\n        returns (address buyerAddress)\\n    {\\n        buyerAddress = policyList[_policyId].buyerAddress;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Change the oracle fee\\n     * @param _fee New oracle fee\\n     */\\n    function changeFee(uint256 _fee) external onlyOwner {\\n        fee = _fee;\\n        emit FeeChanged(_fee);\\n    }\\n\\n    /**\\n     * @notice Change the max payoff\\n     * @param _newMaxPayoff New maxpayoff amount\\n     */\\n    function changeMaxPayoff(uint256 _newMaxPayoff) external onlyOwner {\\n        MAX_PAYOFF = _newMaxPayoff;\\n        emit MaxPayoffChanged(_newMaxPayoff);\\n    }\\n\\n    /**\\n     * @notice How long before departure when users can not buy new policies\\n     * @param _newMinTime New time set\\n     */\\n    function changeMinTimeBeforeDeparture(uint256 _newMinTime)\\n        external\\n        onlyOwner\\n    {\\n        MIN_TIME_BEFORE_DEPARTURE = _newMinTime;\\n        emit MinTimeBeforeDepartureChanged(_newMinTime);\\n    }\\n\\n    /**\\n     * @notice Change the oracle address\\n     * @param _oracleAddress New oracle address\\n     */\\n    function setFlightOracle(address _oracleAddress) external onlyOwner {\\n        flightOracle = IFlightOracle(_oracleAddress);\\n        emit FlightOracleChanged(_oracleAddress);\\n    }\\n\\n    /**\\n     * @notice Set a new url\\n     */\\n    function setURL(string memory _url) external onlyOwner {\\n        FLIGHT_STATUS_URL = _url;\\n        emit OracleUrlChanged(_url);\\n    }\\n\\n    /**\\n     * @notice Set the new delay threshold used for calculating payoff\\n     * @param _thresholdMin New minimum threshold\\n     * @param _thresholdMax New maximum threshold\\n     */\\n    function setDelayThreshold(uint256 _thresholdMin, uint256 _thresholdMax)\\n        external\\n        onlyOwner\\n    {\\n        DELAY_THRESHOLD_MIN = _thresholdMin;\\n        DELAY_THRESHOLD_MAX = _thresholdMax;\\n        emit DelayThresholdChanged(_thresholdMin, _thresholdMax);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Buy a new flight delay policy\\n     * @dev The transaction should have the signature from the backend server\\n     * @param _productId ID of the purchased product (0: flightdelay; 1,2,3...: others)\\n     * @param _flightNumber Flight number in string (e.g. \\\"AQ1299\\\")\\n     * @param _premium Premium of this policy (decimals: 18)\\n     * @param _departureTimestamp Departure date of this flight (unix timestamp in s, not ms!)\\n     * @param _landingDate Landing date of this flight (uinx timestamp in s, not ms!)\\n     * @param _deadline Deadline for this purchase request\\n     * @param signature Use web3.eth.sign(hash(data), account) to generate the signature\\n     */\\n    function newApplication(\\n        uint256 _productId,\\n        string memory _flightNumber,\\n        uint256 _premium,\\n        uint256 _departureTimestamp,\\n        uint256 _landingDate,\\n        uint256 _deadline,\\n        bytes calldata signature\\n    ) public returns (uint256 _policyId) {\\n        uint256 currentTimestamp = block.timestamp;\\n        require(\\n            currentTimestamp <= _deadline,\\n            \\\"Expired deadline, please resubmit a transaction\\\"\\n        );\\n\\n        require(\\n            _productId == PRODUCT_ID,\\n            \\\"You are calling the wrong product contract\\\"\\n        );\\n\\n        require(\\n            _departureTimestamp >= currentTimestamp + MIN_TIME_BEFORE_DEPARTURE,\\n            \\\"It's too close to the departure time, you cannot buy this policy\\\"\\n        );\\n\\n        // Should be signed by operators\\n        _checkSignature(\\n            signature,\\n            _flightNumber,\\n            _msgSender(),\\n            _premium,\\n            _deadline\\n        );\\n\\n        // Generate the policy\\n        uint256 currentPolicyId = totalPolicies;\\n        policyList[currentPolicyId] = PolicyInfo(\\n            PRODUCT_ID,\\n            _msgSender(),\\n            currentPolicyId,\\n            _flightNumber,\\n            _premium,\\n            MAX_PAYOFF,\\n            currentTimestamp,\\n            _departureTimestamp,\\n            _landingDate,\\n            PolicyStatus.INI,\\n            false,\\n            404\\n        );\\n\\n        // Check the policy with the insurance pool status\\n        // May be accepted or rejected, if accepted then update the status of insurancePool\\n        _policyCheck(_premium, MAX_PAYOFF, msg.sender, currentPolicyId);\\n\\n        // Give buyer tokens depending on the usd value they spent\\n        buyerToken.mintBuyerToken(msg.sender, _premium);\\n\\n        // Store the policy's total order with userAddress\\n        userPolicyList[msg.sender].push(totalPolicies);\\n\\n        // Update total policies\\n        totalPolicies += 1;\\n\\n        emit NewPolicyApplication(currentPolicyId, msg.sender);\\n\\n        return currentPolicyId;\\n    }\\n\\n    /** @notice Make a claim request\\n     *  @param _policyId The total order/id of the policy\\n     *  @param _flightNumber The flight number\\n     *  @param _timestamp The flight departure timestamp\\n     *  @param _path Which data in json needs to get\\n     *  @param _forceUpdate Owner can force to update\\n     */\\n    function newClaimRequest(\\n        uint256 _policyId,\\n        string memory _flightNumber,\\n        uint256 _timestamp,\\n        string memory _path,\\n        bool _forceUpdate\\n    ) public {\\n        // Can not get the result before landing date\\n        // Landing date may not be true, may be a fixed interval (4hours)\\n        require(\\n            block.timestamp >= policyList[_policyId].landingTimestamp,\\n            \\\"Can only claim a policy after its expected landing timestamp\\\"\\n        );\\n\\n        // Check if the policy has been settled\\n        require(\\n            (!policyList[_policyId].alreadySettled) ||\\n                (_forceUpdate && (_msgSender() == owner())),\\n            \\\"The policy status has already been settled, or you need to make a force update\\\"\\n        );\\n\\n        // Check if the flight number is correct\\n        require(\\n            keccak256(abi.encodePacked(_flightNumber)) ==\\n                keccak256(abi.encodePacked(policyList[_policyId].flightNumber)),\\n            \\\"Wrong flight number provided\\\"\\n        );\\n\\n        // Check if the departure date is correct\\n        require(\\n            keccak256(abi.encodePacked(_timestamp)) ==\\n                keccak256(\\n                    abi.encodePacked(policyList[_policyId].departureTimestamp)\\n                ),\\n            \\\"Wrong departure timestamp provided\\\"\\n        );\\n\\n        // Construct the url for oracle\\n\\n        string memory _url = string(\\n            abi.encodePacked(\\n                FLIGHT_STATUS_URL,\\n                \\\"flight_no=\\\",\\n                _flightNumber,\\n                \\\"&timestamp=\\\",\\n                _timestamp\\n            )\\n        );\\n\\n        // Start a new oracle request\\n        bytes32 requestId = flightOracle.newOracleRequest(fee, _url, _path, 1);\\n\\n        // Record this request\\n        requestList[requestId] = _policyId;\\n        policyList[_policyId].alreadySettled = true;\\n    }\\n\\n    /**\\n     * @notice Update information when a policy token's ownership has been transferred\\n     * @dev This function is called by the ERC721 contract of PolicyToken\\n     * @param _tokenId Token Id of the policy token\\n     * @param _oldOwner The initial owner\\n     * @param _newOwner The new owner\\n     */\\n    function policyOwnerTransfer(\\n        uint256 _tokenId,\\n        address _oldOwner,\\n        address _newOwner\\n    ) external {\\n        // Check the call is from policy token contract\\n        require(\\n            _msgSender() == address(policyToken),\\n            \\\"only called from the flight delay policy token contract\\\"\\n        );\\n\\n        // Check the previous owner record\\n        uint256 policyId = _tokenId;\\n        require(\\n            _oldOwner == policyList[policyId].buyerAddress,\\n            \\\"The previous owner is wrong\\\"\\n        );\\n\\n        // Update the new buyer address\\n        policyList[policyId].buyerAddress = _newOwner;\\n        emit PolicyOwnerTransfer(_tokenId, _newOwner);\\n    }\\n\\n    // ----------------------------------------------------------------------------------- //\\n    // ********************************* Oracle Functions ******************************** //\\n    // ----------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Do the final settlement, called by FlightOracle contract\\n     * @param _requestId Chainlink request id\\n     * @param _result Delay result (minutes) given by oracle\\n     */\\n    function finalSettlement(bytes32 _requestId, uint256 _result) public {\\n        // Check if the call is from flight oracle\\n        require(\\n            msg.sender == address(flightOracle),\\n            \\\"this function should be called by FlightOracle contract\\\"\\n        );\\n\\n        uint256 policyId = requestList[_requestId];\\n\\n        PolicyInfo storage policy = policyList[policyId];\\n        policy.delayResult = _result;\\n\\n        uint256 premium = policy.premium;\\n        address buyerAddress = policy.buyerAddress;\\n\\n        require(\\n            _result <= DELAY_THRESHOLD_MAX || _result == 400,\\n            \\\"Abnormal oracle result, result should be [0 - 240] or 400\\\"\\n        );\\n\\n        if (_result == 0) {\\n            // 0: on time\\n            policyExpired(premium, MAX_PAYOFF, buyerAddress, policyId);\\n        } else if (_result <= DELAY_THRESHOLD_MAX) {\\n            uint256 real_payoff = calcPayoff(_result);\\n            _policyClaimed(premium, real_payoff, buyerAddress, policyId);\\n        } else if (_result == 400) {\\n            // 400: cancelled\\n            _policyClaimed(premium, MAX_PAYOFF, buyerAddress, policyId);\\n        }\\n\\n        emit FulfilledOracleRequest(policyId, _requestId);\\n    }\\n\\n    // ----------------------------------------------------------------------------------- //\\n    // ******************************** Internal Functions ******************************* //\\n    // ----------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice check the policy and then determine whether we can afford it\\n     * @param _payoff the payoff of the policy sold\\n     * @param _user user's address\\n     * @param _policyId the unique policy ID\\n     */\\n    function _policyCheck(\\n        uint256 _premium,\\n        uint256 _payoff,\\n        address _user,\\n        uint256 _policyId\\n    ) internal {\\n        // Whether there are enough capacity in the pool\\n        bool _isAccepted = insurancePool.checkCapacity(_payoff);\\n\\n        if (_isAccepted) {\\n            insurancePool.updateWhenBuy(_premium, _payoff, _user);\\n            policyList[_policyId].status = PolicyStatus.SOLD;\\n            emit PolicySold(_policyId, _user);\\n\\n            policyToken.mintPolicyToken(_user);\\n        } else {\\n            policyList[_policyId].status = PolicyStatus.DECLINED;\\n            emit PolicyDeclined(_policyId, _user);\\n            revert(\\\"not sufficient capacity in the insurance pool\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice update the policy when it is expired\\n     * @param _premium the premium of the policy sold\\n     * @param _payoff the payoff of the policy sold\\n     * @param _user user's address\\n     * @param _policyId the unique policy ID\\n     */\\n    function policyExpired(\\n        uint256 _premium,\\n        uint256 _payoff,\\n        address _user,\\n        uint256 _policyId\\n    ) internal {\\n        insurancePool.updateWhenExpire(_premium, _payoff, _user);\\n        policyList[_policyId].status = PolicyStatus.EXPIRED;\\n        emit PolicyExpired(_policyId, _user);\\n    }\\n\\n    /**\\n     * @notice Update the policy when it is claimed\\n     * @param _premium Premium of the policy sold\\n     * @param _payoff Payoff of the policy sold\\n     * @param _user User's address\\n     * @param _policyId The unique policy ID\\n     */\\n    function _policyClaimed(\\n        uint256 _premium,\\n        uint256 _payoff,\\n        address _user,\\n        uint256 _policyId\\n    ) internal {\\n        insurancePool.payClaim(_premium, MAX_PAYOFF, _payoff, _user);\\n        policyList[_policyId].status = PolicyStatus.CLAIMED;\\n        emit PolicyClaimed(_policyId, _user);\\n    }\\n\\n    /**\\n     * @notice The payoff formula\\n     * @param _delay Delay in minutes\\n     * @return the final payoff volume\\n     */\\n    function calcPayoff(uint256 _delay) internal view returns (uint256) {\\n        uint256 payoff = 0;\\n\\n        // payoff model 1 - linear\\n        if (_delay <= DELAY_THRESHOLD_MIN) {\\n            payoff = 0;\\n        } else if (\\n            _delay > DELAY_THRESHOLD_MIN && _delay <= DELAY_THRESHOLD_MAX\\n        ) {\\n            payoff = (_delay * _delay) / 480;\\n        } else if (_delay > DELAY_THRESHOLD_MAX) {\\n            payoff = MAX_PAYOFF;\\n        }\\n\\n        payoff = payoff * 1e18;\\n        return payoff;\\n    }\\n\\n    /**\\n     * @notice Check whether the signature is valid\\n     * @param signature 65 byte array: [[v (1)], [r (32)], [s (32)]]\\n     * @param _flightNumber Flight number\\n     * @param _address userAddress\\n     * @param _premium Premium of the policy\\n     * @param _deadline Deadline of the application\\n     */\\n    function _checkSignature(\\n        bytes calldata signature,\\n        string memory _flightNumber,\\n        address _address,\\n        uint256 _premium,\\n        uint256 _deadline\\n    ) internal view {\\n        sigManager.checkSignature(\\n            signature,\\n            _flightNumber,\\n            _address,\\n            _premium,\\n            _deadline\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xba30e4bd51952d24da187c4f6e977e00b86b38243adc2220c7e3eba59b19872c\",\"license\":\"MIT\"},\"contracts/miserable-flight/abstracts/PolicyParameters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nabstract contract PolicyParameters {\\n    // Product parameter\\n    uint256 public constant PRODUCT_ID = 0;\\n\\n    // Parameters about the claim curve\\n    uint256 public MAX_PAYOFF = 180 ether;\\n    uint256 public DELAY_THRESHOLD_MIN = 30;\\n    uint256 public DELAY_THRESHOLD_MAX = 240;\\n\\n    // Minimum time before departure for applying\\n    // TODO: internal test\\n    uint256 public MIN_TIME_BEFORE_DEPARTURE = 0;\\n}\\n\",\"keccak256\":\"0xb807a92518efb39fa1775b35e502bb1c7f0f39617117d7c8d2811a9497240664\",\"license\":\"MIT\"},\"contracts/miserable-flight/interfaces/IFDPolicyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IFDPolicyToken is IERC721Enumerable {\\n    function mintPolicyToken(address _receiver) external;\\n\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n\\n    function getTokenURI(uint256 _tokenId)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0xfe654c978b3526a2c2ae4206fe58dd9f95ffbaa85401bffd5443ae0288aa5965\",\"license\":\"MIT\"},\"contracts/miserable-flight/interfaces/IFlightOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IFlightOracle {\\n    function newOracleRequest(\\n        uint256 _payment,\\n        string memory _url,\\n        string memory _path,\\n        int256 times\\n    ) external returns (bytes32);\\n\\n    // Set a new url\\n    function setURL(string memory _url) external;\\n\\n    // Set the oracle address\\n    function setOracleAddress(address _newOracle) external;\\n\\n    // Set a new job id\\n    function setJobId(bytes32 _newJobId) external;\\n\\n    // Set a new policy flow\\n    function setPolicyFlow(address _policyFlow) external;\\n\\n    function getChainlinkTokenAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xed84d6c0821d7439ec990fbbe1a9ffbe9cb94676ed4535b0dd5d7bf08dd8f10c\",\"license\":\"MIT\"},\"contracts/miserable-flight/interfaces/IInsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IInsurancePool {\\n    // view functions\\n\\n    function getUserBalance(address) external view returns (uint256);\\n\\n    function getPoolUnlocked() external view returns (uint256);\\n\\n    function getUnlockedFor(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLockedFor(address _user) external view returns (uint256);\\n\\n    function checkCapacity(uint256 _payoff) external view returns (bool);\\n\\n    // set functions\\n\\n    function setPurchaseIncentive(uint256 _newIncentive) external;\\n\\n    function setFrozenTime(uint256 _newFrozenTime) external;\\n\\n    function setPolicyFlow(address _policyFlowAddress) external;\\n\\n    function setIncomeDistribution(uint256[3] memory _newDistribution) external;\\n\\n    function setCollateralFactor(uint256 _factor) external;\\n\\n    function transferOwnership(address _newOwner) external;\\n\\n    // main functions\\n\\n    function stake(address _user, uint256 _amount) external;\\n\\n    function unstake(uint256 _amount) external;\\n\\n    function unstakeMax() external;\\n\\n    function updateWhenBuy(\\n        uint256 _premium,\\n        uint256 _payoff,\\n        address _user\\n    ) external;\\n\\n    function updateWhenExpire(\\n        uint256 _premium,\\n        uint256 _payoff,\\n        address _user\\n    ) external;\\n\\n    function payClaim(\\n        uint256 _premium,\\n        uint256 _payoff,\\n        uint256 _realPayoff,\\n        address _user\\n    ) external;\\n\\n    function revertUnstakeRequest(address _user) external;\\n\\n    function revertAllUnstakeRequest(address _user) external;\\n}\\n\",\"keccak256\":\"0x5517303710a4f46c3c66900fda7895cf07ea23a8529002c8659449d53494b835\",\"license\":\"MIT\"},\"contracts/miserable-flight/interfaces/IPolicyStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IPolicyStruct {\\n    enum PolicyStatus {\\n        INI,\\n        SOLD,\\n        DECLINED,\\n        EXPIRED,\\n        CLAIMED\\n    }\\n\\n    struct PolicyInfo {\\n        uint256 productId;\\n        address buyerAddress;\\n        uint256 policyId;\\n        string flightNumber;\\n        uint256 premium;\\n        uint256 payoff;\\n        uint256 purchaseTimestamp;\\n        uint256 departureTimestamp;\\n        uint256 landingTimestamp;\\n        PolicyStatus status;\\n        bool alreadySettled;\\n        uint256 delayResult;\\n    }\\n}\\n\",\"keccak256\":\"0x910a474af4e70bfa6c626ffe338885cd60e81deded33827de1592ace3c9c7d48\",\"license\":\"MIT\"},\"contracts/miserable-flight/interfaces/ISigManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface ISigManager {\\n    event SignerAdded(address indexed _newSigner);\\n    event SignerRemoved(address indexed _oldSigner);\\n\\n    function addSigner(address) external;\\n\\n    function removeSigner(address) external;\\n\\n    function isValidSigner(address) external view returns (bool);\\n\\n    function checkSignature(\\n        bytes calldata signature,\\n        string memory _flightNumber,\\n        address _address,\\n        uint256 _premium,\\n        uint256 _deadline\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x8378e961d81b1d1855e8fd5f52d85b3ef7bdfb4e1b20db40c9cb4720701d1cf6\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IBuyerToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBuyerToken is IERC20 {\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Functions ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Mint buyer tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be minted\\n     */\\n    function mintBuyerToken(address _account, uint256 _amount) external;\\n\\n    /**\\n     * @notice Burn buyer tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be burned\\n     */\\n    function burnBuyerToken(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x5761f53bcfdd89548e7d0ec0eb248a6699615fca869137da6245c1e62def858d\",\"license\":\"MIT\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xb06279e6f1b96475d682c29d19535cc444d7b2e4aa60c8c7b4b0f032230ebff0\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. It will not be possible to call\\n     *         `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * @dev    Renouncing ownership will leave the contract without an owner,\\n     *         thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Can only be called by the current owner.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Internal function without access restriction.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x573a48e60c5226b8470bc2d8ba1f4436c89d865fc83de5449de9d8af0c8cb81a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6809c2007651b25000006000908155601e60015560f060025560035560e0604052602960808181529062002de960a03980516200004591600a9160209091019062000127565b503480156200005357600080fd5b5060405162002e1238038062002e12833981016040819052620000769162000207565b6200008133620000d5565b600980546001600160a01b039586166001600160a01b0319918216179091556007805494861694821694909417909355600680549285169284169290921790915560058054919093169116179055620002bc565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b82805462000135906200028b565b90600052602060002090601f016020900481019282620001595760008555620001a4565b82601f106200017457805160ff1916838001178555620001a4565b82800160010185558215620001a4579182015b82811115620001a457825182559160200191906001019062000187565b50620001b2929150620001b6565b5090565b5b80821115620001b25760008155600101620001b7565b60006001600160a01b0382165b92915050565b620001eb81620001cd565b8114620001f757600080fd5b50565b8051620001da81620001e0565b60008060008060808587031215620002225762000222600080fd5b6000620002308787620001fa565b94505060206200024387828801620001fa565b93505060406200025687828801620001fa565b92505060606200026987828801620001fa565b91505092959194509250565b634e487b7160e01b600052602260045260246000fd5b600281046001821680620002a057607f821691505b60208210811415620002b657620002b662000275565b50919050565b612b1d80620002cc6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80637734340811610104578063b7b357ac116100a2578063e846e79711610071578063e846e79714610402578063f059d78e14610415578063f2fde38b1461041e578063fd1053d91461043157600080fd5b8063b7b357ac146103d5578063c34dc50c146103de578063d865ef94146103e6578063ddca3f43146103f957600080fd5b80639180233f116100de5780639180233f14610393578063a5d2a7151461039c578063a9480a8e146103af578063ab2adc00146103c257600080fd5b8063773434081461035c5780638da5cb5b1461036f5780638e34ce351461038057600080fd5b80634fdc9ea91161017c5780636a1db1bf1161014b5780636a1db1bf146103015780636b0edde9146103145780636ce0403c14610334578063715018a61461035457600080fd5b80634fdc9ea91461028e5780635a9274ad146102b9578063612d7350146102cc5780636307737b146102e157600080fd5b806321deab0e116101b857806321deab0e146102265780632a138f651461023957806338b44d6a146102725780634abe553f1461028557600080fd5b806302d7e85a146101df5780631774ea45146101f45780631a397db914610213575b600080fd5b6101f26101ed366004611a6e565b610444565b005b6101fd60025481565b60405161020a9190611ab3565b60405180910390f35b6101f2610221366004611a6e565b6104ce565b6101fd610234366004611c0e565b6105f9565b610265610247366004611ce7565b6000908152600d60205260409020600101546001600160a01b031690565b60405161020a9190611d22565b6101f2610280366004611d43565b6108d0565b6101fd60015481565b6102a161029c366004611ce7565b610b2d565b60405161020a9c9b9a99989796959493929190611e9f565b6101f26102c7366004611ce7565b610c23565b6102d4610c9c565b60405161020a9190611f59565b6007546102f4906001600160a01b031681565b60405161020a9190611fac565b6101f261030f366004611ce7565b610d2a565b610327610322366004611ce7565b610d98565b60405161020a91906120af565b6103476103423660046120d4565b610f03565b60405161020a919061216b565b6101f261116b565b6101f261036a36600461217c565b6111b0565b6004546001600160a01b0316610265565b6101f261038e3660046121b7565b61122c565b6101fd60005481565b6005546102f4906001600160a01b031681565b6101f26103bd366004611ce7565b611307565b6009546102f4906001600160a01b031681565b6101fd60035481565b6101fd600081565b6006546102f4906001600160a01b031681565b6101fd600c5481565b6101f26104103660046120d4565b611375565b6101fd600b5481565b6101f261042c3660046120d4565b6113f9565b6008546102f4906001600160a01b031681565b336104576004546001600160a01b031690565b6001600160a01b0316146104865760405162461bcd60e51b815260040161047d90612237565b60405180910390fd5b600182905560028190556040517febbed710a442fb49ec9fc28724db7432557adf346b15e991b1b50100138e40fc906104c29084908490612247565b60405180910390a15050565b6008546001600160a01b031633146104f85760405162461bcd60e51b815260040161047d906122bc565b6000828152600f6020908152604080832054808452600d909252909120600a8101839055600481015460018201546002546001600160a01b039091169085111580610544575084610190145b6105605760405162461bcd60e51b815260040161047d90612324565b8461057857610573826000548387611464565b6105b8565b60025485116105a057600061058c86611521565b905061059a83828488611595565b506105b8565b8461019014156105b8576105b8826000548387611595565b7f04e392e4100aa2e88345ae13cf73d14c46a6051119773b79fd108c378a4599e384876040516105e9929190612247565b60405180910390a1505050505050565b6000428481111561061c5760405162461bcd60e51b815260040161047d9061237e565b891561063a5760405162461bcd60e51b815260040161047d906123d3565b60035461064790826123f9565b8710156106665760405162461bcd60e51b815260040161047d90612469565b61067484848b338c8a611656565b600b546040805161018081019091526000815260208101336001600160a01b031681526020018281526020018b81526020018a81526020016000548152602001838152602001898152602001888152602001600060048111156106d9576106d9611e53565b815260006020808301829052610194604093840152848252600d81529082902083518155838201516001820180546001600160a01b0319166001600160a01b0390921691909117905591830151600283015560608301518051610742926003850192019061193c565b506080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a81548160ff021916908360048111156107a1576107a1611e53565b02179055506101408201516009820180549115156101000261ff001990921691909117905561016090910151600a909101556000546107e3908a9033846116c8565b600554604051631148708360e11b81526001600160a01b0390911690632290e106906108159033908d90600401612479565b600060405180830381600087803b15801561082f57600080fd5b505af1158015610843573d6000803e3d6000fd5b5050336000908152600e602090815260408220600b80548254600181810185559386529385209093019290925581549094509092506108839084906123f9565b909155505060405133907f9dc1f9a2820214678b76a35ae1ba7d2fe57a670651cd89c9ba78f4b5c59a2e1a906108ba908490611ab3565b60405180910390a29a9950505050505050505050565b6000858152600d60205260409020600801544210156109015760405162461bcd60e51b815260040161047d906124df565b6000858152600d6020526040902060090154610100900460ff161580610939575080801561093957506004546001600160a01b031633145b6109555760405162461bcd60e51b815260040161047d906124ef565b6000858152600d60209081526040918290209151610977926003019101612618565b604051602081830303815290604052805190602001208460405160200161099e9190612644565b60405160208183030381529060405280519060200120146109d15760405162461bcd60e51b815260040161047d90612680565b6000858152600d60209081526040918290206007015491516109f4929101612696565b6040516020818303038152906040528051906020012083604051602001610a1b9190612696565b6040516020818303038152906040528051906020012014610a4e5760405162461bcd60e51b815260040161047d906126e5565b6000600a8585604051602001610a66939291906126f5565b60408051601f1981840301815290829052600854600c54639a66455f60e01b84529193506000926001600160a01b0390911691639a66455f91610ab391908690899060019060040161275d565b6020604051808303816000875af1158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af691906127b4565b6000908152600f602090815260408083208a9055988252600d905296909620600901805461ff001916610100179055505050505050565b600d60205260009081526040902080546001820154600283015460038401805493946001600160a01b0390931693919291610b679061257d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b939061257d565b8015610be05780601f10610bb557610100808354040283529160200191610be0565b820191906000526020600020905b815481529060010190602001808311610bc357829003601f168201915b50505050600483015460058401546006850154600786015460088701546009880154600a90980154969794969395509193909260ff80831692610100900416908c565b33610c366004546001600160a01b031690565b6001600160a01b031614610c5c5760405162461bcd60e51b815260040161047d90612237565b60038190556040517f8c41ba0631fa10e06efe604774b5ef6df52572c640a7d42286c43d3eff0d169590610c91908390611ab3565b60405180910390a150565b600a8054610ca99061257d565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd59061257d565b8015610d225780601f10610cf757610100808354040283529160200191610d22565b820191906000526020600020905b815481529060010190602001808311610d0557829003601f168201915b505050505081565b33610d3d6004546001600160a01b031690565b6001600160a01b031614610d635760405162461bcd60e51b815260040161047d90612237565b600c8190556040517f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c390610c91908390611ab3565b610da06119c0565b6000828152600d60209081526040918290208251610180810184528154815260018201546001600160a01b031692810192909252600281015492820192909252600382018054919291606084019190610df89061257d565b80601f0160208091040260200160405190810160405280929190818152602001828054610e249061257d565b8015610e715780601f10610e4657610100808354040283529160200191610e71565b820191906000526020600020905b815481529060010190602001808311610e5457829003601f168201915b50505091835250506004828101546020830152600583015460408301526006830154606083015260078301546080830152600883015460a0830152600983015460c09092019160ff1690811115610eca57610eca611e53565b6004811115610edb57610edb611e53565b81526009820154610100900460ff1615156020820152600a9091015460409091015292915050565b6001600160a01b0381166000908152600e602052604090205460609080610f3c5760405162461bcd60e51b815260040161047d90612807565b60008167ffffffffffffffff811115610f5757610f57611ac1565b604051908082528060200260200182016040528015610f9057816020015b610f7d6119c0565b815260200190600190039081610f755790505b50905060005b82811015611163576001600160a01b0385166000908152600e60205260408120805483908110610fc857610fc8612817565b6000918252602080832090910154808352600d82526040928390208351610180810185528154815260018201546001600160a01b031693810193909352600281015493830193909352600383018054919450919291606084019161102b9061257d565b80601f01602080910402602001604051908101604052809291908181526020018280546110579061257d565b80156110a45780601f10611079576101008083540402835291602001916110a4565b820191906000526020600020905b81548152906001019060200180831161108757829003601f168201915b50505091835250506004828101546020830152600583015460408301526006830154606083015260078301546080830152600883015460a0830152600983015460c09092019160ff16908111156110fd576110fd611e53565b600481111561110e5761110e611e53565b81526009820154610100900460ff1615156020820152600a90910154604090910152835184908490811061114457611144612817565b602002602001018190525050808061115b9061282d565b915050610f96565b509392505050565b3361117e6004546001600160a01b031690565b6001600160a01b0316146111a45760405162461bcd60e51b815260040161047d90612237565b6111ae60006118ea565b565b336111c36004546001600160a01b031690565b6001600160a01b0316146111e95760405162461bcd60e51b815260040161047d90612237565b80516111fc90600a90602084019061193c565b507f8dbd4721a3316108f3899cd7093e1c9ca0c4759eaa0b62cff2a63e0622d30e3281604051610c919190611f59565b6007546001600160a01b0316336001600160a01b03161461125f5760405162461bcd60e51b815260040161047d906128a0565b6000838152600d602052604090206001015483906001600160a01b0384811691161461129d5760405162461bcd60e51b815260040161047d906128e2565b6000818152600d60205260409081902060010180546001600160a01b0319166001600160a01b0385161790555184907f131013c706ffe7a58a15c6576c2affbfee4aa57a8fc2c179fff9da687da631e6906112f9908590611d22565b60405180910390a250505050565b3361131a6004546001600160a01b031690565b6001600160a01b0316146113405760405162461bcd60e51b815260040161047d90612237565b60008190556040517fdef33f1582315c7c62f4e66de6172585034194d07b9424c91da5d99b2edcdb2990610c91908390611ab3565b336113886004546001600160a01b031690565b6001600160a01b0316146113ae5760405162461bcd60e51b815260040161047d90612237565b600880546001600160a01b0319166001600160a01b0383161790556040517fdd26a8824232c055ca4288c9d4f23ff4dd4e9db5beb3c405f96f16fc2d40911190610c91908390611d22565b3361140c6004546001600160a01b031690565b6001600160a01b0316146114325760405162461bcd60e51b815260040161047d90612237565b6001600160a01b0381166114585760405162461bcd60e51b815260040161047d90612933565b611461816118ea565b50565b600954604051639e2e28b560e01b81526001600160a01b0390911690639e2e28b59061149890879087908790600401612943565b600060405180830381600087803b1580156114b257600080fd5b505af11580156114c6573d6000803e3d6000fd5b5050506000828152600d602052604090819020600901805460ff19166003179055516001600160a01b03841691507f5e2aa8ed921638d802aff01815dcc364f11bd867646ee35cef988a928aa08aba906112f9908490611ab3565b600154600090819083116115375750600061157c565b6001548311801561154a57506002548311155b1561156d576101e061155c848061296b565b61156691906129a0565b905061157c565b60025483111561157c57506000545b61158e81670de0b6b3a764000061296b565b9392505050565b60095460005460405163942465ed60e01b81526001600160a01b039092169163942465ed916115cd91889190889088906004016129b4565b600060405180830381600087803b1580156115e757600080fd5b505af11580156115fb573d6000803e3d6000fd5b5050506000828152600d602052604090819020600901805460ff19166004179055516001600160a01b03841691507fc7ec6d9a759e329b525c568d4a31eadfd4d47a50a11498317356b63536972cff906112f9908490611ab3565b600654604051633dc039c360e01b81526001600160a01b0390911690633dc039c39061169090899089908990899089908990600401612a09565b60006040518083038186803b1580156116a857600080fd5b505afa1580156116bc573d6000803e3d6000fd5b50505050505050505050565b6009546040516202d7af60e31b81526000916001600160a01b0316906216bd78906116f7908790600401611ab3565b602060405180830381865afa158015611714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117389190612a6e565b9050801561186c5760095460405163bf131f4b60e01b81526001600160a01b039091169063bf131f4b9061177490889088908890600401612943565b600060405180830381600087803b15801561178e57600080fd5b505af11580156117a2573d6000803e3d6000fd5b5050506000838152600d602052604090819020600901805460ff19166001179055516001600160a01b03851691507f18c8463e3f8b620eda107b8496632f42c285e0e2dbe36214aef29a7570c98db7906117fd908590611ab3565b60405180910390a2600754604051635c8c72f160e11b81526001600160a01b039091169063b918e5e290611835908690600401611d22565b600060405180830381600087803b15801561184f57600080fd5b505af1158015611863573d6000803e3d6000fd5b505050506118e3565b6000828152600d602052604090819020600901805460ff19166002179055516001600160a01b038416907f2f0c3a9cdf52dc1569c8661ae34313def97a77776bbc9e85ca130c0bafca4ab4906118c3908590611ab3565b60405180910390a260405162461bcd60e51b815260040161047d90612ad7565b5050505050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546119489061257d565b90600052602060002090601f01602090048101928261196a57600085556119b0565b82601f1061198357805160ff19168380011785556119b0565b828001600101855582156119b0579182015b828111156119b0578251825591602001919060010190611995565b506119bc929150611a3b565b5090565b6040518061018001604052806000815260200160006001600160a01b031681526020016000815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160006004811115611a2757611a27611e53565b815260006020820181905260409091015290565b5b808211156119bc5760008155600101611a3c565b805b811461146157600080fd5b8035611a6881611a50565b92915050565b60008060408385031215611a8457611a84600080fd5b6000611a908585611a5d565b9250506020611aa185828601611a5d565b9150509250929050565b805b82525050565b60208101611a688284611aab565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715611afd57611afd611ac1565b6040525050565b6000611b0f60405190565b9050611b1b8282611ad7565b919050565b600067ffffffffffffffff821115611b3a57611b3a611ac1565b601f19601f83011660200192915050565b82818337506000910152565b6000611b6a611b6584611b20565b611b04565b905082815260208101848484011115611b8557611b85600080fd5b611163848285611b4b565b600082601f830112611ba457611ba4600080fd5b8135611bb4848260208601611b57565b949350505050565b60008083601f840112611bd157611bd1600080fd5b50813567ffffffffffffffff811115611bec57611bec600080fd5b602083019150836001820283011115611c0757611c07600080fd5b9250929050565b60008060008060008060008060e0898b031215611c2d57611c2d600080fd5b6000611c398b8b611a5d565b985050602089013567ffffffffffffffff811115611c5957611c59600080fd5b611c658b828c01611b90565b9750506040611c768b828c01611a5d565b9650506060611c878b828c01611a5d565b9550506080611c988b828c01611a5d565b94505060a0611ca98b828c01611a5d565b93505060c089013567ffffffffffffffff811115611cc957611cc9600080fd5b611cd58b828c01611bbc565b92509250509295985092959890939650565b600060208284031215611cfc57611cfc600080fd5b6000611bb48484611a5d565b60006001600160a01b038216611a68565b611aad81611d08565b60208101611a688284611d19565b801515611a52565b8035611a6881611d30565b600080600080600060a08688031215611d5e57611d5e600080fd5b6000611d6a8888611a5d565b955050602086013567ffffffffffffffff811115611d8a57611d8a600080fd5b611d9688828901611b90565b9450506040611da788828901611a5d565b935050606086013567ffffffffffffffff811115611dc757611dc7600080fd5b611dd388828901611b90565b9250506080611de488828901611d38565b9150509295509295909350565b60005b83811015611e0c578181015183820152602001611df4565b83811115611e1b576000848401525b50505050565b6000611e2b825190565b808452602084019350611e42818560208601611df1565b601f01601f19169290920192915050565b634e487b7160e01b600052602160045260246000fd5b6005811061146157611461611e53565b80611b1b81611e69565b6000611a6882611e79565b611aad81611e83565b801515611aad565b6101808101611eae828f611aab565b611ebb602083018e611d19565b611ec8604083018d611aab565b8181036060830152611eda818c611e21565b9050611ee9608083018b611aab565b611ef660a083018a611aab565b611f0360c0830189611aab565b611f1060e0830188611aab565b611f1e610100830187611aab565b611f2c610120830186611e8e565b611f3a610140830185611e97565b611f48610160830184611aab565b9d9c50505050505050505050505050565b6020808252810161158e8184611e21565b6000611a686001600160a01b038316611f81565b90565b6001600160a01b031690565b6000611a6882611f6a565b6000611a6882611f8d565b611aad81611f98565b60208101611a688284611fa3565b8051600090610180840190611fcf8582611aab565b506020830151611fe26020860182611d19565b506040830151611ff56040860182611aab565b506060830151848203606086015261200d8282611e21565b91505060808301516120226080860182611aab565b5060a083015161203560a0860182611aab565b5060c083015161204860c0860182611aab565b5060e083015161205b60e0860182611aab565b50610100830151612070610100860182611aab565b50610120830151612085610120860182611e8e565b5061014083015161209a610140860182611e97565b50610160830151611163610160860182611aab565b6020808252810161158e8184611fba565b611a5281611d08565b8035611a68816120c0565b6000602082840312156120e9576120e9600080fd5b6000611bb484846120c9565b600061158e8383611fba565b60200190565b6000612111825190565b8084526020840193508360208202850161212b8560200190565b60005b8481101561215f578383038852815161214784826120f5565b9350506020820160209890980197915060010161212e565b50909695505050505050565b6020808252810161158e8184612107565b60006020828403121561219157612191600080fd5b813567ffffffffffffffff8111156121ab576121ab600080fd5b611bb484828501611b90565b6000806000606084860312156121cf576121cf600080fd5b60006121db8686611a5d565b93505060206121ec868287016120c9565b92505060406121fd868287016120c9565b9150509250925092565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152612101565b60208082528101611a6881612207565b604081016122558285611aab565b61158e6020830184611aab565b60378152602081017f746869732066756e6374696f6e2073686f756c642062652063616c6c6564206281527f7920466c696768744f7261636c6520636f6e7472616374000000000000000000602082015290505b60400190565b60208082528101611a6881612262565b60398152602081017f41626e6f726d616c206f7261636c6520726573756c742c20726573756c74207381527f686f756c64206265205b30202d203234305d206f722034303000000000000000602082015290506122b6565b60208082528101611a68816122cc565b602f8152602081017f4578706972656420646561646c696e652c20706c656173652072657375626d6981526e3a1030903a3930b739b0b1ba34b7b760891b602082015290506122b6565b60208082528101611a6881612334565b602a8152602081017f596f75206172652063616c6c696e67207468652077726f6e672070726f6475638152691d0818dbdb9d1c9858dd60b21b602082015290506122b6565b60208082528101611a688161238e565b634e487b7160e01b600052601160045260246000fd5b6000821982111561240c5761240c6123e3565b500190565b60408152602081017f4974277320746f6f20636c6f736520746f20746865206465706172747572652081527f74696d652c20796f752063616e6e6f7420627579207468697320706f6c696379602082015290506122b6565b60208082528101611a6881612411565b604081016122558285611d19565b603c8152602081017f43616e206f6e6c7920636c61696d206120706f6c69637920616674657220697481527f73206578706563746564206c616e64696e672074696d657374616d7000000000602082015290506122b6565b60208082528101611a6881612487565b60208082528101611a6881604e81527f54686520706f6c696379207374617475732068617320616c726561647920626560208201527f656e20736574746c65642c206f7220796f75206e65656420746f206d616b652060408201526d6120666f7263652075706461746560901b606082015260800190565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061259157607f821691505b602082108114156125a4576125a4612567565b50919050565b600081546125b78161257d565b6001821680156125ce57600181146125df5761260f565b60ff1983168652818601935061260f565b60008581526020902060005b83811015612607578154888201526001909101906020016125eb565b505081860193505b50505092915050565b611a6881836125aa565b600061262c825190565b61263a818560208601611df1565b9290920192915050565b611a688183612622565b601c8152602081017f57726f6e6720666c69676874206e756d6265722070726f76696465640000000081529050612101565b60208082528101611a688161264e565b80611aad565b6126a08183612690565b602001919050565b60228152602081017f57726f6e67206465706172747572652074696d657374616d702070726f766964815261195960f21b602082015290506122b6565b60208082528101611a68816126a8565b6126ff81856125aa565b69666c696768745f6e6f3d60b01b8152600a01905061271e8184612622565b6a2674696d657374616d703d60a81b8152600b01905061273e8183612690565b6020019392505050565b6000611a68611f7e8381565b611aad81612748565b6080810161276b8287611aab565b818103602083015261277d8186611e21565b905081810360408301526127918185611e21565b90506127a06060830184612754565b95945050505050565b8051611a6881611a50565b6000602082840312156127c9576127c9600080fd5b6000611bb484846127a9565b60178152602081017f4e6f20706f6c69637920666f722074686973207573657200000000000000000081529050612101565b60208082528101611a68816127d5565b634e487b7160e01b600052603260045260246000fd5b6000600019821415612841576128416123e3565b5060010190565b60378152602081017f6f6e6c792063616c6c65642066726f6d2074686520666c696768742064656c6181527f7920706f6c69637920746f6b656e20636f6e7472616374000000000000000000602082015290506122b6565b60208082528101611a6881612848565b601b8152602081017f5468652070726576696f7573206f776e65722069732077726f6e67000000000081529050612101565b60208082528101611a68816128b0565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015290506122b6565b60208082528101611a68816128f2565b606081016129518286611aab565b61295e6020830185611aab565b611bb46040830184611d19565b6000816000190483118215151615612985576129856123e3565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826129af576129af61298a565b500490565b608081016129c28287611aab565b6129cf6020830186611aab565b6129dc6040830185611aab565b6127a06060830184611d19565b8183526020830192506129fd828483611b4b565b50601f01601f19160190565b60a08082528101612a1b81888a6129e9565b90508181036020830152612a2f8187611e21565b9050612a3e6040830186611d19565b612a4b6060830185611aab565b612a586080830184611aab565b979650505050505050565b8051611a6881611d30565b600060208284031215612a8357612a83600080fd5b6000611bb48484612a63565b602d8152602081017f6e6f742073756666696369656e7420636170616369747920696e20746865206981526c1b9cdd5c985b98d9481c1bdbdb609a1b602082015290506122b6565b60208082528101611a6881612a8f56fea26469706673582212203f09cb8f858d54a6204cd5d8b883f718a5474db6acb3d281ccea987699c6f27864736f6c634300080a003368747470733a2f2f31382e3136332e3235342e35303a333230372f666c696768745f7374617475733f",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80637734340811610104578063b7b357ac116100a2578063e846e79711610071578063e846e79714610402578063f059d78e14610415578063f2fde38b1461041e578063fd1053d91461043157600080fd5b8063b7b357ac146103d5578063c34dc50c146103de578063d865ef94146103e6578063ddca3f43146103f957600080fd5b80639180233f116100de5780639180233f14610393578063a5d2a7151461039c578063a9480a8e146103af578063ab2adc00146103c257600080fd5b8063773434081461035c5780638da5cb5b1461036f5780638e34ce351461038057600080fd5b80634fdc9ea91161017c5780636a1db1bf1161014b5780636a1db1bf146103015780636b0edde9146103145780636ce0403c14610334578063715018a61461035457600080fd5b80634fdc9ea91461028e5780635a9274ad146102b9578063612d7350146102cc5780636307737b146102e157600080fd5b806321deab0e116101b857806321deab0e146102265780632a138f651461023957806338b44d6a146102725780634abe553f1461028557600080fd5b806302d7e85a146101df5780631774ea45146101f45780631a397db914610213575b600080fd5b6101f26101ed366004611a6e565b610444565b005b6101fd60025481565b60405161020a9190611ab3565b60405180910390f35b6101f2610221366004611a6e565b6104ce565b6101fd610234366004611c0e565b6105f9565b610265610247366004611ce7565b6000908152600d60205260409020600101546001600160a01b031690565b60405161020a9190611d22565b6101f2610280366004611d43565b6108d0565b6101fd60015481565b6102a161029c366004611ce7565b610b2d565b60405161020a9c9b9a99989796959493929190611e9f565b6101f26102c7366004611ce7565b610c23565b6102d4610c9c565b60405161020a9190611f59565b6007546102f4906001600160a01b031681565b60405161020a9190611fac565b6101f261030f366004611ce7565b610d2a565b610327610322366004611ce7565b610d98565b60405161020a91906120af565b6103476103423660046120d4565b610f03565b60405161020a919061216b565b6101f261116b565b6101f261036a36600461217c565b6111b0565b6004546001600160a01b0316610265565b6101f261038e3660046121b7565b61122c565b6101fd60005481565b6005546102f4906001600160a01b031681565b6101f26103bd366004611ce7565b611307565b6009546102f4906001600160a01b031681565b6101fd60035481565b6101fd600081565b6006546102f4906001600160a01b031681565b6101fd600c5481565b6101f26104103660046120d4565b611375565b6101fd600b5481565b6101f261042c3660046120d4565b6113f9565b6008546102f4906001600160a01b031681565b336104576004546001600160a01b031690565b6001600160a01b0316146104865760405162461bcd60e51b815260040161047d90612237565b60405180910390fd5b600182905560028190556040517febbed710a442fb49ec9fc28724db7432557adf346b15e991b1b50100138e40fc906104c29084908490612247565b60405180910390a15050565b6008546001600160a01b031633146104f85760405162461bcd60e51b815260040161047d906122bc565b6000828152600f6020908152604080832054808452600d909252909120600a8101839055600481015460018201546002546001600160a01b039091169085111580610544575084610190145b6105605760405162461bcd60e51b815260040161047d90612324565b8461057857610573826000548387611464565b6105b8565b60025485116105a057600061058c86611521565b905061059a83828488611595565b506105b8565b8461019014156105b8576105b8826000548387611595565b7f04e392e4100aa2e88345ae13cf73d14c46a6051119773b79fd108c378a4599e384876040516105e9929190612247565b60405180910390a1505050505050565b6000428481111561061c5760405162461bcd60e51b815260040161047d9061237e565b891561063a5760405162461bcd60e51b815260040161047d906123d3565b60035461064790826123f9565b8710156106665760405162461bcd60e51b815260040161047d90612469565b61067484848b338c8a611656565b600b546040805161018081019091526000815260208101336001600160a01b031681526020018281526020018b81526020018a81526020016000548152602001838152602001898152602001888152602001600060048111156106d9576106d9611e53565b815260006020808301829052610194604093840152848252600d81529082902083518155838201516001820180546001600160a01b0319166001600160a01b0390921691909117905591830151600283015560608301518051610742926003850192019061193c565b506080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a81548160ff021916908360048111156107a1576107a1611e53565b02179055506101408201516009820180549115156101000261ff001990921691909117905561016090910151600a909101556000546107e3908a9033846116c8565b600554604051631148708360e11b81526001600160a01b0390911690632290e106906108159033908d90600401612479565b600060405180830381600087803b15801561082f57600080fd5b505af1158015610843573d6000803e3d6000fd5b5050336000908152600e602090815260408220600b80548254600181810185559386529385209093019290925581549094509092506108839084906123f9565b909155505060405133907f9dc1f9a2820214678b76a35ae1ba7d2fe57a670651cd89c9ba78f4b5c59a2e1a906108ba908490611ab3565b60405180910390a29a9950505050505050505050565b6000858152600d60205260409020600801544210156109015760405162461bcd60e51b815260040161047d906124df565b6000858152600d6020526040902060090154610100900460ff161580610939575080801561093957506004546001600160a01b031633145b6109555760405162461bcd60e51b815260040161047d906124ef565b6000858152600d60209081526040918290209151610977926003019101612618565b604051602081830303815290604052805190602001208460405160200161099e9190612644565b60405160208183030381529060405280519060200120146109d15760405162461bcd60e51b815260040161047d90612680565b6000858152600d60209081526040918290206007015491516109f4929101612696565b6040516020818303038152906040528051906020012083604051602001610a1b9190612696565b6040516020818303038152906040528051906020012014610a4e5760405162461bcd60e51b815260040161047d906126e5565b6000600a8585604051602001610a66939291906126f5565b60408051601f1981840301815290829052600854600c54639a66455f60e01b84529193506000926001600160a01b0390911691639a66455f91610ab391908690899060019060040161275d565b6020604051808303816000875af1158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af691906127b4565b6000908152600f602090815260408083208a9055988252600d905296909620600901805461ff001916610100179055505050505050565b600d60205260009081526040902080546001820154600283015460038401805493946001600160a01b0390931693919291610b679061257d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b939061257d565b8015610be05780601f10610bb557610100808354040283529160200191610be0565b820191906000526020600020905b815481529060010190602001808311610bc357829003601f168201915b50505050600483015460058401546006850154600786015460088701546009880154600a90980154969794969395509193909260ff80831692610100900416908c565b33610c366004546001600160a01b031690565b6001600160a01b031614610c5c5760405162461bcd60e51b815260040161047d90612237565b60038190556040517f8c41ba0631fa10e06efe604774b5ef6df52572c640a7d42286c43d3eff0d169590610c91908390611ab3565b60405180910390a150565b600a8054610ca99061257d565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd59061257d565b8015610d225780601f10610cf757610100808354040283529160200191610d22565b820191906000526020600020905b815481529060010190602001808311610d0557829003601f168201915b505050505081565b33610d3d6004546001600160a01b031690565b6001600160a01b031614610d635760405162461bcd60e51b815260040161047d90612237565b600c8190556040517f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c390610c91908390611ab3565b610da06119c0565b6000828152600d60209081526040918290208251610180810184528154815260018201546001600160a01b031692810192909252600281015492820192909252600382018054919291606084019190610df89061257d565b80601f0160208091040260200160405190810160405280929190818152602001828054610e249061257d565b8015610e715780601f10610e4657610100808354040283529160200191610e71565b820191906000526020600020905b815481529060010190602001808311610e5457829003601f168201915b50505091835250506004828101546020830152600583015460408301526006830154606083015260078301546080830152600883015460a0830152600983015460c09092019160ff1690811115610eca57610eca611e53565b6004811115610edb57610edb611e53565b81526009820154610100900460ff1615156020820152600a9091015460409091015292915050565b6001600160a01b0381166000908152600e602052604090205460609080610f3c5760405162461bcd60e51b815260040161047d90612807565b60008167ffffffffffffffff811115610f5757610f57611ac1565b604051908082528060200260200182016040528015610f9057816020015b610f7d6119c0565b815260200190600190039081610f755790505b50905060005b82811015611163576001600160a01b0385166000908152600e60205260408120805483908110610fc857610fc8612817565b6000918252602080832090910154808352600d82526040928390208351610180810185528154815260018201546001600160a01b031693810193909352600281015493830193909352600383018054919450919291606084019161102b9061257d565b80601f01602080910402602001604051908101604052809291908181526020018280546110579061257d565b80156110a45780601f10611079576101008083540402835291602001916110a4565b820191906000526020600020905b81548152906001019060200180831161108757829003601f168201915b50505091835250506004828101546020830152600583015460408301526006830154606083015260078301546080830152600883015460a0830152600983015460c09092019160ff16908111156110fd576110fd611e53565b600481111561110e5761110e611e53565b81526009820154610100900460ff1615156020820152600a90910154604090910152835184908490811061114457611144612817565b602002602001018190525050808061115b9061282d565b915050610f96565b509392505050565b3361117e6004546001600160a01b031690565b6001600160a01b0316146111a45760405162461bcd60e51b815260040161047d90612237565b6111ae60006118ea565b565b336111c36004546001600160a01b031690565b6001600160a01b0316146111e95760405162461bcd60e51b815260040161047d90612237565b80516111fc90600a90602084019061193c565b507f8dbd4721a3316108f3899cd7093e1c9ca0c4759eaa0b62cff2a63e0622d30e3281604051610c919190611f59565b6007546001600160a01b0316336001600160a01b03161461125f5760405162461bcd60e51b815260040161047d906128a0565b6000838152600d602052604090206001015483906001600160a01b0384811691161461129d5760405162461bcd60e51b815260040161047d906128e2565b6000818152600d60205260409081902060010180546001600160a01b0319166001600160a01b0385161790555184907f131013c706ffe7a58a15c6576c2affbfee4aa57a8fc2c179fff9da687da631e6906112f9908590611d22565b60405180910390a250505050565b3361131a6004546001600160a01b031690565b6001600160a01b0316146113405760405162461bcd60e51b815260040161047d90612237565b60008190556040517fdef33f1582315c7c62f4e66de6172585034194d07b9424c91da5d99b2edcdb2990610c91908390611ab3565b336113886004546001600160a01b031690565b6001600160a01b0316146113ae5760405162461bcd60e51b815260040161047d90612237565b600880546001600160a01b0319166001600160a01b0383161790556040517fdd26a8824232c055ca4288c9d4f23ff4dd4e9db5beb3c405f96f16fc2d40911190610c91908390611d22565b3361140c6004546001600160a01b031690565b6001600160a01b0316146114325760405162461bcd60e51b815260040161047d90612237565b6001600160a01b0381166114585760405162461bcd60e51b815260040161047d90612933565b611461816118ea565b50565b600954604051639e2e28b560e01b81526001600160a01b0390911690639e2e28b59061149890879087908790600401612943565b600060405180830381600087803b1580156114b257600080fd5b505af11580156114c6573d6000803e3d6000fd5b5050506000828152600d602052604090819020600901805460ff19166003179055516001600160a01b03841691507f5e2aa8ed921638d802aff01815dcc364f11bd867646ee35cef988a928aa08aba906112f9908490611ab3565b600154600090819083116115375750600061157c565b6001548311801561154a57506002548311155b1561156d576101e061155c848061296b565b61156691906129a0565b905061157c565b60025483111561157c57506000545b61158e81670de0b6b3a764000061296b565b9392505050565b60095460005460405163942465ed60e01b81526001600160a01b039092169163942465ed916115cd91889190889088906004016129b4565b600060405180830381600087803b1580156115e757600080fd5b505af11580156115fb573d6000803e3d6000fd5b5050506000828152600d602052604090819020600901805460ff19166004179055516001600160a01b03841691507fc7ec6d9a759e329b525c568d4a31eadfd4d47a50a11498317356b63536972cff906112f9908490611ab3565b600654604051633dc039c360e01b81526001600160a01b0390911690633dc039c39061169090899089908990899089908990600401612a09565b60006040518083038186803b1580156116a857600080fd5b505afa1580156116bc573d6000803e3d6000fd5b50505050505050505050565b6009546040516202d7af60e31b81526000916001600160a01b0316906216bd78906116f7908790600401611ab3565b602060405180830381865afa158015611714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117389190612a6e565b9050801561186c5760095460405163bf131f4b60e01b81526001600160a01b039091169063bf131f4b9061177490889088908890600401612943565b600060405180830381600087803b15801561178e57600080fd5b505af11580156117a2573d6000803e3d6000fd5b5050506000838152600d602052604090819020600901805460ff19166001179055516001600160a01b03851691507f18c8463e3f8b620eda107b8496632f42c285e0e2dbe36214aef29a7570c98db7906117fd908590611ab3565b60405180910390a2600754604051635c8c72f160e11b81526001600160a01b039091169063b918e5e290611835908690600401611d22565b600060405180830381600087803b15801561184f57600080fd5b505af1158015611863573d6000803e3d6000fd5b505050506118e3565b6000828152600d602052604090819020600901805460ff19166002179055516001600160a01b038416907f2f0c3a9cdf52dc1569c8661ae34313def97a77776bbc9e85ca130c0bafca4ab4906118c3908590611ab3565b60405180910390a260405162461bcd60e51b815260040161047d90612ad7565b5050505050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546119489061257d565b90600052602060002090601f01602090048101928261196a57600085556119b0565b82601f1061198357805160ff19168380011785556119b0565b828001600101855582156119b0579182015b828111156119b0578251825591602001919060010190611995565b506119bc929150611a3b565b5090565b6040518061018001604052806000815260200160006001600160a01b031681526020016000815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160006004811115611a2757611a27611e53565b815260006020820181905260409091015290565b5b808211156119bc5760008155600101611a3c565b805b811461146157600080fd5b8035611a6881611a50565b92915050565b60008060408385031215611a8457611a84600080fd5b6000611a908585611a5d565b9250506020611aa185828601611a5d565b9150509250929050565b805b82525050565b60208101611a688284611aab565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715611afd57611afd611ac1565b6040525050565b6000611b0f60405190565b9050611b1b8282611ad7565b919050565b600067ffffffffffffffff821115611b3a57611b3a611ac1565b601f19601f83011660200192915050565b82818337506000910152565b6000611b6a611b6584611b20565b611b04565b905082815260208101848484011115611b8557611b85600080fd5b611163848285611b4b565b600082601f830112611ba457611ba4600080fd5b8135611bb4848260208601611b57565b949350505050565b60008083601f840112611bd157611bd1600080fd5b50813567ffffffffffffffff811115611bec57611bec600080fd5b602083019150836001820283011115611c0757611c07600080fd5b9250929050565b60008060008060008060008060e0898b031215611c2d57611c2d600080fd5b6000611c398b8b611a5d565b985050602089013567ffffffffffffffff811115611c5957611c59600080fd5b611c658b828c01611b90565b9750506040611c768b828c01611a5d565b9650506060611c878b828c01611a5d565b9550506080611c988b828c01611a5d565b94505060a0611ca98b828c01611a5d565b93505060c089013567ffffffffffffffff811115611cc957611cc9600080fd5b611cd58b828c01611bbc565b92509250509295985092959890939650565b600060208284031215611cfc57611cfc600080fd5b6000611bb48484611a5d565b60006001600160a01b038216611a68565b611aad81611d08565b60208101611a688284611d19565b801515611a52565b8035611a6881611d30565b600080600080600060a08688031215611d5e57611d5e600080fd5b6000611d6a8888611a5d565b955050602086013567ffffffffffffffff811115611d8a57611d8a600080fd5b611d9688828901611b90565b9450506040611da788828901611a5d565b935050606086013567ffffffffffffffff811115611dc757611dc7600080fd5b611dd388828901611b90565b9250506080611de488828901611d38565b9150509295509295909350565b60005b83811015611e0c578181015183820152602001611df4565b83811115611e1b576000848401525b50505050565b6000611e2b825190565b808452602084019350611e42818560208601611df1565b601f01601f19169290920192915050565b634e487b7160e01b600052602160045260246000fd5b6005811061146157611461611e53565b80611b1b81611e69565b6000611a6882611e79565b611aad81611e83565b801515611aad565b6101808101611eae828f611aab565b611ebb602083018e611d19565b611ec8604083018d611aab565b8181036060830152611eda818c611e21565b9050611ee9608083018b611aab565b611ef660a083018a611aab565b611f0360c0830189611aab565b611f1060e0830188611aab565b611f1e610100830187611aab565b611f2c610120830186611e8e565b611f3a610140830185611e97565b611f48610160830184611aab565b9d9c50505050505050505050505050565b6020808252810161158e8184611e21565b6000611a686001600160a01b038316611f81565b90565b6001600160a01b031690565b6000611a6882611f6a565b6000611a6882611f8d565b611aad81611f98565b60208101611a688284611fa3565b8051600090610180840190611fcf8582611aab565b506020830151611fe26020860182611d19565b506040830151611ff56040860182611aab565b506060830151848203606086015261200d8282611e21565b91505060808301516120226080860182611aab565b5060a083015161203560a0860182611aab565b5060c083015161204860c0860182611aab565b5060e083015161205b60e0860182611aab565b50610100830151612070610100860182611aab565b50610120830151612085610120860182611e8e565b5061014083015161209a610140860182611e97565b50610160830151611163610160860182611aab565b6020808252810161158e8184611fba565b611a5281611d08565b8035611a68816120c0565b6000602082840312156120e9576120e9600080fd5b6000611bb484846120c9565b600061158e8383611fba565b60200190565b6000612111825190565b8084526020840193508360208202850161212b8560200190565b60005b8481101561215f578383038852815161214784826120f5565b9350506020820160209890980197915060010161212e565b50909695505050505050565b6020808252810161158e8184612107565b60006020828403121561219157612191600080fd5b813567ffffffffffffffff8111156121ab576121ab600080fd5b611bb484828501611b90565b6000806000606084860312156121cf576121cf600080fd5b60006121db8686611a5d565b93505060206121ec868287016120c9565b92505060406121fd868287016120c9565b9150509250925092565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152612101565b60208082528101611a6881612207565b604081016122558285611aab565b61158e6020830184611aab565b60378152602081017f746869732066756e6374696f6e2073686f756c642062652063616c6c6564206281527f7920466c696768744f7261636c6520636f6e7472616374000000000000000000602082015290505b60400190565b60208082528101611a6881612262565b60398152602081017f41626e6f726d616c206f7261636c6520726573756c742c20726573756c74207381527f686f756c64206265205b30202d203234305d206f722034303000000000000000602082015290506122b6565b60208082528101611a68816122cc565b602f8152602081017f4578706972656420646561646c696e652c20706c656173652072657375626d6981526e3a1030903a3930b739b0b1ba34b7b760891b602082015290506122b6565b60208082528101611a6881612334565b602a8152602081017f596f75206172652063616c6c696e67207468652077726f6e672070726f6475638152691d0818dbdb9d1c9858dd60b21b602082015290506122b6565b60208082528101611a688161238e565b634e487b7160e01b600052601160045260246000fd5b6000821982111561240c5761240c6123e3565b500190565b60408152602081017f4974277320746f6f20636c6f736520746f20746865206465706172747572652081527f74696d652c20796f752063616e6e6f7420627579207468697320706f6c696379602082015290506122b6565b60208082528101611a6881612411565b604081016122558285611d19565b603c8152602081017f43616e206f6e6c7920636c61696d206120706f6c69637920616674657220697481527f73206578706563746564206c616e64696e672074696d657374616d7000000000602082015290506122b6565b60208082528101611a6881612487565b60208082528101611a6881604e81527f54686520706f6c696379207374617475732068617320616c726561647920626560208201527f656e20736574746c65642c206f7220796f75206e65656420746f206d616b652060408201526d6120666f7263652075706461746560901b606082015260800190565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061259157607f821691505b602082108114156125a4576125a4612567565b50919050565b600081546125b78161257d565b6001821680156125ce57600181146125df5761260f565b60ff1983168652818601935061260f565b60008581526020902060005b83811015612607578154888201526001909101906020016125eb565b505081860193505b50505092915050565b611a6881836125aa565b600061262c825190565b61263a818560208601611df1565b9290920192915050565b611a688183612622565b601c8152602081017f57726f6e6720666c69676874206e756d6265722070726f76696465640000000081529050612101565b60208082528101611a688161264e565b80611aad565b6126a08183612690565b602001919050565b60228152602081017f57726f6e67206465706172747572652074696d657374616d702070726f766964815261195960f21b602082015290506122b6565b60208082528101611a68816126a8565b6126ff81856125aa565b69666c696768745f6e6f3d60b01b8152600a01905061271e8184612622565b6a2674696d657374616d703d60a81b8152600b01905061273e8183612690565b6020019392505050565b6000611a68611f7e8381565b611aad81612748565b6080810161276b8287611aab565b818103602083015261277d8186611e21565b905081810360408301526127918185611e21565b90506127a06060830184612754565b95945050505050565b8051611a6881611a50565b6000602082840312156127c9576127c9600080fd5b6000611bb484846127a9565b60178152602081017f4e6f20706f6c69637920666f722074686973207573657200000000000000000081529050612101565b60208082528101611a68816127d5565b634e487b7160e01b600052603260045260246000fd5b6000600019821415612841576128416123e3565b5060010190565b60378152602081017f6f6e6c792063616c6c65642066726f6d2074686520666c696768742064656c6181527f7920706f6c69637920746f6b656e20636f6e7472616374000000000000000000602082015290506122b6565b60208082528101611a6881612848565b601b8152602081017f5468652070726576696f7573206f776e65722069732077726f6e67000000000081529050612101565b60208082528101611a68816128b0565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015290506122b6565b60208082528101611a68816128f2565b606081016129518286611aab565b61295e6020830185611aab565b611bb46040830184611d19565b6000816000190483118215151615612985576129856123e3565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826129af576129af61298a565b500490565b608081016129c28287611aab565b6129cf6020830186611aab565b6129dc6040830185611aab565b6127a06060830184611d19565b8183526020830192506129fd828483611b4b565b50601f01601f19160190565b60a08082528101612a1b81888a6129e9565b90508181036020830152612a2f8187611e21565b9050612a3e6040830186611d19565b612a4b6060830185611aab565b612a586080830184611aab565b979650505050505050565b8051611a6881611d30565b600060208284031215612a8357612a83600080fd5b6000611bb48484612a63565b602d8152602081017f6e6f742073756666696369656e7420636170616369747920696e20746865206981526c1b9cdd5c985b98d9481c1bdbdb609a1b602082015290506122b6565b60208082528101611a6881612a8f56fea26469706673582212203f09cb8f858d54a6204cd5d8b883f718a5474db6acb3d281ccea987699c6f27864736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeFee(uint256)": {
        "params": {
          "_fee": "New oracle fee"
        }
      },
      "changeMaxPayoff(uint256)": {
        "params": {
          "_newMaxPayoff": "New maxpayoff amount"
        }
      },
      "changeMinTimeBeforeDeparture(uint256)": {
        "params": {
          "_newMinTime": "New time set"
        }
      },
      "finalSettlement(bytes32,uint256)": {
        "params": {
          "_requestId": "Chainlink request id",
          "_result": "Delay result (minutes) given by oracle"
        }
      },
      "findPolicyBuyerById(uint256)": {
        "params": {
          "_policyId": "Unique policy Id (uint256)"
        },
        "returns": {
          "buyerAddress": "The buyer of this policy"
        }
      },
      "getPolicyInfoById(uint256)": {
        "params": {
          "_policyId": "Total count/order of the policy = NFT tokenId"
        },
        "returns": {
          "policy": "A struct of information about this policy"
        }
      },
      "newApplication(uint256,string,uint256,uint256,uint256,uint256,bytes)": {
        "details": "The transaction should have the signature from the backend server",
        "params": {
          "_deadline": "Deadline for this purchase request",
          "_departureTimestamp": "Departure date of this flight (unix timestamp in s, not ms!)",
          "_flightNumber": "Flight number in string (e.g. \"AQ1299\")",
          "_landingDate": "Landing date of this flight (uinx timestamp in s, not ms!)",
          "_premium": "Premium of this policy (decimals: 18)",
          "_productId": "ID of the purchased product (0: flightdelay; 1,2,3...: others)",
          "signature": "Use web3.eth.sign(hash(data), account) to generate the signature"
        }
      },
      "newClaimRequest(uint256,string,uint256,string,bool)": {
        "params": {
          "_flightNumber": "The flight number",
          "_forceUpdate": "Owner can force to update",
          "_path": "Which data in json needs to get",
          "_policyId": "The total order/id of the policy",
          "_timestamp": "The flight departure timestamp"
        }
      },
      "policyOwnerTransfer(uint256,address,address)": {
        "details": "This function is called by the ERC721 contract of PolicyToken",
        "params": {
          "_newOwner": "The new owner",
          "_oldOwner": "The initial owner",
          "_tokenId": "Token Id of the policy token"
        }
      },
      "renounceOwnership()": {
        "details": "Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner."
      },
      "setDelayThreshold(uint256,uint256)": {
        "params": {
          "_thresholdMax": "New maximum threshold",
          "_thresholdMin": "New minimum threshold"
        }
      },
      "setFlightOracle(address)": {
        "params": {
          "_oracleAddress": "New oracle address"
        }
      },
      "transferOwnership(address)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "newOwner": "Address of the new owner"
        }
      },
      "viewUserPolicy(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "userPolicies User's all policy details"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeFee(uint256)": {
        "notice": "Change the oracle fee"
      },
      "changeMaxPayoff(uint256)": {
        "notice": "Change the max payoff"
      },
      "changeMinTimeBeforeDeparture(uint256)": {
        "notice": "How long before departure when users can not buy new policies"
      },
      "finalSettlement(bytes32,uint256)": {
        "notice": "Do the final settlement, called by FlightOracle contract"
      },
      "findPolicyBuyerById(uint256)": {
        "notice": "Get the policy buyer by policyId"
      },
      "getPolicyInfoById(uint256)": {
        "notice": "Get the policyInfo from its count/order"
      },
      "newApplication(uint256,string,uint256,uint256,uint256,uint256,bytes)": {
        "notice": "Buy a new flight delay policy"
      },
      "newClaimRequest(uint256,string,uint256,string,bool)": {
        "notice": "Make a claim request"
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "policyOwnerTransfer(uint256,address,address)": {
        "notice": "Update information when a policy token's ownership has been transferred"
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."
      },
      "setDelayThreshold(uint256,uint256)": {
        "notice": "Set the new delay threshold used for calculating payoff"
      },
      "setFlightOracle(address)": {
        "notice": "Change the oracle address"
      },
      "setURL(string)": {
        "notice": "Set a new url"
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`)."
      },
      "viewUserPolicy(address)": {
        "notice": "Show a user's policies (all)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15237,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "MAX_PAYOFF",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 15240,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "DELAY_THRESHOLD_MIN",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 15243,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "DELAY_THRESHOLD_MAX",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 15246,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "MIN_TIME_BEFORE_DEPARTURE",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 22757,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 13930,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "buyerToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IBuyerToken)21437"
      },
      {
        "astId": 13933,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "sigManager",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ISigManager)15589"
      },
      {
        "astId": 13936,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "policyToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IFDPolicyToken)15272"
      },
      {
        "astId": 13939,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "flightOracle",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IFlightOracle)15313"
      },
      {
        "astId": 13942,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "insurancePool",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IInsurancePool)15435"
      },
      {
        "astId": 13945,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "FLIGHT_STATUS_URL",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 13947,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "totalPolicies",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 13949,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "fee",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 13954,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "policyList",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(PolicyInfo)15547_storage)"
      },
      {
        "astId": 13959,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "userPolicyList",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 13963,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "requestList",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 13967,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "delayResultList",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBuyerToken)21437": {
        "encoding": "inplace",
        "label": "contract IBuyerToken",
        "numberOfBytes": "20"
      },
      "t_contract(IFDPolicyToken)15272": {
        "encoding": "inplace",
        "label": "contract IFDPolicyToken",
        "numberOfBytes": "20"
      },
      "t_contract(IFlightOracle)15313": {
        "encoding": "inplace",
        "label": "contract IFlightOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IInsurancePool)15435": {
        "encoding": "inplace",
        "label": "contract IInsurancePool",
        "numberOfBytes": "20"
      },
      "t_contract(ISigManager)15589": {
        "encoding": "inplace",
        "label": "contract ISigManager",
        "numberOfBytes": "20"
      },
      "t_enum(PolicyStatus)15521": {
        "encoding": "inplace",
        "label": "enum IPolicyStruct.PolicyStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(PolicyInfo)15547_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPolicyStruct.PolicyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PolicyInfo)15547_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PolicyInfo)15547_storage": {
        "encoding": "inplace",
        "label": "struct IPolicyStruct.PolicyInfo",
        "members": [
          {
            "astId": 15523,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "productId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15525,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "buyerAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 15527,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "policyId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15529,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "flightNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 15531,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "premium",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 15533,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "payoff",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 15535,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "purchaseTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 15537,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "departureTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 15539,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "landingTimestamp",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 15542,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "status",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(PolicyStatus)15521"
          },
          {
            "astId": 15544,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "alreadySettled",
            "offset": 1,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 15546,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "delayResult",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}