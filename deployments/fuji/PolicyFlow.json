{
  "address": "0x2D46e68460daa451caB7A3ea0eDA7D2A071EEE6E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_insurancePool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_policyToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sigManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buyerToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thresholdMin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thresholdMax",
          "type": "uint256"
        }
      ],
      "name": "DelayThresholdChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "FeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "FlightOracleChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "policyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "FulfilledOracleRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxPayoff",
          "type": "uint256"
        }
      ],
      "name": "MaxPayoffChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinTime",
          "type": "uint256"
        }
      ],
      "name": "MinTimeBeforeDepartureChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_policyID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "NewPolicyApplication",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "newUrl",
          "type": "string"
        }
      ],
      "name": "OracleUrlChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "policyID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "PolicyClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "policyID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "PolicyDeclined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "policyID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "PolicyExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "PolicyOwnerTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "policyID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "PolicySold",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELAY_THRESHOLD_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DELAY_THRESHOLD_MIN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FLIGHT_STATUS_URL",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PAYOFF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TIME_UNTIL_DEPARTURE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TIME_BEFORE_DEPARTURE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRODUCT_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyerToken",
      "outputs": [
        {
          "internalType": "contract IBuyerToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMinTime",
          "type": "uint256"
        }
      ],
      "name": "changeMinTimeBeforeDeparture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_result",
          "type": "uint256"
        }
      ],
      "name": "finalSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        }
      ],
      "name": "findPolicyBuyerById",
      "outputs": [
        {
          "internalType": "address",
          "name": "buyerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flightOracle",
      "outputs": [
        {
          "internalType": "contract IFlightOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        }
      ],
      "name": "getPolicyInfoById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "productId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "policyId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "flightNumber",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "premium",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "payoff",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "departureTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "landingTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum IPolicyStruct.PolicyStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "alreadySettled",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "delayResult",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPolicyStruct.PolicyInfo",
          "name": "policy",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insurancePool",
      "outputs": [
        {
          "internalType": "contract IInsurancePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_flightNumber",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_premium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_departureTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_landingDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "newApplication",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_policyId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_flightNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_timestamp",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_path",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_forceUpdate",
          "type": "bool"
        }
      ],
      "name": "newClaimRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "policyList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "policyId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "flightNumber",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payoff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchaseTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "departureTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "landingTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum IPolicyStruct.PolicyStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "alreadySettled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "delayResult",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_oldOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "policyOwnerTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyToken",
      "outputs": [
        {
          "internalType": "contract IFDPolicyToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_thresholdMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_thresholdMax",
          "type": "uint256"
        }
      ],
      "name": "setDelayThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        }
      ],
      "name": "setFlightOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMaxPayoff",
          "type": "uint256"
        }
      ],
      "name": "setMaxPayoff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_url",
          "type": "string"
        }
      ],
      "name": "setURL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sigManager",
      "outputs": [
        {
          "internalType": "contract ISigManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPolicies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "viewUserPolicy",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "productId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "policyId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "flightNumber",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "premium",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "payoff",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "departureTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "landingTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum IPolicyStruct.PolicyStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "alreadySettled",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "delayResult",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPolicyStruct.PolicyInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbdac3ae58a433a7fed695f52ada3c8eceb0ca13509729d630b105ab079852975",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x2D46e68460daa451caB7A3ea0eDA7D2A071EEE6E",
    "transactionIndex": 1,
    "gasUsed": "2840536",
    "logsBloom": "0x
    "blockHash": "0x9f96c0c602d6da48f734139e93f8e273744070a6d6cc40623e2e575fd1e314a5",
    "transactionHash": "0xbdac3ae58a433a7fed695f52ada3c8eceb0ca13509729d630b105ab079852975",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5923439,
        "transactionHash": "0xbdac3ae58a433a7fed695f52ada3c8eceb0ca13509729d630b105ab079852975",
        "address": "0x2D46e68460daa451caB7A3ea0eDA7D2A071EEE6E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001be1a151ba3d24f594ee971dc9b843f23b5ba80e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9f96c0c602d6da48f734139e93f8e273744070a6d6cc40623e2e575fd1e314a5"
      }
    ],
    "blockNumber": 5923439,
    "cumulativeGasUsed": "2861536",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCFFa179086028255e8A75aBDe8AA261253133cF9",
    "0x5C8df25D8ABCaD8D6864C55B539Ad305E0fe6eDa",
    "0xdD4eF7D1d67f8433F40A573c7057C6c1574658a5",
    "0x55CCfA6fE70b0e5faD62525b4764572812F2F463"
  ],
  "numDeployments": 1,
  "solcInputHash": "c93208af0650ec7944554f5ed4da2f2f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_insurancePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_policyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sigManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyerToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thresholdMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thresholdMax\",\"type\":\"uint256\"}],\"name\":\"DelayThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"FlightOracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"FulfilledOracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxPayoff\",\"type\":\"uint256\"}],\"name\":\"MaxPayoffChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinTime\",\"type\":\"uint256\"}],\"name\":\"MinTimeBeforeDepartureChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_policyID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NewPolicyApplication\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newUrl\",\"type\":\"string\"}],\"name\":\"OracleUrlChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"policyID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PolicyClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"policyID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PolicyDeclined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"policyID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PolicyExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"PolicyOwnerTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"policyID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PolicySold\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELAY_THRESHOLD_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELAY_THRESHOLD_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLIGHT_STATUS_URL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PAYOFF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TIME_UNTIL_DEPARTURE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TIME_BEFORE_DEPARTURE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRODUCT_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyerToken\",\"outputs\":[{\"internalType\":\"contract IBuyerToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinTime\",\"type\":\"uint256\"}],\"name\":\"changeMinTimeBeforeDeparture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_result\",\"type\":\"uint256\"}],\"name\":\"finalSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"findPolicyBuyerById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flightOracle\",\"outputs\":[{\"internalType\":\"contract IFlightOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"getPolicyInfoById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"flightNumber\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"departureTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"landingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum IPolicyStruct.PolicyStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"alreadySettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"delayResult\",\"type\":\"uint256\"}],\"internalType\":\"struct IPolicyStruct.PolicyInfo\",\"name\":\"policy\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurancePool\",\"outputs\":[{\"internalType\":\"contract IInsurancePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_flightNumber\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_departureTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_landingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"newApplication\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_policyId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_flightNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_timestamp\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_forceUpdate\",\"type\":\"bool\"}],\"name\":\"newClaimRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"policyList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"flightNumber\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"departureTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"landingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum IPolicyStruct.PolicyStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"alreadySettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"delayResult\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"policyOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyToken\",\"outputs\":[{\"internalType\":\"contract IFDPolicyToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thresholdMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_thresholdMax\",\"type\":\"uint256\"}],\"name\":\"setDelayThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setFlightOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxPayoff\",\"type\":\"uint256\"}],\"name\":\"setMaxPayoff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"setURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sigManager\",\"outputs\":[{\"internalType\":\"contract ISigManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPolicies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserPolicy\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"policyId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"flightNumber\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"departureTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"landingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum IPolicyStruct.PolicyStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"alreadySettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"delayResult\",\"type\":\"uint256\"}],\"internalType\":\"struct IPolicyStruct.PolicyInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeMinTimeBeforeDeparture(uint256)\":{\"params\":{\"_newMinTime\":\"New time set\"}},\"finalSettlement(bytes32,uint256)\":{\"params\":{\"_requestId\":\"Chainlink request id\",\"_result\":\"Delay result (minutes) given by oracle\"}},\"findPolicyBuyerById(uint256)\":{\"params\":{\"_policyId\":\"Unique policy Id (uint256)\"},\"returns\":{\"buyerAddress\":\"The buyer of this policy\"}},\"getPolicyInfoById(uint256)\":{\"params\":{\"_policyId\":\"Total count/order of the policy = NFT tokenId\"},\"returns\":{\"policy\":\"A struct of information about this policy\"}},\"newApplication(uint256,string,uint256,uint256,uint256,uint256,bytes)\":{\"details\":\"The transaction should have the signature from the backend server\",\"params\":{\"_deadline\":\"Deadline for this purchase request\",\"_departureTimestamp\":\"Departure date of this flight (unix timestamp in s, not ms!)\",\"_flightNumber\":\"Flight number in string (e.g. \\\"AQ1299\\\")\",\"_landingDate\":\"Landing date of this flight (uinx timestamp in s, not ms!)\",\"_premium\":\"Premium of this policy (decimals: 18)\",\"_productId\":\"ID of the purchased product (0: flightdelay; 1,2,3...: others)\",\"signature\":\"Use web3.eth.sign(hash(data), account) to generate the signature\"}},\"newClaimRequest(uint256,string,string,string,bool)\":{\"params\":{\"_flightNumber\":\"The flight number\",\"_forceUpdate\":\"Owner can force to update\",\"_path\":\"Which data in json needs to get\",\"_policyId\":\"The total order/id of the policy\",\"_timestamp\":\"The flight departure timestamp\"}},\"policyOwnerTransfer(uint256,address,address)\":{\"details\":\"This function is called by the ERC721 contract of PolicyToken\",\"params\":{\"_newOwner\":\"The new owner\",\"_oldOwner\":\"The initial owner\",\"_tokenId\":\"Token Id of the policy token\"}},\"renounceOwnership()\":{\"details\":\"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.\"},\"setDelayThreshold(uint256,uint256)\":{\"params\":{\"_thresholdMax\":\"New maximum threshold\",\"_thresholdMin\":\"New minimum threshold\"}},\"setFee(uint256)\":{\"params\":{\"_fee\":\"New oracle fee\"}},\"setFlightOracle(address)\":{\"params\":{\"_oracleAddress\":\"New oracle address\"}},\"setMaxPayoff(uint256)\":{\"params\":{\"_newMaxPayoff\":\"New maxpayoff amount\"}},\"transferOwnership(address)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"newOwner\":\"Address of the new owner\"}},\"viewUserPolicy(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"userPolicies User's all policy details\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeMinTimeBeforeDeparture(uint256)\":{\"notice\":\"How long before departure when users can not buy new policies\"},\"finalSettlement(bytes32,uint256)\":{\"notice\":\"Do the final settlement, called by FlightOracle contract\"},\"findPolicyBuyerById(uint256)\":{\"notice\":\"Get the policy buyer by policyId\"},\"getPolicyInfoById(uint256)\":{\"notice\":\"Get the policyInfo from its count/order\"},\"newApplication(uint256,string,uint256,uint256,uint256,uint256,bytes)\":{\"notice\":\"Buy a new flight delay policy\"},\"newClaimRequest(uint256,string,string,string,bool)\":{\"notice\":\"Make a claim request\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"policyOwnerTransfer(uint256,address,address)\":{\"notice\":\"Update information when a policy token's ownership has been transferred\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner.\"},\"setDelayThreshold(uint256,uint256)\":{\"notice\":\"Set the new delay threshold used for calculating payoff\"},\"setFee(uint256)\":{\"notice\":\"Set the oracle fee\"},\"setFlightOracle(address)\":{\"notice\":\"Change the oracle address\"},\"setMaxPayoff(uint256)\":{\"notice\":\"Set the max payoff\"},\"setURL(string)\":{\"notice\":\"Set a new url\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).\"},\"viewUserPolicy(address)\":{\"notice\":\"Show a user's policies (all)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/miserable-flight/PolicyFlow.sol\":\"PolicyFlow\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x872ba21af7c1f0ae04a715beca31e8fcac764d6c8762940b0fe1bfb6ed8e86f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x42c041cfe2fba75264baa64c4c3c55b128e6667b54331df87028cc4da0a9606e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9\",\"license\":\"MIT\"},\"contracts/libraries/StringsUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUtils {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @notice Bytes to string (not human-readable form)\\n     * @param _bytes Input bytes\\n     * @return stringBytes String form of the bytes\\n     */\\n    function byToString(bytes32 _bytes) internal pure returns (string memory) {\\n        return uintToHexString(uint256(_bytes), 32);\\n    }\\n\\n    /**\\n     * @notice Transfer address to string (not change the content)\\n     * @param _addr Input address\\n     * @return stringAddress String form of the address\\n     */\\n    function addressToString(address _addr)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return uintToHexString(uint256(uint160(_addr)), 20);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function uintToString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function uintToHexString(uint256 value)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return uintToHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function uintToHexString(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x95d621cbfbf0c82757a2d245d09ab282bb86e044fd3a39a3de39431e627cd06e\",\"license\":\"MIT\"},\"contracts/miserable-flight/PolicyFlow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\n\\nimport \\\"../tokens/interfaces/IBuyerToken.sol\\\";\\nimport \\\"./interfaces/ISigManager.sol\\\";\\nimport \\\"./interfaces/IFDPolicyToken.sol\\\";\\nimport \\\"./interfaces/IFlightOracle.sol\\\";\\nimport \\\"./interfaces/IInsurancePool.sol\\\";\\n\\nimport \\\"./interfaces/IPolicyStruct.sol\\\";\\nimport \\\"./abstracts/PolicyParameters.sol\\\";\\n\\nimport \\\"../libraries/StringsUtils.sol\\\";\\n\\ncontract PolicyFlow is IPolicyStruct, PolicyParameters, Ownable {\\n    using StringsUtils for uint256;\\n\\n    // Other contracts\\n    IBuyerToken public buyerToken;\\n    ISigManager public sigManager;\\n    IFDPolicyToken public policyToken;\\n    IFlightOracle public flightOracle;\\n    IInsurancePool public insurancePool;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    string public FLIGHT_STATUS_URL =\\n        \\\"https://testnet.degis.io:3207/flight_status?\\\";\\n\\n    uint256 public totalPolicies;\\n\\n    uint256 public fee;\\n\\n    mapping(uint256 => PolicyInfo) public policyList;\\n\\n    mapping(address => uint256[]) userPolicyList;\\n\\n    mapping(bytes32 => uint256) public requestList;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n    event FeeChanged(uint256 newFee);\\n    event MaxPayoffChanged(uint256 newMaxPayoff);\\n    event MinTimeBeforeDepartureChanged(uint256 newMinTime);\\n    event FlightOracleChanged(address newOracle);\\n    event OracleUrlChanged(string newUrl);\\n    event DelayThresholdChanged(uint256 thresholdMin, uint256 thresholdMax);\\n\\n    event NewPolicyApplication(uint256 _policyID, address indexed user);\\n    event PolicySold(uint256 policyID, address indexed user);\\n    event PolicyDeclined(uint256 policyID, address indexed user);\\n    event PolicyClaimed(uint256 policyID, address indexed user);\\n    event PolicyExpired(uint256 policyID, address indexed user);\\n    event FulfilledOracleRequest(uint256 policyId, bytes32 requestId);\\n    event PolicyOwnerTransfer(uint256 indexed tokenId, address newOwner);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(\\n        address _insurancePool,\\n        address _policyToken,\\n        address _sigManager,\\n        address _buyerToken\\n    ) {\\n        insurancePool = IInsurancePool(_insurancePool);\\n        policyToken = IFDPolicyToken(_policyToken);\\n        sigManager = ISigManager(_sigManager);\\n        buyerToken = IBuyerToken(_buyerToken);\\n\\n        fee = 0.1 * 10**18;\\n    }\\n\\n    // ----------------------------------------------------------------------------------- //\\n    // ************************************ Modifiers ************************************ //\\n    // ----------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @dev This modifier uses assert which means this error should never happens.\\n     */\\n    modifier validAddress() {\\n        assert(msg.sender != address(0));\\n        _;\\n    }\\n\\n    // ----------------------------------------------------------------------------------- //\\n    // ********************************* View Functions ********************************** //\\n    // ----------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Show a user's policies (all)\\n     * @param _user User's address\\n     * @return userPolicies User's all policy details\\n     */\\n    function viewUserPolicy(address _user)\\n        external\\n        view\\n        returns (PolicyInfo[] memory)\\n    {\\n        uint256 userPolicyAmount = userPolicyList[_user].length;\\n        require(userPolicyAmount > 0, \\\"No policy for this user\\\");\\n\\n        PolicyInfo[] memory result = new PolicyInfo[](userPolicyAmount);\\n\\n        for (uint256 i = 0; i < userPolicyAmount; i++) {\\n            uint256 policyId = userPolicyList[_user][i];\\n\\n            result[i] = policyList[policyId];\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get the policyInfo from its count/order\\n     * @param _policyId Total count/order of the policy = NFT tokenId\\n     * @return policy A struct of information about this policy\\n     */\\n    // TODO: If still need this function\\n    function getPolicyInfoById(uint256 _policyId)\\n        public\\n        view\\n        returns (PolicyInfo memory policy)\\n    {\\n        policy = policyList[_policyId];\\n    }\\n\\n    /**\\n     * @notice Get the policy buyer by policyId\\n     * @param _policyId Unique policy Id (uint256)\\n     * @return buyerAddress The buyer of this policy\\n     */\\n    // TODO: If still need this function\\n    function findPolicyBuyerById(uint256 _policyId)\\n        public\\n        view\\n        returns (address buyerAddress)\\n    {\\n        buyerAddress = policyList[_policyId].buyerAddress;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Set the oracle fee\\n     * @param _fee New oracle fee\\n     */\\n    function setFee(uint256 _fee) external onlyOwner {\\n        fee = _fee;\\n        emit FeeChanged(_fee);\\n    }\\n\\n    /**\\n     * @notice Set the max payoff\\n     * @param _newMaxPayoff New maxpayoff amount\\n     */\\n    function setMaxPayoff(uint256 _newMaxPayoff) external onlyOwner {\\n        MAX_PAYOFF = _newMaxPayoff;\\n        emit MaxPayoffChanged(_newMaxPayoff);\\n    }\\n\\n    /**\\n     * @notice How long before departure when users can not buy new policies\\n     * @param _newMinTime New time set\\n     */\\n    function changeMinTimeBeforeDeparture(uint256 _newMinTime)\\n        external\\n        onlyOwner\\n    {\\n        MIN_TIME_BEFORE_DEPARTURE = _newMinTime;\\n        emit MinTimeBeforeDepartureChanged(_newMinTime);\\n    }\\n\\n    /**\\n     * @notice Change the oracle address\\n     * @param _oracleAddress New oracle address\\n     */\\n    function setFlightOracle(address _oracleAddress) external onlyOwner {\\n        flightOracle = IFlightOracle(_oracleAddress);\\n        emit FlightOracleChanged(_oracleAddress);\\n    }\\n\\n    /**\\n     * @notice Set a new url\\n     */\\n    function setURL(string memory _url) external onlyOwner {\\n        FLIGHT_STATUS_URL = _url;\\n        emit OracleUrlChanged(_url);\\n    }\\n\\n    /**\\n     * @notice Set the new delay threshold used for calculating payoff\\n     * @param _thresholdMin New minimum threshold\\n     * @param _thresholdMax New maximum threshold\\n     */\\n    function setDelayThreshold(uint256 _thresholdMin, uint256 _thresholdMax)\\n        external\\n        onlyOwner\\n    {\\n        DELAY_THRESHOLD_MIN = _thresholdMin;\\n        DELAY_THRESHOLD_MAX = _thresholdMax;\\n        emit DelayThresholdChanged(_thresholdMin, _thresholdMax);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Buy a new flight delay policy\\n     * @dev The transaction should have the signature from the backend server\\n     * @param _productId ID of the purchased product (0: flightdelay; 1,2,3...: others)\\n     * @param _flightNumber Flight number in string (e.g. \\\"AQ1299\\\")\\n     * @param _premium Premium of this policy (decimals: 18)\\n     * @param _departureTimestamp Departure date of this flight (unix timestamp in s, not ms!)\\n     * @param _landingDate Landing date of this flight (uinx timestamp in s, not ms!)\\n     * @param _deadline Deadline for this purchase request\\n     * @param signature Use web3.eth.sign(hash(data), account) to generate the signature\\n     */\\n    function newApplication(\\n        uint256 _productId,\\n        string memory _flightNumber,\\n        uint256 _premium,\\n        uint256 _departureTimestamp,\\n        uint256 _landingDate,\\n        uint256 _deadline,\\n        bytes calldata signature\\n    ) public returns (uint256 _policyId) {\\n        uint256 currentTimestamp = block.timestamp;\\n        require(\\n            currentTimestamp <= _deadline,\\n            \\\"Expired deadline, please resubmit a transaction\\\"\\n        );\\n\\n        require(\\n            _productId == PRODUCT_ID,\\n            \\\"You are calling the wrong product contract\\\"\\n        );\\n\\n        require(\\n            (_departureTimestamp >=\\n                currentTimestamp + MIN_TIME_BEFORE_DEPARTURE) &&\\n                (_departureTimestamp <=\\n                    currentTimestamp + MAX_TIME_UNTIL_DEPARTURE),\\n            \\\"Too close or too far from departure time\\\"\\n        );\\n\\n        // Should be signed by operators\\n        _checkSignature(\\n            signature,\\n            _flightNumber,\\n            _msgSender(),\\n            _premium,\\n            _deadline\\n        );\\n\\n        // Generate the policy\\n        uint256 currentPolicyId = ++totalPolicies;\\n        policyList[currentPolicyId] = PolicyInfo(\\n            PRODUCT_ID,\\n            _msgSender(),\\n            currentPolicyId,\\n            _flightNumber,\\n            _premium,\\n            MAX_PAYOFF,\\n            currentTimestamp,\\n            _departureTimestamp,\\n            _landingDate,\\n            PolicyStatus.INI,\\n            false,\\n            404\\n        );\\n\\n        // Check the policy with the insurance pool status\\n        // May be accepted or rejected, if accepted then update the status of insurancePool\\n        _policyCheck(_premium, MAX_PAYOFF, msg.sender, currentPolicyId);\\n\\n        // Give buyer tokens depending on the usd value they spent\\n        buyerToken.mintBuyerToken(msg.sender, _premium);\\n\\n        // Store the policy's total order with userAddress\\n        userPolicyList[msg.sender].push(totalPolicies);\\n\\n        emit NewPolicyApplication(currentPolicyId, msg.sender);\\n\\n        return currentPolicyId;\\n    }\\n\\n    /** @notice Make a claim request\\n     *  @param _policyId The total order/id of the policy\\n     *  @param _flightNumber The flight number\\n     *  @param _timestamp The flight departure timestamp\\n     *  @param _path Which data in json needs to get\\n     *  @param _forceUpdate Owner can force to update\\n     */\\n    function newClaimRequest(\\n        uint256 _policyId,\\n        string memory _flightNumber,\\n        string memory _timestamp,\\n        string memory _path,\\n        bool _forceUpdate\\n    ) public {\\n        // Can not get the result before landing date\\n        // Landing date may not be true, may be a fixed interval (4hours)\\n        require(\\n            block.timestamp >= policyList[_policyId].landingTimestamp,\\n            \\\"Can only claim a policy after its expected landing timestamp\\\"\\n        );\\n\\n        // Check if the policy has been settled\\n        require(\\n            (!policyList[_policyId].alreadySettled) ||\\n                (_forceUpdate && (_msgSender() == owner())),\\n            \\\"The policy status has already been settled, or you need to make a force update\\\"\\n        );\\n\\n        // Check if the flight number is correct\\n        require(\\n            keccak256(abi.encodePacked(_flightNumber)) ==\\n                keccak256(abi.encodePacked(policyList[_policyId].flightNumber)),\\n            \\\"Wrong flight number provided\\\"\\n        );\\n\\n        // Check if the departure date is correct\\n        require(\\n            keccak256(abi.encodePacked(_timestamp)) ==\\n                keccak256(\\n                    abi.encodePacked(\\n                        policyList[_policyId].departureTimestamp.uintToString()\\n                    )\\n                ),\\n            \\\"Wrong departure timestamp provided\\\"\\n        );\\n\\n        // Construct the url for oracle\\n\\n        string memory _url = string(\\n            abi.encodePacked(\\n                FLIGHT_STATUS_URL,\\n                \\\"flight_no=\\\",\\n                _flightNumber,\\n                \\\"&timestamp=\\\",\\n                _timestamp\\n            )\\n        );\\n\\n        // Start a new oracle request\\n        bytes32 requestId = flightOracle.newOracleRequest(fee, _url, _path, 1);\\n\\n        // Record this request\\n        requestList[requestId] = _policyId;\\n        policyList[_policyId].alreadySettled = true;\\n    }\\n\\n    /**\\n     * @notice Update information when a policy token's ownership has been transferred\\n     * @dev This function is called by the ERC721 contract of PolicyToken\\n     * @param _tokenId Token Id of the policy token\\n     * @param _oldOwner The initial owner\\n     * @param _newOwner The new owner\\n     */\\n    function policyOwnerTransfer(\\n        uint256 _tokenId,\\n        address _oldOwner,\\n        address _newOwner\\n    ) external {\\n        // Check the call is from policy token contract\\n        require(\\n            _msgSender() == address(policyToken),\\n            \\\"only called from the flight delay policy token contract\\\"\\n        );\\n\\n        // Check the previous owner record\\n        uint256 policyId = _tokenId;\\n        require(\\n            _oldOwner == policyList[policyId].buyerAddress,\\n            \\\"The previous owner is wrong\\\"\\n        );\\n\\n        // Update the new buyer address\\n        policyList[policyId].buyerAddress = _newOwner;\\n        emit PolicyOwnerTransfer(_tokenId, _newOwner);\\n    }\\n\\n    // ----------------------------------------------------------------------------------- //\\n    // ********************************* Oracle Functions ******************************** //\\n    // ----------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Do the final settlement, called by FlightOracle contract\\n     * @param _requestId Chainlink request id\\n     * @param _result Delay result (minutes) given by oracle\\n     */\\n    function finalSettlement(bytes32 _requestId, uint256 _result) public {\\n        // Check if the call is from flight oracle\\n        require(\\n            msg.sender == address(flightOracle),\\n            \\\"this function should be called by FlightOracle contract\\\"\\n        );\\n\\n        uint256 policyId = requestList[_requestId];\\n\\n        PolicyInfo storage policy = policyList[policyId];\\n        policy.delayResult = _result;\\n\\n        uint256 premium = policy.premium;\\n        address buyerAddress = policy.buyerAddress;\\n\\n        require(\\n            _result <= DELAY_THRESHOLD_MAX || _result == 400,\\n            \\\"Abnormal oracle result, result should be [0 - 240] or 400\\\"\\n        );\\n\\n        if (_result == 0) {\\n            // 0: on time\\n            policyExpired(premium, MAX_PAYOFF, buyerAddress, policyId);\\n        } else if (_result <= DELAY_THRESHOLD_MAX) {\\n            uint256 real_payoff = calcPayoff(_result);\\n            _policyClaimed(premium, real_payoff, buyerAddress, policyId);\\n        } else if (_result == 400) {\\n            // 400: cancelled\\n            _policyClaimed(premium, MAX_PAYOFF, buyerAddress, policyId);\\n        }\\n\\n        emit FulfilledOracleRequest(policyId, _requestId);\\n    }\\n\\n    // ----------------------------------------------------------------------------------- //\\n    // ******************************** Internal Functions ******************************* //\\n    // ----------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice check the policy and then determine whether we can afford it\\n     * @param _payoff the payoff of the policy sold\\n     * @param _user user's address\\n     * @param _policyId the unique policy ID\\n     */\\n    function _policyCheck(\\n        uint256 _premium,\\n        uint256 _payoff,\\n        address _user,\\n        uint256 _policyId\\n    ) internal {\\n        // Whether there are enough capacity in the pool\\n        bool _isAccepted = insurancePool.checkCapacity(_payoff);\\n\\n        if (_isAccepted) {\\n            insurancePool.updateWhenBuy(_premium, _payoff, _user);\\n            policyList[_policyId].status = PolicyStatus.SOLD;\\n            emit PolicySold(_policyId, _user);\\n\\n            policyToken.mintPolicyToken(_user);\\n        } else {\\n            policyList[_policyId].status = PolicyStatus.DECLINED;\\n            emit PolicyDeclined(_policyId, _user);\\n            revert(\\\"not sufficient capacity in the insurance pool\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice update the policy when it is expired\\n     * @param _premium the premium of the policy sold\\n     * @param _payoff the payoff of the policy sold\\n     * @param _user user's address\\n     * @param _policyId the unique policy ID\\n     */\\n    function policyExpired(\\n        uint256 _premium,\\n        uint256 _payoff,\\n        address _user,\\n        uint256 _policyId\\n    ) internal {\\n        insurancePool.updateWhenExpire(_premium, _payoff, _user);\\n        policyList[_policyId].status = PolicyStatus.EXPIRED;\\n        emit PolicyExpired(_policyId, _user);\\n    }\\n\\n    /**\\n     * @notice Update the policy when it is claimed\\n     * @param _premium Premium of the policy sold\\n     * @param _payoff Payoff of the policy sold\\n     * @param _user User's address\\n     * @param _policyId The unique policy ID\\n     */\\n    function _policyClaimed(\\n        uint256 _premium,\\n        uint256 _payoff,\\n        address _user,\\n        uint256 _policyId\\n    ) internal {\\n        insurancePool.payClaim(_premium, MAX_PAYOFF, _payoff, _user);\\n        policyList[_policyId].status = PolicyStatus.CLAIMED;\\n        emit PolicyClaimed(_policyId, _user);\\n    }\\n\\n    /**\\n     * @notice The payoff formula\\n     * @param _delay Delay in minutes\\n     * @return the final payoff volume\\n     */\\n    function calcPayoff(uint256 _delay) internal view returns (uint256) {\\n        uint256 payoff = 0;\\n\\n        // payoff model 1 - linear\\n        if (_delay <= DELAY_THRESHOLD_MIN) {\\n            payoff = 0;\\n        } else if (\\n            _delay > DELAY_THRESHOLD_MIN && _delay <= DELAY_THRESHOLD_MAX\\n        ) {\\n            payoff = (_delay * _delay) / 480;\\n        } else if (_delay > DELAY_THRESHOLD_MAX) {\\n            payoff = MAX_PAYOFF;\\n        }\\n\\n        payoff = payoff * 1e18;\\n        return payoff;\\n    }\\n\\n    /**\\n     * @notice Check whether the signature is valid\\n     * @param signature 65 byte array: [[v (1)], [r (32)], [s (32)]]\\n     * @param _flightNumber Flight number\\n     * @param _address userAddress\\n     * @param _premium Premium of the policy\\n     * @param _deadline Deadline of the application\\n     */\\n    function _checkSignature(\\n        bytes calldata signature,\\n        string memory _flightNumber,\\n        address _address,\\n        uint256 _premium,\\n        uint256 _deadline\\n    ) internal view {\\n        sigManager.checkSignature(\\n            signature,\\n            _flightNumber,\\n            _address,\\n            _premium,\\n            _deadline\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe1ea61371999c1100a8bc6ba57c5682ea23652609077321bd751cc822103dfdb\",\"license\":\"MIT\"},\"contracts/miserable-flight/abstracts/PolicyParameters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nabstract contract PolicyParameters {\\n    // Product parameter\\n    uint256 public constant PRODUCT_ID = 0;\\n\\n    // Parameters about the claim curve\\n    uint256 public MAX_PAYOFF = 180 ether;\\n    uint256 public DELAY_THRESHOLD_MIN = 30;\\n    uint256 public DELAY_THRESHOLD_MAX = 240;\\n\\n    // Minimum time before departure for applying\\n    uint256 public MIN_TIME_BEFORE_DEPARTURE = 24 hours;\\n    uint256 public MAX_TIME_UNTIL_DEPARTURE = 14 days;\\n}\\n\",\"keccak256\":\"0xa309a5fca24dbcd3afbb900c2b9a6e709b4f8aa3a4292713235fffa183161f72\",\"license\":\"MIT\"},\"contracts/miserable-flight/interfaces/IFDPolicyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IFDPolicyToken is IERC721Enumerable {\\n    function mintPolicyToken(address _receiver) external;\\n\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n\\n    function getTokenURI(uint256 _tokenId)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0xfe654c978b3526a2c2ae4206fe58dd9f95ffbaa85401bffd5443ae0288aa5965\",\"license\":\"MIT\"},\"contracts/miserable-flight/interfaces/IFlightOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IFlightOracle {\\n    function newOracleRequest(\\n        uint256 _payment,\\n        string memory _url,\\n        string memory _path,\\n        int256 times\\n    ) external returns (bytes32);\\n\\n    // Set a new url\\n    function setURL(string memory _url) external;\\n\\n    // Set the oracle address\\n    function setOracleAddress(address _newOracle) external;\\n\\n    // Set a new job id\\n    function setJobId(bytes32 _newJobId) external;\\n\\n    // Set a new policy flow\\n    function setPolicyFlow(address _policyFlow) external;\\n\\n    function getChainlinkTokenAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xed84d6c0821d7439ec990fbbe1a9ffbe9cb94676ed4535b0dd5d7bf08dd8f10c\",\"license\":\"MIT\"},\"contracts/miserable-flight/interfaces/IInsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IInsurancePool {\\n    // view functions\\n\\n    function getUserBalance(address) external view returns (uint256);\\n\\n    function getPoolUnlocked() external view returns (uint256);\\n\\n    function getUnlockedFor(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLockedFor(address _user) external view returns (uint256);\\n\\n    function checkCapacity(uint256 _payoff) external view returns (bool);\\n\\n    // set functions\\n\\n    function setPurchaseIncentive(uint256 _newIncentive) external;\\n\\n    function setFrozenTime(uint256 _newFrozenTime) external;\\n\\n    function setPolicyFlow(address _policyFlowAddress) external;\\n\\n    function setIncomeDistribution(uint256[3] memory _newDistribution) external;\\n\\n    function setCollateralFactor(uint256 _factor) external;\\n\\n    function transferOwnership(address _newOwner) external;\\n\\n    // main functions\\n\\n    function stake(address _user, uint256 _amount) external;\\n\\n    function unstake(uint256 _amount) external;\\n\\n    function unstakeMax() external;\\n\\n    function updateWhenBuy(\\n        uint256 _premium,\\n        uint256 _payoff,\\n        address _user\\n    ) external;\\n\\n    function updateWhenExpire(\\n        uint256 _premium,\\n        uint256 _payoff,\\n        address _user\\n    ) external;\\n\\n    function payClaim(\\n        uint256 _premium,\\n        uint256 _payoff,\\n        uint256 _realPayoff,\\n        address _user\\n    ) external;\\n\\n    function revertUnstakeRequest(address _user) external;\\n\\n    function revertAllUnstakeRequest(address _user) external;\\n}\\n\",\"keccak256\":\"0x5517303710a4f46c3c66900fda7895cf07ea23a8529002c8659449d53494b835\",\"license\":\"MIT\"},\"contracts/miserable-flight/interfaces/IPolicyStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IPolicyStruct {\\n    enum PolicyStatus {\\n        INI,\\n        SOLD,\\n        DECLINED,\\n        EXPIRED,\\n        CLAIMED\\n    }\\n\\n    struct PolicyInfo {\\n        uint256 productId;\\n        address buyerAddress;\\n        uint256 policyId;\\n        string flightNumber;\\n        uint256 premium;\\n        uint256 payoff;\\n        uint256 purchaseTimestamp;\\n        uint256 departureTimestamp;\\n        uint256 landingTimestamp;\\n        PolicyStatus status;\\n        bool alreadySettled;\\n        uint256 delayResult;\\n    }\\n}\\n\",\"keccak256\":\"0x910a474af4e70bfa6c626ffe338885cd60e81deded33827de1592ace3c9c7d48\",\"license\":\"MIT\"},\"contracts/miserable-flight/interfaces/ISigManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface ISigManager {\\n    event SignerAdded(address indexed _newSigner);\\n    event SignerRemoved(address indexed _oldSigner);\\n\\n    function addSigner(address) external;\\n\\n    function removeSigner(address) external;\\n\\n    function isValidSigner(address) external view returns (bool);\\n\\n    function checkSignature(\\n        bytes calldata signature,\\n        string memory _flightNumber,\\n        address _address,\\n        uint256 _premium,\\n        uint256 _deadline\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x8378e961d81b1d1855e8fd5f52d85b3ef7bdfb4e1b20db40c9cb4720701d1cf6\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IBuyerToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBuyerToken is IERC20 {\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Functions ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Mint buyer tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be minted\\n     */\\n    function mintBuyerToken(address _account, uint256 _amount) external;\\n\\n    /**\\n     * @notice Burn buyer tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be burned\\n     */\\n    function burnBuyerToken(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x5761f53bcfdd89548e7d0ec0eb248a6699615fca869137da6245c1e62def858d\",\"license\":\"MIT\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xb06279e6f1b96475d682c29d19535cc444d7b2e4aa60c8c7b4b0f032230ebff0\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. It will not be possible to call\\n     *         `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * @dev    Renouncing ownership will leave the contract without an owner,\\n     *         thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Can only be called by the current owner.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Internal function without access restriction.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x573a48e60c5226b8470bc2d8ba1f4436c89d865fc83de5449de9d8af0c8cb81a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6809c2007651b2500000600055601e60015560f0600255620151806003556212750060045560e0604052602c60808181529062002f6a60a03980516200004e91600b916020909101906200013c565b503480156200005c57600080fd5b5060405162002f9638038062002f968339810160408190526200007f916200021c565b6200008a33620000ea565b600a80546001600160a01b039586166001600160a01b031991821617909155600880549486169482169490941790935560078054928516928416929092179091556006805491909316911617905567016345785d8a0000600d55620002d1565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200014a90620002a0565b90600052602060002090601f0160209004810192826200016e5760008555620001b9565b82601f106200018957805160ff1916838001178555620001b9565b82800160010185558215620001b9579182015b82811115620001b95782518255916020019190600101906200019c565b50620001c7929150620001cb565b5090565b5b80821115620001c75760008155600101620001cc565b60006001600160a01b0382165b92915050565b6200020081620001e2565b81146200020c57600080fd5b50565b8051620001ef81620001f5565b60008060008060808587031215620002375762000237600080fd5b60006200024587876200020f565b945050602062000258878288016200020f565b93505060406200026b878288016200020f565b92505060606200027e878288016200020f565b91505092959194509250565b634e487b7160e01b600052602260045260246000fd5b600281046001821680620002b557607f821691505b60208210811415620002cb57620002cb6200028a565b50919050565b612c8980620002e16000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c8063773434081161010f578063b92f1ed5116100a2578063e846e79711610071578063e846e79714610441578063f059d78e14610454578063f2fde38b1461045d578063fd1053d91461047057600080fd5b8063b92f1ed51461040a578063c34dc50c1461041d578063d865ef9414610425578063ddca3f431461043857600080fd5b8063a5d2a715116100de578063a5d2a715146103d2578063ab2adc00146103e5578063acd66c5d146103f8578063b7b357ac1461040157600080fd5b806377343408146103925780638da5cb5b146103a55780638e34ce35146103b65780639180233f146103c957600080fd5b80634fdc9ea91161018757806369fe0e2d1161015657806369fe0e2d146103375780636b0edde91461034a5780636ce0403c1461036a578063715018a61461038a57600080fd5b80634fdc9ea9146102c45780635a9274ad146102ef578063612d7350146103025780636307737b1461031757600080fd5b806321deab0e116101c357806321deab0e1461024f5780632a138f6514610262578063378730f31461029b5780634abe553f146102bb57600080fd5b806302d7e85a146101f55780630f42fd0b1461020a5780631774ea451461021d5780631a397db91461023c575b600080fd5b610208610203366004611bd3565b610483565b005b610208610218366004611d16565b61050d565b61022660025481565b6040516102339190611de7565b60405180910390f35b61020861024a366004611bd3565b610772565b61022661025d366004611e47565b61089d565b61028e610270366004611f20565b6000908152600e60205260409020600101546001600160a01b031690565b6040516102339190611f5b565b6102266102a9366004611f20565b60106020526000908152604090205481565b61022660015481565b6102d76102d2366004611f20565b610b8c565b6040516102339c9b9a99989796959493929190612017565b6102086102fd366004611f20565b610c82565b61030a610cfb565b60405161023391906120d1565b60085461032a906001600160a01b031681565b6040516102339190612124565b610208610345366004611f20565b610d89565b61035d610358366004611f20565b610df7565b6040516102339190612227565b61037d61037836600461224c565b610f62565b60405161023391906122e3565b6102086111ca565b6102086103a03660046122f4565b61120f565b6005546001600160a01b031661028e565b6102086103c436600461232f565b61128b565b61022660005481565b60065461032a906001600160a01b031681565b600a5461032a906001600160a01b031681565b61022660045481565b61022660035481565b610208610418366004611f20565b611366565b610226600081565b60075461032a906001600160a01b031681565b610226600d5481565b61020861044f36600461224c565b6113d4565b610226600c5481565b61020861046b36600461224c565b611458565b60095461032a906001600160a01b031681565b336104966005546001600160a01b031690565b6001600160a01b0316146104c55760405162461bcd60e51b81526004016104bc906123af565b60405180910390fd5b600182905560028190556040517febbed710a442fb49ec9fc28724db7432557adf346b15e991b1b50100138e40fc9061050190849084906123bf565b60405180910390a15050565b6000858152600e602052604090206008015442101561053e5760405162461bcd60e51b81526004016104bc90612434565b6000858152600e6020526040902060090154610100900460ff161580610576575080801561057657506005546001600160a01b031633145b6105925760405162461bcd60e51b81526004016104bc90612444565b6000858152600e602090815260409182902091516105b492600301910161256d565b60405160208183030381529060405280519060200120846040516020016105db9190612599565b604051602081830303815290604052805190602001201461060e5760405162461bcd60e51b81526004016104bc906125d5565b6000858152600e6020526040902060070154610629906114c3565b6040516020016106399190612599565b60405160208183030381529060405280519060200120836040516020016106609190612599565b60405160208183030381529060405280519060200120146106935760405162461bcd60e51b81526004016104bc90612622565b6000600b85856040516020016106ab93929190612632565b60408051601f1981840301815290829052600954600d54639a66455f60e01b84529193506000926001600160a01b0390911691639a66455f916106f8919086908990600190600401612690565b6020604051808303816000875af1158015610717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073b91906126e7565b60009081526010602090815260408083208a9055988252600e905296909620600901805461ff001916610100179055505050505050565b6009546001600160a01b0316331461079c5760405162461bcd60e51b81526004016104bc90612760565b600082815260106020908152604080832054808452600e909252909120600a8101839055600481015460018201546002546001600160a01b0390911690851115806107e8575084610190145b6108045760405162461bcd60e51b81526004016104bc906127c8565b8461081c576108178260005483876115c9565b61085c565b600254851161084457600061083086611686565b905061083e838284886116fa565b5061085c565b84610190141561085c5761085c8260005483876116fa565b7f04e392e4100aa2e88345ae13cf73d14c46a6051119773b79fd108c378a4599e3848760405161088d9291906123bf565b60405180910390a1505050505050565b600042848111156108c05760405162461bcd60e51b81526004016104bc90612822565b89156108de5760405162461bcd60e51b81526004016104bc90612877565b6003546108eb908261289d565b87101580156109065750600454610902908261289d565b8711155b6109225760405162461bcd60e51b81526004016104bc906128f8565b61093084848b338c8a6117bb565b6000600c6000815461094190612908565b9190508190559050604051806101800160405280600081526020016109633390565b6001600160a01b031681526020018281526020018b81526020018a81526020016000548152602001838152602001898152602001888152602001600060048111156109b0576109b0611fcb565b815260006020808301829052610194604093840152848252600e81529082902083518155838201516001820180546001600160a01b0319166001600160a01b0390921691909117905591830151600283015560608301518051610a199260038501920190611aa1565b506080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a81548160ff02191690836004811115610a7857610a78611fcb565b02179055506101408201516009820180549115156101000261ff001990921691909117905561016090910151600a90910155600054610aba908a90338461182d565b600654604051631148708360e11b81526001600160a01b0390911690632290e10690610aec9033908d90600401612923565b600060405180830381600087803b158015610b0657600080fd5b505af1158015610b1a573d6000803e3d6000fd5b5050336000818152600f60209081526040808320600c5481546001810183559185529290932090920155519092507f9dc1f9a2820214678b76a35ae1ba7d2fe57a670651cd89c9ba78f4b5c59a2e1a9150610b76908490611de7565b60405180910390a29a9950505050505050505050565b600e60205260009081526040902080546001820154600283015460038401805493946001600160a01b0390931693919291610bc6906124d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf2906124d2565b8015610c3f5780601f10610c1457610100808354040283529160200191610c3f565b820191906000526020600020905b815481529060010190602001808311610c2257829003601f168201915b50505050600483015460058401546006850154600786015460088701546009880154600a90980154969794969395509193909260ff80831692610100900416908c565b33610c956005546001600160a01b031690565b6001600160a01b031614610cbb5760405162461bcd60e51b81526004016104bc906123af565b60038190556040517f8c41ba0631fa10e06efe604774b5ef6df52572c640a7d42286c43d3eff0d169590610cf0908390611de7565b60405180910390a150565b600b8054610d08906124d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610d34906124d2565b8015610d815780601f10610d5657610100808354040283529160200191610d81565b820191906000526020600020905b815481529060010190602001808311610d6457829003601f168201915b505050505081565b33610d9c6005546001600160a01b031690565b6001600160a01b031614610dc25760405162461bcd60e51b81526004016104bc906123af565b600d8190556040517f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c390610cf0908390611de7565b610dff611b25565b6000828152600e60209081526040918290208251610180810184528154815260018201546001600160a01b031692810192909252600281015492820192909252600382018054919291606084019190610e57906124d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610e83906124d2565b8015610ed05780601f10610ea557610100808354040283529160200191610ed0565b820191906000526020600020905b815481529060010190602001808311610eb357829003601f168201915b50505091835250506004828101546020830152600583015460408301526006830154606083015260078301546080830152600883015460a0830152600983015460c09092019160ff1690811115610f2957610f29611fcb565b6004811115610f3a57610f3a611fcb565b81526009820154610100900460ff1615156020820152600a9091015460409091015292915050565b6001600160a01b0381166000908152600f602052604090205460609080610f9b5760405162461bcd60e51b81526004016104bc90612963565b60008167ffffffffffffffff811115610fb657610fb6611c10565b604051908082528060200260200182016040528015610fef57816020015b610fdc611b25565b815260200190600190039081610fd45790505b50905060005b828110156111c2576001600160a01b0385166000908152600f6020526040812080548390811061102757611027612973565b6000918252602080832090910154808352600e82526040928390208351610180810185528154815260018201546001600160a01b031693810193909352600281015493830193909352600383018054919450919291606084019161108a906124d2565b80601f01602080910402602001604051908101604052809291908181526020018280546110b6906124d2565b80156111035780601f106110d857610100808354040283529160200191611103565b820191906000526020600020905b8154815290600101906020018083116110e657829003601f168201915b50505091835250506004828101546020830152600583015460408301526006830154606083015260078301546080830152600883015460a0830152600983015460c09092019160ff169081111561115c5761115c611fcb565b600481111561116d5761116d611fcb565b81526009820154610100900460ff1615156020820152600a9091015460409091015283518490849081106111a3576111a3612973565b60200260200101819052505080806111ba90612908565b915050610ff5565b509392505050565b336111dd6005546001600160a01b031690565b6001600160a01b0316146112035760405162461bcd60e51b81526004016104bc906123af565b61120d6000611a4f565b565b336112226005546001600160a01b031690565b6001600160a01b0316146112485760405162461bcd60e51b81526004016104bc906123af565b805161125b90600b906020840190611aa1565b507f8dbd4721a3316108f3899cd7093e1c9ca0c4759eaa0b62cff2a63e0622d30e3281604051610cf091906120d1565b6008546001600160a01b0316336001600160a01b0316146112be5760405162461bcd60e51b81526004016104bc906129e1565b6000838152600e602052604090206001015483906001600160a01b038481169116146112fc5760405162461bcd60e51b81526004016104bc90612a23565b6000818152600e60205260409081902060010180546001600160a01b0319166001600160a01b0385161790555184907f131013c706ffe7a58a15c6576c2affbfee4aa57a8fc2c179fff9da687da631e690611358908590611f5b565b60405180910390a250505050565b336113796005546001600160a01b031690565b6001600160a01b03161461139f5760405162461bcd60e51b81526004016104bc906123af565b60008190556040517fdef33f1582315c7c62f4e66de6172585034194d07b9424c91da5d99b2edcdb2990610cf0908390611de7565b336113e76005546001600160a01b031690565b6001600160a01b03161461140d5760405162461bcd60e51b81526004016104bc906123af565b600980546001600160a01b0319166001600160a01b0383161790556040517fdd26a8824232c055ca4288c9d4f23ff4dd4e9db5beb3c405f96f16fc2d40911190610cf0908390611f5b565b3361146b6005546001600160a01b031690565b6001600160a01b0316146114915760405162461bcd60e51b81526004016104bc906123af565b6001600160a01b0381166114b75760405162461bcd60e51b81526004016104bc90612a74565b6114c081611a4f565b50565b6060816114e75750506040805180820190915260018152600360fc1b602082015290565b8160005b811561151157806114fb81612908565b915061150a9050600a83612a9a565b91506114eb565b60008167ffffffffffffffff81111561152c5761152c611c10565b6040519080825280601f01601f191660200182016040528015611556576020820181803683370190505b5090505b84156115c15761156b600183612aae565b9150611578600a86612ac5565b61158390603061289d565b60f81b81838151811061159857611598612973565b60200101906001600160f81b031916908160001a9053506115ba600a86612a9a565b945061155a565b949350505050565b600a54604051639e2e28b560e01b81526001600160a01b0390911690639e2e28b5906115fd90879087908790600401612ad9565b600060405180830381600087803b15801561161757600080fd5b505af115801561162b573d6000803e3d6000fd5b5050506000828152600e602052604090819020600901805460ff19166003179055516001600160a01b03841691507f5e2aa8ed921638d802aff01815dcc364f11bd867646ee35cef988a928aa08aba90611358908490611de7565b6001546000908190831161169c575060006116e1565b600154831180156116af57506002548311155b156116d2576101e06116c18480612b01565b6116cb9190612a9a565b90506116e1565b6002548311156116e157506000545b6116f381670de0b6b3a7640000612b01565b9392505050565b600a5460005460405163942465ed60e01b81526001600160a01b039092169163942465ed916117329188919088908890600401612b20565b600060405180830381600087803b15801561174c57600080fd5b505af1158015611760573d6000803e3d6000fd5b5050506000828152600e602052604090819020600901805460ff19166004179055516001600160a01b03841691507fc7ec6d9a759e329b525c568d4a31eadfd4d47a50a11498317356b63536972cff90611358908490611de7565b600754604051633dc039c360e01b81526001600160a01b0390911690633dc039c3906117f590899089908990899089908990600401612b75565b60006040518083038186803b15801561180d57600080fd5b505afa158015611821573d6000803e3d6000fd5b50505050505050505050565b600a546040516202d7af60e31b81526000916001600160a01b0316906216bd789061185c908790600401611de7565b602060405180830381865afa158015611879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189d9190612bda565b905080156119d157600a5460405163bf131f4b60e01b81526001600160a01b039091169063bf131f4b906118d990889088908890600401612ad9565b600060405180830381600087803b1580156118f357600080fd5b505af1158015611907573d6000803e3d6000fd5b5050506000838152600e602052604090819020600901805460ff19166001179055516001600160a01b03851691507f18c8463e3f8b620eda107b8496632f42c285e0e2dbe36214aef29a7570c98db790611962908590611de7565b60405180910390a2600854604051635c8c72f160e11b81526001600160a01b039091169063b918e5e29061199a908690600401611f5b565b600060405180830381600087803b1580156119b457600080fd5b505af11580156119c8573d6000803e3d6000fd5b50505050611a48565b6000828152600e602052604090819020600901805460ff19166002179055516001600160a01b038416907f2f0c3a9cdf52dc1569c8661ae34313def97a77776bbc9e85ca130c0bafca4ab490611a28908590611de7565b60405180910390a260405162461bcd60e51b81526004016104bc90612c43565b5050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054611aad906124d2565b90600052602060002090601f016020900481019282611acf5760008555611b15565b82601f10611ae857805160ff1916838001178555611b15565b82800160010185558215611b15579182015b82811115611b15578251825591602001919060010190611afa565b50611b21929150611ba0565b5090565b6040518061018001604052806000815260200160006001600160a01b031681526020016000815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160006004811115611b8c57611b8c611fcb565b815260006020820181905260409091015290565b5b80821115611b215760008155600101611ba1565b805b81146114c057600080fd5b8035611bcd81611bb5565b92915050565b60008060408385031215611be957611be9600080fd5b6000611bf58585611bc2565b9250506020611c0685828601611bc2565b9150509250929050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715611c4c57611c4c611c10565b6040525050565b6000611c5e60405190565b9050611c6a8282611c26565b919050565b600067ffffffffffffffff821115611c8957611c89611c10565b601f19601f83011660200192915050565b82818337506000910152565b6000611cb9611cb484611c6f565b611c53565b905082815260208101848484011115611cd457611cd4600080fd5b6111c2848285611c9a565b600082601f830112611cf357611cf3600080fd5b81356115c1848260208601611ca6565b801515611bb7565b8035611bcd81611d03565b600080600080600060a08688031215611d3157611d31600080fd5b6000611d3d8888611bc2565b955050602086013567ffffffffffffffff811115611d5d57611d5d600080fd5b611d6988828901611cdf565b945050604086013567ffffffffffffffff811115611d8957611d89600080fd5b611d9588828901611cdf565b935050606086013567ffffffffffffffff811115611db557611db5600080fd5b611dc188828901611cdf565b9250506080611dd288828901611d0b565b9150509295509295909350565b805b82525050565b60208101611bcd8284611ddf565b60008083601f840112611e0a57611e0a600080fd5b50813567ffffffffffffffff811115611e2557611e25600080fd5b602083019150836001820283011115611e4057611e40600080fd5b9250929050565b60008060008060008060008060e0898b031215611e6657611e66600080fd5b6000611e728b8b611bc2565b985050602089013567ffffffffffffffff811115611e9257611e92600080fd5b611e9e8b828c01611cdf565b9750506040611eaf8b828c01611bc2565b9650506060611ec08b828c01611bc2565b9550506080611ed18b828c01611bc2565b94505060a0611ee28b828c01611bc2565b93505060c089013567ffffffffffffffff811115611f0257611f02600080fd5b611f0e8b828c01611df5565b92509250509295985092959890939650565b600060208284031215611f3557611f35600080fd5b60006115c18484611bc2565b60006001600160a01b038216611bcd565b611de181611f41565b60208101611bcd8284611f52565b60005b83811015611f84578181015183820152602001611f6c565b83811115611f93576000848401525b50505050565b6000611fa3825190565b808452602084019350611fba818560208601611f69565b601f01601f19169290920192915050565b634e487b7160e01b600052602160045260246000fd5b600581106114c0576114c0611fcb565b80611c6a81611fe1565b6000611bcd82611ff1565b611de181611ffb565b801515611de1565b6101808101612026828f611ddf565b612033602083018e611f52565b612040604083018d611ddf565b8181036060830152612052818c611f99565b9050612061608083018b611ddf565b61206e60a083018a611ddf565b61207b60c0830189611ddf565b61208860e0830188611ddf565b612096610100830187611ddf565b6120a4610120830186612006565b6120b261014083018561200f565b6120c0610160830184611ddf565b9d9c50505050505050505050505050565b602080825281016116f38184611f99565b6000611bcd6001600160a01b0383166120f9565b90565b6001600160a01b031690565b6000611bcd826120e2565b6000611bcd82612105565b611de181612110565b60208101611bcd828461211b565b80516000906101808401906121478582611ddf565b50602083015161215a6020860182611f52565b50604083015161216d6040860182611ddf565b50606083015184820360608601526121858282611f99565b915050608083015161219a6080860182611ddf565b5060a08301516121ad60a0860182611ddf565b5060c08301516121c060c0860182611ddf565b5060e08301516121d360e0860182611ddf565b506101008301516121e8610100860182611ddf565b506101208301516121fd610120860182612006565b5061014083015161221261014086018261200f565b506101608301516111c2610160860182611ddf565b602080825281016116f38184612132565b611bb781611f41565b8035611bcd81612238565b60006020828403121561226157612261600080fd5b60006115c18484612241565b60006116f38383612132565b60200190565b6000612289825190565b808452602084019350836020820285016122a38560200190565b60005b848110156122d757838303885281516122bf848261226d565b935050602082016020989098019791506001016122a6565b50909695505050505050565b602080825281016116f3818461227f565b60006020828403121561230957612309600080fd5b813567ffffffffffffffff81111561232357612323600080fd5b6115c184828501611cdf565b60008060006060848603121561234757612347600080fd5b60006123538686611bc2565b935050602061236486828701612241565b925050604061237586828701612241565b9150509250925092565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152612279565b60208082528101611bcd8161237f565b604081016123cd8285611ddf565b6116f36020830184611ddf565b603c8152602081017f43616e206f6e6c7920636c61696d206120706f6c69637920616674657220697481527f73206578706563746564206c616e64696e672074696d657374616d7000000000602082015290505b60400190565b60208082528101611bcd816123da565b60208082528101611bcd81604e81527f54686520706f6c696379207374617475732068617320616c726561647920626560208201527f656e20736574746c65642c206f7220796f75206e65656420746f206d616b652060408201526d6120666f7263652075706461746560901b606082015260800190565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806124e657607f821691505b602082108114156124f9576124f96124bc565b50919050565b6000815461250c816124d2565b600182168015612523576001811461253457612564565b60ff19831686528186019350612564565b60008581526020902060005b8381101561255c57815488820152600190910190602001612540565b505081860193505b50505092915050565b611bcd81836124ff565b6000612581825190565b61258f818560208601611f69565b9290920192915050565b611bcd8183612577565b601c8152602081017f57726f6e6720666c69676874206e756d6265722070726f76696465640000000081529050612279565b60208082528101611bcd816125a3565b60228152602081017f57726f6e67206465706172747572652074696d657374616d702070726f766964815261195960f21b6020820152905061242e565b60208082528101611bcd816125e5565b61263c81856124ff565b69666c696768745f6e6f3d60b01b8152600a01905061265b8184612577565b6a2674696d657374616d703d60a81b8152600b0190506115c18183612577565b6000611bcd6120f68381565b611de18161267b565b6080810161269e8287611ddf565b81810360208301526126b08186611f99565b905081810360408301526126c48185611f99565b90506126d36060830184612687565b95945050505050565b8051611bcd81611bb5565b6000602082840312156126fc576126fc600080fd5b60006115c184846126dc565b60378152602081017f746869732066756e6374696f6e2073686f756c642062652063616c6c6564206281527f7920466c696768744f7261636c6520636f6e74726163740000000000000000006020820152905061242e565b60208082528101611bcd81612708565b60398152602081017f41626e6f726d616c206f7261636c6520726573756c742c20726573756c74207381527f686f756c64206265205b30202d203234305d206f7220343030000000000000006020820152905061242e565b60208082528101611bcd81612770565b602f8152602081017f4578706972656420646561646c696e652c20706c656173652072657375626d6981526e3a1030903a3930b739b0b1ba34b7b760891b6020820152905061242e565b60208082528101611bcd816127d8565b602a8152602081017f596f75206172652063616c6c696e67207468652077726f6e672070726f6475638152691d0818dbdb9d1c9858dd60b21b6020820152905061242e565b60208082528101611bcd81612832565b634e487b7160e01b600052601160045260246000fd5b600082198211156128b0576128b0612887565b500190565b60288152602081017f546f6f20636c6f7365206f7220746f6f206661722066726f6d206465706172748152677572652074696d6560c01b6020820152905061242e565b60208082528101611bcd816128b5565b600060001982141561291c5761291c612887565b5060010190565b604081016123cd8285611f52565b60178152602081017f4e6f20706f6c69637920666f722074686973207573657200000000000000000081529050612279565b60208082528101611bcd81612931565b634e487b7160e01b600052603260045260246000fd5b60378152602081017f6f6e6c792063616c6c65642066726f6d2074686520666c696768742064656c6181527f7920706f6c69637920746f6b656e20636f6e74726163740000000000000000006020820152905061242e565b60208082528101611bcd81612989565b601b8152602081017f5468652070726576696f7573206f776e65722069732077726f6e67000000000081529050612279565b60208082528101611bcd816129f1565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b6020820152905061242e565b60208082528101611bcd81612a33565b634e487b7160e01b600052601260045260246000fd5b600082612aa957612aa9612a84565b500490565b600082821015612ac057612ac0612887565b500390565b600082612ad457612ad4612a84565b500690565b60608101612ae78286611ddf565b612af46020830185611ddf565b6115c16040830184611f52565b6000816000190483118215151615612b1b57612b1b612887565b500290565b60808101612b2e8287611ddf565b612b3b6020830186611ddf565b612b486040830185611ddf565b6126d36060830184611f52565b818352602083019250612b69828483611c9a565b50601f01601f19160190565b60a08082528101612b8781888a612b55565b90508181036020830152612b9b8187611f99565b9050612baa6040830186611f52565b612bb76060830185611ddf565b612bc46080830184611ddf565b979650505050505050565b8051611bcd81611d03565b600060208284031215612bef57612bef600080fd5b60006115c18484612bcf565b602d8152602081017f6e6f742073756666696369656e7420636170616369747920696e20746865206981526c1b9cdd5c985b98d9481c1bdbdb609a1b6020820152905061242e565b60208082528101611bcd81612bfb56fea264697066735822122016a8c9c88cd9e0a2bfd54370ca0c4e013db1a1dd243555ba058b409a3f7e71da64736f6c634300080a003368747470733a2f2f746573746e65742e64656769732e696f3a333230372f666c696768745f7374617475733f",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c8063773434081161010f578063b92f1ed5116100a2578063e846e79711610071578063e846e79714610441578063f059d78e14610454578063f2fde38b1461045d578063fd1053d91461047057600080fd5b8063b92f1ed51461040a578063c34dc50c1461041d578063d865ef9414610425578063ddca3f431461043857600080fd5b8063a5d2a715116100de578063a5d2a715146103d2578063ab2adc00146103e5578063acd66c5d146103f8578063b7b357ac1461040157600080fd5b806377343408146103925780638da5cb5b146103a55780638e34ce35146103b65780639180233f146103c957600080fd5b80634fdc9ea91161018757806369fe0e2d1161015657806369fe0e2d146103375780636b0edde91461034a5780636ce0403c1461036a578063715018a61461038a57600080fd5b80634fdc9ea9146102c45780635a9274ad146102ef578063612d7350146103025780636307737b1461031757600080fd5b806321deab0e116101c357806321deab0e1461024f5780632a138f6514610262578063378730f31461029b5780634abe553f146102bb57600080fd5b806302d7e85a146101f55780630f42fd0b1461020a5780631774ea451461021d5780631a397db91461023c575b600080fd5b610208610203366004611bd3565b610483565b005b610208610218366004611d16565b61050d565b61022660025481565b6040516102339190611de7565b60405180910390f35b61020861024a366004611bd3565b610772565b61022661025d366004611e47565b61089d565b61028e610270366004611f20565b6000908152600e60205260409020600101546001600160a01b031690565b6040516102339190611f5b565b6102266102a9366004611f20565b60106020526000908152604090205481565b61022660015481565b6102d76102d2366004611f20565b610b8c565b6040516102339c9b9a99989796959493929190612017565b6102086102fd366004611f20565b610c82565b61030a610cfb565b60405161023391906120d1565b60085461032a906001600160a01b031681565b6040516102339190612124565b610208610345366004611f20565b610d89565b61035d610358366004611f20565b610df7565b6040516102339190612227565b61037d61037836600461224c565b610f62565b60405161023391906122e3565b6102086111ca565b6102086103a03660046122f4565b61120f565b6005546001600160a01b031661028e565b6102086103c436600461232f565b61128b565b61022660005481565b60065461032a906001600160a01b031681565b600a5461032a906001600160a01b031681565b61022660045481565b61022660035481565b610208610418366004611f20565b611366565b610226600081565b60075461032a906001600160a01b031681565b610226600d5481565b61020861044f36600461224c565b6113d4565b610226600c5481565b61020861046b36600461224c565b611458565b60095461032a906001600160a01b031681565b336104966005546001600160a01b031690565b6001600160a01b0316146104c55760405162461bcd60e51b81526004016104bc906123af565b60405180910390fd5b600182905560028190556040517febbed710a442fb49ec9fc28724db7432557adf346b15e991b1b50100138e40fc9061050190849084906123bf565b60405180910390a15050565b6000858152600e602052604090206008015442101561053e5760405162461bcd60e51b81526004016104bc90612434565b6000858152600e6020526040902060090154610100900460ff161580610576575080801561057657506005546001600160a01b031633145b6105925760405162461bcd60e51b81526004016104bc90612444565b6000858152600e602090815260409182902091516105b492600301910161256d565b60405160208183030381529060405280519060200120846040516020016105db9190612599565b604051602081830303815290604052805190602001201461060e5760405162461bcd60e51b81526004016104bc906125d5565b6000858152600e6020526040902060070154610629906114c3565b6040516020016106399190612599565b60405160208183030381529060405280519060200120836040516020016106609190612599565b60405160208183030381529060405280519060200120146106935760405162461bcd60e51b81526004016104bc90612622565b6000600b85856040516020016106ab93929190612632565b60408051601f1981840301815290829052600954600d54639a66455f60e01b84529193506000926001600160a01b0390911691639a66455f916106f8919086908990600190600401612690565b6020604051808303816000875af1158015610717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073b91906126e7565b60009081526010602090815260408083208a9055988252600e905296909620600901805461ff001916610100179055505050505050565b6009546001600160a01b0316331461079c5760405162461bcd60e51b81526004016104bc90612760565b600082815260106020908152604080832054808452600e909252909120600a8101839055600481015460018201546002546001600160a01b0390911690851115806107e8575084610190145b6108045760405162461bcd60e51b81526004016104bc906127c8565b8461081c576108178260005483876115c9565b61085c565b600254851161084457600061083086611686565b905061083e838284886116fa565b5061085c565b84610190141561085c5761085c8260005483876116fa565b7f04e392e4100aa2e88345ae13cf73d14c46a6051119773b79fd108c378a4599e3848760405161088d9291906123bf565b60405180910390a1505050505050565b600042848111156108c05760405162461bcd60e51b81526004016104bc90612822565b89156108de5760405162461bcd60e51b81526004016104bc90612877565b6003546108eb908261289d565b87101580156109065750600454610902908261289d565b8711155b6109225760405162461bcd60e51b81526004016104bc906128f8565b61093084848b338c8a6117bb565b6000600c6000815461094190612908565b9190508190559050604051806101800160405280600081526020016109633390565b6001600160a01b031681526020018281526020018b81526020018a81526020016000548152602001838152602001898152602001888152602001600060048111156109b0576109b0611fcb565b815260006020808301829052610194604093840152848252600e81529082902083518155838201516001820180546001600160a01b0319166001600160a01b0390921691909117905591830151600283015560608301518051610a199260038501920190611aa1565b506080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a81548160ff02191690836004811115610a7857610a78611fcb565b02179055506101408201516009820180549115156101000261ff001990921691909117905561016090910151600a90910155600054610aba908a90338461182d565b600654604051631148708360e11b81526001600160a01b0390911690632290e10690610aec9033908d90600401612923565b600060405180830381600087803b158015610b0657600080fd5b505af1158015610b1a573d6000803e3d6000fd5b5050336000818152600f60209081526040808320600c5481546001810183559185529290932090920155519092507f9dc1f9a2820214678b76a35ae1ba7d2fe57a670651cd89c9ba78f4b5c59a2e1a9150610b76908490611de7565b60405180910390a29a9950505050505050505050565b600e60205260009081526040902080546001820154600283015460038401805493946001600160a01b0390931693919291610bc6906124d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf2906124d2565b8015610c3f5780601f10610c1457610100808354040283529160200191610c3f565b820191906000526020600020905b815481529060010190602001808311610c2257829003601f168201915b50505050600483015460058401546006850154600786015460088701546009880154600a90980154969794969395509193909260ff80831692610100900416908c565b33610c956005546001600160a01b031690565b6001600160a01b031614610cbb5760405162461bcd60e51b81526004016104bc906123af565b60038190556040517f8c41ba0631fa10e06efe604774b5ef6df52572c640a7d42286c43d3eff0d169590610cf0908390611de7565b60405180910390a150565b600b8054610d08906124d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610d34906124d2565b8015610d815780601f10610d5657610100808354040283529160200191610d81565b820191906000526020600020905b815481529060010190602001808311610d6457829003601f168201915b505050505081565b33610d9c6005546001600160a01b031690565b6001600160a01b031614610dc25760405162461bcd60e51b81526004016104bc906123af565b600d8190556040517f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c390610cf0908390611de7565b610dff611b25565b6000828152600e60209081526040918290208251610180810184528154815260018201546001600160a01b031692810192909252600281015492820192909252600382018054919291606084019190610e57906124d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610e83906124d2565b8015610ed05780601f10610ea557610100808354040283529160200191610ed0565b820191906000526020600020905b815481529060010190602001808311610eb357829003601f168201915b50505091835250506004828101546020830152600583015460408301526006830154606083015260078301546080830152600883015460a0830152600983015460c09092019160ff1690811115610f2957610f29611fcb565b6004811115610f3a57610f3a611fcb565b81526009820154610100900460ff1615156020820152600a9091015460409091015292915050565b6001600160a01b0381166000908152600f602052604090205460609080610f9b5760405162461bcd60e51b81526004016104bc90612963565b60008167ffffffffffffffff811115610fb657610fb6611c10565b604051908082528060200260200182016040528015610fef57816020015b610fdc611b25565b815260200190600190039081610fd45790505b50905060005b828110156111c2576001600160a01b0385166000908152600f6020526040812080548390811061102757611027612973565b6000918252602080832090910154808352600e82526040928390208351610180810185528154815260018201546001600160a01b031693810193909352600281015493830193909352600383018054919450919291606084019161108a906124d2565b80601f01602080910402602001604051908101604052809291908181526020018280546110b6906124d2565b80156111035780601f106110d857610100808354040283529160200191611103565b820191906000526020600020905b8154815290600101906020018083116110e657829003601f168201915b50505091835250506004828101546020830152600583015460408301526006830154606083015260078301546080830152600883015460a0830152600983015460c09092019160ff169081111561115c5761115c611fcb565b600481111561116d5761116d611fcb565b81526009820154610100900460ff1615156020820152600a9091015460409091015283518490849081106111a3576111a3612973565b60200260200101819052505080806111ba90612908565b915050610ff5565b509392505050565b336111dd6005546001600160a01b031690565b6001600160a01b0316146112035760405162461bcd60e51b81526004016104bc906123af565b61120d6000611a4f565b565b336112226005546001600160a01b031690565b6001600160a01b0316146112485760405162461bcd60e51b81526004016104bc906123af565b805161125b90600b906020840190611aa1565b507f8dbd4721a3316108f3899cd7093e1c9ca0c4759eaa0b62cff2a63e0622d30e3281604051610cf091906120d1565b6008546001600160a01b0316336001600160a01b0316146112be5760405162461bcd60e51b81526004016104bc906129e1565b6000838152600e602052604090206001015483906001600160a01b038481169116146112fc5760405162461bcd60e51b81526004016104bc90612a23565b6000818152600e60205260409081902060010180546001600160a01b0319166001600160a01b0385161790555184907f131013c706ffe7a58a15c6576c2affbfee4aa57a8fc2c179fff9da687da631e690611358908590611f5b565b60405180910390a250505050565b336113796005546001600160a01b031690565b6001600160a01b03161461139f5760405162461bcd60e51b81526004016104bc906123af565b60008190556040517fdef33f1582315c7c62f4e66de6172585034194d07b9424c91da5d99b2edcdb2990610cf0908390611de7565b336113e76005546001600160a01b031690565b6001600160a01b03161461140d5760405162461bcd60e51b81526004016104bc906123af565b600980546001600160a01b0319166001600160a01b0383161790556040517fdd26a8824232c055ca4288c9d4f23ff4dd4e9db5beb3c405f96f16fc2d40911190610cf0908390611f5b565b3361146b6005546001600160a01b031690565b6001600160a01b0316146114915760405162461bcd60e51b81526004016104bc906123af565b6001600160a01b0381166114b75760405162461bcd60e51b81526004016104bc90612a74565b6114c081611a4f565b50565b6060816114e75750506040805180820190915260018152600360fc1b602082015290565b8160005b811561151157806114fb81612908565b915061150a9050600a83612a9a565b91506114eb565b60008167ffffffffffffffff81111561152c5761152c611c10565b6040519080825280601f01601f191660200182016040528015611556576020820181803683370190505b5090505b84156115c15761156b600183612aae565b9150611578600a86612ac5565b61158390603061289d565b60f81b81838151811061159857611598612973565b60200101906001600160f81b031916908160001a9053506115ba600a86612a9a565b945061155a565b949350505050565b600a54604051639e2e28b560e01b81526001600160a01b0390911690639e2e28b5906115fd90879087908790600401612ad9565b600060405180830381600087803b15801561161757600080fd5b505af115801561162b573d6000803e3d6000fd5b5050506000828152600e602052604090819020600901805460ff19166003179055516001600160a01b03841691507f5e2aa8ed921638d802aff01815dcc364f11bd867646ee35cef988a928aa08aba90611358908490611de7565b6001546000908190831161169c575060006116e1565b600154831180156116af57506002548311155b156116d2576101e06116c18480612b01565b6116cb9190612a9a565b90506116e1565b6002548311156116e157506000545b6116f381670de0b6b3a7640000612b01565b9392505050565b600a5460005460405163942465ed60e01b81526001600160a01b039092169163942465ed916117329188919088908890600401612b20565b600060405180830381600087803b15801561174c57600080fd5b505af1158015611760573d6000803e3d6000fd5b5050506000828152600e602052604090819020600901805460ff19166004179055516001600160a01b03841691507fc7ec6d9a759e329b525c568d4a31eadfd4d47a50a11498317356b63536972cff90611358908490611de7565b600754604051633dc039c360e01b81526001600160a01b0390911690633dc039c3906117f590899089908990899089908990600401612b75565b60006040518083038186803b15801561180d57600080fd5b505afa158015611821573d6000803e3d6000fd5b50505050505050505050565b600a546040516202d7af60e31b81526000916001600160a01b0316906216bd789061185c908790600401611de7565b602060405180830381865afa158015611879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189d9190612bda565b905080156119d157600a5460405163bf131f4b60e01b81526001600160a01b039091169063bf131f4b906118d990889088908890600401612ad9565b600060405180830381600087803b1580156118f357600080fd5b505af1158015611907573d6000803e3d6000fd5b5050506000838152600e602052604090819020600901805460ff19166001179055516001600160a01b03851691507f18c8463e3f8b620eda107b8496632f42c285e0e2dbe36214aef29a7570c98db790611962908590611de7565b60405180910390a2600854604051635c8c72f160e11b81526001600160a01b039091169063b918e5e29061199a908690600401611f5b565b600060405180830381600087803b1580156119b457600080fd5b505af11580156119c8573d6000803e3d6000fd5b50505050611a48565b6000828152600e602052604090819020600901805460ff19166002179055516001600160a01b038416907f2f0c3a9cdf52dc1569c8661ae34313def97a77776bbc9e85ca130c0bafca4ab490611a28908590611de7565b60405180910390a260405162461bcd60e51b81526004016104bc90612c43565b5050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054611aad906124d2565b90600052602060002090601f016020900481019282611acf5760008555611b15565b82601f10611ae857805160ff1916838001178555611b15565b82800160010185558215611b15579182015b82811115611b15578251825591602001919060010190611afa565b50611b21929150611ba0565b5090565b6040518061018001604052806000815260200160006001600160a01b031681526020016000815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160006004811115611b8c57611b8c611fcb565b815260006020820181905260409091015290565b5b80821115611b215760008155600101611ba1565b805b81146114c057600080fd5b8035611bcd81611bb5565b92915050565b60008060408385031215611be957611be9600080fd5b6000611bf58585611bc2565b9250506020611c0685828601611bc2565b9150509250929050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715611c4c57611c4c611c10565b6040525050565b6000611c5e60405190565b9050611c6a8282611c26565b919050565b600067ffffffffffffffff821115611c8957611c89611c10565b601f19601f83011660200192915050565b82818337506000910152565b6000611cb9611cb484611c6f565b611c53565b905082815260208101848484011115611cd457611cd4600080fd5b6111c2848285611c9a565b600082601f830112611cf357611cf3600080fd5b81356115c1848260208601611ca6565b801515611bb7565b8035611bcd81611d03565b600080600080600060a08688031215611d3157611d31600080fd5b6000611d3d8888611bc2565b955050602086013567ffffffffffffffff811115611d5d57611d5d600080fd5b611d6988828901611cdf565b945050604086013567ffffffffffffffff811115611d8957611d89600080fd5b611d9588828901611cdf565b935050606086013567ffffffffffffffff811115611db557611db5600080fd5b611dc188828901611cdf565b9250506080611dd288828901611d0b565b9150509295509295909350565b805b82525050565b60208101611bcd8284611ddf565b60008083601f840112611e0a57611e0a600080fd5b50813567ffffffffffffffff811115611e2557611e25600080fd5b602083019150836001820283011115611e4057611e40600080fd5b9250929050565b60008060008060008060008060e0898b031215611e6657611e66600080fd5b6000611e728b8b611bc2565b985050602089013567ffffffffffffffff811115611e9257611e92600080fd5b611e9e8b828c01611cdf565b9750506040611eaf8b828c01611bc2565b9650506060611ec08b828c01611bc2565b9550506080611ed18b828c01611bc2565b94505060a0611ee28b828c01611bc2565b93505060c089013567ffffffffffffffff811115611f0257611f02600080fd5b611f0e8b828c01611df5565b92509250509295985092959890939650565b600060208284031215611f3557611f35600080fd5b60006115c18484611bc2565b60006001600160a01b038216611bcd565b611de181611f41565b60208101611bcd8284611f52565b60005b83811015611f84578181015183820152602001611f6c565b83811115611f93576000848401525b50505050565b6000611fa3825190565b808452602084019350611fba818560208601611f69565b601f01601f19169290920192915050565b634e487b7160e01b600052602160045260246000fd5b600581106114c0576114c0611fcb565b80611c6a81611fe1565b6000611bcd82611ff1565b611de181611ffb565b801515611de1565b6101808101612026828f611ddf565b612033602083018e611f52565b612040604083018d611ddf565b8181036060830152612052818c611f99565b9050612061608083018b611ddf565b61206e60a083018a611ddf565b61207b60c0830189611ddf565b61208860e0830188611ddf565b612096610100830187611ddf565b6120a4610120830186612006565b6120b261014083018561200f565b6120c0610160830184611ddf565b9d9c50505050505050505050505050565b602080825281016116f38184611f99565b6000611bcd6001600160a01b0383166120f9565b90565b6001600160a01b031690565b6000611bcd826120e2565b6000611bcd82612105565b611de181612110565b60208101611bcd828461211b565b80516000906101808401906121478582611ddf565b50602083015161215a6020860182611f52565b50604083015161216d6040860182611ddf565b50606083015184820360608601526121858282611f99565b915050608083015161219a6080860182611ddf565b5060a08301516121ad60a0860182611ddf565b5060c08301516121c060c0860182611ddf565b5060e08301516121d360e0860182611ddf565b506101008301516121e8610100860182611ddf565b506101208301516121fd610120860182612006565b5061014083015161221261014086018261200f565b506101608301516111c2610160860182611ddf565b602080825281016116f38184612132565b611bb781611f41565b8035611bcd81612238565b60006020828403121561226157612261600080fd5b60006115c18484612241565b60006116f38383612132565b60200190565b6000612289825190565b808452602084019350836020820285016122a38560200190565b60005b848110156122d757838303885281516122bf848261226d565b935050602082016020989098019791506001016122a6565b50909695505050505050565b602080825281016116f3818461227f565b60006020828403121561230957612309600080fd5b813567ffffffffffffffff81111561232357612323600080fd5b6115c184828501611cdf565b60008060006060848603121561234757612347600080fd5b60006123538686611bc2565b935050602061236486828701612241565b925050604061237586828701612241565b9150509250925092565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152612279565b60208082528101611bcd8161237f565b604081016123cd8285611ddf565b6116f36020830184611ddf565b603c8152602081017f43616e206f6e6c7920636c61696d206120706f6c69637920616674657220697481527f73206578706563746564206c616e64696e672074696d657374616d7000000000602082015290505b60400190565b60208082528101611bcd816123da565b60208082528101611bcd81604e81527f54686520706f6c696379207374617475732068617320616c726561647920626560208201527f656e20736574746c65642c206f7220796f75206e65656420746f206d616b652060408201526d6120666f7263652075706461746560901b606082015260800190565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806124e657607f821691505b602082108114156124f9576124f96124bc565b50919050565b6000815461250c816124d2565b600182168015612523576001811461253457612564565b60ff19831686528186019350612564565b60008581526020902060005b8381101561255c57815488820152600190910190602001612540565b505081860193505b50505092915050565b611bcd81836124ff565b6000612581825190565b61258f818560208601611f69565b9290920192915050565b611bcd8183612577565b601c8152602081017f57726f6e6720666c69676874206e756d6265722070726f76696465640000000081529050612279565b60208082528101611bcd816125a3565b60228152602081017f57726f6e67206465706172747572652074696d657374616d702070726f766964815261195960f21b6020820152905061242e565b60208082528101611bcd816125e5565b61263c81856124ff565b69666c696768745f6e6f3d60b01b8152600a01905061265b8184612577565b6a2674696d657374616d703d60a81b8152600b0190506115c18183612577565b6000611bcd6120f68381565b611de18161267b565b6080810161269e8287611ddf565b81810360208301526126b08186611f99565b905081810360408301526126c48185611f99565b90506126d36060830184612687565b95945050505050565b8051611bcd81611bb5565b6000602082840312156126fc576126fc600080fd5b60006115c184846126dc565b60378152602081017f746869732066756e6374696f6e2073686f756c642062652063616c6c6564206281527f7920466c696768744f7261636c6520636f6e74726163740000000000000000006020820152905061242e565b60208082528101611bcd81612708565b60398152602081017f41626e6f726d616c206f7261636c6520726573756c742c20726573756c74207381527f686f756c64206265205b30202d203234305d206f7220343030000000000000006020820152905061242e565b60208082528101611bcd81612770565b602f8152602081017f4578706972656420646561646c696e652c20706c656173652072657375626d6981526e3a1030903a3930b739b0b1ba34b7b760891b6020820152905061242e565b60208082528101611bcd816127d8565b602a8152602081017f596f75206172652063616c6c696e67207468652077726f6e672070726f6475638152691d0818dbdb9d1c9858dd60b21b6020820152905061242e565b60208082528101611bcd81612832565b634e487b7160e01b600052601160045260246000fd5b600082198211156128b0576128b0612887565b500190565b60288152602081017f546f6f20636c6f7365206f7220746f6f206661722066726f6d206465706172748152677572652074696d6560c01b6020820152905061242e565b60208082528101611bcd816128b5565b600060001982141561291c5761291c612887565b5060010190565b604081016123cd8285611f52565b60178152602081017f4e6f20706f6c69637920666f722074686973207573657200000000000000000081529050612279565b60208082528101611bcd81612931565b634e487b7160e01b600052603260045260246000fd5b60378152602081017f6f6e6c792063616c6c65642066726f6d2074686520666c696768742064656c6181527f7920706f6c69637920746f6b656e20636f6e74726163740000000000000000006020820152905061242e565b60208082528101611bcd81612989565b601b8152602081017f5468652070726576696f7573206f776e65722069732077726f6e67000000000081529050612279565b60208082528101611bcd816129f1565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b6020820152905061242e565b60208082528101611bcd81612a33565b634e487b7160e01b600052601260045260246000fd5b600082612aa957612aa9612a84565b500490565b600082821015612ac057612ac0612887565b500390565b600082612ad457612ad4612a84565b500690565b60608101612ae78286611ddf565b612af46020830185611ddf565b6115c16040830184611f52565b6000816000190483118215151615612b1b57612b1b612887565b500290565b60808101612b2e8287611ddf565b612b3b6020830186611ddf565b612b486040830185611ddf565b6126d36060830184611f52565b818352602083019250612b69828483611c9a565b50601f01601f19160190565b60a08082528101612b8781888a612b55565b90508181036020830152612b9b8187611f99565b9050612baa6040830186611f52565b612bb76060830185611ddf565b612bc46080830184611ddf565b979650505050505050565b8051611bcd81611d03565b600060208284031215612bef57612bef600080fd5b60006115c18484612bcf565b602d8152602081017f6e6f742073756666696369656e7420636170616369747920696e20746865206981526c1b9cdd5c985b98d9481c1bdbdb609a1b6020820152905061242e565b60208082528101611bcd81612bfb56fea264697066735822122016a8c9c88cd9e0a2bfd54370ca0c4e013db1a1dd243555ba058b409a3f7e71da64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeMinTimeBeforeDeparture(uint256)": {
        "params": {
          "_newMinTime": "New time set"
        }
      },
      "finalSettlement(bytes32,uint256)": {
        "params": {
          "_requestId": "Chainlink request id",
          "_result": "Delay result (minutes) given by oracle"
        }
      },
      "findPolicyBuyerById(uint256)": {
        "params": {
          "_policyId": "Unique policy Id (uint256)"
        },
        "returns": {
          "buyerAddress": "The buyer of this policy"
        }
      },
      "getPolicyInfoById(uint256)": {
        "params": {
          "_policyId": "Total count/order of the policy = NFT tokenId"
        },
        "returns": {
          "policy": "A struct of information about this policy"
        }
      },
      "newApplication(uint256,string,uint256,uint256,uint256,uint256,bytes)": {
        "details": "The transaction should have the signature from the backend server",
        "params": {
          "_deadline": "Deadline for this purchase request",
          "_departureTimestamp": "Departure date of this flight (unix timestamp in s, not ms!)",
          "_flightNumber": "Flight number in string (e.g. \"AQ1299\")",
          "_landingDate": "Landing date of this flight (uinx timestamp in s, not ms!)",
          "_premium": "Premium of this policy (decimals: 18)",
          "_productId": "ID of the purchased product (0: flightdelay; 1,2,3...: others)",
          "signature": "Use web3.eth.sign(hash(data), account) to generate the signature"
        }
      },
      "newClaimRequest(uint256,string,string,string,bool)": {
        "params": {
          "_flightNumber": "The flight number",
          "_forceUpdate": "Owner can force to update",
          "_path": "Which data in json needs to get",
          "_policyId": "The total order/id of the policy",
          "_timestamp": "The flight departure timestamp"
        }
      },
      "policyOwnerTransfer(uint256,address,address)": {
        "details": "This function is called by the ERC721 contract of PolicyToken",
        "params": {
          "_newOwner": "The new owner",
          "_oldOwner": "The initial owner",
          "_tokenId": "Token Id of the policy token"
        }
      },
      "renounceOwnership()": {
        "details": "Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner."
      },
      "setDelayThreshold(uint256,uint256)": {
        "params": {
          "_thresholdMax": "New maximum threshold",
          "_thresholdMin": "New minimum threshold"
        }
      },
      "setFee(uint256)": {
        "params": {
          "_fee": "New oracle fee"
        }
      },
      "setFlightOracle(address)": {
        "params": {
          "_oracleAddress": "New oracle address"
        }
      },
      "setMaxPayoff(uint256)": {
        "params": {
          "_newMaxPayoff": "New maxpayoff amount"
        }
      },
      "transferOwnership(address)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "newOwner": "Address of the new owner"
        }
      },
      "viewUserPolicy(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "userPolicies User's all policy details"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeMinTimeBeforeDeparture(uint256)": {
        "notice": "How long before departure when users can not buy new policies"
      },
      "finalSettlement(bytes32,uint256)": {
        "notice": "Do the final settlement, called by FlightOracle contract"
      },
      "findPolicyBuyerById(uint256)": {
        "notice": "Get the policy buyer by policyId"
      },
      "getPolicyInfoById(uint256)": {
        "notice": "Get the policyInfo from its count/order"
      },
      "newApplication(uint256,string,uint256,uint256,uint256,uint256,bytes)": {
        "notice": "Buy a new flight delay policy"
      },
      "newClaimRequest(uint256,string,string,string,bool)": {
        "notice": "Make a claim request"
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "policyOwnerTransfer(uint256,address,address)": {
        "notice": "Update information when a policy token's ownership has been transferred"
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."
      },
      "setDelayThreshold(uint256,uint256)": {
        "notice": "Set the new delay threshold used for calculating payoff"
      },
      "setFee(uint256)": {
        "notice": "Set the oracle fee"
      },
      "setFlightOracle(address)": {
        "notice": "Change the oracle address"
      },
      "setMaxPayoff(uint256)": {
        "notice": "Set the max payoff"
      },
      "setURL(string)": {
        "notice": "Set a new url"
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`)."
      },
      "viewUserPolicy(address)": {
        "notice": "Show a user's policies (all)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15207,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "MAX_PAYOFF",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 15210,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "DELAY_THRESHOLD_MIN",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 15213,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "DELAY_THRESHOLD_MAX",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 15216,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "MIN_TIME_BEFORE_DEPARTURE",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 15219,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "MAX_TIME_UNTIL_DEPARTURE",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 22750,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 13889,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "buyerToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IBuyerToken)21430"
      },
      {
        "astId": 13892,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "sigManager",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ISigManager)15562"
      },
      {
        "astId": 13895,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "policyToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IFDPolicyToken)15245"
      },
      {
        "astId": 13898,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "flightOracle",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IFlightOracle)15286"
      },
      {
        "astId": 13901,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "insurancePool",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IInsurancePool)15408"
      },
      {
        "astId": 13904,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "FLIGHT_STATUS_URL",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 13906,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "totalPolicies",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 13908,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "fee",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 13913,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "policyList",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(PolicyInfo)15520_storage)"
      },
      {
        "astId": 13918,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "userPolicyList",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 13922,
        "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
        "label": "requestList",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBuyerToken)21430": {
        "encoding": "inplace",
        "label": "contract IBuyerToken",
        "numberOfBytes": "20"
      },
      "t_contract(IFDPolicyToken)15245": {
        "encoding": "inplace",
        "label": "contract IFDPolicyToken",
        "numberOfBytes": "20"
      },
      "t_contract(IFlightOracle)15286": {
        "encoding": "inplace",
        "label": "contract IFlightOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IInsurancePool)15408": {
        "encoding": "inplace",
        "label": "contract IInsurancePool",
        "numberOfBytes": "20"
      },
      "t_contract(ISigManager)15562": {
        "encoding": "inplace",
        "label": "contract ISigManager",
        "numberOfBytes": "20"
      },
      "t_enum(PolicyStatus)15494": {
        "encoding": "inplace",
        "label": "enum IPolicyStruct.PolicyStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(PolicyInfo)15520_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPolicyStruct.PolicyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PolicyInfo)15520_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PolicyInfo)15520_storage": {
        "encoding": "inplace",
        "label": "struct IPolicyStruct.PolicyInfo",
        "members": [
          {
            "astId": 15496,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "productId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15498,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "buyerAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 15500,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "policyId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15502,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "flightNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 15504,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "premium",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 15506,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "payoff",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 15508,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "purchaseTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 15510,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "departureTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 15512,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "landingTimestamp",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 15515,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "status",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(PolicyStatus)15494"
          },
          {
            "astId": 15517,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "alreadySettled",
            "offset": 1,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 15519,
            "contract": "contracts/miserable-flight/PolicyFlow.sol:PolicyFlow",
            "label": "delayResult",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}