{
  "address": "0x80a189369E36b79bdae4B0459C012c1e2C271750",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestRandomWords",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "degisLottery",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestLotteryId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_requestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coordinator",
          "type": "address"
        }
      ],
      "name": "setCoordinator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lottery",
          "type": "address"
        }
      ],
      "name": "setDegisLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "name": "setKeyHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_requestConfirmations",
          "type": "uint16"
        }
      ],
      "name": "setRequestConfirmations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        }
      ],
      "name": "setSubscriptionId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_wordsPerTime",
          "type": "uint32"
        }
      ],
      "name": "setWordsPerTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wordsPerTime",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb3741c880a1fe38adc9dfdd7d897d7ccc50c54ed54dd9074f736d7e4867790b2",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x80a189369E36b79bdae4B0459C012c1e2C271750",
    "transactionIndex": 0,
    "gasUsed": "826831",
    "logsBloom": "0x
    "blockHash": "0x7a265ad9d43d059b2eeed0ef60e22d2131dbf583212b2989f4270063430a04d6",
    "transactionHash": "0xb3741c880a1fe38adc9dfdd7d897d7ccc50c54ed54dd9074f736d7e4867790b2",
    "logs": [],
    "blockNumber": 11279119,
    "cumulativeGasUsed": "826831",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2eD832Ba664535e5886b75D64C46EB9a228C2610",
    "0x354d2f95da55398f44b7cff77da56283d9c6c829a4bdf1bbcaf2ad6a4d081f61",
    130
  ],
  "numDeployments": 3,
  "solcInputHash": "7de695a493300db6629df2747320689d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestRandomWords\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"degisLottery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestLotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coordinator\",\"type\":\"address\"}],\"name\":\"setCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lottery\",\"type\":\"address\"}],\"name\":\"setDegisLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"setKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_requestConfirmations\",\"type\":\"uint16\"}],\"name\":\"setRequestConfirmations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"name\":\"setSubscriptionId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_wordsPerTime\",\"type\":\"uint32\"}],\"name\":\"setWordsPerTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wordsPerTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lucky-box/RandomNumberGeneratorV2.sol\":\"RandomNumberGeneratorV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/lucky-box/RandomNumberGeneratorV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"./interfaces/IDegisLottery.sol\\\";\\r\\n\\r\\ncontract RandomNumberGeneratorV2 is VRFConsumerBaseV2 {\\r\\n    // Coordinator address based on networks\\r\\n    // Fuji: 0x2eD832Ba664535e5886b75D64C46EB9a228C2610\\r\\n    // Mainnet: 0xd5D517aBE5cF79B7e95eC98dB0f0277788aFF634\\r\\n    VRFCoordinatorV2Interface public coordinator;\\r\\n\\r\\n    // Subscription id, created on chainlink website\\r\\n    // Fuji: 130\\r\\n    // Mainnet:\\r\\n    uint64 public subscriptionId;\\r\\n\\r\\n    // Different networks and gas prices have different keyHash\\r\\n    // Fuji: 300gwei 0x354d2f95da55398f44b7cff77da56283d9c6c829a4bdf1bbcaf2ad6a4d081f61\\r\\n    // Mainnet: 500gwei 0x89630569c9567e43c4fe7b1633258df9f2531b62f2352fa721cf3162ee4ecb46\\r\\n    bytes32 public keyHash;\\r\\n\\r\\n    // Gas limit for callback\\r\\n    uint32 public callbackGasLimit = 100000;\\r\\n\\r\\n    // Confirmations for each request\\r\\n    uint16 public requestConfirmations = 3;\\r\\n\\r\\n    // Request 1 random number each time\\r\\n    uint32 public wordsPerTime = 1;\\r\\n\\r\\n    // Store the latest result\\r\\n    uint256 public randomResult;\\r\\n\\r\\n    // Store the latest request id\\r\\n    uint256 public s_requestId;\\r\\n\\r\\n    // Owner address\\r\\n    address public owner;\\r\\n\\r\\n    // Latest lottery id\\r\\n    uint256 public latestLotteryId;\\r\\n\\r\\n    address public degisLottery;\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // *************************************** Events ***************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    event RequestRandomWords(uint256 requestId);\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************* Constructor ************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    constructor(\\r\\n        address _vrfCoordinator,\\r\\n        bytes32 _keyHash,\\r\\n        uint64 _subscriptionId\\r\\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\\r\\n        // Set coordinator address depends on networks\\r\\n        coordinator = VRFCoordinatorV2Interface(_vrfCoordinator);\\r\\n\\r\\n        // Set keyhash depends on networks and gas price\\r\\n        keyHash = _keyHash;\\r\\n\\r\\n        // Subscription id depends on networks\\r\\n        subscriptionId = _subscriptionId;\\r\\n\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(\\r\\n            msg.sender == owner || msg.sender == degisLottery,\\r\\n            \\\"Only owner or lottery\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************ Set Functions ************************************* //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    function setKeyHash(bytes32 _keyHash) external onlyOwner {\\r\\n        keyHash = _keyHash;\\r\\n    }\\r\\n\\r\\n    function setSubscriptionId(uint64 _subscriptionId) external onlyOwner {\\r\\n        subscriptionId = _subscriptionId;\\r\\n    }\\r\\n\\r\\n    function setCoordinator(address _coordinator) external onlyOwner {\\r\\n        coordinator = VRFCoordinatorV2Interface(_coordinator);\\r\\n    }\\r\\n\\r\\n    function setWordsPerTime(uint32 _wordsPerTime) external onlyOwner {\\r\\n        wordsPerTime = _wordsPerTime;\\r\\n    }\\r\\n\\r\\n    function setRequestConfirmations(uint16 _requestConfirmations)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        requestConfirmations = _requestConfirmations;\\r\\n    }\\r\\n\\r\\n    function setDegisLottery(address _lottery) external onlyOwner {\\r\\n        degisLottery = _lottery;\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************ Main Functions ************************************ //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    function requestRandomWords() external onlyOwner {\\r\\n        s_requestId = coordinator.requestRandomWords(\\r\\n            keyHash,\\r\\n            subscriptionId,\\r\\n            requestConfirmations,\\r\\n            callbackGasLimit,\\r\\n            wordsPerTime\\r\\n        );\\r\\n\\r\\n        emit RequestRandomWords(s_requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(uint256, uint256[] memory _randomWords)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        randomResult = _randomWords[0];\\r\\n\\r\\n        // Update latest lottery id\\r\\n        // Before this update, lottery can not make that round claimable\\r\\n        latestLotteryId = IDegisLottery(degisLottery).currentLotteryId();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9cd620fe024ae3603a34a3c83e1270848c85c44086e6a062ae5b25e112d7d681\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lucky-box/interfaces/IDegisLottery.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IDegisLottery {\\r\\n    /**\\r\\n     * @notice Inject funds\\r\\n     * @param _amount amount to inject in USD\\r\\n     * @dev Callable by operator\\r\\n     */\\r\\n    function injectFunds(uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice View current lottery id\\r\\n     */\\r\\n    function currentLotteryId() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x4b8a94e1f8c4a0f39512403454f45882fba8290fbe74d66d8f3577192b81c0e3\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a0604052600280546001600160501b03191666010003000186a01790553480156200002a57600080fd5b5060405162000dd538038062000dd58339810160408190526200004d916200010b565b6001600160a01b039092166080819052600080546001939093556001600160401b03909316600160a01b026001600160e01b031990921617179055600580546001600160a01b0319163317905562000163565b60006001600160a01b0382165b92915050565b620000be81620000a0565b8114620000ca57600080fd5b50565b8051620000ad81620000b3565b80620000be565b8051620000ad81620000da565b6001600160401b038116620000be565b8051620000ad81620000ee565b600080600060608486031215620001255762000125600080fd5b6000620001338686620000cd565b93505060206200014686828701620000e1565b92505060406200015986828701620000fe565b9150509250925092565b608051610c4f62000186600039600081816102ff01526103270152610c4f6000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c80638ea98117116100cd578063e0c8628911610081578063ea7b4f7711610066578063ea7b4f77146102c5578063eed8e1ee146102d8578063ef7525b5146102e157600080fd5b8063e0c86289146102b4578063e89e106a146102bc57600080fd5b8063a2596a6a116100b2578063a2596a6a14610264578063b0fb162f1461027e578063bff9e65f146102a157600080fd5b80638ea981171461023e578063985447101461025157600080fd5b8063265f01731161012457806361728f391161010957806361728f39146102025780638824f5a71461020b5780638da5cb5b1461021e57600080fd5b8063265f0173146101d957806342619f66146101ec57600080fd5b806309c1ba2e146101565780630a009097146101875780631fe543e3146101a757806324f74697146101bc575b600080fd5b60005461017190600160a01b900467ffffffffffffffff1681565b60405161017e91906107ff565b60405180910390f35b60005461019a906001600160a01b031681565b60405161017e9190610843565b6101ba6101b5366004610979565b6102f4565b005b6002546101cc9063ffffffff1681565b60405161017e91906109dd565b6101ba6101e73660046109ff565b610391565b6101f560035481565b60405161017e9190610a26565b6101f560015481565b6101ba610219366004610a49565b6103ff565b600554610231906001600160a01b031681565b60405161017e9190610a73565b6101ba61024c3660046109ff565b610462565b6101ba61025f366004610a81565b6104d0565b6002546101cc906601000000000000900463ffffffff1681565b60025461029490640100000000900461ffff1681565b60405161017e9190610aac565b600754610231906001600160a01b031681565b6101ba610514565b6101f560045481565b6101ba6102d3366004610ad5565b610657565b6101f560065481565b6101ba6102ef366004610b0d565b6106d8565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461038357337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161037a929190610b2e565b60405180910390fd5b61038d8282610743565b5050565b6005546001600160a01b03163314806103b457506007546001600160a01b031633145b6103d05760405162461bcd60e51b815260040161037a90610b50565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6005546001600160a01b031633148061042257506007546001600160a01b031633145b61043e5760405162461bcd60e51b815260040161037a90610b50565b6002805461ffff9092166401000000000265ffff0000000019909216919091179055565b6005546001600160a01b031633148061048557506007546001600160a01b031633145b6104a15760405162461bcd60e51b815260040161037a90610b50565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6005546001600160a01b03163314806104f357506007546001600160a01b031633145b61050f5760405162461bcd60e51b815260040161037a90610b50565b600155565b6005546001600160a01b031633148061053757506007546001600160a01b031633145b6105535760405162461bcd60e51b815260040161037a90610b50565b6000546001546002546040517f5d3b1d300000000000000000000000000000000000000000000000000000000081526001600160a01b03841693635d3b1d30936105d7939092600160a01b90920467ffffffffffffffff1691640100000000820461ffff169163ffffffff8082169266010000000000009092041690600401610b8b565b6020604051808303816000875af11580156105f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061a9190610be2565b60048190556040517f266c84dd4be4409a1875fe8504433bb6b885408c1f5b34e8ecae604804927ba49161064d91610a26565b60405180910390a1565b6005546001600160a01b031633148061067a57506007546001600160a01b031633145b6106965760405162461bcd60e51b815260040161037a90610b50565b6000805467ffffffffffffffff909216600160a01b027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6005546001600160a01b03163314806106fb57506007546001600160a01b031633145b6107175760405162461bcd60e51b815260040161037a90610b50565b6002805463ffffffff90921666010000000000000269ffffffff00000000000019909216919091179055565b8060008151811061075657610756610c03565b602090810291909101810151600355600754604080517f6be4097c00000000000000000000000000000000000000000000000000000000815290516001600160a01b0390921692636be4097c926004808401938290030181865afa1580156107c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e69190610be2565b6006555050565b67ffffffffffffffff81165b82525050565b6020810161080d82846107ed565b92915050565b60006001600160a01b03821661080d565b600061080d82610813565b600061080d82610824565b6107f98161082f565b6020810161080d828461083a565b805b811461085e57600080fd5b50565b803561080d81610851565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156108a8576108a861086c565b6040525050565b60006108ba60405190565b90506108c68282610882565b919050565b600067ffffffffffffffff8211156108e5576108e561086c565b5060209081020190565b60006109026108fd846108cb565b6108af565b8381529050602080820190840283018581111561092157610921600080fd5b835b81811015610943576109358782610861565b835260209283019201610923565b5050509392505050565b600082601f83011261096157610961600080fd5b81356109718482602086016108ef565b949350505050565b6000806040838503121561098f5761098f600080fd5b600061099b8585610861565b925050602083013567ffffffffffffffff8111156109bb576109bb600080fd5b6109c78582860161094d565b9150509250929050565b63ffffffff81166107f9565b6020810161080d82846109d1565b61085381610813565b803561080d816109eb565b600060208284031215610a1457610a14600080fd5b600061097184846109f4565b806107f9565b6020810161080d8284610a20565b61ffff8116610853565b803561080d81610a34565b600060208284031215610a5e57610a5e600080fd5b60006109718484610a3e565b6107f981610813565b6020810161080d8284610a6a565b600060208284031215610a9657610a96600080fd5b60006109718484610861565b61ffff81166107f9565b6020810161080d8284610aa2565b67ffffffffffffffff8116610853565b803561080d81610aba565b600060208284031215610aea57610aea600080fd5b60006109718484610aca565b63ffffffff8116610853565b803561080d81610af6565b600060208284031215610b2257610b22600080fd5b60006109718484610b02565b60408101610b3c8285610a6a565b610b496020830184610a6a565b9392505050565b6020808252810161080d81601581527f4f6e6c79206f776e6572206f72206c6f74746572790000000000000000000000602082015260400190565b60a08101610b998288610a20565b610ba660208301876107ed565b610bb36040830186610aa2565b610bc060608301856109d1565b610bcd60808301846109d1565b9695505050505050565b805161080d81610851565b600060208284031215610bf757610bf7600080fd5b60006109718484610bd7565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220c69beff4cd68821410891fc38be033d02a76df82e793580991e5cfe3bb05864d64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c80638ea98117116100cd578063e0c8628911610081578063ea7b4f7711610066578063ea7b4f77146102c5578063eed8e1ee146102d8578063ef7525b5146102e157600080fd5b8063e0c86289146102b4578063e89e106a146102bc57600080fd5b8063a2596a6a116100b2578063a2596a6a14610264578063b0fb162f1461027e578063bff9e65f146102a157600080fd5b80638ea981171461023e578063985447101461025157600080fd5b8063265f01731161012457806361728f391161010957806361728f39146102025780638824f5a71461020b5780638da5cb5b1461021e57600080fd5b8063265f0173146101d957806342619f66146101ec57600080fd5b806309c1ba2e146101565780630a009097146101875780631fe543e3146101a757806324f74697146101bc575b600080fd5b60005461017190600160a01b900467ffffffffffffffff1681565b60405161017e91906107ff565b60405180910390f35b60005461019a906001600160a01b031681565b60405161017e9190610843565b6101ba6101b5366004610979565b6102f4565b005b6002546101cc9063ffffffff1681565b60405161017e91906109dd565b6101ba6101e73660046109ff565b610391565b6101f560035481565b60405161017e9190610a26565b6101f560015481565b6101ba610219366004610a49565b6103ff565b600554610231906001600160a01b031681565b60405161017e9190610a73565b6101ba61024c3660046109ff565b610462565b6101ba61025f366004610a81565b6104d0565b6002546101cc906601000000000000900463ffffffff1681565b60025461029490640100000000900461ffff1681565b60405161017e9190610aac565b600754610231906001600160a01b031681565b6101ba610514565b6101f560045481565b6101ba6102d3366004610ad5565b610657565b6101f560065481565b6101ba6102ef366004610b0d565b6106d8565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461038357337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161037a929190610b2e565b60405180910390fd5b61038d8282610743565b5050565b6005546001600160a01b03163314806103b457506007546001600160a01b031633145b6103d05760405162461bcd60e51b815260040161037a90610b50565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6005546001600160a01b031633148061042257506007546001600160a01b031633145b61043e5760405162461bcd60e51b815260040161037a90610b50565b6002805461ffff9092166401000000000265ffff0000000019909216919091179055565b6005546001600160a01b031633148061048557506007546001600160a01b031633145b6104a15760405162461bcd60e51b815260040161037a90610b50565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6005546001600160a01b03163314806104f357506007546001600160a01b031633145b61050f5760405162461bcd60e51b815260040161037a90610b50565b600155565b6005546001600160a01b031633148061053757506007546001600160a01b031633145b6105535760405162461bcd60e51b815260040161037a90610b50565b6000546001546002546040517f5d3b1d300000000000000000000000000000000000000000000000000000000081526001600160a01b03841693635d3b1d30936105d7939092600160a01b90920467ffffffffffffffff1691640100000000820461ffff169163ffffffff8082169266010000000000009092041690600401610b8b565b6020604051808303816000875af11580156105f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061a9190610be2565b60048190556040517f266c84dd4be4409a1875fe8504433bb6b885408c1f5b34e8ecae604804927ba49161064d91610a26565b60405180910390a1565b6005546001600160a01b031633148061067a57506007546001600160a01b031633145b6106965760405162461bcd60e51b815260040161037a90610b50565b6000805467ffffffffffffffff909216600160a01b027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6005546001600160a01b03163314806106fb57506007546001600160a01b031633145b6107175760405162461bcd60e51b815260040161037a90610b50565b6002805463ffffffff90921666010000000000000269ffffffff00000000000019909216919091179055565b8060008151811061075657610756610c03565b602090810291909101810151600355600754604080517f6be4097c00000000000000000000000000000000000000000000000000000000815290516001600160a01b0390921692636be4097c926004808401938290030181865afa1580156107c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e69190610be2565b6006555050565b67ffffffffffffffff81165b82525050565b6020810161080d82846107ed565b92915050565b60006001600160a01b03821661080d565b600061080d82610813565b600061080d82610824565b6107f98161082f565b6020810161080d828461083a565b805b811461085e57600080fd5b50565b803561080d81610851565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156108a8576108a861086c565b6040525050565b60006108ba60405190565b90506108c68282610882565b919050565b600067ffffffffffffffff8211156108e5576108e561086c565b5060209081020190565b60006109026108fd846108cb565b6108af565b8381529050602080820190840283018581111561092157610921600080fd5b835b81811015610943576109358782610861565b835260209283019201610923565b5050509392505050565b600082601f83011261096157610961600080fd5b81356109718482602086016108ef565b949350505050565b6000806040838503121561098f5761098f600080fd5b600061099b8585610861565b925050602083013567ffffffffffffffff8111156109bb576109bb600080fd5b6109c78582860161094d565b9150509250929050565b63ffffffff81166107f9565b6020810161080d82846109d1565b61085381610813565b803561080d816109eb565b600060208284031215610a1457610a14600080fd5b600061097184846109f4565b806107f9565b6020810161080d8284610a20565b61ffff8116610853565b803561080d81610a34565b600060208284031215610a5e57610a5e600080fd5b60006109718484610a3e565b6107f981610813565b6020810161080d8284610a6a565b600060208284031215610a9657610a96600080fd5b60006109718484610861565b61ffff81166107f9565b6020810161080d8284610aa2565b67ffffffffffffffff8116610853565b803561080d81610aba565b600060208284031215610aea57610aea600080fd5b60006109718484610aca565b63ffffffff8116610853565b803561080d81610af6565b600060208284031215610b2257610b22600080fd5b60006109718484610b02565b60408101610b3c8285610a6a565b610b496020830184610a6a565b9392505050565b6020808252810161080d81601581527f4f6e6c79206f776e6572206f72206c6f74746572790000000000000000000000602082015260400190565b60a08101610b998288610a20565b610ba660208301876107ed565b610bb36040830186610aa2565b610bc060608301856109d1565b610bcd60808301846109d1565b9695505050505050565b805161080d81610851565b600060208284031215610bf757610bf7600080fd5b60006109718484610bd7565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220c69beff4cd68821410891fc38be033d02a76df82e793580991e5cfe3bb05864d64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24831,
        "contract": "contracts/lucky-box/RandomNumberGeneratorV2.sol:RandomNumberGeneratorV2",
        "label": "coordinator",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(VRFCoordinatorV2Interface)1560"
      },
      {
        "astId": 24833,
        "contract": "contracts/lucky-box/RandomNumberGeneratorV2.sol:RandomNumberGeneratorV2",
        "label": "subscriptionId",
        "offset": 20,
        "slot": "0",
        "type": "t_uint64"
      },
      {
        "astId": 24835,
        "contract": "contracts/lucky-box/RandomNumberGeneratorV2.sol:RandomNumberGeneratorV2",
        "label": "keyHash",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 24838,
        "contract": "contracts/lucky-box/RandomNumberGeneratorV2.sol:RandomNumberGeneratorV2",
        "label": "callbackGasLimit",
        "offset": 0,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 24841,
        "contract": "contracts/lucky-box/RandomNumberGeneratorV2.sol:RandomNumberGeneratorV2",
        "label": "requestConfirmations",
        "offset": 4,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 24844,
        "contract": "contracts/lucky-box/RandomNumberGeneratorV2.sol:RandomNumberGeneratorV2",
        "label": "wordsPerTime",
        "offset": 6,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 24846,
        "contract": "contracts/lucky-box/RandomNumberGeneratorV2.sol:RandomNumberGeneratorV2",
        "label": "randomResult",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 24848,
        "contract": "contracts/lucky-box/RandomNumberGeneratorV2.sol:RandomNumberGeneratorV2",
        "label": "s_requestId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 24850,
        "contract": "contracts/lucky-box/RandomNumberGeneratorV2.sol:RandomNumberGeneratorV2",
        "label": "owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 24852,
        "contract": "contracts/lucky-box/RandomNumberGeneratorV2.sol:RandomNumberGeneratorV2",
        "label": "latestLotteryId",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 24854,
        "contract": "contracts/lucky-box/RandomNumberGeneratorV2.sol:RandomNumberGeneratorV2",
        "label": "degisLottery",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)1560": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}