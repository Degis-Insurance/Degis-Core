{
  "address": "0x3ccbCf9B741f55164e0E9E9B169Dac09A6fB5c9D",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBurner",
          "type": "address"
        }
      ],
      "name": "BurnerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBurner",
          "type": "address"
        }
      ],
      "name": "BurnerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldMinter",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newBurner",
          "type": "address"
        }
      ],
      "name": "addBurner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newMinter",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnDegis",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "burnerList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinterList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isBurner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintDegis",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "minterList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oldBurner",
          "type": "address"
        }
      ],
      "name": "removeBurner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oldMinter",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x59dc633a115ba4a4de0475f255bcd55daa42ebb6adda0c1ea57b362557c5f5a4",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x3ccbCf9B741f55164e0E9E9B169Dac09A6fB5c9D",
    "transactionIndex": 3,
    "gasUsed": "2188793",
    "logsBloom": "0x
    "blockHash": "0x3ed4f94296ade64bb9a56dcf5b92313df79ee6afe37ce167421c4680605a0258",
    "transactionHash": "0x59dc633a115ba4a4de0475f255bcd55daa42ebb6adda0c1ea57b362557c5f5a4",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 5029515,
        "transactionHash": "0x59dc633a115ba4a4de0475f255bcd55daa42ebb6adda0c1ea57b362557c5f5a4",
        "address": "0x3ccbCf9B741f55164e0E9E9B169Dac09A6fB5c9D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001be1a151ba3d24f594ee971dc9b843f23b5ba80e"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x3ed4f94296ade64bb9a56dcf5b92313df79ee6afe37ce167421c4680605a0258"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 5029515,
        "transactionHash": "0x59dc633a115ba4a4de0475f255bcd55daa42ebb6adda0c1ea57b362557c5f5a4",
        "address": "0x3ccbCf9B741f55164e0E9E9B169Dac09A6fB5c9D",
        "topics": [
          "0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6"
        ],
        "data": "0x0000000000000000000000001be1a151ba3d24f594ee971dc9b843f23b5ba80e",
        "logIndex": 7,
        "blockHash": "0x3ed4f94296ade64bb9a56dcf5b92313df79ee6afe37ce167421c4680605a0258"
      }
    ],
    "blockNumber": 5029515,
    "cumulativeGasUsed": "3151920",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "891f6e83b97076056766f10193ee5514",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBurner\",\"type\":\"address\"}],\"name\":\"BurnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBurner\",\"type\":\"address\"}],\"name\":\"BurnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMinter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBurner\",\"type\":\"address\"}],\"name\":\"addBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnDegis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnerList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinterList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBurner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintDegis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minterList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldBurner\",\"type\":\"address\"}],\"name\":\"removeBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldMinter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"addBurner(address)\":{\"params\":{\"_newBurner\":\"Address of the new burner\"}},\"addMinter(address)\":{\"params\":{\"_newMinter\":\"Address of the new minter\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burnDegis(address,uint256)\":{\"params\":{\"_account\":\"Receiver's address\",\"_amount\":\"Amount to be burned\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mintDegis(address,uint256)\":{\"params\":{\"_account\":\"Receiver's address\",\"_amount\":\"Amount to be minted\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"removeBurner(address)\":{\"params\":{\"_oldBurner\":\"Address of the minter to be removed\"}},\"removeMinter(address)\":{\"params\":{\"_oldMinter\":\"Address of the minter to be removed\"}},\"renounceOwnership()\":{\"details\":\"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"newOwner\":\"Address of the new owner\"}}},\"title\":\"Degis Token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBurner(address)\":{\"notice\":\"Add a new burner into the burnerList\"},\"addMinter(address)\":{\"notice\":\"Add a new minter into the minterList\"},\"burnDegis(address,uint256)\":{\"notice\":\"Burn degis tokens\"},\"mintDegis(address,uint256)\":{\"notice\":\"Mint degis tokens\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"removeBurner(address)\":{\"notice\":\"Remove a minter from the minterList\"},\"removeMinter(address)\":{\"notice\":\"Remove a minter from the minterList\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner.\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).\"}},\"notice\":\"DegisToken inherits from ERC20 Permit which contains the basic ERC20 implementation.         DegisToken can use the permit function rather than approve + transferFrom.         DegisToken has an owner, a minterList and a burnerList.         When lauched on mainnet, the owner may be removed or tranferred to a multisig.         By default, the owner & the first minter will be the one that deploys the contract.         The minterList should contain FarmingPool and PurchaseIncentiveVault.         The burnerList should contain EmergencyPool.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/DegisToken.sol\":\"DegisToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x53a0bb51b8a505e04aaf065de27c0e31cadf38194f8a9a6ec92b7bcd3c5826e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0xfe718c5c09fded4739cb9aaebc881b91e69e39d9ce2bf77e8ebb43425cbf0582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe7713f1b362f8b80e28d5a7e8b66c3f2236203fd86d01eca0a29a9e6a3f4d97f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x74f630d2664c1581a1cbd0730d4ba119b3a184ef90c65f3a934be4d16d0e58a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5fa25f305839292fab713256214f2868e0257d29826b14282bbd7f1e34f5af38\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x594efd2fa154f4fbe0fa92c2356cb2a9531ef3902e35784c2bc69764d0d8886a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xd4d500f24f5ea0a9ba1ad9625affe392d69b17cd1e85ee6d4604070de0dee6da\",\"license\":\"MIT\"},\"contracts/tokens/DegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IDegisToken.sol\\\";\\nimport \\\"../utils/ERC20PermitWithMultipleMinters.sol\\\";\\n\\n/**@title  Degis Token\\n * @notice DegisToken inherits from ERC20 Permit which contains the basic ERC20 implementation.\\n *         DegisToken can use the permit function rather than approve + transferFrom.\\n *\\n *         DegisToken has an owner, a minterList and a burnerList.\\n *         When lauched on mainnet, the owner may be removed or tranferred to a multisig.\\n *         By default, the owner & the first minter will be the one that deploys the contract.\\n *         The minterList should contain FarmingPool and PurchaseIncentiveVault.\\n *         The burnerList should contain EmergencyPool.\\n */\\ncontract DegisToken is ERC20PermitWithMultipleMinters {\\n    // Degis has a total supply of 100 million\\n    uint256 public constant CAP = 1e8 ether;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Constructor *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor() ERC20PermitWithMultipleMinters(\\\"DegisToken\\\", \\\"DEG\\\") {}\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Modifiers **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Degis toke has a hard cap of 100 million\\n    modifier notExceedCap(uint256 _amount) {\\n        require(\\n            totalSupply() + _amount <= CAP,\\n            \\\"DegisToken exceeds the cap (100 million)\\\"\\n        );\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Main Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Mint degis tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be minted\\n     */\\n    function mintDegis(address _account, uint256 _amount)\\n        external\\n        notExceedCap(_amount)\\n    {\\n        mint(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Burn degis tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be burned\\n     */\\n    function burnDegis(address _account, uint256 _amount) external {\\n        burn(_account, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe7261003b7e134148a9e3b8cbea17583adb5fb3fbf36ae20ecbd2dde8521f2d2\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IDegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDegisToken is IERC20, IERC20Permit {\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Functions ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n    function CAP() external view returns (uint256);\\n\\n    /**\\n     * @notice Mint degis tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be minted\\n     */\\n    function mintDegis(address _account, uint256 _amount) external;\\n\\n    /**\\n     * @notice Burn degis tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be burned\\n     */\\n    function burnDegis(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x10b3675bb2fd595b95a29d622e73e90c280e4fbd3a850c2b3f63dad3028149b1\",\"license\":\"MIT\"},\"contracts/utils/ERC20PermitWithMultipleMinters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\nimport \\\"./OwnableWithoutContext.sol\\\";\\n\\n/**\\n * @title  ERC20 with Multiple Minters and Burners\\n * @notice This is contract used for ERC20 tokens that has multiple minters and burners.\\n *         It has basic implementations for ERC20 and also the owner control.\\n *         Even if the owner is renounced to zero address, the token can still be minted/burned.\\n *         DegisToken and BuyerToken are both this kind ERC20 token.\\n */\\ncontract ERC20PermitWithMultipleMinters is ERC20Permit, OwnableWithoutContext {\\n    // List of all minters\\n    address[] public minterList;\\n    mapping(address => bool) public isMinter;\\n\\n    // List of all burners\\n    address[] public burnerList;\\n    mapping(address => bool) public isBurner;\\n\\n    event MinterAdded(address newMinter);\\n    event MinterRemoved(address oldMinter);\\n\\n    event BurnerAdded(address newBurner);\\n    event BurnerRemoved(address oldBurner);\\n\\n    event Mint(address indexed account, uint256 amount);\\n    event Burn(address indexed account, uint256 amount);\\n\\n    constructor(string memory name, string memory symbol)\\n        ERC20(name, symbol)\\n        ERC20Permit(name)\\n    {\\n        _addMinter(_msgSender());\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Modifiers ****************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     *@notice Check if the msg.sender is in the minter list\\n     */\\n    modifier validMinter(address _sender) {\\n        require(\\n            isMinter[_sender] == true,\\n            \\\"Only the address in the minter list can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Check if the msg.sender is in the burner list\\n     */\\n    modifier validBurner(address _sender) {\\n        require(\\n            isBurner[_sender] == true,\\n            \\\"Only the address in the minter list can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // TODO: If we still need this function\\n    function getMinterList() external view returns (address[] memory) {\\n        uint256 length = minterList.length;\\n        address[] memory allMinters = new address[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            allMinters[i] = minterList[i];\\n        }\\n\\n        return allMinters;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Admin Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Add a new minter into the minterList\\n     * @param _newMinter Address of the new minter\\n     */\\n    function addMinter(address _newMinter) external onlyOwner {\\n        require(\\n            isMinter[_newMinter] == false,\\n            \\\"This address is already a minter\\\"\\n        );\\n\\n        _addMinter(_newMinter);\\n    }\\n\\n    /**\\n     * @notice Remove a minter from the minterList\\n     * @param _oldMinter Address of the minter to be removed\\n     */\\n    function removeMinter(address _oldMinter) external onlyOwner {\\n        require(isMinter[_oldMinter] == true, \\\"This address is not a minter\\\");\\n\\n        uint256 length = minterList.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (minterList[i] == _oldMinter) {\\n                for (uint256 j = i; j < length - 1; j++) {\\n                    minterList[j] = minterList[j + 1];\\n                }\\n                minterList.pop();\\n                break;\\n            } else continue;\\n        }\\n        isMinter[_oldMinter] = false;\\n\\n        emit MinterRemoved(_oldMinter);\\n    }\\n\\n    /**\\n     * @notice Add a new burner into the burnerList\\n     * @param _newBurner Address of the new burner\\n     */\\n    function addBurner(address _newBurner) external onlyOwner {\\n        require(\\n            isBurner[_newBurner] == false,\\n            \\\"This address is already a burner\\\"\\n        );\\n        burnerList.push(_newBurner);\\n        isBurner[_newBurner] = true;\\n\\n        emit BurnerAdded(_newBurner);\\n    }\\n\\n    /**\\n     * @notice Remove a minter from the minterList\\n     * @param _oldBurner Address of the minter to be removed\\n     */\\n    function removeBurner(address _oldBurner) external onlyOwner {\\n        require(isMinter[_oldBurner] == true, \\\"This address is not a burner\\\");\\n\\n        uint256 length = burnerList.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (burnerList[i] == _oldBurner) {\\n                for (uint256 j = i; j < length - 1; j++) {\\n                    burnerList[j] = burnerList[j + 1];\\n                }\\n                burnerList.pop();\\n                break;\\n            } else continue;\\n        }\\n        isBurner[_oldBurner] = false;\\n\\n        emit BurnerRemoved(_oldBurner);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Mint tokens\\n     * @param _account Receiver's address\\n     * @param _amount Amount to be minted\\n     */\\n    function mint(address _account, uint256 _amount)\\n        internal\\n        validMinter(_msgSender())\\n    {\\n        _mint(_account, _amount); // ERC20 method with an event\\n        emit Mint(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Burn tokens\\n     * @param _account address\\n     * @param _amount amount to be burned\\n     */\\n    function burn(address _account, uint256 _amount)\\n        internal\\n        validBurner(_msgSender())\\n    {\\n        _burn(_account, _amount);\\n        emit Burn(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Finish the process of adding a new minter.\\n     * @dev    Also used in constructor.\\n     */\\n    function _addMinter(address _newMinter) internal {\\n        minterList.push(_newMinter);\\n        isMinter[_newMinter] = true;\\n        emit MinterAdded(_newMinter);\\n    }\\n}\\n\",\"keccak256\":\"0x85681249051699346d87134cdf7cea2883f631e94c037429ef16355b60719883\",\"license\":\"MIT\"},\"contracts/utils/OwnableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nabstract contract OwnableWithoutContext {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. It will not be possible to call\\n     *         `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * @dev    Renouncing ownership will leave the contract without an owner,\\n     *         thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Can only be called by the current owner.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Internal function without access restriction.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xaac82abf26ffda125b5b404f6e1945a89711f66ecbdd99986b0e1e4ca63e69dd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610140523480156200003757600080fd5b506040518060400160405280600a8152602001692232b3b4b9aa37b5b2b760b11b8152506040518060400160405280600381526020016244454760e81b8152508180604051806040016040528060018152602001603160f81b81525084848160039080519060200190620000ad92919062000279565b508051620000c390600490602084019062000279565b5050825160208085019190912083519184019190912060e08290526101008190524660a0529091507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620001198184846200014a565b6080523060c052610120525062000137935033925050620001869050565b6200014233620001d8565b5050620003f2565b600083838346306040516020016200016795949392919062000345565b6040516020818303038152906040528051906020012090509392505050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6007805460018082019092557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b03841690811790915560009081526008602052604090819020805460ff1916909217909155517f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6906200026e9083906200039b565b60405180910390a150565b8280546200028790620003c1565b90600052602060002090601f016020900481019282620002ab5760008555620002f6565b82601f10620002c657805160ff1916838001178555620002f6565b82800160010185558215620002f6579182015b82811115620002f6578251825591602001919060010190620002d9565b506200030492915062000308565b5090565b5b8082111562000304576000815560010162000309565b805b82525050565b60006001600160a01b0382165b92915050565b620003218162000327565b60a081016200035582886200031f565b6200036460208301876200031f565b6200037360408301866200031f565b6200038260608301856200031f565b6200039160808301846200033a565b9695505050505050565b602081016200033482846200033a565b634e487b7160e01b600052602260045260246000fd5b600281046001821680620003d657607f821691505b60208210811415620003ec57620003ec620003ab565b50919050565b60805160a05160c05160e0516101005161012051610140516123e36200044d6000396000610bba0152600061110e015260006111500152600061112f01526000611093015260006110bd015260006110e701526123e36000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80637ecebe0011610104578063abd8e23d116100a2578063de0d611711610071578063de0d611714610409578063ec81b4831461041e578063f2fde38b14610430578063f44637ba1461044357600080fd5b8063abd8e23d14610397578063b4767398146103aa578063d505accf146103bd578063dd62ed3e146103d057600080fd5b8063983b2d56116100de578063983b2d561461033b578063a457c2d71461034e578063a9059cbb14610361578063aa271e1a1461037457600080fd5b80637ecebe001461030f5780638da5cb5b1461032257806395d89b411461033357600080fd5b8063313ce567116101715780634334614a1161014b5780634334614a146102a85780636858da9a146102cb57806370a08231146102de578063715018a61461030757600080fd5b8063313ce5671461027e5780633644e5151461028d578063395093511461029557600080fd5b806318160ddd116101ad57806318160ddd1461022757806323b872dd14610238578063279ad7ab1461024b5780633092afd51461026b57600080fd5b806302846858146101d457806306fdde03146101e9578063095ea7b314610207575b600080fd5b6101e76101e236600461179f565b610456565b005b6101f161065b565b6040516101fe9190611826565b60405180910390f35b61021a61021536600461184f565b6106ed565b6040516101fe9190611896565b6002545b6040516101fe91906118aa565b61021a6102463660046118b8565b610704565b61025e610259366004611908565b61076d565b6040516101fe9190611932565b6101e761027936600461179f565b610797565b60126040516101fe9190611949565b61022b610987565b61021a6102a336600461184f565b610996565b61021a6102b636600461179f565b600a6020526000908152604090205460ff1681565b6101e76102d936600461184f565b6109d2565b61022b6102ec36600461179f565b6001600160a01b031660009081526020819052604090205490565b6101e76109e0565b61022b61031d36600461179f565b610a25565b6006546001600160a01b031661025e565b6101f1610a43565b6101e761034936600461179f565b610a52565b61021a61035c36600461184f565b610ad0565b61021a61036f36600461184f565b610b2b565b61021a61038236600461179f565b60086020526000908152604090205460ff1681565b61025e6103a5366004611908565b610b38565b6101e76103b836600461184f565b610b48565b6101e76103cb36600461196b565b610b96565b61022b6103de366004611a0a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610411610c78565b6040516101fe9190611a9b565b61022b6a52b7d2dcc80cd2e400000081565b6101e761043e36600461179f565b610d44565b6101e761045136600461179f565b610dac565b336104696006546001600160a01b031690565b6001600160a01b0316146104985760405162461bcd60e51b815260040161048f90611adc565b60405180910390fd5b6001600160a01b03811660009081526008602052604090205460ff1615156001146104d55760405162461bcd60e51b815260040161048f90611b1e565b60095460005b818110156105fe57826001600160a01b03166009828154811061050057610500611b2e565b6000918252602090912001546001600160a01b031614156105ec57805b610528600184611b5a565b8110156105b357600961053c826001611b71565b8154811061054c5761054c611b2e565b600091825260209091200154600980546001600160a01b03909216918390811061057857610578611b2e565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055806105ab81611b89565b91505061051d565b5060098054806105c5576105c5611ba4565b600082815260209020810160001990810180546001600160a01b03191690550190556105fe565b806105f681611b89565b9150506104db565b506001600160a01b0382166000908152600a602052604090819020805460ff19169055517f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e9061064f908490611932565b60405180910390a15050565b60606003805461066a90611bd0565b80601f016020809104026020016040519081016040528092919081815260200182805461069690611bd0565b80156106e35780601f106106b8576101008083540402835291602001916106e3565b820191906000526020600020905b8154815290600101906020018083116106c657829003601f168201915b5050505050905090565b60006106fa338484610ebd565b5060015b92915050565b6000610711848484610f71565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156107555760405162461bcd60e51b815260040161048f90611c3c565b6107628533858403610ebd565b506001949350505050565b6007818154811061077d57600080fd5b6000918252602090912001546001600160a01b0316905081565b336107aa6006546001600160a01b031690565b6001600160a01b0316146107d05760405162461bcd60e51b815260040161048f90611adc565b6001600160a01b03811660009081526008602052604090205460ff16151560011461080d5760405162461bcd60e51b815260040161048f90611c7e565b60075460005b8181101561093657826001600160a01b03166007828154811061083857610838611b2e565b6000918252602090912001546001600160a01b0316141561092457805b610860600184611b5a565b8110156108eb576007610874826001611b71565b8154811061088457610884611b2e565b600091825260209091200154600780546001600160a01b0390921691839081106108b0576108b0611b2e565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055806108e381611b89565b915050610855565b5060078054806108fd576108fd611ba4565b600082815260209020810160001990810180546001600160a01b0319169055019055610936565b8061092e81611b89565b915050610813565b506001600160a01b03821660009081526008602052604090819020805460ff19169055517fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb666929061064f908490611932565b6000610991611086565b905090565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916106fa9185906109cd908690611b71565b610ebd565b6109dc8282611174565b5050565b336109f36006546001600160a01b031690565b6001600160a01b031614610a195760405162461bcd60e51b815260040161048f90611adc565b610a2360006111f8565b565b6001600160a01b0381166000908152600560205260408120546106fe565b60606004805461066a90611bd0565b33610a656006546001600160a01b031690565b6001600160a01b031614610a8b5760405162461bcd60e51b815260040161048f90611adc565b6001600160a01b03811660009081526008602052604090205460ff1615610ac45760405162461bcd60e51b815260040161048f90611cbe565b610acd8161124a565b50565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610b145760405162461bcd60e51b815260040161048f90611d0e565b610b213385858403610ebd565b5060019392505050565b60006106fa338484610f71565b6009818154811061077d57600080fd5b806a52b7d2dcc80cd2e400000081610b5f60025490565b610b699190611b71565b1115610b875760405162461bcd60e51b815260040161048f90611d61565b610b9183836112de565b505050565b83421115610bb65760405162461bcd60e51b815260040161048f90611da3565b60007f0000000000000000000000000000000000000000000000000000000000000000888888610be58c611355565b89604051602001610bfb96959493929190611db3565b6040516020818303038152906040528051906020012090506000610c1e8261137d565b90506000610c2e82878787611390565b9050896001600160a01b0316816001600160a01b031614610c615760405162461bcd60e51b815260040161048f90611e3f565b610c6c8a8a8a610ebd565b50505050505050505050565b60075460609060008167ffffffffffffffff811115610c9957610c99611e4f565b604051908082528060200260200182016040528015610cc2578160200160208202803683370190505b50905060005b82811015610d3d5760078181548110610ce357610ce3611b2e565b9060005260206000200160009054906101000a90046001600160a01b0316828281518110610d1357610d13611b2e565b6001600160a01b039092166020928302919091019091015280610d3581611b89565b915050610cc8565b5092915050565b33610d576006546001600160a01b031690565b6001600160a01b031614610d7d5760405162461bcd60e51b815260040161048f90611adc565b6001600160a01b038116610da35760405162461bcd60e51b815260040161048f90611ea6565b610acd816111f8565b33610dbf6006546001600160a01b031690565b6001600160a01b031614610de55760405162461bcd60e51b815260040161048f90611adc565b6001600160a01b0381166000908152600a602052604090205460ff1615610e1e5760405162461bcd60e51b815260040161048f90611ee6565b6009805460018082019092557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b0319166001600160a01b0384169081179091556000908152600a602052604090819020805460ff1916909217909155517f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b9456090610eb2908390611932565b60405180910390a150565b6001600160a01b038316610ee35760405162461bcd60e51b815260040161048f90611f35565b6001600160a01b038216610f095760405162461bcd60e51b815260040161048f90611f82565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610f649085906118aa565b60405180910390a3505050565b6001600160a01b038316610f975760405162461bcd60e51b815260040161048f90611fd2565b6001600160a01b038216610fbd5760405162461bcd60e51b815260040161048f90612020565b6001600160a01b03831660009081526020819052604090205481811015610ff65760405162461bcd60e51b815260040161048f90612071565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061102d908490611b71565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161107791906118aa565b60405180910390a35b50505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156110df57507f000000000000000000000000000000000000000000000000000000000000000046145b1561110957507f000000000000000000000000000000000000000000000000000000000000000090565b6109917f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006113b8565b336000818152600a602052604090205460ff1615156001146111a85760405162461bcd60e51b815260040161048f906120d9565b6111b283836113f2565b826001600160a01b03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040516111eb91906118aa565b60405180910390a2505050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6007805460018082019092557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b03841690811790915560009081526008602052604090819020805460ff1916909217909155517f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690610eb2908390611932565b3360008181526008602052604090205460ff1615156001146113125760405162461bcd60e51b815260040161048f906120d9565b61131c83836114c3565b826001600160a01b03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040516111eb91906118aa565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b60006106fe61138a611086565b83611577565b60008060006113a1878787876115aa565b915091506113ae8161168a565b5095945050505050565b600083838346306040516020016113d39594939291906120e9565b6040516020818303038152906040528051906020012090509392505050565b6001600160a01b0382166114185760405162461bcd60e51b815260040161048f90612171565b6001600160a01b038216600090815260208190526040902054818110156114515760405162461bcd60e51b815260040161048f906121be565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611480908490611b5a565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610f649086906118aa565b6001600160a01b0382166114e95760405162461bcd60e51b815260040161048f90612200565b80600260008282546114fb9190611b71565b90915550506001600160a01b03821660009081526020819052604081208054839290611528908490611b71565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061156b9085906118aa565b60405180910390a35050565b6000828260405160200161158c929190612210565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156115e15750600090506003611681565b8460ff16601b141580156115f957508460ff16601c14155b1561160a5750600090506004611681565b60006001878787876040516000815260200160405260405161162f949392919061223b565b6020604051602081039080840390855afa158015611651573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661167a57600060019250925050611681565b9150600090505b94509492505050565b600081600481111561169e5761169e612279565b14156116a75750565b60018160048111156116bb576116bb612279565b14156116d95760405162461bcd60e51b815260040161048f906122c1565b60028160048111156116ed576116ed612279565b141561170b5760405162461bcd60e51b815260040161048f90612303565b600381600481111561171f5761171f612279565b141561173d5760405162461bcd60e51b815260040161048f90612350565b600481600481111561175157611751612279565b1415610acd5760405162461bcd60e51b815260040161048f9061239d565b60006001600160a01b0382166106fe565b6117898161176f565b8114610acd57600080fd5b80356106fe81611780565b6000602082840312156117b4576117b4600080fd5b60006117c08484611794565b949350505050565b60005b838110156117e35781810151838201526020016117cb565b838111156110805750506000910152565b60006117fe825190565b8084526020840193506118158185602086016117c8565b601f01601f19169290920192915050565b6020808252810161183781846117f4565b9392505050565b80611789565b80356106fe8161183e565b6000806040838503121561186557611865600080fd5b60006118718585611794565b925050602061188285828601611844565b9150509250929050565b8015155b82525050565b602081016106fe828461188c565b80611890565b602081016106fe82846118a4565b6000806000606084860312156118d0576118d0600080fd5b60006118dc8686611794565b93505060206118ed86828701611794565b92505060406118fe86828701611844565b9150509250925092565b60006020828403121561191d5761191d600080fd5b60006117c08484611844565b6118908161176f565b602081016106fe8284611929565b60ff8116611890565b602081016106fe8284611940565b60ff8116611789565b80356106fe81611957565b600080600080600080600060e0888a03121561198957611989600080fd5b60006119958a8a611794565b97505060206119a68a828b01611794565b96505060406119b78a828b01611844565b95505060606119c88a828b01611844565b94505060806119d98a828b01611960565b93505060a06119ea8a828b01611844565b92505060c06119fb8a828b01611844565b91505092959891949750929550565b60008060408385031215611a2057611a20600080fd5b6000611a2c8585611794565b925050602061188285828601611794565b611a478282611929565b5060200190565b60200190565b6000611a5e825190565b808452602093840193830160005b82811015611a91578151611a808782611a3d565b965050602082019150600101611a6c565b5093949350505050565b602080825281016118378184611a54565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152611a4e565b602080825281016106fe81611aac565b601c8152602081017f546869732061646472657373206973206e6f742061206275726e65720000000081529050611a4e565b602080825281016106fe81611aec565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015611b6c57611b6c611b44565b500390565b60008219821115611b8457611b84611b44565b500190565b6000600019821415611b9d57611b9d611b44565b5060010190565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b600281046001821680611be457607f821691505b6020821081141561137757611377611bba565b60288152602081017f45524332303a207472616e7366657220616d6f756e74206578636565647320618152676c6c6f77616e636560c01b602082015290505b60400190565b602080825281016106fe81611bf7565b601c8152602081017f546869732061646472657373206973206e6f742061206d696e7465720000000081529050611a4e565b602080825281016106fe81611c4c565b60208082527f54686973206164647265737320697320616c72656164792061206d696e7465729101908152611a4e565b602080825281016106fe81611c8e565b60258152602081017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77815264207a65726f60d81b60208201529050611c36565b602080825281016106fe81611cce565b60288152602081017f4465676973546f6b656e206578636565647320746865206361702028313030208152676d696c6c696f6e2960c01b60208201529050611c36565b602080825281016106fe81611d1e565b601d8152602081017f45524332305065726d69743a206578706972656420646561646c696e6500000081529050611a4e565b602080825281016106fe81611d71565b60c08101611dc182896118a4565b611dce6020830188611929565b611ddb6040830187611929565b611de860608301866118a4565b611df560808301856118a4565b611e0260a08301846118a4565b979650505050505050565b601e8152602081017f45524332305065726d69743a20696e76616c6964207369676e6174757265000081529050611a4e565b602080825281016106fe81611e0d565b634e487b7160e01b600052604160045260246000fd5b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529050611c36565b602080825281016106fe81611e65565b60208082527f54686973206164647265737320697320616c72656164792061206275726e65729101908152611a4e565b602080825281016106fe81611eb6565b60248152602081017f45524332303a20617070726f76652066726f6d20746865207a65726f206164648152637265737360e01b60208201529050611c36565b602080825281016106fe81611ef6565b60228152602081017f45524332303a20617070726f766520746f20746865207a65726f206164647265815261737360f01b60208201529050611c36565b602080825281016106fe81611f45565b60258152602081017f45524332303a207472616e736665722066726f6d20746865207a65726f206164815264647265737360d81b60208201529050611c36565b602080825281016106fe81611f92565b60238152602081017f45524332303a207472616e7366657220746f20746865207a65726f206164647281526265737360e81b60208201529050611c36565b602080825281016106fe81611fe2565b60268152602081017f45524332303a207472616e7366657220616d6f756e7420657863656564732062815265616c616e636560d01b60208201529050611c36565b602080825281016106fe81612030565b603a8152602081017f4f6e6c7920746865206164647265737320696e20746865206d696e746572206c81527f6973742063616e2063616c6c20746869732066756e6374696f6e00000000000060208201529050611c36565b602080825281016106fe81612081565b60a081016120f782886118a4565b61210460208301876118a4565b61211160408301866118a4565b61211e60608301856118a4565b61212b6080830184611929565b9695505050505050565b60218152602081017f45524332303a206275726e2066726f6d20746865207a65726f206164647265738152607360f81b60208201529050611c36565b602080825281016106fe81612135565b60228152602081017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e815261636560f01b60208201529050611c36565b602080825281016106fe81612181565b601f8152602081017f45524332303a206d696e7420746f20746865207a65726f20616464726573730081529050611a4e565b602080825281016106fe816121ce565b61190160f01b815260020161222581846118a4565b60200161223281836118a4565b60200192915050565b6080810161224982876118a4565b6122566020830186611940565b61226360408301856118a4565b61227060608301846118a4565b95945050505050565b634e487b7160e01b600052602160045260246000fd5b60188152602081017f45434453413a20696e76616c6964207369676e6174757265000000000000000081529050611a4e565b602080825281016106fe8161228f565b601f8152602081017f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081529050611a4e565b602080825281016106fe816122d1565b60228152602081017f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b60208201529050611c36565b602080825281016106fe81612313565b60228152602081017f45434453413a20696e76616c6964207369676e6174757265202776272076616c815261756560f01b60208201529050611c36565b602080825281016106fe8161236056fea26469706673582212202da8871f132e428565bb67e25394d9dcb2a435c7bb39cd3a1024a32110700c1e64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80637ecebe0011610104578063abd8e23d116100a2578063de0d611711610071578063de0d611714610409578063ec81b4831461041e578063f2fde38b14610430578063f44637ba1461044357600080fd5b8063abd8e23d14610397578063b4767398146103aa578063d505accf146103bd578063dd62ed3e146103d057600080fd5b8063983b2d56116100de578063983b2d561461033b578063a457c2d71461034e578063a9059cbb14610361578063aa271e1a1461037457600080fd5b80637ecebe001461030f5780638da5cb5b1461032257806395d89b411461033357600080fd5b8063313ce567116101715780634334614a1161014b5780634334614a146102a85780636858da9a146102cb57806370a08231146102de578063715018a61461030757600080fd5b8063313ce5671461027e5780633644e5151461028d578063395093511461029557600080fd5b806318160ddd116101ad57806318160ddd1461022757806323b872dd14610238578063279ad7ab1461024b5780633092afd51461026b57600080fd5b806302846858146101d457806306fdde03146101e9578063095ea7b314610207575b600080fd5b6101e76101e236600461179f565b610456565b005b6101f161065b565b6040516101fe9190611826565b60405180910390f35b61021a61021536600461184f565b6106ed565b6040516101fe9190611896565b6002545b6040516101fe91906118aa565b61021a6102463660046118b8565b610704565b61025e610259366004611908565b61076d565b6040516101fe9190611932565b6101e761027936600461179f565b610797565b60126040516101fe9190611949565b61022b610987565b61021a6102a336600461184f565b610996565b61021a6102b636600461179f565b600a6020526000908152604090205460ff1681565b6101e76102d936600461184f565b6109d2565b61022b6102ec36600461179f565b6001600160a01b031660009081526020819052604090205490565b6101e76109e0565b61022b61031d36600461179f565b610a25565b6006546001600160a01b031661025e565b6101f1610a43565b6101e761034936600461179f565b610a52565b61021a61035c36600461184f565b610ad0565b61021a61036f36600461184f565b610b2b565b61021a61038236600461179f565b60086020526000908152604090205460ff1681565b61025e6103a5366004611908565b610b38565b6101e76103b836600461184f565b610b48565b6101e76103cb36600461196b565b610b96565b61022b6103de366004611a0a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610411610c78565b6040516101fe9190611a9b565b61022b6a52b7d2dcc80cd2e400000081565b6101e761043e36600461179f565b610d44565b6101e761045136600461179f565b610dac565b336104696006546001600160a01b031690565b6001600160a01b0316146104985760405162461bcd60e51b815260040161048f90611adc565b60405180910390fd5b6001600160a01b03811660009081526008602052604090205460ff1615156001146104d55760405162461bcd60e51b815260040161048f90611b1e565b60095460005b818110156105fe57826001600160a01b03166009828154811061050057610500611b2e565b6000918252602090912001546001600160a01b031614156105ec57805b610528600184611b5a565b8110156105b357600961053c826001611b71565b8154811061054c5761054c611b2e565b600091825260209091200154600980546001600160a01b03909216918390811061057857610578611b2e565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055806105ab81611b89565b91505061051d565b5060098054806105c5576105c5611ba4565b600082815260209020810160001990810180546001600160a01b03191690550190556105fe565b806105f681611b89565b9150506104db565b506001600160a01b0382166000908152600a602052604090819020805460ff19169055517f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e9061064f908490611932565b60405180910390a15050565b60606003805461066a90611bd0565b80601f016020809104026020016040519081016040528092919081815260200182805461069690611bd0565b80156106e35780601f106106b8576101008083540402835291602001916106e3565b820191906000526020600020905b8154815290600101906020018083116106c657829003601f168201915b5050505050905090565b60006106fa338484610ebd565b5060015b92915050565b6000610711848484610f71565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156107555760405162461bcd60e51b815260040161048f90611c3c565b6107628533858403610ebd565b506001949350505050565b6007818154811061077d57600080fd5b6000918252602090912001546001600160a01b0316905081565b336107aa6006546001600160a01b031690565b6001600160a01b0316146107d05760405162461bcd60e51b815260040161048f90611adc565b6001600160a01b03811660009081526008602052604090205460ff16151560011461080d5760405162461bcd60e51b815260040161048f90611c7e565b60075460005b8181101561093657826001600160a01b03166007828154811061083857610838611b2e565b6000918252602090912001546001600160a01b0316141561092457805b610860600184611b5a565b8110156108eb576007610874826001611b71565b8154811061088457610884611b2e565b600091825260209091200154600780546001600160a01b0390921691839081106108b0576108b0611b2e565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055806108e381611b89565b915050610855565b5060078054806108fd576108fd611ba4565b600082815260209020810160001990810180546001600160a01b0319169055019055610936565b8061092e81611b89565b915050610813565b506001600160a01b03821660009081526008602052604090819020805460ff19169055517fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb666929061064f908490611932565b6000610991611086565b905090565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916106fa9185906109cd908690611b71565b610ebd565b6109dc8282611174565b5050565b336109f36006546001600160a01b031690565b6001600160a01b031614610a195760405162461bcd60e51b815260040161048f90611adc565b610a2360006111f8565b565b6001600160a01b0381166000908152600560205260408120546106fe565b60606004805461066a90611bd0565b33610a656006546001600160a01b031690565b6001600160a01b031614610a8b5760405162461bcd60e51b815260040161048f90611adc565b6001600160a01b03811660009081526008602052604090205460ff1615610ac45760405162461bcd60e51b815260040161048f90611cbe565b610acd8161124a565b50565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610b145760405162461bcd60e51b815260040161048f90611d0e565b610b213385858403610ebd565b5060019392505050565b60006106fa338484610f71565b6009818154811061077d57600080fd5b806a52b7d2dcc80cd2e400000081610b5f60025490565b610b699190611b71565b1115610b875760405162461bcd60e51b815260040161048f90611d61565b610b9183836112de565b505050565b83421115610bb65760405162461bcd60e51b815260040161048f90611da3565b60007f0000000000000000000000000000000000000000000000000000000000000000888888610be58c611355565b89604051602001610bfb96959493929190611db3565b6040516020818303038152906040528051906020012090506000610c1e8261137d565b90506000610c2e82878787611390565b9050896001600160a01b0316816001600160a01b031614610c615760405162461bcd60e51b815260040161048f90611e3f565b610c6c8a8a8a610ebd565b50505050505050505050565b60075460609060008167ffffffffffffffff811115610c9957610c99611e4f565b604051908082528060200260200182016040528015610cc2578160200160208202803683370190505b50905060005b82811015610d3d5760078181548110610ce357610ce3611b2e565b9060005260206000200160009054906101000a90046001600160a01b0316828281518110610d1357610d13611b2e565b6001600160a01b039092166020928302919091019091015280610d3581611b89565b915050610cc8565b5092915050565b33610d576006546001600160a01b031690565b6001600160a01b031614610d7d5760405162461bcd60e51b815260040161048f90611adc565b6001600160a01b038116610da35760405162461bcd60e51b815260040161048f90611ea6565b610acd816111f8565b33610dbf6006546001600160a01b031690565b6001600160a01b031614610de55760405162461bcd60e51b815260040161048f90611adc565b6001600160a01b0381166000908152600a602052604090205460ff1615610e1e5760405162461bcd60e51b815260040161048f90611ee6565b6009805460018082019092557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b0319166001600160a01b0384169081179091556000908152600a602052604090819020805460ff1916909217909155517f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b9456090610eb2908390611932565b60405180910390a150565b6001600160a01b038316610ee35760405162461bcd60e51b815260040161048f90611f35565b6001600160a01b038216610f095760405162461bcd60e51b815260040161048f90611f82565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610f649085906118aa565b60405180910390a3505050565b6001600160a01b038316610f975760405162461bcd60e51b815260040161048f90611fd2565b6001600160a01b038216610fbd5760405162461bcd60e51b815260040161048f90612020565b6001600160a01b03831660009081526020819052604090205481811015610ff65760405162461bcd60e51b815260040161048f90612071565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061102d908490611b71565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161107791906118aa565b60405180910390a35b50505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156110df57507f000000000000000000000000000000000000000000000000000000000000000046145b1561110957507f000000000000000000000000000000000000000000000000000000000000000090565b6109917f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006113b8565b336000818152600a602052604090205460ff1615156001146111a85760405162461bcd60e51b815260040161048f906120d9565b6111b283836113f2565b826001600160a01b03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040516111eb91906118aa565b60405180910390a2505050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6007805460018082019092557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b03841690811790915560009081526008602052604090819020805460ff1916909217909155517f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690610eb2908390611932565b3360008181526008602052604090205460ff1615156001146113125760405162461bcd60e51b815260040161048f906120d9565b61131c83836114c3565b826001600160a01b03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040516111eb91906118aa565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b60006106fe61138a611086565b83611577565b60008060006113a1878787876115aa565b915091506113ae8161168a565b5095945050505050565b600083838346306040516020016113d39594939291906120e9565b6040516020818303038152906040528051906020012090509392505050565b6001600160a01b0382166114185760405162461bcd60e51b815260040161048f90612171565b6001600160a01b038216600090815260208190526040902054818110156114515760405162461bcd60e51b815260040161048f906121be565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611480908490611b5a565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610f649086906118aa565b6001600160a01b0382166114e95760405162461bcd60e51b815260040161048f90612200565b80600260008282546114fb9190611b71565b90915550506001600160a01b03821660009081526020819052604081208054839290611528908490611b71565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061156b9085906118aa565b60405180910390a35050565b6000828260405160200161158c929190612210565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156115e15750600090506003611681565b8460ff16601b141580156115f957508460ff16601c14155b1561160a5750600090506004611681565b60006001878787876040516000815260200160405260405161162f949392919061223b565b6020604051602081039080840390855afa158015611651573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661167a57600060019250925050611681565b9150600090505b94509492505050565b600081600481111561169e5761169e612279565b14156116a75750565b60018160048111156116bb576116bb612279565b14156116d95760405162461bcd60e51b815260040161048f906122c1565b60028160048111156116ed576116ed612279565b141561170b5760405162461bcd60e51b815260040161048f90612303565b600381600481111561171f5761171f612279565b141561173d5760405162461bcd60e51b815260040161048f90612350565b600481600481111561175157611751612279565b1415610acd5760405162461bcd60e51b815260040161048f9061239d565b60006001600160a01b0382166106fe565b6117898161176f565b8114610acd57600080fd5b80356106fe81611780565b6000602082840312156117b4576117b4600080fd5b60006117c08484611794565b949350505050565b60005b838110156117e35781810151838201526020016117cb565b838111156110805750506000910152565b60006117fe825190565b8084526020840193506118158185602086016117c8565b601f01601f19169290920192915050565b6020808252810161183781846117f4565b9392505050565b80611789565b80356106fe8161183e565b6000806040838503121561186557611865600080fd5b60006118718585611794565b925050602061188285828601611844565b9150509250929050565b8015155b82525050565b602081016106fe828461188c565b80611890565b602081016106fe82846118a4565b6000806000606084860312156118d0576118d0600080fd5b60006118dc8686611794565b93505060206118ed86828701611794565b92505060406118fe86828701611844565b9150509250925092565b60006020828403121561191d5761191d600080fd5b60006117c08484611844565b6118908161176f565b602081016106fe8284611929565b60ff8116611890565b602081016106fe8284611940565b60ff8116611789565b80356106fe81611957565b600080600080600080600060e0888a03121561198957611989600080fd5b60006119958a8a611794565b97505060206119a68a828b01611794565b96505060406119b78a828b01611844565b95505060606119c88a828b01611844565b94505060806119d98a828b01611960565b93505060a06119ea8a828b01611844565b92505060c06119fb8a828b01611844565b91505092959891949750929550565b60008060408385031215611a2057611a20600080fd5b6000611a2c8585611794565b925050602061188285828601611794565b611a478282611929565b5060200190565b60200190565b6000611a5e825190565b808452602093840193830160005b82811015611a91578151611a808782611a3d565b965050602082019150600101611a6c565b5093949350505050565b602080825281016118378184611a54565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152611a4e565b602080825281016106fe81611aac565b601c8152602081017f546869732061646472657373206973206e6f742061206275726e65720000000081529050611a4e565b602080825281016106fe81611aec565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015611b6c57611b6c611b44565b500390565b60008219821115611b8457611b84611b44565b500190565b6000600019821415611b9d57611b9d611b44565b5060010190565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b600281046001821680611be457607f821691505b6020821081141561137757611377611bba565b60288152602081017f45524332303a207472616e7366657220616d6f756e74206578636565647320618152676c6c6f77616e636560c01b602082015290505b60400190565b602080825281016106fe81611bf7565b601c8152602081017f546869732061646472657373206973206e6f742061206d696e7465720000000081529050611a4e565b602080825281016106fe81611c4c565b60208082527f54686973206164647265737320697320616c72656164792061206d696e7465729101908152611a4e565b602080825281016106fe81611c8e565b60258152602081017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77815264207a65726f60d81b60208201529050611c36565b602080825281016106fe81611cce565b60288152602081017f4465676973546f6b656e206578636565647320746865206361702028313030208152676d696c6c696f6e2960c01b60208201529050611c36565b602080825281016106fe81611d1e565b601d8152602081017f45524332305065726d69743a206578706972656420646561646c696e6500000081529050611a4e565b602080825281016106fe81611d71565b60c08101611dc182896118a4565b611dce6020830188611929565b611ddb6040830187611929565b611de860608301866118a4565b611df560808301856118a4565b611e0260a08301846118a4565b979650505050505050565b601e8152602081017f45524332305065726d69743a20696e76616c6964207369676e6174757265000081529050611a4e565b602080825281016106fe81611e0d565b634e487b7160e01b600052604160045260246000fd5b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529050611c36565b602080825281016106fe81611e65565b60208082527f54686973206164647265737320697320616c72656164792061206275726e65729101908152611a4e565b602080825281016106fe81611eb6565b60248152602081017f45524332303a20617070726f76652066726f6d20746865207a65726f206164648152637265737360e01b60208201529050611c36565b602080825281016106fe81611ef6565b60228152602081017f45524332303a20617070726f766520746f20746865207a65726f206164647265815261737360f01b60208201529050611c36565b602080825281016106fe81611f45565b60258152602081017f45524332303a207472616e736665722066726f6d20746865207a65726f206164815264647265737360d81b60208201529050611c36565b602080825281016106fe81611f92565b60238152602081017f45524332303a207472616e7366657220746f20746865207a65726f206164647281526265737360e81b60208201529050611c36565b602080825281016106fe81611fe2565b60268152602081017f45524332303a207472616e7366657220616d6f756e7420657863656564732062815265616c616e636560d01b60208201529050611c36565b602080825281016106fe81612030565b603a8152602081017f4f6e6c7920746865206164647265737320696e20746865206d696e746572206c81527f6973742063616e2063616c6c20746869732066756e6374696f6e00000000000060208201529050611c36565b602080825281016106fe81612081565b60a081016120f782886118a4565b61210460208301876118a4565b61211160408301866118a4565b61211e60608301856118a4565b61212b6080830184611929565b9695505050505050565b60218152602081017f45524332303a206275726e2066726f6d20746865207a65726f206164647265738152607360f81b60208201529050611c36565b602080825281016106fe81612135565b60228152602081017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e815261636560f01b60208201529050611c36565b602080825281016106fe81612181565b601f8152602081017f45524332303a206d696e7420746f20746865207a65726f20616464726573730081529050611a4e565b602080825281016106fe816121ce565b61190160f01b815260020161222581846118a4565b60200161223281836118a4565b60200192915050565b6080810161224982876118a4565b6122566020830186611940565b61226360408301856118a4565b61227060608301846118a4565b95945050505050565b634e487b7160e01b600052602160045260246000fd5b60188152602081017f45434453413a20696e76616c6964207369676e6174757265000000000000000081529050611a4e565b602080825281016106fe8161228f565b601f8152602081017f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081529050611a4e565b602080825281016106fe816122d1565b60228152602081017f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b60208201529050611c36565b602080825281016106fe81612313565b60228152602081017f45434453413a20696e76616c6964207369676e6174757265202776272076616c815261756560f01b60208201529050611c36565b602080825281016106fe8161236056fea26469706673582212202da8871f132e428565bb67e25394d9dcb2a435c7bb39cd3a1024a32110700c1e64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "addBurner(address)": {
        "params": {
          "_newBurner": "Address of the new burner"
        }
      },
      "addMinter(address)": {
        "params": {
          "_newMinter": "Address of the new minter"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burnDegis(address,uint256)": {
        "params": {
          "_account": "Receiver's address",
          "_amount": "Amount to be burned"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "mintDegis(address,uint256)": {
        "params": {
          "_account": "Receiver's address",
          "_amount": "Amount to be minted"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "See {IERC20Permit-nonces}."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC20Permit-permit}."
      },
      "removeBurner(address)": {
        "params": {
          "_oldBurner": "Address of the minter to be removed"
        }
      },
      "removeMinter(address)": {
        "params": {
          "_oldMinter": "Address of the minter to be removed"
        }
      },
      "renounceOwnership()": {
        "details": "Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "newOwner": "Address of the new owner"
        }
      }
    },
    "title": "Degis Token",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBurner(address)": {
        "notice": "Add a new burner into the burnerList"
      },
      "addMinter(address)": {
        "notice": "Add a new minter into the minterList"
      },
      "burnDegis(address,uint256)": {
        "notice": "Burn degis tokens"
      },
      "mintDegis(address,uint256)": {
        "notice": "Mint degis tokens"
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "removeBurner(address)": {
        "notice": "Remove a minter from the minterList"
      },
      "removeMinter(address)": {
        "notice": "Remove a minter from the minterList"
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`)."
      }
    },
    "notice": "DegisToken inherits from ERC20 Permit which contains the basic ERC20 implementation.         DegisToken can use the permit function rather than approve + transferFrom.         DegisToken has an owner, a minterList and a burnerList.         When lauched on mainnet, the owner may be removed or tranferred to a multisig.         By default, the owner & the first minter will be the one that deploys the contract.         The minterList should contain FarmingPool and PurchaseIncentiveVault.         The burnerList should contain EmergencyPool.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2448,
        "contract": "contracts/tokens/DegisToken.sol:DegisToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2454,
        "contract": "contracts/tokens/DegisToken.sol:DegisToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2456,
        "contract": "contracts/tokens/DegisToken.sol:DegisToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2458,
        "contract": "contracts/tokens/DegisToken.sol:DegisToken",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2460,
        "contract": "contracts/tokens/DegisToken.sol:DegisToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 3104,
        "contract": "contracts/tokens/DegisToken.sol:DegisToken",
        "label": "_nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Counter)5196_storage)"
      },
      {
        "astId": 21796,
        "contract": "contracts/tokens/DegisToken.sol:DegisToken",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 21260,
        "contract": "contracts/tokens/DegisToken.sol:DegisToken",
        "label": "minterList",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 21264,
        "contract": "contracts/tokens/DegisToken.sol:DegisToken",
        "label": "isMinter",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 21267,
        "contract": "contracts/tokens/DegisToken.sol:DegisToken",
        "label": "burnerList",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 21271,
        "contract": "contracts/tokens/DegisToken.sol:DegisToken",
        "label": "isBurner",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)5196_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)5196_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)5196_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 5195,
            "contract": "contracts/tokens/DegisToken.sol:DegisToken",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}