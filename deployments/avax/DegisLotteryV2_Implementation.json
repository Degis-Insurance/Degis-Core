{
  "address": "0x8f675bf416B44941d3ddA63dFB535720e7FDfD16",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AdminTokenRecovery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        }
      ],
      "name": "LotteryClose",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "injectedAmount",
          "type": "uint256"
        }
      ],
      "name": "LotteryInjection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "countWinningTickets",
          "type": "uint256"
        }
      ],
      "name": "LotteryNumberDrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceTicketInDegis",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[4]",
          "name": "rewardsBreakdown",
          "type": "uint256[4]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "injectedAmount",
          "type": "uint256"
        }
      ],
      "name": "LotteryOpen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxNumber",
          "type": "uint256"
        }
      ],
      "name": "MaxNumberTicketsEachTimeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "randomGenerator",
          "type": "address"
        }
      ],
      "name": "NewRandomGenerator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRoundLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRoundLength",
          "type": "uint256"
        }
      ],
      "name": "RoundLengthChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        }
      ],
      "name": "TicketsClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPrice",
          "type": "uint256"
        }
      ],
      "name": "TicketsPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasuryChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISCOUNT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DegisToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TICKET_NUMBER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TREASURY_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TICKET_NUMBER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "_bracketCalculator",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "_numberTicketsPerLotteryId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "_reverseTicketNumber",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_userTicketIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_ticketNumbers",
          "type": "uint32[]"
        }
      ],
      "name": "buyTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_randomGeneratorAddress",
          "type": "address"
        }
      ],
      "name": "changeRandomGenerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "claimAllTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_ticketIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_brackets",
          "type": "uint32[]"
        }
      ],
      "name": "claimTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "closeLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentLotteryId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentTicketId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_autoInjection",
          "type": "bool"
        }
      ],
      "name": "drawFinalNumberAndMakeLotteryClaimable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_degis",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_randomGenerator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "injectFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lotteries",
      "outputs": [
        {
          "internalType": "enum DegisLotteryV2.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "treasuryFee",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "finalNumber",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstTicketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstTicketIdNextRound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountCollected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumberTicketsEachTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingInjectionNextLottery",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomGenerator",
      "outputs": [
        {
          "internalType": "contract IRandomNumberGenerator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverWrongTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardsBreakdown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxNumber",
          "type": "uint256"
        }
      ],
      "name": "setMaxNumberTicketsEachTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_length",
          "type": "uint256"
        }
      ],
      "name": "setRoundLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tickets",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "number",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endId",
          "type": "uint256"
        }
      ],
      "name": "viewAllLottery",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum DegisLotteryV2.Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "treasuryFee",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "endTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "finalNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "ticketPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256[4]",
              "name": "rewardsBreakdown",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256[4]",
              "name": "rewardPerTicketInBracket",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256[4]",
              "name": "countWinnersPerBracket",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256",
              "name": "firstTicketId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "firstTicketIdNextRound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountCollected",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct DegisLotteryV2.Lottery[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ticketIds",
          "type": "uint256[]"
        }
      ],
      "name": "viewNumbersPerTicketId",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "viewRewardPerTicketInBracket",
      "outputs": [
        {
          "internalType": "uint256[4]",
          "name": "",
          "type": "uint256[4]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "viewRewardsBreakdown",
      "outputs": [
        {
          "internalType": "uint256[4]",
          "name": "",
          "type": "uint256[4]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ticketId",
          "type": "uint256"
        }
      ],
      "name": "viewRewardsForTicketId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startRound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endRound",
          "type": "uint256"
        }
      ],
      "name": "viewUserRewards",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "userRewards",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "viewWalletTicketIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "viewWinnerAmount",
      "outputs": [
        {
          "internalType": "uint256[4]",
          "name": "",
          "type": "uint256[4]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x011791f9a86da7bede35ffd254bdc014ca03c8ae23edc03bc828493ef618e74c",
  "receipt": {
    "to": null,
    "from": "0xeB496257B64Cc2D39c291B209F465f3cfADE0873",
    "contractAddress": "0x8f675bf416B44941d3ddA63dFB535720e7FDfD16",
    "transactionIndex": 5,
    "gasUsed": "3611495",
    "logsBloom": "0x
    "blockHash": "0xe0a86e6d63147cfeb3d80de3d9ad5f307bc40b0070294071172085b37533c0af",
    "transactionHash": "0x011791f9a86da7bede35ffd254bdc014ca03c8ae23edc03bc828493ef618e74c",
    "logs": [],
    "blockNumber": 17256505,
    "cumulativeGasUsed": "4659111",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a9d0a8dbbc90ef056e46c7cb80c61b46",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"LotteryClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"injectedAmount\",\"type\":\"uint256\"}],\"name\":\"LotteryInjection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"countWinningTickets\",\"type\":\"uint256\"}],\"name\":\"LotteryNumberDrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceTicketInDegis\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"rewardsBreakdown\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"injectedAmount\",\"type\":\"uint256\"}],\"name\":\"LotteryOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxNumber\",\"type\":\"uint256\"}],\"name\":\"MaxNumberTicketsEachTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"randomGenerator\",\"type\":\"address\"}],\"name\":\"NewRandomGenerator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRoundLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoundLength\",\"type\":\"uint256\"}],\"name\":\"RoundLengthChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"TicketsClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"}],\"name\":\"TicketsPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISCOUNT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DegisToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TICKET_NUMBER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TREASURY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TICKET_NUMBER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"_bracketCalculator\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"_numberTicketsPerLotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"_reverseTicketNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userTicketIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_ticketNumbers\",\"type\":\"uint32[]\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_randomGeneratorAddress\",\"type\":\"address\"}],\"name\":\"changeRandomGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"claimAllTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_ticketIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_brackets\",\"type\":\"uint32[]\"}],\"name\":\"claimTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"closeLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTicketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_autoInjection\",\"type\":\"bool\"}],\"name\":\"drawFinalNumberAndMakeLotteryClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_degis\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomGenerator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"injectFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteries\",\"outputs\":[{\"internalType\":\"enum DegisLotteryV2.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"treasuryFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstTicketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstTicketIdNextRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberTicketsEachTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingInjectionNextLottery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomGenerator\",\"outputs\":[{\"internalType\":\"contract IRandomNumberGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsBreakdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxNumber\",\"type\":\"uint256\"}],\"name\":\"setMaxNumberTicketsEachTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"setRoundLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"number\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endId\",\"type\":\"uint256\"}],\"name\":\"viewAllLottery\",\"outputs\":[{\"components\":[{\"internalType\":\"enum DegisLotteryV2.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"treasuryFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"rewardsBreakdown\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"rewardPerTicketInBracket\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"countWinnersPerBracket\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"firstTicketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstTicketIdNextRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct DegisLotteryV2.Lottery[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ticketIds\",\"type\":\"uint256[]\"}],\"name\":\"viewNumbersPerTicketId\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"viewRewardPerTicketInBracket\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"viewRewardsBreakdown\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketId\",\"type\":\"uint256\"}],\"name\":\"viewRewardsForTicketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endRound\",\"type\":\"uint256\"}],\"name\":\"viewUserRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"userRewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"viewWalletTicketIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"viewWinnerAmount\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This lottery uses DEG as tickets and DEG as rewards also      Users can pay 10 DEG to buy one ticket and choose four digits for each ticket      After the lottery was closed, it will draw a final random number through Chainlink VRF      Users get rewards according to the how many numbers they matched with the final number      Reward distribution:      80% of each round prize pool will be distributed to the winners (breakdowns for different levels)      20% of each round prize pool will be rolled to next round (except for treasury fee)\",\"kind\":\"dev\",\"methods\":{\"_reverseTicketNumber(uint256)\":{\"params\":{\"_number\":\"Input ticket number\"},\"returns\":{\"_0\":\"reversedNumber Reversed number + 10000\"}},\"buyTickets(uint32[])\":{\"details\":\"Need to transfer the 4-digit number to a 5-digit number to be used here (+10000)      Can not be called by a smart contract      Can only purchase in the current round      E.g. You are selecting the number of 1-2-3-4 (lowest to highest)           You will need to pass a number \\\"14321\\\"\",\"params\":{\"_ticketNumbers\":\"Array of ticket numbers between 10,000 and 19,999\"}},\"changeRandomGenerator(address)\":{\"details\":\"The calls to functions are used to verify the new generator implements them properly.      It is necessary to wait for the VRF response before starting a round.\",\"params\":{\"_randomGeneratorAddress\":\"address of the random generator\"}},\"claimAllTickets(uint256)\":{\"details\":\"Callable by users only, not contract      Gas cost may be oversized, recommended to get brackets offchain first      Get brackets offchain and call function \\\"claimTickets\\\"\",\"params\":{\"_lotteryId\":\"Lottery id\"}},\"claimTickets(uint256,uint256[],uint32[])\":{\"details\":\"Callable by users only, not contract\",\"params\":{\"_brackets\":\"Bracket / prize level of each ticket\",\"_lotteryId\":\"Lottery id\",\"_ticketIds\":\"Array of ticket ids\"}},\"closeLottery(uint256)\":{\"params\":{\"_lotteryId\":\"Lottery round\"}},\"drawFinalNumberAndMakeLotteryClaimable(uint256,bool)\":{\"params\":{\"_autoInjection\":\"Auto inject funds into next lottery\",\"_lotteryId\":\"Lottery round\"}},\"initialize(address,address)\":{\"details\":\"RandomNumberGenerator must be deployed prior to this contract\",\"params\":{\"_degis\":\"Address of DEG\",\"_randomGenerator\":\"Address of the RandomGenerator contract used to work with ChainLink VRF\"}},\"injectFunds(uint256)\":{\"details\":\"Those DEG transferred to this contract but not by this function      will not be counted for prize pools\",\"params\":{\"_amount\":\"DEG amount to inject\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverWrongTokens(address,uint256)\":{\"params\":{\"_tokenAddress\":\"Address of the token to withdraw\",\"_tokenAmount\":\"Token amount to withdraw\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMaxNumberTicketsEachTime(uint256)\":{\"params\":{\"_maxNumber\":\"Max number each time\"}},\"setRoundLength(uint256)\":{\"params\":{\"_length\":\"New round length\"}},\"setTreasury(address)\":{\"params\":{\"_treasury\":\"Treasury address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"viewAllLottery(uint256,uint256)\":{\"params\":{\"_endId\":\"End lottery id\",\"_startId\":\"Start lottery id\"},\"returns\":{\"_0\":\"allLottery Array of lottery information\"}},\"viewNumbersPerTicketId(uint256[])\":{\"params\":{\"_ticketIds\":\"Array of ticketId\"},\"returns\":{\"_0\":\"ticketNumbers Array of ticket numbers\"}},\"viewRewardPerTicketInBracket(uint256)\":{\"returns\":{\"_0\":\"rewardPerTicketInBracket  Reward per ticket in a given round\"}},\"viewRewardsForTicketId(uint256,uint256)\":{\"details\":\"This function will help to find the highest prize bracket      But this computation is encouraged to be done off-chain      Better to get bracket first and then call \\\"_calculateRewardsForTicketId()\\\"\",\"params\":{\"_lotteryId\":\"Lottery round\",\"_ticketId\":\"Ticket id\"},\"returns\":{\"_0\":\"reward Ticket reward\"}},\"viewUserRewards(address,uint256,uint256)\":{\"params\":{\"_endRound\":\"End lottery id\",\"_startRound\":\"Start lottery id\",\"_user\":\"User address\"},\"returns\":{\"userRewards\":\"Array of user rewards (round as index)\"}},\"viewWalletTicketIds(address,uint256)\":{\"params\":{\"_lotteryId\":\"Lottery id to check\",\"_wallet\":\"Address to check owned tickets\"},\"returns\":{\"_0\":\"ticketIds Ticket ids this user has in this round\"}},\"viewWinnerAmount(uint256)\":{\"returns\":{\"_0\":\"countWinnersPerBracket Array of winner ticket amount for each bracket\"}}},\"title\":\"DegisLotteryV2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_reverseTicketNumber(uint256)\":{\"notice\":\"Reverse the ticket number         E.g. User want to buy \\\"1234\\\"              The input number will be 11234              The reversed output will be 14321\"},\"buyTickets(uint32[])\":{\"notice\":\"Buy tickets for the current lottery round\"},\"changeRandomGenerator(address)\":{\"notice\":\"Change the random generator contract address\"},\"claimAllTickets(uint256)\":{\"notice\":\"Claim all winning tickets for a lottery round\"},\"claimTickets(uint256,uint256[],uint32[])\":{\"notice\":\"Claim winning tickets\"},\"closeLottery(uint256)\":{\"notice\":\"Close a lottery\"},\"drawFinalNumberAndMakeLotteryClaimable(uint256,bool)\":{\"notice\":\"Draw the final number, calculate reward in Degis for each group, and make this lottery claimable (need to wait for the random generator)\"},\"initialize(address,address)\":{\"notice\":\"Initialize function\"},\"injectFunds(uint256)\":{\"notice\":\"Inject funds\"},\"recoverWrongTokens(address,uint256)\":{\"notice\":\"Recover wrong tokens sent to the contract, only by the owner          All tokens except Degis are wrong tokens\"},\"setMaxNumberTicketsEachTime(uint256)\":{\"notice\":\"Set max number can buy/claim each time\"},\"setRoundLength(uint256)\":{\"notice\":\"Set round length\"},\"setTreasury(address)\":{\"notice\":\"Set treasury wallet address\"},\"startLottery()\":{\"notice\":\"Start a new lottery round\"},\"viewAllLottery(uint256,uint256)\":{\"notice\":\"View lottery information\"},\"viewNumbersPerTicketId(uint256[])\":{\"notice\":\"View ticker numbers for an array of ticket ids\"},\"viewRewardPerTicketInBracket(uint256)\":{\"notice\":\"View reward per ticket in a given round\"},\"viewRewardsBreakdown(uint256)\":{\"notice\":\"View rewards breakdown for a given lottery round\"},\"viewRewardsForTicketId(uint256,uint256)\":{\"notice\":\"View rewards for a given ticket in a given lottery round\"},\"viewUserRewards(address,uint256,uint256)\":{\"notice\":\"View user rewards between rounds\"},\"viewWalletTicketIds(address,uint256)\":{\"notice\":\"Get a user's ticekts in a given lottery round\"},\"viewWinnerAmount(uint256)\":{\"notice\":\"View winner ticket amount for a given lottery round, for each bracket\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lucky-box/DegisLotteryV2.sol\":\"DegisLotteryV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"contracts/lucky-box/DegisLotteryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./interfaces/IRandomNumberGenerator.sol\\\";\\r\\nimport \\\"./MathLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title DegisLotteryV2\\r\\n *\\r\\n * @dev This lottery uses DEG as tickets and DEG as rewards also\\r\\n *      Users can pay 10 DEG to buy one ticket and choose four digits for each ticket\\r\\n *      After the lottery was closed, it will draw a final random number through Chainlink VRF\\r\\n *      Users get rewards according to the how many numbers they matched with the final number\\r\\n *\\r\\n *      Reward distribution:\\r\\n *      80% of each round prize pool will be distributed to the winners (breakdowns for different levels)\\r\\n *      20% of each round prize pool will be rolled to next round (except for treasury fee)\\r\\n *\\r\\n */\\r\\n\\r\\ncontract DegisLotteryV2 is ReentrancyGuardUpgradeable, OwnableUpgradeable {\\r\\n    using MathLib for uint256;\\r\\n    using MathLib for int128;\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************* Constants **************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    // Treasury fee\\r\\n    uint256 public constant MAX_TREASURY_FEE = 2000; // 20%\\r\\n\\r\\n    // Ticket numbers\\r\\n    uint32 public constant MIN_TICKET_NUMBER = 10000;\\r\\n    uint32 public constant MAX_TICKET_NUMBER = 19999;\\r\\n\\r\\n    // Default ticket price\\r\\n    uint256 public constant DEFAULT_PRICE = 10 ether;\\r\\n\\r\\n    // 98% for each extra ticket\\r\\n    uint256 public constant DISCOUNT_DIVISOR = 98;\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************* Variables **************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    IERC20 public DegisToken;\\r\\n    IRandomNumberGenerator public randomGenerator;\\r\\n\\r\\n    // Address to receive treasury fee\\r\\n    address public treasury;\\r\\n\\r\\n    // Current lottery round\\r\\n    uint256 public currentLotteryId;\\r\\n\\r\\n    // Current ticket id (start from 1)\\r\\n    uint256 public currentTicketId;\\r\\n\\r\\n    // Max amount of tickets can be bought each time\\r\\n    uint256 public maxNumberTicketsEachTime;\\r\\n\\r\\n    // Pending reward to be injected to next round\\r\\n    uint256 public pendingInjectionNextLottery;\\r\\n\\r\\n    enum Status {\\r\\n        Pending, // Default status\\r\\n        Open, // Lottery is open, before closing\\r\\n        Close, // Lottery is closed, after closing before drawing final result\\r\\n        Claimable // Lottery is claimable, after drawing final result\\r\\n    }\\r\\n\\r\\n    struct Lottery {\\r\\n        // Slot 1\\r\\n        Status status; // uint8\\r\\n        uint32 treasuryFee; // 500: 5% // 200: 2% // 50: 0.5%\\r\\n        uint32 startTime;\\r\\n        uint32 endTime;\\r\\n        uint32 finalNumber;\\r\\n        // Slot 2,3...\\r\\n        uint256 ticketPrice; // 10\\r\\n        uint256[4] rewardsBreakdown; // 0: 1 matching number // 3: 4 matching numbers\\r\\n        uint256[4] rewardPerTicketInBracket;\\r\\n        uint256[4] countWinnersPerBracket;\\r\\n        uint256 firstTicketId;\\r\\n        uint256 firstTicketIdNextRound;\\r\\n        uint256 amountCollected; // Total prize pool\\r\\n        uint256 pendingRewards; // Rewards that are not yet claimed\\r\\n    }\\r\\n    // lotteryId => Lottery Info\\r\\n    mapping(uint256 => Lottery) public lotteries;\\r\\n\\r\\n    struct Ticket {\\r\\n        uint32 number;\\r\\n        address owner;\\r\\n    }\\r\\n    // Ticket Id => Ticket Info\\r\\n    mapping(uint256 => Ticket) public tickets;\\r\\n\\r\\n    // lotteryId => (Lucky Number => Total Amount of this number)\\r\\n    // e.g. In lottery round 3, 10 Tickets are sold with \\\"11234\\\": 3 => (11234 => 10)\\r\\n    mapping(uint256 => mapping(uint32 => uint256))\\r\\n        public _numberTicketsPerLotteryId;\\r\\n\\r\\n    // Keep track of user ticket ids for a given lotteryId\\r\\n    // User Address => Lottery Round => Tickets\\r\\n    mapping(address => mapping(uint256 => uint256[])) public _userTicketIds;\\r\\n\\r\\n    // Calculator for each bracket\\r\\n    mapping(uint32 => uint32) public _bracketCalculator;\\r\\n\\r\\n    // User address => lotteryId => Amount of tickets has claimed\\r\\n    mapping(address => mapping(uint256 => uint256)) public userClaimed;\\r\\n\\r\\n    // Default config parameters\\r\\n    // With global parameters, lottery operations can be set as auto tasks\\r\\n    uint256 public treasuryFee;\\r\\n    uint256[4] public rewardsBreakdown;\\r\\n    uint256 public roundLength;\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // *************************************** Events ***************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    event MaxNumberTicketsEachTimeChanged(\\r\\n        uint256 oldMaxNumber,\\r\\n        uint256 newMaxNumber\\r\\n    );\\r\\n    event RoundLengthChanged(uint256 oldRoundLength, uint256 newRoundLength);\\r\\n    event TreasuryChanged(address oldTreasury, address newTreasury);\\r\\n    event AdminTokenRecovery(address token, uint256 amount);\\r\\n    event LotteryClose(uint256 indexed lotteryId);\\r\\n    event LotteryInjection(uint256 indexed lotteryId, uint256 injectedAmount);\\r\\n    event LotteryOpen(\\r\\n        uint256 indexed lotteryId,\\r\\n        uint256 startTime,\\r\\n        uint256 roundLength,\\r\\n        uint256 priceTicketInDegis,\\r\\n        uint256[4] rewardsBreakdown,\\r\\n        uint256 injectedAmount\\r\\n    );\\r\\n    event LotteryNumberDrawn(\\r\\n        uint256 indexed lotteryId,\\r\\n        uint256 finalNumber,\\r\\n        uint256 countWinningTickets\\r\\n    );\\r\\n\\r\\n    event NewRandomGenerator(address indexed randomGenerator);\\r\\n    event TicketsPurchased(\\r\\n        address indexed buyer,\\r\\n        uint256 indexed lotteryId,\\r\\n        uint256 number,\\r\\n        uint256 totalPrice\\r\\n    );\\r\\n    event TicketsClaim(\\r\\n        address indexed claimer,\\r\\n        uint256 amount,\\r\\n        uint256 indexed lotteryId\\r\\n    );\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************* Constructor ************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize function\\r\\n     *\\r\\n     * @dev RandomNumberGenerator must be deployed prior to this contract\\r\\n     *\\r\\n     * @param _degis           Address of DEG\\r\\n     * @param _randomGenerator Address of the RandomGenerator contract used to work with ChainLink VRF\\r\\n     */\\r\\n    function initialize(address _degis, address _randomGenerator)\\r\\n        public\\r\\n        initializer\\r\\n    {\\r\\n        __Ownable_init();\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n\\r\\n        DegisToken = IERC20(_degis);\\r\\n        randomGenerator = IRandomNumberGenerator(_randomGenerator);\\r\\n\\r\\n        // Set default ticket amount each time\\r\\n        maxNumberTicketsEachTime = 10;\\r\\n\\r\\n        // Set default calculator\\r\\n        _bracketCalculator[0] = 1;\\r\\n        _bracketCalculator[1] = 11;\\r\\n        _bracketCalculator[2] = 111;\\r\\n        _bracketCalculator[3] = 1111;\\r\\n\\r\\n        // Ticket id start from 1\\r\\n        currentTicketId = 1;\\r\\n\\r\\n        // Set default rewards breakdown\\r\\n        rewardsBreakdown[0] = 1000;\\r\\n        rewardsBreakdown[1] = 2000;\\r\\n        rewardsBreakdown[2] = 3000;\\r\\n        rewardsBreakdown[3] = 4000;\\r\\n\\r\\n        // Default treasury fee\\r\\n        // treasuryFee = 500;\\r\\n\\r\\n        // Default round length\\r\\n        roundLength = 3 days;\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************** Modifiers *************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Only EOA accounts to participate\\r\\n     */\\r\\n    modifier notContract() {\\r\\n        require(!_isContract(msg.sender), \\\"Contract not allowed\\\");\\r\\n        require(msg.sender == tx.origin, \\\"Proxy contract not allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************ View Functions ************************************ //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Get a user's ticekts in a given lottery round\\r\\n     *\\r\\n     * @param _wallet    Address to check owned tickets\\r\\n     * @param _lotteryId Lottery id to check\\r\\n     *\\r\\n     * @return ticketIds Ticket ids this user has in this round\\r\\n     */\\r\\n    function viewWalletTicketIds(address _wallet, uint256 _lotteryId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256[] memory ticketIds = _userTicketIds[_wallet][_lotteryId];\\r\\n        return ticketIds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View lottery information\\r\\n     *\\r\\n     * @param _startId Start lottery id\\r\\n     * @param _endId   End lottery id\\r\\n     *\\r\\n     * @return allLottery Array of lottery information\\r\\n     */\\r\\n    function viewAllLottery(uint256 _startId, uint256 _endId)\\r\\n        external\\r\\n        view\\r\\n        returns (Lottery[] memory)\\r\\n    {\\r\\n        Lottery[] memory allLottery = new Lottery[](_endId - _startId + 1);\\r\\n        for (uint256 i = _startId; i <= _endId; i++) {\\r\\n            allLottery[i - 1] = lotteries[i];\\r\\n        }\\r\\n        return allLottery;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View ticker numbers for an array of ticket ids\\r\\n     *\\r\\n     * @param _ticketIds Array of ticketId\\r\\n     *\\r\\n     * @return ticketNumbers Array of ticket numbers\\r\\n     */\\r\\n    function viewNumbersPerTicketId(uint256[] calldata _ticketIds)\\r\\n        external\\r\\n        view\\r\\n        returns (uint32[] memory)\\r\\n    {\\r\\n        uint256 length = _ticketIds.length;\\r\\n        uint32[] memory ticketNumbers = new uint32[](length);\\r\\n\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            ticketNumbers[i] = tickets[_ticketIds[i]].number;\\r\\n        }\\r\\n\\r\\n        return (ticketNumbers);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View rewards for a given ticket in a given lottery round\\r\\n     *\\r\\n     * @dev This function will help to find the highest prize bracket\\r\\n     *      But this computation is encouraged to be done off-chain\\r\\n     *      Better to get bracket first and then call \\\"_calculateRewardsForTicketId()\\\"\\r\\n     *\\r\\n     * @param _lotteryId Lottery round\\r\\n     * @param _ticketId  Ticket id\\r\\n     *\\r\\n     * @return reward Ticket reward\\r\\n     */\\r\\n    function viewRewardsForTicketId(uint256 _lotteryId, uint256 _ticketId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Check lottery is in claimable status\\r\\n        if (lotteries[_lotteryId].status != Status.Claimable) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // Check ticketId is within range\\r\\n        if (\\r\\n            lotteries[_lotteryId].firstTicketIdNextRound < _ticketId ||\\r\\n            lotteries[_lotteryId].firstTicketId > _ticketId\\r\\n        ) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // Only calculate prize for the highest bracket\\r\\n        uint32 highestBracket = _getBracket(_lotteryId, _ticketId);\\r\\n\\r\\n        return\\r\\n            _calculateRewardsForTicketId(_lotteryId, _ticketId, highestBracket);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View user rewards between rounds\\r\\n     *\\r\\n     * @param _user       User address\\r\\n     * @param _startRound Start lottery id\\r\\n     * @param _endRound   End lottery id\\r\\n     *\\r\\n     * @return userRewards Array of user rewards (round as index)\\r\\n     */\\r\\n    function viewUserRewards(\\r\\n        address _user,\\r\\n        uint256 _startRound,\\r\\n        uint256 _endRound\\r\\n    ) external view returns (uint256[] memory userRewards) {\\r\\n        userRewards = new uint256[](_endRound - _startRound + 1);\\r\\n\\r\\n        for (uint256 i = _startRound; i <= _endRound; ) {\\r\\n            uint256 ticketAmount = _userTicketIds[_user][i].length;\\r\\n\\r\\n            if (ticketAmount > 0) {\\r\\n                uint256[] memory ticketIds = _userTicketIds[_user][i];\\r\\n\\r\\n                for (uint256 j; j < ticketAmount; ) {\\r\\n                    uint256 reward = viewRewardsForTicketId(i, ticketIds[j]);\\r\\n                    userRewards[i - 1] += reward;\\r\\n\\r\\n                    unchecked {\\r\\n                        ++j;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View reward per ticket in a given round\\r\\n     *\\r\\n     * @return rewardPerTicketInBracket  Reward per ticket in a given round\\r\\n     */\\r\\n    function viewRewardPerTicketInBracket(uint256 _lotteryId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[4] memory)\\r\\n    {\\r\\n        return lotteries[_lotteryId].rewardPerTicketInBracket;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View winner ticket amount for a given lottery round, for each bracket\\r\\n     *\\r\\n     * @return countWinnersPerBracket Array of winner ticket amount for each bracket\\r\\n     */\\r\\n    function viewWinnerAmount(uint256 _lotteryId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[4] memory)\\r\\n    {\\r\\n        return lotteries[_lotteryId].countWinnersPerBracket;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View rewards breakdown for a given lottery round\\r\\n     */\\r\\n    function viewRewardsBreakdown(uint256 _lotteryId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[4] memory)\\r\\n    {\\r\\n        return lotteries[_lotteryId].rewardsBreakdown;\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************ Set Functions ************************************* //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Set max number can buy/claim each time\\r\\n     *\\r\\n     * @param _maxNumber Max number each time\\r\\n     */\\r\\n    function setMaxNumberTicketsEachTime(uint256 _maxNumber)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        emit MaxNumberTicketsEachTimeChanged(\\r\\n            maxNumberTicketsEachTime,\\r\\n            _maxNumber\\r\\n        );\\r\\n        maxNumberTicketsEachTime = _maxNumber;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set treasury wallet address\\r\\n     *\\r\\n     * @param _treasury Treasury address\\r\\n     */\\r\\n    function setTreasury(address _treasury) external onlyOwner {\\r\\n        emit TreasuryChanged(treasury, _treasury);\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set round length\\r\\n     *\\r\\n     * @param _length New round length\\r\\n     */\\r\\n    function setRoundLength(uint256 _length) external onlyOwner {\\r\\n        require(_length > 0, \\\"Zero round length\\\");\\r\\n        emit RoundLengthChanged(roundLength, _length);\\r\\n        roundLength = _length;\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************ Main Functions ************************************ //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Buy tickets for the current lottery round\\r\\n     *\\r\\n     * @dev Need to transfer the 4-digit number to a 5-digit number to be used here (+10000)\\r\\n     *      Can not be called by a smart contract\\r\\n     *      Can only purchase in the current round\\r\\n     *      E.g. You are selecting the number of 1-2-3-4 (lowest to highest)\\r\\n     *           You will need to pass a number \\\"14321\\\"\\r\\n     *\\r\\n     * @param _ticketNumbers Array of ticket numbers between 10,000 and 19,999\\r\\n     */\\r\\n    function buyTickets(uint32[] calldata _ticketNumbers)\\r\\n        external\\r\\n        notContract\\r\\n        nonReentrant\\r\\n    {\\r\\n        uint256 amountToBuy = _ticketNumbers.length;\\r\\n        require(amountToBuy > 0, \\\"No tickets are being bought\\\");\\r\\n        require(amountToBuy <= maxNumberTicketsEachTime, \\\"Too many tickets\\\");\\r\\n\\r\\n        // Gas savings\\r\\n        Lottery storage lottery = lotteries[currentLotteryId];\\r\\n        uint256 currentRound = currentLotteryId;\\r\\n        require(lottery.status == Status.Open, \\\"Round not open\\\");\\r\\n\\r\\n        // Calculate the number of DEG to pay\\r\\n        uint256 degToPay = _calculateTotalPrice(\\r\\n            lottery.ticketPrice,\\r\\n            amountToBuy\\r\\n        );\\r\\n\\r\\n        // Transfer degis tokens to this contract\\r\\n        DegisToken.transferFrom(msg.sender, address(this), degToPay);\\r\\n\\r\\n        // Increase prize pool amount\\r\\n        lotteries[currentRound].amountCollected += degToPay;\\r\\n\\r\\n        // Record the tickets bought\\r\\n        for (uint256 i; i < amountToBuy; ) {\\r\\n            uint32 currentTicketNumber = _ticketNumbers[i];\\r\\n\\r\\n            require(\\r\\n                (currentTicketNumber >= MIN_TICKET_NUMBER) &&\\r\\n                    (currentTicketNumber <= MAX_TICKET_NUMBER),\\r\\n                \\\"Ticket number is outside range\\\"\\r\\n            );\\r\\n\\r\\n            // Used when drawing the prize\\r\\n            ++_numberTicketsPerLotteryId[currentRound][\\r\\n                1 + (currentTicketNumber % 10)\\r\\n            ];\\r\\n            ++_numberTicketsPerLotteryId[currentRound][\\r\\n                11 + (currentTicketNumber % 100)\\r\\n            ];\\r\\n            ++_numberTicketsPerLotteryId[currentRound][\\r\\n                111 + (currentTicketNumber % 1000)\\r\\n            ];\\r\\n            ++_numberTicketsPerLotteryId[currentRound][\\r\\n                1111 + (currentTicketNumber % 10000)\\r\\n            ];\\r\\n\\r\\n            // Gas savings\\r\\n            uint256 ticketId = currentTicketId;\\r\\n\\r\\n            // Store this ticket number to the user's record\\r\\n            _userTicketIds[msg.sender][currentRound].push(ticketId);\\r\\n\\r\\n            // Store this ticket number to global ticket state\\r\\n            Ticket storage newTicket = tickets[ticketId];\\r\\n            newTicket.number = currentTicketNumber;\\r\\n            newTicket.owner = msg.sender;\\r\\n\\r\\n            // Increase total lottery ticket number\\r\\n            unchecked {\\r\\n                ++currentTicketId;\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit TicketsPurchased(msg.sender, currentRound, amountToBuy, degToPay);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim winning tickets\\r\\n     *\\r\\n     * @dev Callable by users only, not contract\\r\\n     *\\r\\n     * @param _lotteryId Lottery id\\r\\n     * @param _ticketIds Array of ticket ids\\r\\n     * @param _brackets  Bracket / prize level of each ticket\\r\\n     */\\r\\n    function claimTickets(\\r\\n        uint256 _lotteryId,\\r\\n        uint256[] calldata _ticketIds,\\r\\n        uint32[] calldata _brackets\\r\\n    ) external notContract nonReentrant {\\r\\n        require(\\r\\n            lotteries[_lotteryId].status == Status.Claimable,\\r\\n            \\\"Round not claimable\\\"\\r\\n        );\\r\\n\\r\\n        uint256 ticketAmount = _ticketIds.length;\\r\\n        require(ticketAmount == _brackets.length, \\\"Not same length\\\");\\r\\n        require(ticketAmount > 0, \\\"No tickets\\\");\\r\\n        require(\\r\\n            ticketAmount <= maxNumberTicketsEachTime,\\r\\n            \\\"Too many tickets to claim\\\"\\r\\n        );\\r\\n\\r\\n        uint256 rewardToTransfer;\\r\\n\\r\\n        Lottery storage lottery = lotteries[_lotteryId];\\r\\n\\r\\n        for (uint256 i; i < ticketAmount; ) {\\r\\n            uint256 thisTicketId = _ticketIds[i];\\r\\n\\r\\n            // Check the ticket id is inside the range\\r\\n            require(\\r\\n                thisTicketId >= lottery.firstTicketId,\\r\\n                \\\"Ticket id too small\\\"\\r\\n            );\\r\\n            require(\\r\\n                thisTicketId < lottery.firstTicketIdNextRound,\\r\\n                \\\"Ticket id too large\\\"\\r\\n            );\\r\\n\\r\\n            // Check the ticket is owned by the user and reset this ticket\\r\\n            // If the owner is zero address, then it has been claimed\\r\\n            require(\\r\\n                msg.sender == tickets[thisTicketId].owner,\\r\\n                \\\"Not the ticket owner or already claimed\\\"\\r\\n            );\\r\\n            tickets[thisTicketId].owner = address(0);\\r\\n\\r\\n            // Can not pass tickets with no prize\\r\\n            uint256 rewardForTicketId = _calculateRewardsForTicketId(\\r\\n                _lotteryId,\\r\\n                thisTicketId,\\r\\n                _brackets[i]\\r\\n            );\\r\\n            // require(rewardForTicketId > 0, \\\"No prize\\\");\\r\\n\\r\\n            // If not claiming the highest prize, check if the user has a higher prize\\r\\n            if (_brackets[i] < 3) {\\r\\n                require(\\r\\n                    _calculateRewardsForTicketId(\\r\\n                        _lotteryId,\\r\\n                        thisTicketId,\\r\\n                        _brackets[i] + 1\\r\\n                    ) == 0,\\r\\n                    \\\"Only highest prize\\\"\\r\\n                );\\r\\n            }\\r\\n\\r\\n            // Increase the reward to transfer\\r\\n            rewardToTransfer += rewardForTicketId;\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Record the amount has claimed in this round\\r\\n        userClaimed[msg.sender][_lotteryId] += ticketAmount;\\r\\n\\r\\n        // Transfer the prize to the user\\r\\n        if (rewardToTransfer > 0) {\\r\\n            lotteries[_lotteryId].pendingRewards -= rewardToTransfer;\\r\\n\\r\\n            DegisToken.transfer(msg.sender, rewardToTransfer);\\r\\n        }\\r\\n\\r\\n        emit TicketsClaim(msg.sender, rewardToTransfer, _lotteryId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all winning tickets for a lottery round\\r\\n     *\\r\\n     * @dev Callable by users only, not contract\\r\\n     *      Gas cost may be oversized, recommended to get brackets offchain first\\r\\n     *      Get brackets offchain and call function \\\"claimTickets\\\"\\r\\n     *\\r\\n     * @param _lotteryId Lottery id\\r\\n     */\\r\\n    function claimAllTickets(uint256 _lotteryId)\\r\\n        external\\r\\n        notContract\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(\\r\\n            lotteries[_lotteryId].status == Status.Claimable,\\r\\n            \\\"Round not claimable\\\"\\r\\n        );\\r\\n\\r\\n        uint256 rewardToTransfer;\\r\\n\\r\\n        // Gas savings\\r\\n        uint256 ticketAmount = _userTicketIds[msg.sender][_lotteryId].length;\\r\\n\\r\\n        for (uint256 i; i < ticketAmount; ) {\\r\\n            uint256 thisTicketId = _userTicketIds[msg.sender][_lotteryId][i];\\r\\n\\r\\n            require(\\r\\n                msg.sender == tickets[thisTicketId].owner,\\r\\n                \\\"Not the ticket owner\\\"\\r\\n            );\\r\\n            tickets[thisTicketId].owner = address(0);\\r\\n\\r\\n            uint32 highestBracket = _getBracket(_lotteryId, thisTicketId);\\r\\n            if (highestBracket < 4) {\\r\\n                uint256 rewardForTicketId = _calculateRewardsForTicketId(\\r\\n                    _lotteryId,\\r\\n                    thisTicketId,\\r\\n                    highestBracket\\r\\n                );\\r\\n                rewardToTransfer += rewardForTicketId;\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (rewardToTransfer > 0) {\\r\\n            // Transfer the prize to winner\\r\\n            DegisToken.transfer(msg.sender, rewardToTransfer);\\r\\n\\r\\n            lotteries[_lotteryId].pendingRewards -= rewardToTransfer;\\r\\n        }\\r\\n        // Record the amount has claimed in this round\\r\\n        userClaimed[msg.sender][_lotteryId] = ticketAmount;\\r\\n\\r\\n        emit TicketsClaim(msg.sender, rewardToTransfer, _lotteryId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Start a new lottery round\\r\\n     */\\r\\n    function startLottery() external {\\r\\n        require(\\r\\n            (currentLotteryId == 0) ||\\r\\n                (lotteries[currentLotteryId].status == Status.Claimable),\\r\\n            \\\"Wrong status\\\"\\r\\n        );\\r\\n\\r\\n        // Gas savings\\r\\n        uint256 currentId = ++currentLotteryId;\\r\\n\\r\\n        Lottery storage newLottery = lotteries[currentId];\\r\\n\\r\\n        newLottery.status = Status.Open;\\r\\n        newLottery.startTime = uint32(block.timestamp);\\r\\n        newLottery.endTime = uint32(block.timestamp + roundLength);\\r\\n        newLottery.ticketPrice = DEFAULT_PRICE;\\r\\n        newLottery.rewardsBreakdown = rewardsBreakdown;\\r\\n        newLottery.treasuryFee = uint32(treasuryFee);\\r\\n        newLottery.amountCollected = pendingInjectionNextLottery;\\r\\n        newLottery.firstTicketId = currentTicketId;\\r\\n\\r\\n        emit LotteryOpen(\\r\\n            currentId,\\r\\n            block.timestamp,\\r\\n            roundLength,\\r\\n            DEFAULT_PRICE,\\r\\n            rewardsBreakdown,\\r\\n            pendingInjectionNextLottery\\r\\n        );\\r\\n\\r\\n        // Clear record for pending injection\\r\\n        pendingInjectionNextLottery = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Close a lottery\\r\\n     *\\r\\n     * @param _lotteryId Lottery round\\r\\n     */\\r\\n    function closeLottery(uint256 _lotteryId) external nonReentrant {\\r\\n        require(\\r\\n            lotteries[_lotteryId].status == Status.Open,\\r\\n            \\\"this lottery is not open currently\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            block.timestamp > lotteries[_lotteryId].endTime,\\r\\n            \\\"Not reach end time\\\"\\r\\n        );\\r\\n\\r\\n        // Request a random number from the generator\\r\\n        randomGenerator.requestRandomWords();\\r\\n\\r\\n        // Update the lottery status to \\\"Close\\\"\\r\\n        lotteries[_lotteryId].status = Status.Close;\\r\\n\\r\\n        emit LotteryClose(_lotteryId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Draw the final number, calculate reward in Degis for each group,\\r\\n               and make this lottery claimable (need to wait for the random generator)\\r\\n     *\\r\\n     * @param _lotteryId     Lottery round\\r\\n     * @param _autoInjection Auto inject funds into next lottery\\r\\n     */\\r\\n    function drawFinalNumberAndMakeLotteryClaimable(\\r\\n        uint256 _lotteryId,\\r\\n        bool _autoInjection\\r\\n    ) external nonReentrant {\\r\\n        require(\\r\\n            lotteries[_lotteryId].status == Status.Close,\\r\\n            \\\"Lottery not closed\\\"\\r\\n        );\\r\\n        require(\\r\\n            _lotteryId == randomGenerator.latestLotteryId(),\\r\\n            \\\"Final number not drawn\\\"\\r\\n        );\\r\\n        require(treasury != address(0), \\\"Treasury is not set\\\");\\r\\n\\r\\n        // Get the final lucky numbers from randomGenerator\\r\\n        uint32 finalNumber = uint32(randomGenerator.randomResult());\\r\\n\\r\\n        Lottery storage lottery = lotteries[_lotteryId];\\r\\n\\r\\n        // Gas savings\\r\\n        uint256 totalPrize = lottery.amountCollected;\\r\\n\\r\\n        // Prize distributed to users\\r\\n        uint256 amountToWinners = (totalPrize * 8000) / 10000;\\r\\n\\r\\n        // (20% - treasuryFee) will go to next round\\r\\n        uint256 amountToNextLottery = (totalPrize *\\r\\n            (2000 - lottery.treasuryFee)) / 10000;\\r\\n\\r\\n        // Remaining part goes to treasury\\r\\n        uint256 amountToTreasury = totalPrize -\\r\\n            amountToWinners -\\r\\n            amountToNextLottery;\\r\\n\\r\\n        // Initialize a number to count addresses in all the previous bracket\\r\\n        // Ensure that a ticket is not counted several times in different brackets\\r\\n        uint256 numberAddressesInPreviousBracket;\\r\\n\\r\\n        // Calculate prizes for each bracket, starting from the highest one\\r\\n        for (uint32 i; i < 4; ) {\\r\\n            uint32 j = 3 - i;\\r\\n\\r\\n            // Get transformed winning number\\r\\n            uint32 transformedWinningNumber = _bracketCalculator[j] +\\r\\n                (finalNumber % (uint32(10)**(j + 1)));\\r\\n\\r\\n            // Amount of winning tickets for this number\\r\\n            uint256 winningAmount = _numberTicketsPerLotteryId[_lotteryId][\\r\\n                transformedWinningNumber\\r\\n            ];\\r\\n\\r\\n            // Amount of winners for this bracket\\r\\n            // Remove those already have higher bracket reward\\r\\n            lottery.countWinnersPerBracket[j] =\\r\\n                winningAmount -\\r\\n                numberAddressesInPreviousBracket;\\r\\n\\r\\n            // Check if there are winners for this bracket\\r\\n            if (winningAmount != numberAddressesInPreviousBracket) {\\r\\n                // B. If rewards at this bracket are > 0, calculate, else, report the numberAddresses from previous bracket\\r\\n                if (lottery.rewardsBreakdown[j] != 0) {\\r\\n                    lottery.rewardPerTicketInBracket[j] =\\r\\n                        ((lottery.rewardsBreakdown[j] * amountToWinners) /\\r\\n                            (winningAmount -\\r\\n                                numberAddressesInPreviousBracket)) /\\r\\n                        10000;\\r\\n\\r\\n                    lottery.pendingRewards +=\\r\\n                        (lottery.rewardsBreakdown[j] * amountToWinners) /\\r\\n                        10000;\\r\\n                }\\r\\n                // No winners, prize added to the amount to withdraw to treasury\\r\\n            } else {\\r\\n                lottery.rewardPerTicketInBracket[j] = 0;\\r\\n                amountToNextLottery +=\\r\\n                    (lottery.rewardsBreakdown[j] * amountToWinners) /\\r\\n                    10000;\\r\\n            }\\r\\n\\r\\n            // Update numberAddressesInPreviousBracket\\r\\n            numberAddressesInPreviousBracket = winningAmount;\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Update internal statuses for this lottery round\\r\\n        lottery.finalNumber = finalNumber;\\r\\n        lottery.status = Status.Claimable;\\r\\n        lottery.firstTicketIdNextRound = currentTicketId;\\r\\n\\r\\n        // If auto injection is on, reinject funds into next lottery\\r\\n        if (_autoInjection) {\\r\\n            pendingInjectionNextLottery = amountToNextLottery;\\r\\n        }\\r\\n\\r\\n        // Transfer prize to treasury address\\r\\n        if (amountToTreasury > 0) {\\r\\n            DegisToken.transfer(treasury, amountToTreasury);\\r\\n        }\\r\\n\\r\\n        emit LotteryNumberDrawn(\\r\\n            currentLotteryId,\\r\\n            finalNumber, // final result for this round\\r\\n            numberAddressesInPreviousBracket // total winners\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the random generator contract address\\r\\n     *\\r\\n     * @dev The calls to functions are used to verify the new generator implements them properly.\\r\\n     *      It is necessary to wait for the VRF response before starting a round.\\r\\n     *\\r\\n     * @param _randomGeneratorAddress address of the random generator\\r\\n     */\\r\\n    function changeRandomGenerator(address _randomGeneratorAddress)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        // We do not change the generator when a round has not been claimable\\r\\n        require(\\r\\n            lotteries[currentLotteryId].status == Status.Claimable,\\r\\n            \\\"Round not claimable\\\"\\r\\n        );\\r\\n\\r\\n        // Request a random number from the new generator\\r\\n        IRandomNumberGenerator(_randomGeneratorAddress).requestRandomWords();\\r\\n\\r\\n        // Get the finalNumber based on the randomResult\\r\\n        IRandomNumberGenerator(_randomGeneratorAddress).randomResult();\\r\\n\\r\\n        // Set the new address\\r\\n        randomGenerator = IRandomNumberGenerator(_randomGeneratorAddress);\\r\\n\\r\\n        emit NewRandomGenerator(_randomGeneratorAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Inject funds\\r\\n     *\\r\\n     * @dev Those DEG transferred to this contract but not by this function\\r\\n     *      will not be counted for prize pools\\r\\n     *\\r\\n     * @param _amount DEG amount to inject\\r\\n     */\\r\\n    function injectFunds(uint256 _amount) external {\\r\\n        uint256 currentRound = currentLotteryId;\\r\\n\\r\\n        // Only inject when current round is open\\r\\n        require(\\r\\n            lotteries[currentRound].status == Status.Open,\\r\\n            \\\"Round not open\\\"\\r\\n        );\\r\\n\\r\\n        // Update the amount collected for this round\\r\\n        lotteries[currentRound].amountCollected += _amount;\\r\\n\\r\\n        // Transfer DEG\\r\\n        DegisToken.transferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        emit LotteryInjection(currentRound, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Recover wrong tokens sent to the contract, only by the owner\\r\\n     *          All tokens except Degis are wrong tokens\\r\\n     *\\r\\n     * @param _tokenAddress Address of the token to withdraw\\r\\n     * @param _tokenAmount  Token amount to withdraw\\r\\n     */\\r\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_tokenAddress != address(DegisToken), \\\"Cannot be DEGIS token\\\");\\r\\n\\r\\n        IERC20(_tokenAddress).transfer(address(msg.sender), _tokenAmount);\\r\\n\\r\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // *********************************** Internal Functions ********************************* //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate total price when buying many tickets\\r\\n     *         1 ticket = 100%  2 tickets = 98%  3 tickets = 98% * 98 % ...\\r\\n     *         Maximum discount: 98% ^ 10 \\u2248 82%\\r\\n     *\\r\\n     * @param _price Ticket price in DEG\\r\\n     * @param _num   Number of tickets to be bought\\r\\n     *\\r\\n     * @return totalPrice Total price in DEG\\r\\n     */\\r\\n    function _calculateTotalPrice(uint256 _price, uint256 _num)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 totalPrice)\\r\\n    {\\r\\n        if (_num > 1) {\\r\\n            uint256 discountNum = _num - 1;\\r\\n\\r\\n            totalPrice =\\r\\n                (_price * _num * (DISCOUNT_DIVISOR**discountNum)) /\\r\\n                100**discountNum;\\r\\n        } else {\\r\\n            totalPrice = _price;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice returns highest bracket a ticket number falls into\\r\\n     *\\r\\n     * @param _lotteryId Lottery round\\r\\n     * @param _ticketId  Ticket id\\r\\n     */\\r\\n    function _getBracket(uint256 _lotteryId, uint256 _ticketId)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint32 highestBracket)\\r\\n    {\\r\\n        uint32 userNumber = tickets[_ticketId].number;\\r\\n\\r\\n        // Retrieve the winning number combination\\r\\n        uint32 finalNumber = lotteries[_lotteryId].finalNumber;\\r\\n\\r\\n        // 3 => highest prize\\r\\n        // 4 => no prize\\r\\n        highestBracket = 4;\\r\\n        for (uint32 i = 1; i <= 4; ++i) {\\r\\n            if (finalNumber % (uint32(10)**i) == userNumber % (uint32(10)**i)) {\\r\\n                highestBracket = i - 1;\\r\\n            } else {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate rewards for a given ticket\\r\\n     *\\r\\n     * @param _lotteryId Lottery id\\r\\n     * @param _ticketId  Ticket id\\r\\n     * @param _bracket   Bracket for the ticketId to verify the claim and calculate rewards\\r\\n     */\\r\\n    function _calculateRewardsForTicketId(\\r\\n        uint256 _lotteryId,\\r\\n        uint256 _ticketId,\\r\\n        uint32 _bracket\\r\\n    ) internal view returns (uint256) {\\r\\n        // Retrieve the user number combination from the ticketId\\r\\n        uint32 userNumber = tickets[_ticketId].number;\\r\\n\\r\\n        // Retrieve the winning number combination\\r\\n        uint32 finalNumber = lotteries[_lotteryId].finalNumber;\\r\\n\\r\\n        // Apply transformation to verify the claim provided by the user is true\\r\\n        uint32 ts = uint32(10)**(_bracket + 1);\\r\\n\\r\\n        uint32 transformedWinningNumber = _bracketCalculator[_bracket] +\\r\\n            (finalNumber % ts);\\r\\n        uint32 transformedUserNumber = _bracketCalculator[_bracket] +\\r\\n            (userNumber % ts);\\r\\n\\r\\n        // Confirm that the two transformed numbers are the same\\r\\n        if (transformedWinningNumber == transformedUserNumber) {\\r\\n            return lotteries[_lotteryId].rewardPerTicketInBracket[_bracket];\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverse the ticket number\\r\\n     *         E.g. User want to buy \\\"1234\\\"\\r\\n     *              The input number will be 11234\\r\\n     *              The reversed output will be 14321\\r\\n     *\\r\\n     * @param _number Input ticket number\\r\\n     *\\r\\n     * @return reversedNumber Reversed number + 10000\\r\\n     */\\r\\n    function _reverseTicketNumber(uint256 _number)\\r\\n        public\\r\\n        pure\\r\\n        returns (uint32)\\r\\n    {\\r\\n        uint256 initNumber = _number - 10**4;\\r\\n        uint256 singleNumber = 0;\\r\\n        uint256 reversedNumber;\\r\\n\\r\\n        for (uint256 i; i < 4; ) {\\r\\n            singleNumber = initNumber % 10;\\r\\n\\r\\n            reversedNumber = reversedNumber * 10 + singleNumber;\\r\\n\\r\\n            initNumber /= 10;\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        return uint32(reversedNumber + 10000);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check if an address is a contract\\r\\n     */\\r\\n    function _isContract(address _addr) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(_addr)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb2f9f55839d919b47dc7063c06cd9c0c45fd788a5fa18c370edf640ecea781b\",\"license\":\"MIT\"},\"contracts/lucky-box/MathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nlibrary MathLib {\\r\\n    /*\\r\\n     * Minimum value signed 64.64-bit fixed point number may have.\\r\\n     */\\r\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\r\\n\\r\\n    /*\\r\\n     * Maximum value signed 64.64-bit fixed point number may have.\\r\\n     */\\r\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n    function log_2(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x > 0);\\r\\n\\r\\n            int256 msb = 0;\\r\\n            int256 xc = x;\\r\\n            if (xc >= 0x10000000000000000) {\\r\\n                xc >>= 64;\\r\\n                msb += 64;\\r\\n            }\\r\\n            if (xc >= 0x100000000) {\\r\\n                xc >>= 32;\\r\\n                msb += 32;\\r\\n            }\\r\\n            if (xc >= 0x10000) {\\r\\n                xc >>= 16;\\r\\n                msb += 16;\\r\\n            }\\r\\n            if (xc >= 0x100) {\\r\\n                xc >>= 8;\\r\\n                msb += 8;\\r\\n            }\\r\\n            if (xc >= 0x10) {\\r\\n                xc >>= 4;\\r\\n                msb += 4;\\r\\n            }\\r\\n            if (xc >= 0x4) {\\r\\n                xc >>= 2;\\r\\n                msb += 2;\\r\\n            }\\r\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\r\\n\\r\\n            int256 result = (msb - 64) << 64;\\r\\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\\r\\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\r\\n                ux *= ux;\\r\\n                uint256 b = ux >> 255;\\r\\n                ux >>= 127 + b;\\r\\n                result += bit * int256(b);\\r\\n            }\\r\\n\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mul(int128 x, int128 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            int256 result = (int256(x) * y) >> 64;\\r\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\r\\n     * number.  Revert on overflow.\\r\\n     *\\r\\n     * @param x unsigned 256-bit integer number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function fromUInt(uint256 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x <= 0x7FFFFFFFFFFFFFFF);\\r\\n            return int128(int256(x << 64));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\r\\n     * number rounding down.  Revert on underflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return unsigned 64-bit integer number\\r\\n     */\\r\\n    function toUInt(int128 x) internal pure returns (uint64) {\\r\\n        unchecked {\\r\\n            require(x >= 0);\\r\\n            return uint64(uint128(x >> 64));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function ln(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x > 0);\\r\\n\\r\\n            return\\r\\n                int128(\\r\\n                    int256(\\r\\n                        (uint256(int256(log_2(x))) *\\r\\n                            0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128\\r\\n                    )\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x21471017623aac4b21e8418422be56953a6ac5a624c843ed3241052a899f3ccb\",\"license\":\"MIT\"},\"contracts/lucky-box/interfaces/IRandomNumberGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IRandomNumberGenerator {\\r\\n    /**\\r\\n     * @notice Views random result\\r\\n     */\\r\\n    function getRandomNumber() external;\\r\\n\\r\\n    function requestRandomWords() external;\\r\\n\\r\\n    function randomResult() external view returns (uint256);\\r\\n\\r\\n    function latestLotteryId() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xa15716f42ba87618570478ce6922c12e0057d8ec46cbc53b71c65c1d3bc48577\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614078806100206000396000f3fe608060405234801561001057600080fd5b506004361061030a5760003560e01c80636fa053eb1161019c578063b5877b22116100ee578063e1059fe511610097578063f2b3c80911610071578063f2b3c80914610718578063f2fde38b14610721578063fcbf8b241461073457600080fd5b8063e1059fe5146106df578063e359ebec146106f2578063f0f442601461070557600080fd5b8063c914914f116100c8578063c914914f146106b0578063cc32d176146106c3578063dcbad90d146106cc57600080fd5b8063b5877b221461066a578063c38de5391461068a578063c6e761a91461069d57600080fd5b80638da5cb5b1161015057806398359fa11161012a57806398359fa11461061e5780639d8ca53114610631578063b46e130e1461064457600080fd5b80638da5cb5b146105da578063972fe683146105eb57806397ff1cac1461060b57600080fd5b80637250e45d116101815780637250e45d1461059d5780637741879b146105a65780638b649b94146105d157600080fd5b80636fa053eb14610582578063715018a61461059557600080fd5b806344848a9911610260578063656f8a2511610209578063686465b8116101e3578063686465b81461055d5780636bcac0ff146105665780636be4097c1461057957600080fd5b8063656f8a251461052257806365dc59d61461052a578063681312f51461054a57600080fd5b80635745464b1161023a5780635745464b146104cf5780635b0d64c2146104e257806361d027b31461050257600080fd5b806344848a9914610462578063485cc9551461047557806350b447121461048857600080fd5b80631b6c743b116102c257806326df6c271161029c57806326df6c271461041c5780633732b4ee1461042f5780633f138d4b1461044f57600080fd5b80631b6c743b146103e75780631e6425fd146103f65780632149485d1461040957600080fd5b80631398e076116102f35780631398e0761461033757806314a0792f146103c7578063160344e2146103dd57600080fd5b80630ab2b0861461030f57806312a9769d1461032e575b600080fd5b610318609c5481565b6040516103259190612ced565b60405180910390f35b610318609d5481565b6103b1610345366004612d13565b609e60205260009081526040902080546001820154600e830154600f840154601085015460119095015460ff85169563ffffffff610100870481169665010000000000810482169669010000000000000000008204831696600160681b9092049092169491939092908a565b6040516103259a99989796959493929190612d89565b6103d061271081565b6040516103259190612e1e565b6103e561075f565b005b610318678ac7230489e8000081565b6103e5610404366004612d13565b6108e8565b610318610417366004612e2c565b610952565b61031861042a366004612e8e565b6109e5565b61044261043d366004612d13565b610a23565b6040516103259190612f27565b6103e561045d366004612f35565b610a72565b6103e5610470366004612d13565b610b79565b6103e5610483366004612f57565b610e3b565b6104c1610496366004612d13565b609f6020526000908152604090205463ffffffff81169064010000000090046001600160a01b031682565b604051610325929190612f93565b6103d06104dd366004612d13565b610fe1565b6104f56104f0366004613000565b611050565b6040516103259190613099565b609954610515906001600160a01b031681565b60405161032591906130aa565b610318606281565b60975461053d906001600160a01b031681565b60405161032591906130fa565b6103e5610558366004612d13565b611126565b610318609b5481565b610442610574366004612d13565b6111b0565b610318609a5481565b610442610590366004612d13565b6111fe565b6103e561124c565b6103d0614e1f81565b6103186105b436600461311f565b60a060209081526000928352604080842090915290825290205481565b61031860a95481565b6065546001600160a01b0316610515565b6105fe6105f9366004612e2c565b611282565b60405161032591906132c7565b610318610619366004612d13565b6114a8565b6103e561062c3660046132d8565b6114bf565b6103e561063f366004612d13565b61163b565b6103d06106523660046132f9565b60a26020526000908152604090205463ffffffff1681565b61067d610678366004612e8e565b611794565b6040516103259190613357565b6103e561069836600461337b565b61190c565b61067d6106ab366004612f35565b611e5d565b6103e56106be3660046133ae565b611ed2565b61031860a45481565b60985461053d906001600160a01b031681565b6103e56106ed366004613000565b6122c1565b6103e5610700366004612d13565b6126e9565b6103e56107133660046132d8565b612808565b6103186107d081565b6103e561072f3660046132d8565b6128a8565b610318610742366004612f35565b60a360209081526000928352604080842090915290825290205481565b609a54158061079357506003609a546000908152609e602052604090205460ff16600381111561079157610791612d34565b145b6107b85760405162461bcd60e51b81526004016107af90613470565b60405180910390fd5b6000609a600081546107c990613496565b91829055506000818152609e60205260409020805468ffffffff00000000ff1916650100000000004263ffffffff81169190910291909117600117825560a9549293509091610817916134af565b815463ffffffff919091166901000000000000000000026cffffffff00000000000000000019909116178155678ac7230489e8000060018201556108616002820160a56004612bfc565b5060a454815463ffffffff9091166101000264ffffffff0019909116178155609d80546010830155609b54600e83015560a954905460405184927f5e7c17be0c6c11472c23d5df180e5136efb90395ccff56f1fcfb8db6b5a0a235926108d792429291678ac7230489e800009160a5919061350b565b60405180910390a250506000609d55565b6065546001600160a01b031633146109125760405162461bcd60e51b81526004016107af90613588565b7f67d06ff5b9d79811174a2f0df6d9be98aa3b3f9ae311716140cb1b0668c11843609c5482604051610945929190613598565b60405180910390a1609c55565b600060036000848152609e602052604090205460ff16600381111561097957610979612d34565b14610986575060006109df565b6000838152609e60205260409020600f01548211806109b557506000838152609e60205260409020600e015482105b156109c2575060006109df565b60006109ce8484612904565b90506109db8484836129b2565b9150505b92915050565b60a16020528260005260406000206020528160005260406000208181548110610a0d57600080fd5b9060005260206000200160009250925050505481565b610a2b612c37565b6000828152609e60205260409081902081516080810190925260020160048282826020028201915b815481526020019060010190808311610a535750505050509050919050565b6065546001600160a01b03163314610a9c5760405162461bcd60e51b81526004016107af90613588565b6097546001600160a01b0390811690831603610aca5760405162461bcd60e51b81526004016107af906135e5565b60405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90610af890339085906004016135f5565b6020604051808303816000875af1158015610b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3b919061360e565b507f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab781298282604051610b6d9291906135f5565b60405180910390a15050565b333b15610b985760405162461bcd60e51b81526004016107af90613661565b333214610bb75760405162461bcd60e51b81526004016107af906136a3565b600260015403610bd95760405162461bcd60e51b81526004016107af906136e5565b600260015560036000828152609e602052604090205460ff166003811115610c0357610c03612d34565b14610c205760405162461bcd60e51b81526004016107af90613727565b33600090815260a160209081526040808320848452909152812054815b81811015610d365733600090815260a1602090815260408083208784529091528120805483908110610c7157610c71613737565b600091825260208083209190910154808352609f90915260409091205490915064010000000090046001600160a01b03163314610cc05760405162461bcd60e51b81526004016107af9061377f565b6000818152609f6020526040812080547fffffffffffffffff0000000000000000000000000000000000000000ffffffff169055610cfe8683612904565b905060048163ffffffff161015610d2c576000610d1c8784846129b2565b9050610d2881876134af565b9550505b5050600101610c3d565b508115610dda5760975460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610d6f90339086906004016135f5565b6020604051808303816000875af1158015610d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db2919061360e565b506000838152609e602052604081206011018054849290610dd490849061378f565b90915550505b33600081815260a36020908152604080832087845290915290819020839055518491907f0fdeb33b5931b477077383757e0ba077bd3d8eddfa2cc711c54ad2d3a0cfac6590610e2a908690612ced565b60405180910390a350506001805550565b600054610100900460ff16610e565760005460ff1615610e5a565b303b155b610e765760405162461bcd60e51b81526004016107af90613804565b600054610100900460ff16158015610e98576000805461ffff19166101011790555b610ea0612ab4565b610ea8612ae3565b609780546001600160a01b0385811673ffffffffffffffffffffffffffffffffffffffff19928316179092556098805492851692909116919091179055600a609c5560a26020527f8fa6f0ecb9543d3381552e96aa43533c7f086066e38816919ea0cfae371b342a805463ffffffff1990811660019081179092557f87286cc7b9cf8a377e677776b2644ce858185998d33108f493bdc3c2f07b983680548216600b1790557f984fb507cc15174c9c2666d8998832bf192b808658c1b8547c17c86e40ea581480548216606f17905560036000527f4ed878d3ddcb61d84861a74cb3bb4189ee298a8a85e8f1b99bcffb157f7e18848054909116610457179055609b556103e860a5556107d060a655610bb860a755610fa060a8556203f48060a9558015610fdc576000805461ff00191690555b505050565b600080610ff06127108461378f565b9050600080805b600481101561103a5761100b600a8561382a565b92508261101983600a613842565b61102391906134af565b9150611030600a85613861565b9350600101610ff7565b50611047816127106134af565b95945050505050565b60608160008167ffffffffffffffff81111561106e5761106e613875565b604051908082528060200260200182016040528015611097578160200160208202803683370190505b50905060005b8281101561111d57609f60008787848181106110bb576110bb613737565b90506020020135815260200190815260200160002060000160009054906101000a900463ffffffff168282815181106110f6576110f6613737565b63ffffffff909216602092830291909101909101528061111581613496565b91505061109d565b50949350505050565b6065546001600160a01b031633146111505760405162461bcd60e51b81526004016107af90613588565b600081116111705760405162461bcd60e51b81526004016107af906138bd565b7f93c17a9084c0de51612f63840cc02149425a4bc661e39230c8ca5d4d121f6fb060a954826040516111a3929190613598565b60405180910390a160a955565b6111b8612c37565b6000828152609e6020526040908190208151608081019092526006016004828282602002820191815481526020019060010190808311610a535750505050509050919050565b611206612c37565b6000828152609e602052604090819020815160808101909252600a016004828282602002820191815481526020019060010190808311610a535750505050509050919050565b6065546001600160a01b031633146112765760405162461bcd60e51b81526004016107af90613588565b6112806000612b10565b565b60606000611290848461378f565b61129b9060016134af565b67ffffffffffffffff8111156112b3576112b3613875565b6040519080825280602002602001820160405280156112ec57816020015b6112d9612c55565b8152602001906001900390816112d15790505b509050835b8381116114a0576000818152609e60205260409081902081516101a081019092528054829060ff16600381111561132a5761132a612d34565b600381111561133b5761133b612d34565b8152815463ffffffff61010082048116602084015265010000000000820481166040808501919091526901000000000000000000830482166060850152600160681b90920416608080840191909152600184015460a084015281519081019182905260c09092019190600284019060049082845b8154815260200190600101908083116113af57505050918352505060408051608081019182905260209092019190600684019060049082845b8154815260200190600101908083116113e857505050918352505060408051608081019182905260209092019190600a84019060049082845b815481526020019060010190808311611421575050509183525050600e8201546020820152600f8201546040820152601082015460608201526011909101546080909101528261147260018461378f565b8151811061148257611482613737565b6020026020010181905250808061149890613496565b9150506112f1565b509392505050565b60a581600481106114b857600080fd5b0154905081565b6065546001600160a01b031633146114e95760405162461bcd60e51b81526004016107af90613588565b6003609a546000908152609e602052604090205460ff16600381111561151157611511612d34565b1461152e5760405162461bcd60e51b81526004016107af90613727565b806001600160a01b031663e0c862896040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561156957600080fd5b505af115801561157d573d6000803e3d6000fd5b50505050806001600160a01b03166342619f666040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e391906138d8565b506098805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f383f8cb39dfa7c3fb901a460dd449ea924868f0a92ff03da64740fffa5f1de6290600090a250565b60026001540361165d5760405162461bcd60e51b81526004016107af906136e5565b600260019081556000828152609e602052604090205460ff16600381111561168757611687612d34565b146116a45760405162461bcd60e51b81526004016107af90613951565b6000818152609e60205260409020546901000000000000000000900463ffffffff1642116116e45760405162461bcd60e51b81526004016107af90613993565b609860009054906101000a90046001600160a01b03166001600160a01b031663e0c862896040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561173457600080fd5b505af1158015611748573d6000803e3d6000fd5b5050506000828152609e6020526040808220805460ff19166002179055518392507f8bc84e5d97533c428862626ac41fe7bc09b1ea2ed5e9e330d84092db8df153669190a25060018055565b60606117a0838361378f565b6117ab9060016134af565b67ffffffffffffffff8111156117c3576117c3613875565b6040519080825280602002602001820160405280156117ec578160200160208202803683370190505b509050825b8281116114a0576001600160a01b038516600090815260a1602090815260408083208484529091529020548015611903576001600160a01b038616600090815260a16020908152604080832085845282528083208054825181850281018501909352808352919290919083018282801561188a57602002820191906000526020600020905b815481526020019060010190808311611876575b5050505050905060005b828110156119005760006118c1858484815181106118b4576118b4613737565b6020026020010151610952565b905080866118d060018861378f565b815181106118e0576118e0613737565b602002602001018181516118f491906134af565b90525050600101611894565b50505b506001016117f1565b60026001540361192e5760405162461bcd60e51b81526004016107af906136e5565b600260018190556000838152609e602052604090205460ff16600381111561195857611958612d34565b146119755760405162461bcd60e51b81526004016107af906139d5565b609860009054906101000a90046001600160a01b03166001600160a01b031663eed8e1ee6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ec91906138d8565b8214611a0a5760405162461bcd60e51b81526004016107af90613a17565b6099546001600160a01b0316611a325760405162461bcd60e51b81526004016107af90613a59565b609854604080517f42619f6600000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916342619f669160048083019260209291908290030181865afa158015611a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab991906138d8565b6000848152609e6020526040812060108101549293509190612710611ae083611f40613842565b611aea9190613861565b835490915060009061271090611b0d90610100900463ffffffff166107d0613a69565b611b1d9063ffffffff1685613842565b611b279190613861565b9050600081611b36848661378f565b611b40919061378f565b90506000805b60048163ffffffff161015611d41576000611b62826003613a69565b90506000611b71826001613a79565b611b7c90600a613bb1565b611b86908b613bd4565b63ffffffff808416600090815260a26020526040902054611ba8929116613a79565b60008d815260a06020908152604080832063ffffffff85168452909152902054909150611bd5858261378f565b8a600a018463ffffffff1660048110611bf057611bf0613737565b0155808514611cd457896002018363ffffffff1660048110611c1457611c14613737565b015415611ccf57612710611c28868361378f565b898c6002018663ffffffff1660048110611c4457611c44613737565b0154611c509190613842565b611c5a9190613861565b611c649190613861565b8a6006018463ffffffff1660048110611c7f57611c7f613737565b01556127108860028c0163ffffffff861660048110611ca057611ca0613737565b0154611cac9190613842565b611cb69190613861565b8a6011016000828254611cc991906134af565b90915550505b611d35565b60008a6006018463ffffffff1660048110611cf157611cf1613737565b01556127108860028c0163ffffffff861660048110611d1257611d12613737565b0154611d1e9190613842565b611d289190613861565b611d3290886134af565b96505b93505050600101611b46565b5085547fffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff001660ff19600160681b63ffffffff8a160216176003178655609b54600f8701558715611d9157609d8390555b8115611e125760975460995460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92611dcd9291169086906004016135f5565b6020604051808303816000875af1158015611dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e10919061360e565b505b609a547f98e31a6607b8b15b4d5b91de54f4c09ffe4c4cf162aa532c70b5213754e2e7038883604051611e46929190613bff565b60405180910390a250506001805550505050505050565b6001600160a01b038216600090815260a1602090815260408083208484528252808320805482518185028101850190935280835260609493830182828015611ec457602002820191906000526020600020905b815481526020019060010190808311611eb0575b509398975050505050505050565b333b15611ef15760405162461bcd60e51b81526004016107af90613661565b333214611f105760405162461bcd60e51b81526004016107af906136a3565b600260015403611f325760405162461bcd60e51b81526004016107af906136e5565b600260015560036000868152609e602052604090205460ff166003811115611f5c57611f5c612d34565b14611f795760405162461bcd60e51b81526004016107af90613727565b82818114611f995760405162461bcd60e51b81526004016107af90613c3f565b60008111611fb95760405162461bcd60e51b81526004016107af90613c81565b609c54811115611fdb5760405162461bcd60e51b81526004016107af90613cc3565b6000868152609e60205260408120815b8381101561219e57600088888381811061200757612007613737565b90506020020135905082600e01548110156120345760405162461bcd60e51b81526004016107af90613d05565b82600f015481106120575760405162461bcd60e51b81526004016107af90613d47565b6000818152609f602052604090205464010000000090046001600160a01b031633146120955760405162461bcd60e51b81526004016107af90613daf565b6000818152609f6020526040812080547fffffffffffffffff0000000000000000000000000000000000000000ffffffff1690556120fa8b838a8a878181106120e0576120e0613737565b90506020020160208101906120f591906132f9565b6129b2565b9050600388888581811061211057612110613737565b905060200201602081019061212591906132f9565b63ffffffff161015612185576121688b838a8a8781811061214857612148613737565b905060200201602081019061215d91906132f9565b6120f5906001613a79565b156121855760405162461bcd60e51b81526004016107af90613df1565b61218f81866134af565b94508260010192505050611feb565b5033600090815260a3602090815260408083208b8452909152812080548592906121c99084906134af565b90915550508115612271576000888152609e6020526040812060110180548492906121f590849061378f565b909155505060975460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061222c90339086906004016135f5565b6020604051808303816000875af115801561224b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226f919061360e565b505b87336001600160a01b03167f0fdeb33b5931b477077383757e0ba077bd3d8eddfa2cc711c54ad2d3a0cfac65846040516122ab9190612ced565b60405180910390a3505060018055505050505050565b333b156122e05760405162461bcd60e51b81526004016107af90613661565b3332146122ff5760405162461bcd60e51b81526004016107af906136a3565b6002600154036123215760405162461bcd60e51b81526004016107af906136e5565b600260015580806123445760405162461bcd60e51b81526004016107af90613e33565b609c548111156123665760405162461bcd60e51b81526004016107af90613e75565b609a546000818152609e60205260409020906001825460ff16600381111561239057612390612d34565b146123ad5760405162461bcd60e51b81526004016107af90613eb7565b60006123bd836001015485612b6f565b6097546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd906123f290339030908690600401613ec7565b6020604051808303816000875af1158015612411573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612435919061360e565b506000828152609e6020526040812060100180548392906124579084906134af565b90915550600090505b8481101561269857600087878381811061247c5761247c613737565b905060200201602081019061249191906132f9565b905061271063ffffffff8216108015906124b35750614e1f63ffffffff821611155b6124cf5760405162461bcd60e51b81526004016107af90613f29565b600084815260a060205260408120906124e9600a84613bd4565b6124f4906001613a79565b63ffffffff1663ffffffff1681526020019081526020016000206000815461251b90613496565b90915550600084815260a06020526040812090612539606484613bd4565b61254490600b613a79565b63ffffffff1663ffffffff1681526020019081526020016000206000815461256b90613496565b90915550600084815260a0602052604081209061258a6103e884613bd4565b61259590606f613a79565b63ffffffff1663ffffffff168152602001908152602001600020600081546125bc90613496565b90915550600084815260a060205260408120906125db61271084613bd4565b6125e790610457613a79565b63ffffffff1663ffffffff1681526020019081526020016000206000815461260e90613496565b90915550609b805433600081815260a1602090815260408083208a8452825280832080546001818101835591855283852001869055948352609f909152902080546401000000009092027fffffffffffffffff00000000000000000000000000000000000000000000000090921663ffffffff909516949094171790925580548201905501612460565b5081336001600160a01b03167fc7c1448de202b1838ad1d7fae75dbd69dc79f98d656f7b30f08dc451c9ab7ff886846040516126d5929190613598565b60405180910390a350506001805550505050565b609a5460016000828152609e602052604090205460ff16600381111561271157612711612d34565b1461272e5760405162461bcd60e51b81526004016107af90613eb7565b6000818152609e60205260408120601001805484929061274f9084906134af565b90915550506097546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061278890339030908790600401613ec7565b6020604051808303816000875af11580156127a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127cb919061360e565b50807f1bbd659dd628a25f7ff2eabb69c74a56939c539728282275c1c9c1a2d3e34049836040516127fc9190612ced565b60405180910390a25050565b6065546001600160a01b031633146128325760405162461bcd60e51b81526004016107af90613588565b6099546040517f8c3aa5f43a388513435861bf27dfad7829cd248696fed367c62d441f6295449691612871916001600160a01b03909116908490613f39565b60405180910390a16099805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6065546001600160a01b031633146128d25760405162461bcd60e51b81526004016107af90613588565b6001600160a01b0381166128f85760405162461bcd60e51b81526004016107af90613f9f565b61290181612b10565b50565b6000818152609f6020908152604080832054858452609e9092529091205460049163ffffffff90811691600160681b90041660015b60048163ffffffff16116129a95761295281600a613bb1565b61295c9084613bd4565b63ffffffff1661296d82600a613bb1565b6129779084613bd4565b63ffffffff16036129945761298d600182613a69565b9350612999565b6129a9565b6129a281613faf565b9050612939565b50505092915050565b6000828152609f6020908152604080832054868452609e90925282205463ffffffff91821691600160681b90910416826129ed856001613a79565b6129f890600a613bb1565b90506000612a068284613bd4565b63ffffffff808816600090815260a26020526040902054612a28929116613a79565b90506000612a368386613bd4565b63ffffffff808916600090815260a26020526040902054612a58929116613a79565b90508063ffffffff168263ffffffff1603612aa3576000898152609e6020526040902060060163ffffffff881660048110612a9557612a95613737565b015495505050505050612aad565b6000955050505050505b9392505050565b600054610100900460ff16612adb5760405162461bcd60e51b81526004016107af90614023565b611280612bcc565b600054610100900460ff16612b0a5760405162461bcd60e51b81526004016107af90614023565b60018055565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001821115612bc5576000612b8760018461378f565b9050612b94816064614033565b612b9f826062614033565b612ba98587613842565b612bb39190613842565b612bbd9190613861565b9150506109df565b5090919050565b600054610100900460ff16612bf35760405162461bcd60e51b81526004016107af90614023565b61128033612b10565b8260048101928215612c27579182015b82811115612c27578254825591600101919060010190612c0c565b50612c33929150612cd0565b5090565b60405180608001604052806004906020820280368337509192915050565b604080516101a08101909152806000815260006020820181905260408201819052606082018190526080820181905260a082015260c001612c94612c37565b8152602001612ca1612c37565b8152602001612cae612c37565b8152602001600081526020016000815260200160008152602001600081525090565b5b80821115612c335760008155600101612cd1565b805b82525050565b602081016109df8284612ce5565b805b811461290157600080fd5b80356109df81612cfb565b600060208284031215612d2857612d28600080fd5b60006109db8484612d08565b634e487b7160e01b600052602160045260246000fd5b6004811061290157612901612d34565b80612d6481612d4a565b919050565b60006109df82612d5a565b612ce781612d69565b63ffffffff8116612ce7565b6101408101612d98828d612d74565b612da5602083018c612d7d565b612db2604083018b612d7d565b612dbf606083018a612d7d565b612dcc6080830189612d7d565b612dd960a0830188612ce5565b612de660c0830187612ce5565b612df360e0830186612ce5565b612e01610100830185612ce5565b612e0f610120830184612ce5565b9b9a5050505050505050505050565b602081016109df8284612d7d565b60008060408385031215612e4257612e42600080fd5b6000612e4e8585612d08565b9250506020612e5f85828601612d08565b9150509250929050565b60006001600160a01b0382166109df565b612cfd81612e69565b80356109df81612e7a565b600080600060608486031215612ea657612ea6600080fd5b6000612eb28686612e83565b9350506020612ec386828701612d08565b9250506040612ed486828701612d08565b9150509250925092565b612ee88282612ce5565b5060200190565b60200190565b60048160005b82811015612f20578151612f0f8682612ede565b955050602082019150600101612efb565b5050505050565b608081016109df8284612ef5565b60008060408385031215612f4b57612f4b600080fd5b6000612e4e8585612e83565b60008060408385031215612f6d57612f6d600080fd5b6000612f798585612e83565b9250506020612e5f85828601612e83565b612ce781612e69565b60408101612fa18285612d7d565b612aad6020830184612f8a565b60008083601f840112612fc357612fc3600080fd5b50813567ffffffffffffffff811115612fde57612fde600080fd5b602083019150836020820283011115612ff957612ff9600080fd5b9250929050565b6000806020838503121561301657613016600080fd5b823567ffffffffffffffff81111561303057613030600080fd5b61303c85828601612fae565b92509250509250929050565b612ee88282612d7d565b600061305c825190565b808452602093840193830160005b8281101561308f57815161307e8782613048565b96505060208201915060010161306a565b5093949350505050565b60208082528101612aad8184613052565b602081016109df8284612f8a565b60006109df6001600160a01b0383166130cf565b90565b6001600160a01b031690565b60006109df826130b8565b60006109df826130db565b612ce7816130e6565b602081016109df82846130f1565b63ffffffff8116612cfd565b80356109df81613108565b6000806040838503121561313557613135600080fd5b60006131418585612d08565b9250506020612e5f85828601613114565b60048160005b82811015612f2057815161316c8682612ede565b955050602082019150600101613158565b80516131898382612d74565b50602081015161319c6020840182612d7d565b5060408101516131af6040840182612d7d565b5060608101516131c26060840182612d7d565b5060808101516131d56080840182612d7d565b5060a08101516131e860a0840182612ce5565b5060c08101516131fb60c0840182613152565b5060e081015161320f610140840182613152565b506101008101516132246101c0840182613152565b50610120810151613239610240840182612ce5565b5061014081015161324e610260840182612ce5565b50610160810151613263610280840182612ce5565b50610180810151610fdc6102a0840182612ce5565b613282828261317d565b506102c00190565b6000613294825190565b808452602093840193830160005b8281101561308f5781516132b68782613278565b9650506020820191506001016132a2565b60208082528101612aad818461328a565b6000602082840312156132ed576132ed600080fd5b60006109db8484612e83565b60006020828403121561330e5761330e600080fd5b60006109db8484613114565b6000613324825190565b808452602093840193830160005b8281101561308f5781516133468782612ede565b965050602082019150600101613332565b60208082528101612aad818461331a565b801515612cfd565b80356109df81613368565b6000806040838503121561339157613391600080fd5b600061339d8585612d08565b9250506020612e5f85828601613370565b6000806000806000606086880312156133c9576133c9600080fd5b60006133d58888612d08565b955050602086013567ffffffffffffffff8111156133f5576133f5600080fd5b61340188828901612fae565b9450945050604086013567ffffffffffffffff81111561342357613423600080fd5b61342f88828901612fae565b92509250509295509295909350565b600c8152602081017f57726f6e6720737461747573000000000000000000000000000000000000000081529050612eef565b602080825281016109df8161343e565b634e487b7160e01b600052601160045260246000fd5b6000600182016134a8576134a8613480565b5060010190565b600082198211156134c2576134c2613480565b500190565b6000816109df565b60006109df82546134c7565b60048160005b82811015612f20576134f2826134cf565b6134fc8682612ede565b955050600191820191016134e1565b610100810161351a8288612ce5565b6135276020830187612ce5565b6135346040830186612ce5565b61354160608301856134db565b61354e60e0830184612ce5565b9695505050505050565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152612eef565b602080825281016109df81613558565b604081016135a68285612ce5565b612aad6020830184612ce5565b60158152602081017f43616e6e6f7420626520444547495320746f6b656e000000000000000000000081529050612eef565b602080825281016109df816135b3565b604081016135a68285612f8a565b80516109df81613368565b60006020828403121561362357613623600080fd5b60006109db8484613603565b60148152602081017f436f6e7472616374206e6f7420616c6c6f77656400000000000000000000000081529050612eef565b602080825281016109df8161362f565b601a8152602081017f50726f787920636f6e7472616374206e6f7420616c6c6f77656400000000000081529050612eef565b602080825281016109df81613671565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050612eef565b602080825281016109df816136b3565b60138152602081017f526f756e64206e6f7420636c61696d61626c650000000000000000000000000081529050612eef565b602080825281016109df816136f5565b634e487b7160e01b600052603260045260246000fd5b60148152602081017f4e6f7420746865207469636b6574206f776e657200000000000000000000000081529050612eef565b602080825281016109df8161374d565b815b91506000828210156137a5576137a5613480565b500390565b602e8152602081017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181527f647920696e697469616c697a6564000000000000000000000000000000000000602082015290505b60400190565b602080825281016109df816137aa565b634e487b7160e01b600052601260045260246000fd5b815b915060008261383d5761383d613814565b500690565b600081600019048311821515161561385c5761385c613480565b500290565b60008261387057613870613814565b500490565b634e487b7160e01b600052604160045260246000fd5b60118152602081017f5a65726f20726f756e64206c656e67746800000000000000000000000000000081529050612eef565b602080825281016109df8161388b565b80516109df81612cfb565b6000602082840312156138ed576138ed600080fd5b60006109db84846138cd565b60228152602081017f74686973206c6f7474657279206973206e6f74206f70656e2063757272656e7481527f6c79000000000000000000000000000000000000000000000000000000000000602082015290506137fe565b602080825281016109df816138f9565b60128152602081017f4e6f7420726561636820656e642074696d65000000000000000000000000000081529050612eef565b602080825281016109df81613961565b60128152602081017f4c6f7474657279206e6f7420636c6f736564000000000000000000000000000081529050612eef565b602080825281016109df816139a3565b60168152602081017f46696e616c206e756d626572206e6f7420647261776e0000000000000000000081529050612eef565b602080825281016109df816139e5565b60138152602081017f5472656173757279206973206e6f74207365740000000000000000000000000081529050612eef565b602080825281016109df81613a27565b63ffffffff908116908216613791565b63ffffffff8116905063ffffffff8216915060008263ffffffff038211156134c2576134c2613480565b80825b6001851115613ae257808604811115613ac157613ac1613480565b6001851615613acf57908102905b8002613adb8560011c90565b9450613aa6565b94509492505050565b600082613afa57506001612aad565b81613b0757506000612aad565b8160018114613b1d5760028114613b2757613b54565b6001915050612aad565b60ff841115613b3857613b38613480565b8360020a915084821115613b4e57613b4e613480565b50612aad565b5060208310610133831016604e8410600b8410161715613b87575081810a83811115613b8257613b82613480565b612aad565b613b948484846001613aa3565b92509050818404811115613baa57613baa613480565b0292915050565b63ffffffff8116905063ffffffff821691506000612aad63ffffffff8484613aeb565b63ffffffff90811690821661382c565b60006109df6130cc63ffffffff841681565b612ce781613be4565b604081016135a68285613bf6565b600f8152602081017f4e6f742073616d65206c656e677468000000000000000000000000000000000081529050612eef565b602080825281016109df81613c0d565b600a8152602081017f4e6f207469636b6574730000000000000000000000000000000000000000000081529050612eef565b602080825281016109df81613c4f565b60198152602081017f546f6f206d616e79207469636b65747320746f20636c61696d0000000000000081529050612eef565b602080825281016109df81613c91565b60138152602081017f5469636b657420696420746f6f20736d616c6c0000000000000000000000000081529050612eef565b602080825281016109df81613cd3565b60138152602081017f5469636b657420696420746f6f206c617267650000000000000000000000000081529050612eef565b602080825281016109df81613d15565b60278152602081017f4e6f7420746865207469636b6574206f776e6572206f7220616c72656164792081527f636c61696d656400000000000000000000000000000000000000000000000000602082015290506137fe565b602080825281016109df81613d57565b60128152602081017f4f6e6c792068696768657374207072697a65000000000000000000000000000081529050612eef565b602080825281016109df81613dbf565b601b8152602081017f4e6f207469636b65747320617265206265696e6720626f75676874000000000081529050612eef565b602080825281016109df81613e01565b60108152602081017f546f6f206d616e79207469636b6574730000000000000000000000000000000081529050612eef565b602080825281016109df81613e43565b600e8152602081017f526f756e64206e6f74206f70656e00000000000000000000000000000000000081529050612eef565b602080825281016109df81613e85565b60608101613ed58286612f8a565b613ee26020830185612f8a565b613eef6040830184612ce5565b949350505050565b601e8152602081017f5469636b6574206e756d626572206973206f7574736964652072616e6765000081529050612eef565b602080825281016109df81613ef7565b60408101612fa18285612f8a565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015290506137fe565b602080825281016109df81613f47565b63ffffffff16600063fffffffe1982016134a8576134a8613480565b602b8152602081017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015290506137fe565b602080825281016109df81613fcb565b6000612aad6000198484613aeb56fea2646970667358221220669f22c487ed3ba573532bdf1ffa489b508ea568585f8a15580ab0b53b29eec764736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061030a5760003560e01c80636fa053eb1161019c578063b5877b22116100ee578063e1059fe511610097578063f2b3c80911610071578063f2b3c80914610718578063f2fde38b14610721578063fcbf8b241461073457600080fd5b8063e1059fe5146106df578063e359ebec146106f2578063f0f442601461070557600080fd5b8063c914914f116100c8578063c914914f146106b0578063cc32d176146106c3578063dcbad90d146106cc57600080fd5b8063b5877b221461066a578063c38de5391461068a578063c6e761a91461069d57600080fd5b80638da5cb5b1161015057806398359fa11161012a57806398359fa11461061e5780639d8ca53114610631578063b46e130e1461064457600080fd5b80638da5cb5b146105da578063972fe683146105eb57806397ff1cac1461060b57600080fd5b80637250e45d116101815780637250e45d1461059d5780637741879b146105a65780638b649b94146105d157600080fd5b80636fa053eb14610582578063715018a61461059557600080fd5b806344848a9911610260578063656f8a2511610209578063686465b8116101e3578063686465b81461055d5780636bcac0ff146105665780636be4097c1461057957600080fd5b8063656f8a251461052257806365dc59d61461052a578063681312f51461054a57600080fd5b80635745464b1161023a5780635745464b146104cf5780635b0d64c2146104e257806361d027b31461050257600080fd5b806344848a9914610462578063485cc9551461047557806350b447121461048857600080fd5b80631b6c743b116102c257806326df6c271161029c57806326df6c271461041c5780633732b4ee1461042f5780633f138d4b1461044f57600080fd5b80631b6c743b146103e75780631e6425fd146103f65780632149485d1461040957600080fd5b80631398e076116102f35780631398e0761461033757806314a0792f146103c7578063160344e2146103dd57600080fd5b80630ab2b0861461030f57806312a9769d1461032e575b600080fd5b610318609c5481565b6040516103259190612ced565b60405180910390f35b610318609d5481565b6103b1610345366004612d13565b609e60205260009081526040902080546001820154600e830154600f840154601085015460119095015460ff85169563ffffffff610100870481169665010000000000810482169669010000000000000000008204831696600160681b9092049092169491939092908a565b6040516103259a99989796959493929190612d89565b6103d061271081565b6040516103259190612e1e565b6103e561075f565b005b610318678ac7230489e8000081565b6103e5610404366004612d13565b6108e8565b610318610417366004612e2c565b610952565b61031861042a366004612e8e565b6109e5565b61044261043d366004612d13565b610a23565b6040516103259190612f27565b6103e561045d366004612f35565b610a72565b6103e5610470366004612d13565b610b79565b6103e5610483366004612f57565b610e3b565b6104c1610496366004612d13565b609f6020526000908152604090205463ffffffff81169064010000000090046001600160a01b031682565b604051610325929190612f93565b6103d06104dd366004612d13565b610fe1565b6104f56104f0366004613000565b611050565b6040516103259190613099565b609954610515906001600160a01b031681565b60405161032591906130aa565b610318606281565b60975461053d906001600160a01b031681565b60405161032591906130fa565b6103e5610558366004612d13565b611126565b610318609b5481565b610442610574366004612d13565b6111b0565b610318609a5481565b610442610590366004612d13565b6111fe565b6103e561124c565b6103d0614e1f81565b6103186105b436600461311f565b60a060209081526000928352604080842090915290825290205481565b61031860a95481565b6065546001600160a01b0316610515565b6105fe6105f9366004612e2c565b611282565b60405161032591906132c7565b610318610619366004612d13565b6114a8565b6103e561062c3660046132d8565b6114bf565b6103e561063f366004612d13565b61163b565b6103d06106523660046132f9565b60a26020526000908152604090205463ffffffff1681565b61067d610678366004612e8e565b611794565b6040516103259190613357565b6103e561069836600461337b565b61190c565b61067d6106ab366004612f35565b611e5d565b6103e56106be3660046133ae565b611ed2565b61031860a45481565b60985461053d906001600160a01b031681565b6103e56106ed366004613000565b6122c1565b6103e5610700366004612d13565b6126e9565b6103e56107133660046132d8565b612808565b6103186107d081565b6103e561072f3660046132d8565b6128a8565b610318610742366004612f35565b60a360209081526000928352604080842090915290825290205481565b609a54158061079357506003609a546000908152609e602052604090205460ff16600381111561079157610791612d34565b145b6107b85760405162461bcd60e51b81526004016107af90613470565b60405180910390fd5b6000609a600081546107c990613496565b91829055506000818152609e60205260409020805468ffffffff00000000ff1916650100000000004263ffffffff81169190910291909117600117825560a9549293509091610817916134af565b815463ffffffff919091166901000000000000000000026cffffffff00000000000000000019909116178155678ac7230489e8000060018201556108616002820160a56004612bfc565b5060a454815463ffffffff9091166101000264ffffffff0019909116178155609d80546010830155609b54600e83015560a954905460405184927f5e7c17be0c6c11472c23d5df180e5136efb90395ccff56f1fcfb8db6b5a0a235926108d792429291678ac7230489e800009160a5919061350b565b60405180910390a250506000609d55565b6065546001600160a01b031633146109125760405162461bcd60e51b81526004016107af90613588565b7f67d06ff5b9d79811174a2f0df6d9be98aa3b3f9ae311716140cb1b0668c11843609c5482604051610945929190613598565b60405180910390a1609c55565b600060036000848152609e602052604090205460ff16600381111561097957610979612d34565b14610986575060006109df565b6000838152609e60205260409020600f01548211806109b557506000838152609e60205260409020600e015482105b156109c2575060006109df565b60006109ce8484612904565b90506109db8484836129b2565b9150505b92915050565b60a16020528260005260406000206020528160005260406000208181548110610a0d57600080fd5b9060005260206000200160009250925050505481565b610a2b612c37565b6000828152609e60205260409081902081516080810190925260020160048282826020028201915b815481526020019060010190808311610a535750505050509050919050565b6065546001600160a01b03163314610a9c5760405162461bcd60e51b81526004016107af90613588565b6097546001600160a01b0390811690831603610aca5760405162461bcd60e51b81526004016107af906135e5565b60405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90610af890339085906004016135f5565b6020604051808303816000875af1158015610b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3b919061360e565b507f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab781298282604051610b6d9291906135f5565b60405180910390a15050565b333b15610b985760405162461bcd60e51b81526004016107af90613661565b333214610bb75760405162461bcd60e51b81526004016107af906136a3565b600260015403610bd95760405162461bcd60e51b81526004016107af906136e5565b600260015560036000828152609e602052604090205460ff166003811115610c0357610c03612d34565b14610c205760405162461bcd60e51b81526004016107af90613727565b33600090815260a160209081526040808320848452909152812054815b81811015610d365733600090815260a1602090815260408083208784529091528120805483908110610c7157610c71613737565b600091825260208083209190910154808352609f90915260409091205490915064010000000090046001600160a01b03163314610cc05760405162461bcd60e51b81526004016107af9061377f565b6000818152609f6020526040812080547fffffffffffffffff0000000000000000000000000000000000000000ffffffff169055610cfe8683612904565b905060048163ffffffff161015610d2c576000610d1c8784846129b2565b9050610d2881876134af565b9550505b5050600101610c3d565b508115610dda5760975460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610d6f90339086906004016135f5565b6020604051808303816000875af1158015610d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db2919061360e565b506000838152609e602052604081206011018054849290610dd490849061378f565b90915550505b33600081815260a36020908152604080832087845290915290819020839055518491907f0fdeb33b5931b477077383757e0ba077bd3d8eddfa2cc711c54ad2d3a0cfac6590610e2a908690612ced565b60405180910390a350506001805550565b600054610100900460ff16610e565760005460ff1615610e5a565b303b155b610e765760405162461bcd60e51b81526004016107af90613804565b600054610100900460ff16158015610e98576000805461ffff19166101011790555b610ea0612ab4565b610ea8612ae3565b609780546001600160a01b0385811673ffffffffffffffffffffffffffffffffffffffff19928316179092556098805492851692909116919091179055600a609c5560a26020527f8fa6f0ecb9543d3381552e96aa43533c7f086066e38816919ea0cfae371b342a805463ffffffff1990811660019081179092557f87286cc7b9cf8a377e677776b2644ce858185998d33108f493bdc3c2f07b983680548216600b1790557f984fb507cc15174c9c2666d8998832bf192b808658c1b8547c17c86e40ea581480548216606f17905560036000527f4ed878d3ddcb61d84861a74cb3bb4189ee298a8a85e8f1b99bcffb157f7e18848054909116610457179055609b556103e860a5556107d060a655610bb860a755610fa060a8556203f48060a9558015610fdc576000805461ff00191690555b505050565b600080610ff06127108461378f565b9050600080805b600481101561103a5761100b600a8561382a565b92508261101983600a613842565b61102391906134af565b9150611030600a85613861565b9350600101610ff7565b50611047816127106134af565b95945050505050565b60608160008167ffffffffffffffff81111561106e5761106e613875565b604051908082528060200260200182016040528015611097578160200160208202803683370190505b50905060005b8281101561111d57609f60008787848181106110bb576110bb613737565b90506020020135815260200190815260200160002060000160009054906101000a900463ffffffff168282815181106110f6576110f6613737565b63ffffffff909216602092830291909101909101528061111581613496565b91505061109d565b50949350505050565b6065546001600160a01b031633146111505760405162461bcd60e51b81526004016107af90613588565b600081116111705760405162461bcd60e51b81526004016107af906138bd565b7f93c17a9084c0de51612f63840cc02149425a4bc661e39230c8ca5d4d121f6fb060a954826040516111a3929190613598565b60405180910390a160a955565b6111b8612c37565b6000828152609e6020526040908190208151608081019092526006016004828282602002820191815481526020019060010190808311610a535750505050509050919050565b611206612c37565b6000828152609e602052604090819020815160808101909252600a016004828282602002820191815481526020019060010190808311610a535750505050509050919050565b6065546001600160a01b031633146112765760405162461bcd60e51b81526004016107af90613588565b6112806000612b10565b565b60606000611290848461378f565b61129b9060016134af565b67ffffffffffffffff8111156112b3576112b3613875565b6040519080825280602002602001820160405280156112ec57816020015b6112d9612c55565b8152602001906001900390816112d15790505b509050835b8381116114a0576000818152609e60205260409081902081516101a081019092528054829060ff16600381111561132a5761132a612d34565b600381111561133b5761133b612d34565b8152815463ffffffff61010082048116602084015265010000000000820481166040808501919091526901000000000000000000830482166060850152600160681b90920416608080840191909152600184015460a084015281519081019182905260c09092019190600284019060049082845b8154815260200190600101908083116113af57505050918352505060408051608081019182905260209092019190600684019060049082845b8154815260200190600101908083116113e857505050918352505060408051608081019182905260209092019190600a84019060049082845b815481526020019060010190808311611421575050509183525050600e8201546020820152600f8201546040820152601082015460608201526011909101546080909101528261147260018461378f565b8151811061148257611482613737565b6020026020010181905250808061149890613496565b9150506112f1565b509392505050565b60a581600481106114b857600080fd5b0154905081565b6065546001600160a01b031633146114e95760405162461bcd60e51b81526004016107af90613588565b6003609a546000908152609e602052604090205460ff16600381111561151157611511612d34565b1461152e5760405162461bcd60e51b81526004016107af90613727565b806001600160a01b031663e0c862896040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561156957600080fd5b505af115801561157d573d6000803e3d6000fd5b50505050806001600160a01b03166342619f666040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e391906138d8565b506098805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f383f8cb39dfa7c3fb901a460dd449ea924868f0a92ff03da64740fffa5f1de6290600090a250565b60026001540361165d5760405162461bcd60e51b81526004016107af906136e5565b600260019081556000828152609e602052604090205460ff16600381111561168757611687612d34565b146116a45760405162461bcd60e51b81526004016107af90613951565b6000818152609e60205260409020546901000000000000000000900463ffffffff1642116116e45760405162461bcd60e51b81526004016107af90613993565b609860009054906101000a90046001600160a01b03166001600160a01b031663e0c862896040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561173457600080fd5b505af1158015611748573d6000803e3d6000fd5b5050506000828152609e6020526040808220805460ff19166002179055518392507f8bc84e5d97533c428862626ac41fe7bc09b1ea2ed5e9e330d84092db8df153669190a25060018055565b60606117a0838361378f565b6117ab9060016134af565b67ffffffffffffffff8111156117c3576117c3613875565b6040519080825280602002602001820160405280156117ec578160200160208202803683370190505b509050825b8281116114a0576001600160a01b038516600090815260a1602090815260408083208484529091529020548015611903576001600160a01b038616600090815260a16020908152604080832085845282528083208054825181850281018501909352808352919290919083018282801561188a57602002820191906000526020600020905b815481526020019060010190808311611876575b5050505050905060005b828110156119005760006118c1858484815181106118b4576118b4613737565b6020026020010151610952565b905080866118d060018861378f565b815181106118e0576118e0613737565b602002602001018181516118f491906134af565b90525050600101611894565b50505b506001016117f1565b60026001540361192e5760405162461bcd60e51b81526004016107af906136e5565b600260018190556000838152609e602052604090205460ff16600381111561195857611958612d34565b146119755760405162461bcd60e51b81526004016107af906139d5565b609860009054906101000a90046001600160a01b03166001600160a01b031663eed8e1ee6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ec91906138d8565b8214611a0a5760405162461bcd60e51b81526004016107af90613a17565b6099546001600160a01b0316611a325760405162461bcd60e51b81526004016107af90613a59565b609854604080517f42619f6600000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916342619f669160048083019260209291908290030181865afa158015611a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab991906138d8565b6000848152609e6020526040812060108101549293509190612710611ae083611f40613842565b611aea9190613861565b835490915060009061271090611b0d90610100900463ffffffff166107d0613a69565b611b1d9063ffffffff1685613842565b611b279190613861565b9050600081611b36848661378f565b611b40919061378f565b90506000805b60048163ffffffff161015611d41576000611b62826003613a69565b90506000611b71826001613a79565b611b7c90600a613bb1565b611b86908b613bd4565b63ffffffff808416600090815260a26020526040902054611ba8929116613a79565b60008d815260a06020908152604080832063ffffffff85168452909152902054909150611bd5858261378f565b8a600a018463ffffffff1660048110611bf057611bf0613737565b0155808514611cd457896002018363ffffffff1660048110611c1457611c14613737565b015415611ccf57612710611c28868361378f565b898c6002018663ffffffff1660048110611c4457611c44613737565b0154611c509190613842565b611c5a9190613861565b611c649190613861565b8a6006018463ffffffff1660048110611c7f57611c7f613737565b01556127108860028c0163ffffffff861660048110611ca057611ca0613737565b0154611cac9190613842565b611cb69190613861565b8a6011016000828254611cc991906134af565b90915550505b611d35565b60008a6006018463ffffffff1660048110611cf157611cf1613737565b01556127108860028c0163ffffffff861660048110611d1257611d12613737565b0154611d1e9190613842565b611d289190613861565b611d3290886134af565b96505b93505050600101611b46565b5085547fffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff001660ff19600160681b63ffffffff8a160216176003178655609b54600f8701558715611d9157609d8390555b8115611e125760975460995460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92611dcd9291169086906004016135f5565b6020604051808303816000875af1158015611dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e10919061360e565b505b609a547f98e31a6607b8b15b4d5b91de54f4c09ffe4c4cf162aa532c70b5213754e2e7038883604051611e46929190613bff565b60405180910390a250506001805550505050505050565b6001600160a01b038216600090815260a1602090815260408083208484528252808320805482518185028101850190935280835260609493830182828015611ec457602002820191906000526020600020905b815481526020019060010190808311611eb0575b509398975050505050505050565b333b15611ef15760405162461bcd60e51b81526004016107af90613661565b333214611f105760405162461bcd60e51b81526004016107af906136a3565b600260015403611f325760405162461bcd60e51b81526004016107af906136e5565b600260015560036000868152609e602052604090205460ff166003811115611f5c57611f5c612d34565b14611f795760405162461bcd60e51b81526004016107af90613727565b82818114611f995760405162461bcd60e51b81526004016107af90613c3f565b60008111611fb95760405162461bcd60e51b81526004016107af90613c81565b609c54811115611fdb5760405162461bcd60e51b81526004016107af90613cc3565b6000868152609e60205260408120815b8381101561219e57600088888381811061200757612007613737565b90506020020135905082600e01548110156120345760405162461bcd60e51b81526004016107af90613d05565b82600f015481106120575760405162461bcd60e51b81526004016107af90613d47565b6000818152609f602052604090205464010000000090046001600160a01b031633146120955760405162461bcd60e51b81526004016107af90613daf565b6000818152609f6020526040812080547fffffffffffffffff0000000000000000000000000000000000000000ffffffff1690556120fa8b838a8a878181106120e0576120e0613737565b90506020020160208101906120f591906132f9565b6129b2565b9050600388888581811061211057612110613737565b905060200201602081019061212591906132f9565b63ffffffff161015612185576121688b838a8a8781811061214857612148613737565b905060200201602081019061215d91906132f9565b6120f5906001613a79565b156121855760405162461bcd60e51b81526004016107af90613df1565b61218f81866134af565b94508260010192505050611feb565b5033600090815260a3602090815260408083208b8452909152812080548592906121c99084906134af565b90915550508115612271576000888152609e6020526040812060110180548492906121f590849061378f565b909155505060975460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061222c90339086906004016135f5565b6020604051808303816000875af115801561224b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226f919061360e565b505b87336001600160a01b03167f0fdeb33b5931b477077383757e0ba077bd3d8eddfa2cc711c54ad2d3a0cfac65846040516122ab9190612ced565b60405180910390a3505060018055505050505050565b333b156122e05760405162461bcd60e51b81526004016107af90613661565b3332146122ff5760405162461bcd60e51b81526004016107af906136a3565b6002600154036123215760405162461bcd60e51b81526004016107af906136e5565b600260015580806123445760405162461bcd60e51b81526004016107af90613e33565b609c548111156123665760405162461bcd60e51b81526004016107af90613e75565b609a546000818152609e60205260409020906001825460ff16600381111561239057612390612d34565b146123ad5760405162461bcd60e51b81526004016107af90613eb7565b60006123bd836001015485612b6f565b6097546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd906123f290339030908690600401613ec7565b6020604051808303816000875af1158015612411573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612435919061360e565b506000828152609e6020526040812060100180548392906124579084906134af565b90915550600090505b8481101561269857600087878381811061247c5761247c613737565b905060200201602081019061249191906132f9565b905061271063ffffffff8216108015906124b35750614e1f63ffffffff821611155b6124cf5760405162461bcd60e51b81526004016107af90613f29565b600084815260a060205260408120906124e9600a84613bd4565b6124f4906001613a79565b63ffffffff1663ffffffff1681526020019081526020016000206000815461251b90613496565b90915550600084815260a06020526040812090612539606484613bd4565b61254490600b613a79565b63ffffffff1663ffffffff1681526020019081526020016000206000815461256b90613496565b90915550600084815260a0602052604081209061258a6103e884613bd4565b61259590606f613a79565b63ffffffff1663ffffffff168152602001908152602001600020600081546125bc90613496565b90915550600084815260a060205260408120906125db61271084613bd4565b6125e790610457613a79565b63ffffffff1663ffffffff1681526020019081526020016000206000815461260e90613496565b90915550609b805433600081815260a1602090815260408083208a8452825280832080546001818101835591855283852001869055948352609f909152902080546401000000009092027fffffffffffffffff00000000000000000000000000000000000000000000000090921663ffffffff909516949094171790925580548201905501612460565b5081336001600160a01b03167fc7c1448de202b1838ad1d7fae75dbd69dc79f98d656f7b30f08dc451c9ab7ff886846040516126d5929190613598565b60405180910390a350506001805550505050565b609a5460016000828152609e602052604090205460ff16600381111561271157612711612d34565b1461272e5760405162461bcd60e51b81526004016107af90613eb7565b6000818152609e60205260408120601001805484929061274f9084906134af565b90915550506097546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061278890339030908790600401613ec7565b6020604051808303816000875af11580156127a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127cb919061360e565b50807f1bbd659dd628a25f7ff2eabb69c74a56939c539728282275c1c9c1a2d3e34049836040516127fc9190612ced565b60405180910390a25050565b6065546001600160a01b031633146128325760405162461bcd60e51b81526004016107af90613588565b6099546040517f8c3aa5f43a388513435861bf27dfad7829cd248696fed367c62d441f6295449691612871916001600160a01b03909116908490613f39565b60405180910390a16099805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6065546001600160a01b031633146128d25760405162461bcd60e51b81526004016107af90613588565b6001600160a01b0381166128f85760405162461bcd60e51b81526004016107af90613f9f565b61290181612b10565b50565b6000818152609f6020908152604080832054858452609e9092529091205460049163ffffffff90811691600160681b90041660015b60048163ffffffff16116129a95761295281600a613bb1565b61295c9084613bd4565b63ffffffff1661296d82600a613bb1565b6129779084613bd4565b63ffffffff16036129945761298d600182613a69565b9350612999565b6129a9565b6129a281613faf565b9050612939565b50505092915050565b6000828152609f6020908152604080832054868452609e90925282205463ffffffff91821691600160681b90910416826129ed856001613a79565b6129f890600a613bb1565b90506000612a068284613bd4565b63ffffffff808816600090815260a26020526040902054612a28929116613a79565b90506000612a368386613bd4565b63ffffffff808916600090815260a26020526040902054612a58929116613a79565b90508063ffffffff168263ffffffff1603612aa3576000898152609e6020526040902060060163ffffffff881660048110612a9557612a95613737565b015495505050505050612aad565b6000955050505050505b9392505050565b600054610100900460ff16612adb5760405162461bcd60e51b81526004016107af90614023565b611280612bcc565b600054610100900460ff16612b0a5760405162461bcd60e51b81526004016107af90614023565b60018055565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001821115612bc5576000612b8760018461378f565b9050612b94816064614033565b612b9f826062614033565b612ba98587613842565b612bb39190613842565b612bbd9190613861565b9150506109df565b5090919050565b600054610100900460ff16612bf35760405162461bcd60e51b81526004016107af90614023565b61128033612b10565b8260048101928215612c27579182015b82811115612c27578254825591600101919060010190612c0c565b50612c33929150612cd0565b5090565b60405180608001604052806004906020820280368337509192915050565b604080516101a08101909152806000815260006020820181905260408201819052606082018190526080820181905260a082015260c001612c94612c37565b8152602001612ca1612c37565b8152602001612cae612c37565b8152602001600081526020016000815260200160008152602001600081525090565b5b80821115612c335760008155600101612cd1565b805b82525050565b602081016109df8284612ce5565b805b811461290157600080fd5b80356109df81612cfb565b600060208284031215612d2857612d28600080fd5b60006109db8484612d08565b634e487b7160e01b600052602160045260246000fd5b6004811061290157612901612d34565b80612d6481612d4a565b919050565b60006109df82612d5a565b612ce781612d69565b63ffffffff8116612ce7565b6101408101612d98828d612d74565b612da5602083018c612d7d565b612db2604083018b612d7d565b612dbf606083018a612d7d565b612dcc6080830189612d7d565b612dd960a0830188612ce5565b612de660c0830187612ce5565b612df360e0830186612ce5565b612e01610100830185612ce5565b612e0f610120830184612ce5565b9b9a5050505050505050505050565b602081016109df8284612d7d565b60008060408385031215612e4257612e42600080fd5b6000612e4e8585612d08565b9250506020612e5f85828601612d08565b9150509250929050565b60006001600160a01b0382166109df565b612cfd81612e69565b80356109df81612e7a565b600080600060608486031215612ea657612ea6600080fd5b6000612eb28686612e83565b9350506020612ec386828701612d08565b9250506040612ed486828701612d08565b9150509250925092565b612ee88282612ce5565b5060200190565b60200190565b60048160005b82811015612f20578151612f0f8682612ede565b955050602082019150600101612efb565b5050505050565b608081016109df8284612ef5565b60008060408385031215612f4b57612f4b600080fd5b6000612e4e8585612e83565b60008060408385031215612f6d57612f6d600080fd5b6000612f798585612e83565b9250506020612e5f85828601612e83565b612ce781612e69565b60408101612fa18285612d7d565b612aad6020830184612f8a565b60008083601f840112612fc357612fc3600080fd5b50813567ffffffffffffffff811115612fde57612fde600080fd5b602083019150836020820283011115612ff957612ff9600080fd5b9250929050565b6000806020838503121561301657613016600080fd5b823567ffffffffffffffff81111561303057613030600080fd5b61303c85828601612fae565b92509250509250929050565b612ee88282612d7d565b600061305c825190565b808452602093840193830160005b8281101561308f57815161307e8782613048565b96505060208201915060010161306a565b5093949350505050565b60208082528101612aad8184613052565b602081016109df8284612f8a565b60006109df6001600160a01b0383166130cf565b90565b6001600160a01b031690565b60006109df826130b8565b60006109df826130db565b612ce7816130e6565b602081016109df82846130f1565b63ffffffff8116612cfd565b80356109df81613108565b6000806040838503121561313557613135600080fd5b60006131418585612d08565b9250506020612e5f85828601613114565b60048160005b82811015612f2057815161316c8682612ede565b955050602082019150600101613158565b80516131898382612d74565b50602081015161319c6020840182612d7d565b5060408101516131af6040840182612d7d565b5060608101516131c26060840182612d7d565b5060808101516131d56080840182612d7d565b5060a08101516131e860a0840182612ce5565b5060c08101516131fb60c0840182613152565b5060e081015161320f610140840182613152565b506101008101516132246101c0840182613152565b50610120810151613239610240840182612ce5565b5061014081015161324e610260840182612ce5565b50610160810151613263610280840182612ce5565b50610180810151610fdc6102a0840182612ce5565b613282828261317d565b506102c00190565b6000613294825190565b808452602093840193830160005b8281101561308f5781516132b68782613278565b9650506020820191506001016132a2565b60208082528101612aad818461328a565b6000602082840312156132ed576132ed600080fd5b60006109db8484612e83565b60006020828403121561330e5761330e600080fd5b60006109db8484613114565b6000613324825190565b808452602093840193830160005b8281101561308f5781516133468782612ede565b965050602082019150600101613332565b60208082528101612aad818461331a565b801515612cfd565b80356109df81613368565b6000806040838503121561339157613391600080fd5b600061339d8585612d08565b9250506020612e5f85828601613370565b6000806000806000606086880312156133c9576133c9600080fd5b60006133d58888612d08565b955050602086013567ffffffffffffffff8111156133f5576133f5600080fd5b61340188828901612fae565b9450945050604086013567ffffffffffffffff81111561342357613423600080fd5b61342f88828901612fae565b92509250509295509295909350565b600c8152602081017f57726f6e6720737461747573000000000000000000000000000000000000000081529050612eef565b602080825281016109df8161343e565b634e487b7160e01b600052601160045260246000fd5b6000600182016134a8576134a8613480565b5060010190565b600082198211156134c2576134c2613480565b500190565b6000816109df565b60006109df82546134c7565b60048160005b82811015612f20576134f2826134cf565b6134fc8682612ede565b955050600191820191016134e1565b610100810161351a8288612ce5565b6135276020830187612ce5565b6135346040830186612ce5565b61354160608301856134db565b61354e60e0830184612ce5565b9695505050505050565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152612eef565b602080825281016109df81613558565b604081016135a68285612ce5565b612aad6020830184612ce5565b60158152602081017f43616e6e6f7420626520444547495320746f6b656e000000000000000000000081529050612eef565b602080825281016109df816135b3565b604081016135a68285612f8a565b80516109df81613368565b60006020828403121561362357613623600080fd5b60006109db8484613603565b60148152602081017f436f6e7472616374206e6f7420616c6c6f77656400000000000000000000000081529050612eef565b602080825281016109df8161362f565b601a8152602081017f50726f787920636f6e7472616374206e6f7420616c6c6f77656400000000000081529050612eef565b602080825281016109df81613671565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050612eef565b602080825281016109df816136b3565b60138152602081017f526f756e64206e6f7420636c61696d61626c650000000000000000000000000081529050612eef565b602080825281016109df816136f5565b634e487b7160e01b600052603260045260246000fd5b60148152602081017f4e6f7420746865207469636b6574206f776e657200000000000000000000000081529050612eef565b602080825281016109df8161374d565b815b91506000828210156137a5576137a5613480565b500390565b602e8152602081017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181527f647920696e697469616c697a6564000000000000000000000000000000000000602082015290505b60400190565b602080825281016109df816137aa565b634e487b7160e01b600052601260045260246000fd5b815b915060008261383d5761383d613814565b500690565b600081600019048311821515161561385c5761385c613480565b500290565b60008261387057613870613814565b500490565b634e487b7160e01b600052604160045260246000fd5b60118152602081017f5a65726f20726f756e64206c656e67746800000000000000000000000000000081529050612eef565b602080825281016109df8161388b565b80516109df81612cfb565b6000602082840312156138ed576138ed600080fd5b60006109db84846138cd565b60228152602081017f74686973206c6f7474657279206973206e6f74206f70656e2063757272656e7481527f6c79000000000000000000000000000000000000000000000000000000000000602082015290506137fe565b602080825281016109df816138f9565b60128152602081017f4e6f7420726561636820656e642074696d65000000000000000000000000000081529050612eef565b602080825281016109df81613961565b60128152602081017f4c6f7474657279206e6f7420636c6f736564000000000000000000000000000081529050612eef565b602080825281016109df816139a3565b60168152602081017f46696e616c206e756d626572206e6f7420647261776e0000000000000000000081529050612eef565b602080825281016109df816139e5565b60138152602081017f5472656173757279206973206e6f74207365740000000000000000000000000081529050612eef565b602080825281016109df81613a27565b63ffffffff908116908216613791565b63ffffffff8116905063ffffffff8216915060008263ffffffff038211156134c2576134c2613480565b80825b6001851115613ae257808604811115613ac157613ac1613480565b6001851615613acf57908102905b8002613adb8560011c90565b9450613aa6565b94509492505050565b600082613afa57506001612aad565b81613b0757506000612aad565b8160018114613b1d5760028114613b2757613b54565b6001915050612aad565b60ff841115613b3857613b38613480565b8360020a915084821115613b4e57613b4e613480565b50612aad565b5060208310610133831016604e8410600b8410161715613b87575081810a83811115613b8257613b82613480565b612aad565b613b948484846001613aa3565b92509050818404811115613baa57613baa613480565b0292915050565b63ffffffff8116905063ffffffff821691506000612aad63ffffffff8484613aeb565b63ffffffff90811690821661382c565b60006109df6130cc63ffffffff841681565b612ce781613be4565b604081016135a68285613bf6565b600f8152602081017f4e6f742073616d65206c656e677468000000000000000000000000000000000081529050612eef565b602080825281016109df81613c0d565b600a8152602081017f4e6f207469636b6574730000000000000000000000000000000000000000000081529050612eef565b602080825281016109df81613c4f565b60198152602081017f546f6f206d616e79207469636b65747320746f20636c61696d0000000000000081529050612eef565b602080825281016109df81613c91565b60138152602081017f5469636b657420696420746f6f20736d616c6c0000000000000000000000000081529050612eef565b602080825281016109df81613cd3565b60138152602081017f5469636b657420696420746f6f206c617267650000000000000000000000000081529050612eef565b602080825281016109df81613d15565b60278152602081017f4e6f7420746865207469636b6574206f776e6572206f7220616c72656164792081527f636c61696d656400000000000000000000000000000000000000000000000000602082015290506137fe565b602080825281016109df81613d57565b60128152602081017f4f6e6c792068696768657374207072697a65000000000000000000000000000081529050612eef565b602080825281016109df81613dbf565b601b8152602081017f4e6f207469636b65747320617265206265696e6720626f75676874000000000081529050612eef565b602080825281016109df81613e01565b60108152602081017f546f6f206d616e79207469636b6574730000000000000000000000000000000081529050612eef565b602080825281016109df81613e43565b600e8152602081017f526f756e64206e6f74206f70656e00000000000000000000000000000000000081529050612eef565b602080825281016109df81613e85565b60608101613ed58286612f8a565b613ee26020830185612f8a565b613eef6040830184612ce5565b949350505050565b601e8152602081017f5469636b6574206e756d626572206973206f7574736964652072616e6765000081529050612eef565b602080825281016109df81613ef7565b60408101612fa18285612f8a565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015290506137fe565b602080825281016109df81613f47565b63ffffffff16600063fffffffe1982016134a8576134a8613480565b602b8152602081017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015290506137fe565b602080825281016109df81613fcb565b6000612aad6000198484613aeb56fea2646970667358221220669f22c487ed3ba573532bdf1ffa489b508ea568585f8a15580ab0b53b29eec764736f6c634300080d0033",
  "devdoc": {
    "details": "This lottery uses DEG as tickets and DEG as rewards also      Users can pay 10 DEG to buy one ticket and choose four digits for each ticket      After the lottery was closed, it will draw a final random number through Chainlink VRF      Users get rewards according to the how many numbers they matched with the final number      Reward distribution:      80% of each round prize pool will be distributed to the winners (breakdowns for different levels)      20% of each round prize pool will be rolled to next round (except for treasury fee)",
    "kind": "dev",
    "methods": {
      "_reverseTicketNumber(uint256)": {
        "params": {
          "_number": "Input ticket number"
        },
        "returns": {
          "_0": "reversedNumber Reversed number + 10000"
        }
      },
      "buyTickets(uint32[])": {
        "details": "Need to transfer the 4-digit number to a 5-digit number to be used here (+10000)      Can not be called by a smart contract      Can only purchase in the current round      E.g. You are selecting the number of 1-2-3-4 (lowest to highest)           You will need to pass a number \"14321\"",
        "params": {
          "_ticketNumbers": "Array of ticket numbers between 10,000 and 19,999"
        }
      },
      "changeRandomGenerator(address)": {
        "details": "The calls to functions are used to verify the new generator implements them properly.      It is necessary to wait for the VRF response before starting a round.",
        "params": {
          "_randomGeneratorAddress": "address of the random generator"
        }
      },
      "claimAllTickets(uint256)": {
        "details": "Callable by users only, not contract      Gas cost may be oversized, recommended to get brackets offchain first      Get brackets offchain and call function \"claimTickets\"",
        "params": {
          "_lotteryId": "Lottery id"
        }
      },
      "claimTickets(uint256,uint256[],uint32[])": {
        "details": "Callable by users only, not contract",
        "params": {
          "_brackets": "Bracket / prize level of each ticket",
          "_lotteryId": "Lottery id",
          "_ticketIds": "Array of ticket ids"
        }
      },
      "closeLottery(uint256)": {
        "params": {
          "_lotteryId": "Lottery round"
        }
      },
      "drawFinalNumberAndMakeLotteryClaimable(uint256,bool)": {
        "params": {
          "_autoInjection": "Auto inject funds into next lottery",
          "_lotteryId": "Lottery round"
        }
      },
      "initialize(address,address)": {
        "details": "RandomNumberGenerator must be deployed prior to this contract",
        "params": {
          "_degis": "Address of DEG",
          "_randomGenerator": "Address of the RandomGenerator contract used to work with ChainLink VRF"
        }
      },
      "injectFunds(uint256)": {
        "details": "Those DEG transferred to this contract but not by this function      will not be counted for prize pools",
        "params": {
          "_amount": "DEG amount to inject"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverWrongTokens(address,uint256)": {
        "params": {
          "_tokenAddress": "Address of the token to withdraw",
          "_tokenAmount": "Token amount to withdraw"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMaxNumberTicketsEachTime(uint256)": {
        "params": {
          "_maxNumber": "Max number each time"
        }
      },
      "setRoundLength(uint256)": {
        "params": {
          "_length": "New round length"
        }
      },
      "setTreasury(address)": {
        "params": {
          "_treasury": "Treasury address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "viewAllLottery(uint256,uint256)": {
        "params": {
          "_endId": "End lottery id",
          "_startId": "Start lottery id"
        },
        "returns": {
          "_0": "allLottery Array of lottery information"
        }
      },
      "viewNumbersPerTicketId(uint256[])": {
        "params": {
          "_ticketIds": "Array of ticketId"
        },
        "returns": {
          "_0": "ticketNumbers Array of ticket numbers"
        }
      },
      "viewRewardPerTicketInBracket(uint256)": {
        "returns": {
          "_0": "rewardPerTicketInBracket  Reward per ticket in a given round"
        }
      },
      "viewRewardsForTicketId(uint256,uint256)": {
        "details": "This function will help to find the highest prize bracket      But this computation is encouraged to be done off-chain      Better to get bracket first and then call \"_calculateRewardsForTicketId()\"",
        "params": {
          "_lotteryId": "Lottery round",
          "_ticketId": "Ticket id"
        },
        "returns": {
          "_0": "reward Ticket reward"
        }
      },
      "viewUserRewards(address,uint256,uint256)": {
        "params": {
          "_endRound": "End lottery id",
          "_startRound": "Start lottery id",
          "_user": "User address"
        },
        "returns": {
          "userRewards": "Array of user rewards (round as index)"
        }
      },
      "viewWalletTicketIds(address,uint256)": {
        "params": {
          "_lotteryId": "Lottery id to check",
          "_wallet": "Address to check owned tickets"
        },
        "returns": {
          "_0": "ticketIds Ticket ids this user has in this round"
        }
      },
      "viewWinnerAmount(uint256)": {
        "returns": {
          "_0": "countWinnersPerBracket Array of winner ticket amount for each bracket"
        }
      }
    },
    "title": "DegisLotteryV2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_reverseTicketNumber(uint256)": {
        "notice": "Reverse the ticket number         E.g. User want to buy \"1234\"              The input number will be 11234              The reversed output will be 14321"
      },
      "buyTickets(uint32[])": {
        "notice": "Buy tickets for the current lottery round"
      },
      "changeRandomGenerator(address)": {
        "notice": "Change the random generator contract address"
      },
      "claimAllTickets(uint256)": {
        "notice": "Claim all winning tickets for a lottery round"
      },
      "claimTickets(uint256,uint256[],uint32[])": {
        "notice": "Claim winning tickets"
      },
      "closeLottery(uint256)": {
        "notice": "Close a lottery"
      },
      "drawFinalNumberAndMakeLotteryClaimable(uint256,bool)": {
        "notice": "Draw the final number, calculate reward in Degis for each group, and make this lottery claimable (need to wait for the random generator)"
      },
      "initialize(address,address)": {
        "notice": "Initialize function"
      },
      "injectFunds(uint256)": {
        "notice": "Inject funds"
      },
      "recoverWrongTokens(address,uint256)": {
        "notice": "Recover wrong tokens sent to the contract, only by the owner          All tokens except Degis are wrong tokens"
      },
      "setMaxNumberTicketsEachTime(uint256)": {
        "notice": "Set max number can buy/claim each time"
      },
      "setRoundLength(uint256)": {
        "notice": "Set round length"
      },
      "setTreasury(address)": {
        "notice": "Set treasury wallet address"
      },
      "startLottery()": {
        "notice": "Start a new lottery round"
      },
      "viewAllLottery(uint256,uint256)": {
        "notice": "View lottery information"
      },
      "viewNumbersPerTicketId(uint256[])": {
        "notice": "View ticker numbers for an array of ticket ids"
      },
      "viewRewardPerTicketInBracket(uint256)": {
        "notice": "View reward per ticket in a given round"
      },
      "viewRewardsBreakdown(uint256)": {
        "notice": "View rewards breakdown for a given lottery round"
      },
      "viewRewardsForTicketId(uint256,uint256)": {
        "notice": "View rewards for a given ticket in a given lottery round"
      },
      "viewUserRewards(address,uint256,uint256)": {
        "notice": "View user rewards between rounds"
      },
      "viewWalletTicketIds(address,uint256)": {
        "notice": "Get a user's ticekts in a given lottery round"
      },
      "viewWinnerAmount(uint256)": {
        "notice": "View winner ticket amount for a given lottery round, for each bracket"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2670,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2673,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2862,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2906,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3907,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2550,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 2662,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 23919,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "DegisToken",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IERC20)5510"
      },
      {
        "astId": 23922,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "randomGenerator",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IRandomNumberGenerator)26750"
      },
      {
        "astId": 23924,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "treasury",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 23926,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "currentLotteryId",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 23928,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "currentTicketId",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 23930,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "maxNumberTicketsEachTime",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 23932,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "pendingInjectionNextLottery",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 23976,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "lotteries",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_uint256,t_struct(Lottery)23971_storage)"
      },
      {
        "astId": 23986,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "tickets",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_uint256,t_struct(Ticket)23981_storage)"
      },
      {
        "astId": 23992,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "_numberTicketsPerLotteryId",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_uint256,t_mapping(t_uint32,t_uint256))"
      },
      {
        "astId": 23999,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "_userTicketIds",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 24003,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "_bracketCalculator",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_uint32,t_uint32)"
      },
      {
        "astId": 24009,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "userClaimed",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 24011,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "treasuryFee",
        "offset": 0,
        "slot": "164",
        "type": "t_uint256"
      },
      {
        "astId": 24015,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "rewardsBreakdown",
        "offset": 0,
        "slot": "165",
        "type": "t_array(t_uint256)4_storage"
      },
      {
        "astId": 24017,
        "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
        "label": "roundLength",
        "offset": 0,
        "slot": "169",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)5510": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRandomNumberGenerator)26750": {
        "encoding": "inplace",
        "label": "contract IRandomNumberGenerator",
        "numberOfBytes": "20"
      },
      "t_enum(Status)23937": {
        "encoding": "inplace",
        "label": "enum DegisLotteryV2.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Lottery)23971_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DegisLotteryV2.Lottery)",
        "numberOfBytes": "32",
        "value": "t_struct(Lottery)23971_storage"
      },
      "t_mapping(t_uint256,t_struct(Ticket)23981_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DegisLotteryV2.Ticket)",
        "numberOfBytes": "32",
        "value": "t_struct(Ticket)23981_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_struct(Lottery)23971_storage": {
        "encoding": "inplace",
        "label": "struct DegisLotteryV2.Lottery",
        "members": [
          {
            "astId": 23940,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Status)23937"
          },
          {
            "astId": 23942,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "treasuryFee",
            "offset": 1,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 23944,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "startTime",
            "offset": 5,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 23946,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "endTime",
            "offset": 9,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 23948,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "finalNumber",
            "offset": 13,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 23950,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "ticketPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 23954,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "rewardsBreakdown",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 23958,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "rewardPerTicketInBracket",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 23962,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "countWinnersPerBracket",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 23964,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "firstTicketId",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 23966,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "firstTicketIdNextRound",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 23968,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "amountCollected",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          },
          {
            "astId": 23970,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "pendingRewards",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "576"
      },
      "t_struct(Ticket)23981_storage": {
        "encoding": "inplace",
        "label": "struct DegisLotteryV2.Ticket",
        "members": [
          {
            "astId": 23978,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 23980,
            "contract": "contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2",
            "label": "owner",
            "offset": 4,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}