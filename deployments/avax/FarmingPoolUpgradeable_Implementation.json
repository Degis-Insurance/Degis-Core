{
  "address": "0x7Df9E40Bcff4BF187F18e5F5F9361267a894beFc",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basicDegisPerSecond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bonusDegisPerSecond",
          "type": "uint256"
        }
      ],
      "name": "DegisRewardChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FarmingPoolStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FarmingPoolStopped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pendingReward",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basicDegisPerSecond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bonusDegisPerSecond",
          "type": "uint256"
        }
      ],
      "name": "NewPoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accDegisPerShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accDegisPerBonusShare",
          "type": "uint256"
        }
      ],
      "name": "PoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        }
      ],
      "name": "StartTimestampChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_nextPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_basicDegisPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bonusDegisPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRewardLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "degis",
      "outputs": [
        {
          "internalType": "contract IDegisToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "extraClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "basicDegisPerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bonusDegisPerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accDegisPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accDegisPerBonusShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBonus",
              "type": "uint256"
            }
          ],
          "internalType": "struct FarmingPoolUpgradeable.PoolInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_degis",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isFarming",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingDegis",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "piecewiseBasic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolList",
      "outputs": [
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "basicDegisPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bonusDegisPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accDegisPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accDegisPerBonusShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBonus",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolRewardLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_basicDegisPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bonusDegisPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "setDegisReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_threshold",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_reward",
          "type": "uint256[]"
        }
      ],
      "name": "setPiecewise",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setStartTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_veDEG",
          "type": "address"
        }
      ],
      "name": "setVeDEG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "thresholdBasic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newVeDEGBalance",
          "type": "uint256"
        }
      ],
      "name": "updateBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bonus",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veDEG",
      "outputs": [
        {
          "internalType": "contract IVeDEG",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8fe79b729e785582f90bfd1b9c45326b6ba605e2a852960e5bd7036e332ece4f",
  "receipt": {
    "to": null,
    "from": "0xeB496257B64Cc2D39c291B209F465f3cfADE0873",
    "contractAddress": "0x7Df9E40Bcff4BF187F18e5F5F9361267a894beFc",
    "transactionIndex": 11,
    "gasUsed": "3170182",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa929a51da8365fe71ae97445f64ccf1cfefe17bc2d78081b964bbb96da43f8ae",
    "transactionHash": "0x8fe79b729e785582f90bfd1b9c45326b6ba605e2a852960e5bd7036e332ece4f",
    "logs": [],
    "blockNumber": 15717898,
    "cumulativeGasUsed": "4578988",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "c9c062601ced39fb658308cb86377c61",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basicDegisPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusDegisPerSecond\",\"type\":\"uint256\"}],\"name\":\"DegisRewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FarmingPoolStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FarmingPoolStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basicDegisPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusDegisPerSecond\",\"type\":\"uint256\"}],\"name\":\"NewPoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accDegisPerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accDegisPerBonusShare\",\"type\":\"uint256\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"}],\"name\":\"StartTimestampChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nextPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_basicDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRewardLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"degis\",\"outputs\":[{\"internalType\":\"contract IDegisToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"extraClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basicDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDegisPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDegisPerBonusShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"}],\"internalType\":\"struct FarmingPoolUpgradeable.PoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_degis\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isFarming\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingDegis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"piecewiseBasic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basicDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDegisPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDegisPerBonusShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolRewardLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basicDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setDegisReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_threshold\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_reward\",\"type\":\"uint256[]\"}],\"name\":\"setPiecewise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"}],\"name\":\"setStartTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_veDEG\",\"type\":\"address\"}],\"name\":\"setVeDEG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"thresholdBasic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newVeDEGBalance\",\"type\":\"uint256\"}],\"name\":\"updateBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veDEG\",\"outputs\":[{\"internalType\":\"contract IVeDEG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool id starts from 1 rather than 0         The degis reward is calculated by timestamp rather than block number         VeDEG will boost the farming speed by having a extra reward type         The extra reward is shared by those staking lptokens with veDEG balances         Every time the veDEG balance change, the reward will be updated         The basic reward depends on the liquidity inside the pool         Update with a piecewise function         liquidity amount:   |---------------|------------------|----------------                             0           threshold 1        threshold 2          reward speed:            speed1          speed2             speed3         The speed update will be updated one tx after the last tx that triggers the threshold         The reward update will be another one tx later\",\"kind\":\"dev\",\"methods\":{\"add(address,uint256,uint256,bool)\":{\"details\":\"Can only be called by the owner      The reward speed can be 0 and set later by setDegisReward function\",\"params\":{\"_basicDegisPerSecond\":\"Basic reward speed(per second) for this new pool\",\"_bonusDegisPerSecond\":\"Bonus reward speed(per second) for this new pool\",\"_lpToken\":\"LP token address\",\"_withUpdate\":\"Whether update all pools' status\"}},\"getPoolList()\":{\"returns\":{\"_0\":\"pooList Total pool list\"}},\"getUserBalance(uint256,address)\":{\"params\":{\"_poolId\":\"Id of the pool\",\"_user\":\"User address\"},\"returns\":{\"_0\":\"balance User's balance (lpToken)\"}},\"harvest(uint256,address)\":{\"params\":{\"_poolId\":\"Id of the farming pool\",\"_to\":\"Receiver of degis rewards\"}},\"massUpdatePools()\":{\"details\":\"Can be called by anyone      Only update those active pools\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingDegis(uint256,address)\":{\"params\":{\"_poolId\":\"PoolId of this farming pool\",\"_user\":\"User address\"},\"returns\":{\"_0\":\"pendingDegisAmount Amount of pending degis\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDegisReward(uint256,uint256,uint256,bool)\":{\"params\":{\"_basicDegisPerSecond\":\"New basic reward amount per second\",\"_bonusDegisPerSecond\":\"New bonus reward amount per second\",\"_poolId\":\"Id of the farming pool\",\"_withUpdate\":\"Whether update all pools\"}},\"setPiecewise(uint256,uint256[],uint256[])\":{\"params\":{\"_poolId\":\"Id of the pool\",\"_reward\":\"Piecewise reward\",\"_threshold\":\"Piecewise threshold\"}},\"setStartTimestamp(uint256)\":{\"params\":{\"_startTimestamp\":\"New start block timestamp\"}},\"stake(uint256,uint256)\":{\"details\":\"Can only stake to the pools that are still farming\",\"params\":{\"_amount\":\"Staking amount\",\"_poolId\":\"Id of the farming pool\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBonus(address,uint256)\":{\"details\":\"When veDEG has balance change      Only called by veDEG contract\",\"params\":{\"_newVeDEGBalance\":\"New veDEG balance\",\"_user\":\"User address\"}},\"updatePool(uint256)\":{\"params\":{\"_poolId\":\"Id of the farming pool\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of lp tokens to withdraw\",\"_poolId\":\"Id of the farming pool\"}}},\"title\":\"Farming Pool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add(address,uint256,uint256,bool)\":{\"notice\":\"Add a new lp into the pool\"},\"getPoolList()\":{\"notice\":\"Get the total pool list\"},\"getUserBalance(uint256,address)\":{\"notice\":\"Get a user's balance\"},\"harvest(uint256,address)\":{\"notice\":\"Harvest the degis reward and can be sent to another address\"},\"massUpdatePools()\":{\"notice\":\"Update all farming pools (except for those stopped ones)\"},\"pendingDegis(uint256,address)\":{\"notice\":\"Check the amount of pending degis reward\"},\"setDegisReward(uint256,uint256,uint256,bool)\":{\"notice\":\"Update the degisPerSecond for a specific pool (set to 0 to stop farming)\"},\"setPiecewise(uint256,uint256[],uint256[])\":{\"notice\":\"Set piecewise reward and threshold\"},\"setStartTimestamp(uint256)\":{\"notice\":\"Set the start block timestamp\"},\"stake(uint256,uint256)\":{\"notice\":\"Stake LP token into the farming pool\"},\"updateBonus(address,uint256)\":{\"notice\":\"Update a user's bonus\"},\"updatePool(uint256)\":{\"notice\":\"Update the pool's reward status\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw lptoken from the pool\"}},\"notice\":\"This contract is for LPToken mining on Degis\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farming/FarmingPoolUpgradeable.sol\":\"FarmingPoolUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe7713f1b362f8b80e28d5a7e8b66c3f2236203fd86d01eca0a29a9e6a3f4d97f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"contracts/farming/FarmingPoolUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\n/*\\r\\n //======================================================================\\\\\\\\\\r\\n //======================================================================\\\\\\\\\\r\\n    *******         **********     ***********     *****     ***********\\r\\n    *      *        *              *                 *       *\\r\\n    *        *      *              *                 *       *\\r\\n    *         *     *              *                 *       *\\r\\n    *         *     *              *                 *       *\\r\\n    *         *     **********     *       *****     *       ***********\\r\\n    *         *     *              *         *       *                 *\\r\\n    *         *     *              *         *       *                 *\\r\\n    *        *      *              *         *       *                 *\\r\\n    *      *        *              *         *       *                 *\\r\\n    *******         **********     ***********     *****     ***********\\r\\n \\\\\\\\======================================================================//\\r\\n \\\\\\\\======================================================================//\\r\\n*/\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport { PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport { IDegisToken } from \\\"../tokens/interfaces/IDegisToken.sol\\\";\\r\\nimport { Math } from \\\"../libraries/Math.sol\\\";\\r\\nimport { IVeDEG } from \\\"../governance/interfaces/IVeDEG.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title  Farming Pool\\r\\n * @notice This contract is for LPToken mining on Degis\\r\\n * @dev    The pool id starts from 1 rather than 0\\r\\n *         The degis reward is calculated by timestamp rather than block number\\r\\n *\\r\\n *         VeDEG will boost the farming speed by having a extra reward type\\r\\n *         The extra reward is shared by those staking lptokens with veDEG balances\\r\\n *         Every time the veDEG balance change, the reward will be updated\\r\\n *\\r\\n *         The basic reward depends on the liquidity inside the pool\\r\\n *         Update with a piecewise function\\r\\n *         liquidity amount:   |---------------|------------------|----------------\\r\\n *                             0           threshold 1        threshold 2\\r\\n *          reward speed:            speed1          speed2             speed3\\r\\n *\\r\\n *         The speed update will be updated one tx after the last tx that triggers the threshold\\r\\n *         The reward update will be another one tx later\\r\\n */\\r\\ncontract FarmingPoolUpgradeable is\\r\\n    Initializable,\\r\\n    OwnableUpgradeable,\\r\\n    ReentrancyGuardUpgradeable,\\r\\n    PausableUpgradeable\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeERC20 for IDegisToken;\\r\\n    using Math for uint256;\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************* Variables **************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    string public constant name = \\\"Degis LP Farming Pool\\\";\\r\\n\\r\\n    // The reward token is degis\\r\\n    IDegisToken public degis;\\r\\n\\r\\n    // The bonus reward depends on veDEG\\r\\n    IVeDEG public veDEG;\\r\\n\\r\\n    // SCALE/Precision used for calculating rewards\\r\\n    uint256 public constant SCALE = 1e12;\\r\\n\\r\\n    // PoolId starts from 1\\r\\n    uint256 public _nextPoolId;\\r\\n\\r\\n    // Farming starts from a certain block timestamp\\r\\n    // To keep the same with naughty price pools, we change from block numbers to timestamps\\r\\n    uint256 public startTimestamp;\\r\\n\\r\\n    struct PoolInfo {\\r\\n        address lpToken; // LPToken address\\r\\n        uint256 basicDegisPerSecond; // Basic Reward speed\\r\\n        uint256 bonusDegisPerSecond; // Bonus reward speed\\r\\n        uint256 lastRewardTimestamp; // Last reward timestamp\\r\\n        uint256 accDegisPerShare; // Accumulated degis per share (for those without veDEG boosting)\\r\\n        uint256 accDegisPerBonusShare; // Accumulated degis per bonus share (for those with veDEG boosting)\\r\\n        uint256 totalBonus; // Total bonus factors\\r\\n    }\\r\\n    PoolInfo[] public poolList;\\r\\n\\r\\n    // lptoken address => poolId\\r\\n    mapping(address => uint256) public poolMapping;\\r\\n\\r\\n    // poolId => alreadyFarming\\r\\n    mapping(uint256 => bool) public isFarming;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 rewardDebt; // degis reward debt\\r\\n        uint256 stakingBalance; // the amount of a user's staking in the pool\\r\\n        uint256 bonus; // user bonus point (by veDEG balance)\\r\\n    }\\r\\n    // poolId => userAddress => userInfo\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n\\r\\n    // Extra claimable balance when updating bonus from veDEG\\r\\n    mapping(uint256 => mapping(address => uint256)) public extraClaimable;\\r\\n\\r\\n    // Reward speed change with liquidity inside contract\\r\\n    mapping(uint256 => uint256[]) public thresholdBasic;\\r\\n    mapping(uint256 => uint256[]) public piecewiseBasic;\\r\\n\\r\\n    // This state variable is collapased\\r\\n    uint256 public currentRewardLevel;\\r\\n\\r\\n    mapping(uint256 => uint256) public poolRewardLevel;\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // *************************************** Events ***************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    event StartTimestampChanged(uint256 startTimestamp);\\r\\n    event Stake(address staker, uint256 poolId, uint256 amount);\\r\\n    event Withdraw(address staker, uint256 poolId, uint256 amount);\\r\\n    event Harvest(\\r\\n        address staker,\\r\\n        address rewardReceiver,\\r\\n        uint256 poolId,\\r\\n        uint256 pendingReward\\r\\n    );\\r\\n    event NewPoolAdded(\\r\\n        address lpToken,\\r\\n        uint256 basicDegisPerSecond,\\r\\n        uint256 bonusDegisPerSecond\\r\\n    );\\r\\n    event FarmingPoolStarted(uint256 poolId, uint256 timestamp);\\r\\n    event FarmingPoolStopped(uint256 poolId, uint256 timestamp);\\r\\n    event DegisRewardChanged(\\r\\n        uint256 poolId,\\r\\n        uint256 basicDegisPerSecond,\\r\\n        uint256 bonusDegisPerSecond\\r\\n    );\\r\\n    event PoolUpdated(\\r\\n        uint256 poolId,\\r\\n        uint256 accDegisPerShare,\\r\\n        uint256 accDegisPerBonusShare\\r\\n    );\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************* Constructor ************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    function initialize(address _degis) public initializer {\\r\\n        require(_degis != address(0), \\\"Zero address\\\");\\r\\n\\r\\n        __Ownable_init();\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n        __Pausable_init_unchained();\\r\\n\\r\\n        degis = IDegisToken(_degis);\\r\\n\\r\\n        // Start from 1\\r\\n        _nextPoolId = 1;\\r\\n\\r\\n        poolList.push(\\r\\n            PoolInfo({\\r\\n                lpToken: address(0),\\r\\n                basicDegisPerSecond: 0,\\r\\n                bonusDegisPerSecond: 0,\\r\\n                lastRewardTimestamp: 0,\\r\\n                accDegisPerShare: 0,\\r\\n                accDegisPerBonusShare: 0,\\r\\n                totalBonus: 0\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************** Modifiers *************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice The address can not be zero\\r\\n     */\\r\\n    modifier notZeroAddress(address _address) {\\r\\n        require(_address != address(0), \\\"Zero address\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The pool is still in farming\\r\\n     */\\r\\n    modifier stillFarming(uint256 _poolId) {\\r\\n        require(isFarming[_poolId], \\\"Pool is not farming\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // *********************************** View Functions ************************************* //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Check the amount of pending degis reward\\r\\n     * @param _poolId PoolId of this farming pool\\r\\n     * @param _user User address\\r\\n     * @return pendingDegisAmount Amount of pending degis\\r\\n     */\\r\\n    function pendingDegis(uint256 _poolId, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        PoolInfo memory poolInfo = poolList[_poolId];\\r\\n\\r\\n        if (\\r\\n            poolInfo.lastRewardTimestamp == 0 ||\\r\\n            block.timestamp < poolInfo.lastRewardTimestamp ||\\r\\n            block.timestamp < startTimestamp\\r\\n        ) return 0;\\r\\n\\r\\n        UserInfo memory user = userInfo[_poolId][_user];\\r\\n\\r\\n        // Total lp token balance\\r\\n        uint256 lp_balance = IERC20(poolInfo.lpToken).balanceOf(address(this));\\r\\n\\r\\n        // Accumulated shares to be calculated\\r\\n        uint256 accDegisPerShare = poolInfo.accDegisPerShare;\\r\\n        uint256 accDegisPerBonusShare = poolInfo.accDegisPerBonusShare;\\r\\n\\r\\n        if (lp_balance == 0) return 0;\\r\\n        else {\\r\\n            // If the pool is still farming, update the info\\r\\n            if (isFarming[_poolId]) {\\r\\n                // Deigs amount given to this pool\\r\\n                uint256 timePassed = block.timestamp -\\r\\n                    poolInfo.lastRewardTimestamp;\\r\\n                uint256 basicReward = poolInfo.basicDegisPerSecond * timePassed;\\r\\n                // Update accDegisPerShare\\r\\n                // LPToken may have different decimals\\r\\n                accDegisPerShare += (basicReward * SCALE) / lp_balance;\\r\\n\\r\\n                // If there is any bonus reward\\r\\n                if (poolInfo.totalBonus > 0) {\\r\\n                    uint256 bonusReward = poolInfo.bonusDegisPerSecond *\\r\\n                        timePassed;\\r\\n                    accDegisPerBonusShare +=\\r\\n                        (bonusReward * SCALE) /\\r\\n                        poolInfo.totalBonus;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // If the pool has stopped, not update the info\\r\\n            uint256 pending = (user.stakingBalance *\\r\\n                accDegisPerShare +\\r\\n                user.bonus *\\r\\n                accDegisPerBonusShare) /\\r\\n                SCALE +\\r\\n                extraClaimable[_poolId][_user] -\\r\\n                user.rewardDebt;\\r\\n\\r\\n            return pending;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the total pool list\\r\\n     * @return pooList Total pool list\\r\\n     */\\r\\n    function getPoolList() external view returns (PoolInfo[] memory) {\\r\\n        return poolList;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get a user's balance\\r\\n     * @param _poolId Id of the pool\\r\\n     * @param _user User address\\r\\n     * @return balance User's balance (lpToken)\\r\\n     */\\r\\n    function getUserBalance(uint256 _poolId, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return userInfo[_poolId][_user].stakingBalance;\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************* Set Functions ************************************ //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function setVeDEG(address _veDEG) external onlyOwner {\\r\\n        veDEG = IVeDEG(_veDEG);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the start block timestamp\\r\\n     * @param _startTimestamp New start block timestamp\\r\\n     */\\r\\n    function setStartTimestamp(uint256 _startTimestamp)\\r\\n        external\\r\\n        onlyOwner\\r\\n        whenNotPaused\\r\\n    {\\r\\n        // Can only be set before any pool is added\\r\\n        require(\\r\\n            _nextPoolId == 1,\\r\\n            \\\"Can not set start timestamp after adding a pool\\\"\\r\\n        );\\r\\n\\r\\n        startTimestamp = _startTimestamp;\\r\\n        emit StartTimestampChanged(_startTimestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set piecewise reward and threshold\\r\\n     * @param _poolId Id of the pool\\r\\n     * @param _threshold Piecewise threshold\\r\\n     * @param _reward Piecewise reward\\r\\n     */\\r\\n    function setPiecewise(\\r\\n        uint256 _poolId,\\r\\n        uint256[] calldata _threshold,\\r\\n        uint256[] calldata _reward\\r\\n    ) external onlyOwner {\\r\\n        thresholdBasic[_poolId] = _threshold;\\r\\n        piecewiseBasic[_poolId] = _reward;\\r\\n\\r\\n        // If reward for mimimum level is > 0, update isFarming\\r\\n        if (_reward[0] > 0) isFarming[_poolId] = true;\\r\\n        else isFarming[_poolId] = false;\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // *********************************** Main Functions ************************************* //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Add a new lp into the pool\\r\\n     * @dev Can only be called by the owner\\r\\n     *      The reward speed can be 0 and set later by setDegisReward function\\r\\n     * @param _lpToken LP token address\\r\\n     * @param _basicDegisPerSecond Basic reward speed(per second) for this new pool\\r\\n     * @param _bonusDegisPerSecond Bonus reward speed(per second) for this new pool\\r\\n     * @param _withUpdate Whether update all pools' status\\r\\n     */\\r\\n    function add(\\r\\n        address _lpToken,\\r\\n        uint256 _basicDegisPerSecond,\\r\\n        uint256 _bonusDegisPerSecond,\\r\\n        bool _withUpdate\\r\\n    ) public notZeroAddress(_lpToken) onlyOwner whenNotPaused {\\r\\n        // Check if already exists, if the poolId is 0, that means not in the pool\\r\\n        require(!_alreadyInPool(_lpToken), \\\"Already in the pool\\\");\\r\\n\\r\\n        if (_bonusDegisPerSecond > 0)\\r\\n            require(_basicDegisPerSecond > 0, \\\"Only bonus\\\");\\r\\n\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n\\r\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\\r\\n            ? block.timestamp\\r\\n            : startTimestamp;\\r\\n\\r\\n        // Push this new pool into the list\\r\\n        poolList.push(\\r\\n            PoolInfo({\\r\\n                lpToken: _lpToken,\\r\\n                basicDegisPerSecond: _basicDegisPerSecond,\\r\\n                bonusDegisPerSecond: _bonusDegisPerSecond,\\r\\n                lastRewardTimestamp: lastRewardTimestamp,\\r\\n                accDegisPerShare: 0,\\r\\n                accDegisPerBonusShare: 0,\\r\\n                totalBonus: 0\\r\\n            })\\r\\n        );\\r\\n\\r\\n        // Store the poolId and set the farming status to true\\r\\n        if (_basicDegisPerSecond > 0) isFarming[_nextPoolId] = true;\\r\\n\\r\\n        poolMapping[_lpToken] = _nextPoolId++;\\r\\n\\r\\n        emit NewPoolAdded(_lpToken, _basicDegisPerSecond, _bonusDegisPerSecond);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the degisPerSecond for a specific pool (set to 0 to stop farming)\\r\\n     * @param _poolId Id of the farming pool\\r\\n     * @param _basicDegisPerSecond New basic reward amount per second\\r\\n     * @param _bonusDegisPerSecond New bonus reward amount per second\\r\\n     * @param _withUpdate Whether update all pools\\r\\n     */\\r\\n    function setDegisReward(\\r\\n        uint256 _poolId,\\r\\n        uint256 _basicDegisPerSecond,\\r\\n        uint256 _bonusDegisPerSecond,\\r\\n        bool _withUpdate\\r\\n    ) public onlyOwner whenNotPaused {\\r\\n        // Ensure there already exists this pool\\r\\n        require(poolList[_poolId].lastRewardTimestamp != 0, \\\"Pool not exists\\\");\\r\\n\\r\\n        if (_bonusDegisPerSecond > 0)\\r\\n            require(_basicDegisPerSecond > 0, \\\"Only bonus\\\");\\r\\n\\r\\n        if (_withUpdate) massUpdatePools();\\r\\n        else updatePool(_poolId);\\r\\n\\r\\n        // Not farming now + reward > 0 => Restart\\r\\n        if (isFarming[_poolId] == false && _basicDegisPerSecond > 0) {\\r\\n            isFarming[_poolId] = true;\\r\\n            emit FarmingPoolStarted(_poolId, block.timestamp);\\r\\n        }\\r\\n\\r\\n        if (_basicDegisPerSecond == 0) {\\r\\n            isFarming[_poolId] = false;\\r\\n            poolList[_poolId].basicDegisPerSecond = 0;\\r\\n            poolList[_poolId].bonusDegisPerSecond = 0;\\r\\n            emit FarmingPoolStopped(_poolId, block.timestamp);\\r\\n        } else {\\r\\n            poolList[_poolId].basicDegisPerSecond = _basicDegisPerSecond;\\r\\n            poolList[_poolId].bonusDegisPerSecond = _bonusDegisPerSecond;\\r\\n            emit DegisRewardChanged(\\r\\n                _poolId,\\r\\n                _basicDegisPerSecond,\\r\\n                _bonusDegisPerSecond\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Stake LP token into the farming pool\\r\\n     * @dev Can only stake to the pools that are still farming\\r\\n     * @param _poolId Id of the farming pool\\r\\n     * @param _amount Staking amount\\r\\n     */\\r\\n    function stake(uint256 _poolId, uint256 _amount)\\r\\n        public\\r\\n        nonReentrant\\r\\n        whenNotPaused\\r\\n        stillFarming(_poolId)\\r\\n    {\\r\\n        require(_amount > 0, \\\"Can not stake zero\\\");\\r\\n\\r\\n        PoolInfo storage pool = poolList[_poolId];\\r\\n        UserInfo storage user = userInfo[_poolId][msg.sender];\\r\\n\\r\\n        // Must update first\\r\\n        updatePool(_poolId);\\r\\n\\r\\n        // First distribute the reward if exists\\r\\n        if (user.stakingBalance > 0) {\\r\\n            uint256 pending = (user.stakingBalance *\\r\\n                pool.accDegisPerShare +\\r\\n                user.bonus *\\r\\n                pool.accDegisPerBonusShare) /\\r\\n                SCALE +\\r\\n                extraClaimable[_poolId][msg.sender] -\\r\\n                user.rewardDebt;\\r\\n\\r\\n            // Clear the extra record (has been distributed)\\r\\n            extraClaimable[_poolId][msg.sender] = 0;\\r\\n\\r\\n            // Real reward amount by safe transfer\\r\\n            uint256 reward = _safeDegisTransfer(msg.sender, pending);\\r\\n            emit Harvest(msg.sender, msg.sender, _poolId, reward);\\r\\n        }\\r\\n\\r\\n        // Actual deposit amount\\r\\n        uint256 actualAmount = _safeLPTransfer(\\r\\n            false,\\r\\n            pool.lpToken,\\r\\n            msg.sender,\\r\\n            _amount\\r\\n        );\\r\\n\\r\\n        user.stakingBalance += actualAmount;\\r\\n\\r\\n        if (address(veDEG) != address(0)) {\\r\\n            // Update the user's bonus if veDEG boosting is on\\r\\n            uint256 oldBonus = user.bonus;\\r\\n            user.bonus = (user.stakingBalance * veDEG.balanceOf(msg.sender))\\r\\n                .sqrt();\\r\\n            // Update the pool's total bonus\\r\\n            pool.totalBonus = pool.totalBonus + user.bonus - oldBonus;\\r\\n        }\\r\\n\\r\\n        user.rewardDebt =\\r\\n            (user.stakingBalance *\\r\\n                pool.accDegisPerShare +\\r\\n                user.bonus *\\r\\n                pool.accDegisPerBonusShare) /\\r\\n            SCALE;\\r\\n\\r\\n        emit Stake(msg.sender, _poolId, actualAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw lptoken from the pool\\r\\n     * @param _poolId Id of the farming pool\\r\\n     * @param _amount Amount of lp tokens to withdraw\\r\\n     */\\r\\n    function withdraw(uint256 _poolId, uint256 _amount)\\r\\n        public\\r\\n        nonReentrant\\r\\n        whenNotPaused\\r\\n    {\\r\\n        require(_amount > 0, \\\"Zero amount\\\");\\r\\n\\r\\n        PoolInfo storage pool = poolList[_poolId];\\r\\n        UserInfo storage user = userInfo[_poolId][msg.sender];\\r\\n\\r\\n        require(user.stakingBalance >= _amount, \\\"Not enough stakingBalance\\\");\\r\\n\\r\\n        // Update if the pool is still farming\\r\\n        // Users can withdraw even after the pool stopped\\r\\n        if (isFarming[_poolId]) updatePool(_poolId);\\r\\n        else {\\r\\n            pool.lastRewardTimestamp = block.timestamp;\\r\\n        }\\r\\n\\r\\n        uint256 pending = (user.stakingBalance *\\r\\n            pool.accDegisPerShare +\\r\\n            user.bonus *\\r\\n            pool.accDegisPerBonusShare) /\\r\\n            SCALE +\\r\\n            extraClaimable[_poolId][msg.sender] -\\r\\n            user.rewardDebt;\\r\\n\\r\\n        // Clear the extra record (has been distributed)\\r\\n        extraClaimable[_poolId][msg.sender] = 0;\\r\\n\\r\\n        // Real reward amount by safe transfer\\r\\n        uint256 reward = _safeDegisTransfer(msg.sender, pending);\\r\\n        emit Harvest(msg.sender, msg.sender, _poolId, reward);\\r\\n\\r\\n        uint256 actualAmount = _safeLPTransfer(\\r\\n            true,\\r\\n            pool.lpToken,\\r\\n            msg.sender,\\r\\n            _amount\\r\\n        );\\r\\n\\r\\n        user.stakingBalance -= actualAmount;\\r\\n\\r\\n        // Update the user's bonus when veDEG boosting is on\\r\\n        if (address(veDEG) != address(0)) {\\r\\n            uint256 oldBonus = user.bonus;\\r\\n            user.bonus = (user.stakingBalance * veDEG.balanceOf(msg.sender))\\r\\n                .sqrt();\\r\\n            // Update the pool's total bonus\\r\\n            pool.totalBonus = pool.totalBonus + user.bonus - oldBonus;\\r\\n        }\\r\\n\\r\\n        user.rewardDebt =\\r\\n            (user.stakingBalance *\\r\\n                pool.accDegisPerShare +\\r\\n                user.bonus *\\r\\n                pool.accDegisPerBonusShare) /\\r\\n            SCALE;\\r\\n\\r\\n        emit Withdraw(msg.sender, _poolId, actualAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Harvest the degis reward and can be sent to another address\\r\\n     * @param _poolId Id of the farming pool\\r\\n     * @param _to Receiver of degis rewards\\r\\n     */\\r\\n    function harvest(uint256 _poolId, address _to)\\r\\n        public\\r\\n        nonReentrant\\r\\n        whenNotPaused\\r\\n    {\\r\\n        // Only update the pool when it is still in farming\\r\\n        if (isFarming[_poolId]) updatePool(_poolId);\\r\\n        else {\\r\\n            poolList[_poolId].lastRewardTimestamp = block.timestamp;\\r\\n        }\\r\\n\\r\\n        PoolInfo memory pool = poolList[_poolId];\\r\\n        UserInfo storage user = userInfo[_poolId][msg.sender];\\r\\n\\r\\n        uint256 pendingReward = (user.stakingBalance *\\r\\n            pool.accDegisPerShare +\\r\\n            user.bonus *\\r\\n            pool.accDegisPerBonusShare) /\\r\\n            SCALE +\\r\\n            extraClaimable[_poolId][msg.sender] -\\r\\n            user.rewardDebt;\\r\\n\\r\\n        extraClaimable[_poolId][msg.sender] = 0;\\r\\n\\r\\n        require(pendingReward > 0, \\\"No pending reward\\\");\\r\\n\\r\\n        // Update the reward debt\\r\\n        user.rewardDebt =\\r\\n            (user.stakingBalance *\\r\\n                pool.accDegisPerShare +\\r\\n                user.bonus *\\r\\n                pool.accDegisPerBonusShare) /\\r\\n            SCALE;\\r\\n\\r\\n        // Transfer the reward\\r\\n        uint256 reward = _safeDegisTransfer(_to, pendingReward);\\r\\n\\r\\n        emit Harvest(msg.sender, _to, _poolId, reward);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the pool's reward status\\r\\n     * @param _poolId Id of the farming pool\\r\\n     */\\r\\n    function updatePool(uint256 _poolId) public {\\r\\n        PoolInfo storage pool = poolList[_poolId];\\r\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));\\r\\n\\r\\n        // No LP deposited, then just update the lastRewardTimestamp\\r\\n        if (lpSupply == 0) {\\r\\n            pool.lastRewardTimestamp = block.timestamp;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 timePassed = block.timestamp - pool.lastRewardTimestamp;\\r\\n\\r\\n        uint256 basicReward = timePassed * pool.basicDegisPerSecond;\\r\\n        uint256 bonusReward = timePassed * pool.bonusDegisPerSecond;\\r\\n\\r\\n        pool.accDegisPerShare += (basicReward * SCALE) / lpSupply;\\r\\n\\r\\n        if (pool.totalBonus == 0) {\\r\\n            pool.accDegisPerBonusShare = 0;\\r\\n        } else {\\r\\n            pool.accDegisPerBonusShare +=\\r\\n                (bonusReward * SCALE) /\\r\\n                pool.totalBonus;\\r\\n        }\\r\\n\\r\\n        // Don't forget to set the farming pool as minter\\r\\n        degis.mintDegis(address(this), basicReward + bonusReward);\\r\\n\\r\\n        pool.lastRewardTimestamp = block.timestamp;\\r\\n\\r\\n        uint256 currentPoolLevel = poolRewardLevel[_poolId];\\r\\n\\r\\n        // Update the new reward speed\\r\\n        // Only if the threshold are already set\\r\\n        if (thresholdBasic[_poolId].length > 0) {\\r\\n            uint256 currentLiquidity = thresholdBasic[_poolId][\\r\\n                currentPoolLevel\\r\\n            ];\\r\\n            if (\\r\\n                currentPoolLevel < thresholdBasic[_poolId].length - 1 &&\\r\\n                lpSupply >= thresholdBasic[_poolId][currentPoolLevel + 1]\\r\\n            ) {\\r\\n                _updateRewardSpeed(_poolId);\\r\\n            } else if (lpSupply < currentLiquidity) {\\r\\n                _updateRewardSpeed(_poolId);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit PoolUpdated(\\r\\n            _poolId,\\r\\n            pool.accDegisPerShare,\\r\\n            pool.accDegisPerBonusShare\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update all farming pools (except for those stopped ones)\\r\\n     * @dev Can be called by anyone\\r\\n     *      Only update those active pools\\r\\n     */\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolList.length;\\r\\n        for (uint256 poolId = 1; poolId < length; ++poolId) {\\r\\n            if (isFarming[poolId] == false) {\\r\\n                poolList[poolId].lastRewardTimestamp = block.timestamp;\\r\\n                continue;\\r\\n            } else updatePool(poolId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update a user's bonus\\r\\n     * @dev When veDEG has balance change\\r\\n     *      Only called by veDEG contract\\r\\n     * @param _user User address\\r\\n     * @param _newVeDEGBalance New veDEG balance\\r\\n     */\\r\\n    function updateBonus(address _user, uint256 _newVeDEGBalance) external {\\r\\n        require(msg.sender == address(veDEG), \\\"Only veDEG contract\\\");\\r\\n\\r\\n        // loop over each pool : beware gas cost!\\r\\n        uint256 length = poolList.length;\\r\\n\\r\\n        for (uint256 poolId; poolId < length; ++poolId) {\\r\\n            // Skip if the pool is not farming\\r\\n            if (!isFarming[poolId]) continue;\\r\\n\\r\\n            UserInfo storage user = userInfo[poolId][_user];\\r\\n            // Skip if user doesn't have any deposit in the pool\\r\\n            if (user.stakingBalance == 0) continue;\\r\\n\\r\\n            PoolInfo storage pool = poolList[poolId];\\r\\n\\r\\n            // first, update pool\\r\\n            updatePool(poolId);\\r\\n\\r\\n            // Update the extra claimable amount\\r\\n            uint256 pending = (user.stakingBalance *\\r\\n                pool.accDegisPerShare +\\r\\n                user.bonus *\\r\\n                pool.accDegisPerBonusShare) /\\r\\n                SCALE -\\r\\n                user.rewardDebt;\\r\\n            extraClaimable[poolId][_user] += pending;\\r\\n\\r\\n            // get oldFactor\\r\\n            uint256 oldFactor = user.bonus; // get old factor\\r\\n            // calculate newFactor\\r\\n            uint256 newFactor = (_newVeDEGBalance * user.stakingBalance).sqrt();\\r\\n            // update user factor\\r\\n            user.bonus = newFactor;\\r\\n            // update reward debt, take into account newFactor\\r\\n            user.rewardDebt =\\r\\n                (user.stakingBalance *\\r\\n                    pool.accDegisPerShare +\\r\\n                    newFactor *\\r\\n                    pool.accDegisPerBonusShare) /\\r\\n                SCALE;\\r\\n\\r\\n            // Update the pool's total bonus\\r\\n            pool.totalBonus = pool.totalBonus + newFactor - oldFactor;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ********************************** Internal Functions ********************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Check if a lptoken has been added into the pool before\\r\\n     * @dev This can also be written as a modifier\\r\\n     * @param _lpToken LP token address\\r\\n     * @return _isInPool Wether this lp is already in pool\\r\\n     */\\r\\n    function _alreadyInPool(address _lpToken)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool _isInPool)\\r\\n    {\\r\\n        uint256 poolId = poolMapping[_lpToken];\\r\\n\\r\\n        _isInPool = (poolId != 0) ? true : false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Safe degis transfer (check if the pool has enough DEGIS token)\\r\\n     * @param _to User's address\\r\\n     * @param _amount Amount to transfer\\r\\n     */\\r\\n    function _safeDegisTransfer(address _to, uint256 _amount)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 poolDegisBalance = degis.balanceOf(address(this));\\r\\n        require(poolDegisBalance > 0, \\\"No Degis token in the pool\\\");\\r\\n\\r\\n        if (_amount > poolDegisBalance) {\\r\\n            degis.safeTransfer(_to, poolDegisBalance);\\r\\n            return (poolDegisBalance);\\r\\n        } else {\\r\\n            degis.safeTransfer(_to, _amount);\\r\\n            return _amount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Finish the transfer of LP Token\\r\\n     * @dev The lp token may have loss during transfer\\r\\n     * @param _out Whether the lp token is out\\r\\n     * @param _lpToken LP token address\\r\\n     * @param _user User address\\r\\n     * @param _amount Amount of lp tokens\\r\\n     */\\r\\n    function _safeLPTransfer(\\r\\n        bool _out,\\r\\n        address _lpToken,\\r\\n        address _user,\\r\\n        uint256 _amount\\r\\n    ) internal returns (uint256) {\\r\\n        uint256 poolBalanceBefore = IERC20(_lpToken).balanceOf(address(this));\\r\\n\\r\\n        if (_out) IERC20(_lpToken).safeTransfer(_user, _amount);\\r\\n        else IERC20(_lpToken).safeTransferFrom(_user, address(this), _amount);\\r\\n\\r\\n        uint256 poolBalanceAfter = IERC20(_lpToken).balanceOf(address(this));\\r\\n\\r\\n        return\\r\\n            _out\\r\\n                ? poolBalanceBefore - poolBalanceAfter\\r\\n                : poolBalanceAfter - poolBalanceBefore;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the reward speed\\r\\n     * @param _poolId Pool ID\\r\\n     */\\r\\n    function _updateRewardSpeed(uint256 _poolId) internal {\\r\\n        uint256 currentBasicBalance = IERC20(poolList[_poolId].lpToken)\\r\\n            .balanceOf(address(this));\\r\\n\\r\\n        uint256 basicRewardSpeed;\\r\\n\\r\\n        for (uint256 i = thresholdBasic[_poolId].length - 1; i >= 0; --i) {\\r\\n            if (currentBasicBalance >= thresholdBasic[_poolId][i]) {\\r\\n                basicRewardSpeed = piecewiseBasic[_poolId][i];\\r\\n                // record current reward level\\r\\n                poolRewardLevel[_poolId] = i;\\r\\n                break;\\r\\n            } else continue;\\r\\n        }\\r\\n\\r\\n        poolList[_poolId].basicDegisPerSecond = basicRewardSpeed;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6c3ae8e7be4369067b1de1913add8b788d8d3a7b917faedddf1eb3292ad31091\",\"license\":\"GPL-3.0-or-later\"},\"contracts/governance/interfaces/IVeDEG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./IVeERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the VePtp\\r\\n */\\r\\ninterface IVeDEG is IVeERC20 {\\r\\n    function isUser(address _addr) external view returns (bool);\\r\\n\\r\\n    function deposit(uint256 _amount) external;\\r\\n\\r\\n    function claim() external;\\r\\n\\r\\n    function withdraw(uint256 _amount) external;\\r\\n\\r\\n    function getStakedPtp(address _addr) external view returns (uint256);\\r\\n\\r\\n    function getVotes(address _account) external view returns (uint256);\\r\\n\\r\\n    function lockVeDEG(address _to, uint256 _amount) external;\\r\\n\\r\\n    function unlockVeDEG(address _to, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xff12756768205defde7d692dc5140540b7e2c64d4f829293caea4907a5789333\",\"license\":\"MIT\"},\"contracts/governance/interfaces/IVeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IVeERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x4eba027c1c7d816f96bc04668b025b7dd73aa425a3abe49239a2f7bc37420088\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nlibrary Math {\\r\\n    uint256 internal constant WAD = 10**18;\\r\\n\\r\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = x < y ? x : y;\\r\\n    }\\r\\n\\r\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //rounds to zero if x*y < WAD / 2\\r\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return ((x * y) + (WAD / 2)) / WAD;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd64d8f484f0b041e6aa43716169f1f60b9365d446db8d84306bfe2e96b9f7983\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IDegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IDegisToken is IERC20, IERC20Permit {\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // *************************************** Functions ************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    function CAP() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Mint degis tokens\\r\\n     * @param  _account Receiver's address\\r\\n     * @param  _amount Amount to be minted\\r\\n     */\\r\\n    function mintDegis(address _account, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Burn degis tokens\\r\\n     * @param  _account Receiver's address\\r\\n     * @param  _amount Amount to be burned\\r\\n     */\\r\\n    function burnDegis(address _account, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9d0c94230b44afe12091fdbe04ec2bece6d73dcad07c801b7f593b4cfee0e074\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613871806100206000396000f3fe608060405234801561001057600080fd5b506004361061025c5760003560e01c80637b0472f011610145578063cdcd2907116100bd578063d54465181161008c578063e6fd48bc11610071578063e6fd48bc14610583578063eced55261461058c578063f2fde38b1461059857600080fd5b8063d54465181461055d578063e4a763151461057057600080fd5b8063cdcd29071461050f578063cdfb6cf314610522578063d13f67bc14610535578063d41dcbea1461054857600080fd5b8063a06ddcb311610114578063c44bef75116100f9578063c44bef75146104be578063c4d66de8146104d1578063c73d2bae146104e457600080fd5b8063a06ddcb31461047b578063bfa7decb1461049e57600080fd5b80637b0472f0146103fe5780638456cb59146104115780638da5cb5b1461041957806393f1a40b1461043257600080fd5b8063441a3e70116101d85780635bf56068116101a75780635e4651f91161018c5780635e4651f9146103db578063630b5ba1146103ee578063715018a6146103f657600080fd5b80635bf56068146103b45780635c975abb146103c757600080fd5b8063441a3e70146103685780634b34b6871461037b5780634f3e7ba61461038e57806351eb05a6146103a157600080fd5b806329baefff1161022f5780632a48235b116102145780632a48235b1461031a5780632c678a3e146103405780633f4ba83a1461036057600080fd5b806329baefff146102f157806329fd2007146102fa57600080fd5b806306fdde031461026157806307a96cbf146102b357806317fb77de146102c857806318fccc76146102de575b600080fd5b61029d6040518060400160405280601581526020017f4465676973204c50204661726d696e6720506f6f6c000000000000000000000081525081565b6040516102aa9190612b9a565b60405180910390f35b6102c66102c1366004612bdb565b6105ab565b005b6102d160cb5481565b6040516102aa9190612c04565b6102c66102ec366004612c23565b61060d565b6102d160d45481565b60c95461030d906001600160a01b031681565b6040516102aa9190612c7f565b61032d610328366004612c8d565b61087e565b6040516102aa9796959493929190612cb7565b6102d161034e366004612bdb565b60ce6020526000908152604090205481565b6102c66108d7565b6102c6610376366004612d1f565b61090b565b6102c6610389366004612da4565b610c6a565b60ca5461030d906001600160a01b031681565b6102c66103af366004612c8d565b610d26565b6102d16103c2366004612d1f565b61102b565b60975460ff165b6040516102aa9190612e3c565b6102d16103e9366004612d1f565b61105c565b6102c6611078565b6102c66110eb565b6102c661040c366004612d1f565b61111f565b6102c6611458565b6033546001600160a01b03166040516102aa9190612e4a565b61046c610440366004612c23565b60d060209081526000928352604080842090915290825290208054600182015460029092015490919083565b6040516102aa93929190612e58565b6103ce610489366004612c8d565b60cf6020526000908152604090205460ff1681565b6102d16104ac366004612c8d565b60d56020526000908152604090205481565b6102c66104cc366004612c8d565b61148a565b6102c66104df366004612bdb565b611539565b6102d16104f2366004612c23565b60d160209081526000928352604080842090915290825290205481565b6102c661051d366004612e93565b611780565b6102d1610530366004612c23565b611a0e565b6102d1610543366004612c23565b611a3b565b610550611cf2565b6040516102aa9190612fd3565b6102c661056b366004612fe4565b611d9a565b6102c661057e366004613006565b611f79565b6102d160cc5481565b6102d164e8d4a5100081565b6102c66105a6366004612bdb565b612271565b6033546001600160a01b031633146105de5760405162461bcd60e51b81526004016105d59061305b565b60405180910390fd5b60ca805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60026065540361062f5760405162461bcd60e51b81526004016105d59061309d565b600260655560975460ff16156106575760405162461bcd60e51b81526004016105d5906130df565b600082815260cf602052604090205460ff161561067c5761067782610d26565b6106a6565b4260cd8381548110610690576106906130ef565b9060005260206000209060070201600301819055505b600060cd83815481106106bb576106bb6130ef565b600091825260208083206040805160e081018252600790940290910180546001600160a01b03168452600181015484840152600280820154858401526003820154606086015260048201546080860152600582015460a0860190815260069092015460c086015288865260d084528286203380885290855283872080548b895260d1875285892092895291909552928620549151908401549496509294939192909164e8d4a510009161076d9161311b565b86608001518660010154610781919061311b565b61078b919061313a565b6107959190613168565b61079f919061313a565b6107a9919061317c565b600086815260d1602090815260408083203384529091528120559050806107e25760405162461bcd60e51b81526004016105d5906131c5565b64e8d4a510008360a0015183600201546107fc919061311b565b84608001518460010154610810919061311b565b61081a919061313a565b6108249190613168565b8255600061083285836122cd565b90507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e3386888460405161086994939291906131d5565b60405180910390a15050600160655550505050565b60cd818154811061088e57600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b039095169650929491939092919087565b6033546001600160a01b031633146109015760405162461bcd60e51b81526004016105d59061305b565b6109096123ab565b565b60026065540361092d5760405162461bcd60e51b81526004016105d59061309d565b600260655560975460ff16156109555760405162461bcd60e51b81526004016105d5906130df565b600081116109755760405162461bcd60e51b81526004016105d590613245565b600060cd838154811061098a5761098a6130ef565b6000918252602080832086845260d08252604080852033865290925292206001810154600790920290920192508311156109d65760405162461bcd60e51b81526004016105d590613287565b600084815260cf602052604090205460ff16156109fb576109f684610d26565b610a02565b4260038301555b8054600085815260d1602090815260408083203384529091528120546005850154600285015492939264e8d4a5100091610a3b9161311b565b86600401548660010154610a4f919061311b565b610a59919061313a565b610a639190613168565b610a6d919061313a565b610a77919061317c565b600086815260d160209081526040808320338085529252822082905591925090610aa190836122cd565b90507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e33338884604051610ad894939291906131d5565b60405180910390a18354600090610afc906001906001600160a01b03163389612411565b905080846001016000828254610b12919061317c565b909155505060ca546001600160a01b031615610bdc57600284015460ca546040516370a0823160e01b8152610bb4916001600160a01b0316906370a0823190610b5f903390600401612e4a565b602060405180830381865afa158015610b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba091906132a2565b8660010154610baf919061311b565b612554565b6002860181905560068701548291610bcb9161313a565b610bd5919061317c565b6006870155505b64e8d4a5100085600501548560020154610bf6919061311b565b86600401548660010154610c0a919061311b565b610c14919061313a565b610c1e9190613168565b84556040517ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56890610c549033908a9085906132c3565b60405180910390a1505060016065555050505050565b6033546001600160a01b03163314610c945760405162461bcd60e51b81526004016105d59061305b565b600085815260d260205260409020610cad908585612adc565b50600085815260d360205260409020610cc7908383612adc565b50600082826000818110610cdd57610cdd6130ef565b905060200201351115610d0857600085815260cf60205260409020805460ff19166001179055610d1f565b600085815260cf60205260409020805460ff191690555b5050505050565b600060cd8281548110610d3b57610d3b6130ef565b9060005260206000209060070201905080600301544211610d5a575050565b80546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610d8a903090600401612e4a565b602060405180830381865afa158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcb91906132a2565b905080600003610de057504260039091015550565b6000826003015442610df2919061317c565b90506000836001015482610e06919061311b565b90506000846002015483610e1a919061311b565b905083610e2c64e8d4a510008461311b565b610e369190613168565b856004016000828254610e49919061313a565b90915550506006850154600003610e665760006005860155610e9d565b6006850154610e7a64e8d4a510008361311b565b610e849190613168565b856005016000828254610e97919061313a565b90915550505b60c9546001600160a01b031663b476739830610eb9848661313a565b6040518363ffffffff1660e01b8152600401610ed69291906132d1565b600060405180830381600087803b158015610ef057600080fd5b505af1158015610f04573d6000803e3d6000fd5b50504260038801555050600086815260d5602090815260408083205460d29092529091205415610fe057600087815260d260205260408120805483908110610f4e57610f4e6130ef565b60009182526020808320909101548a835260d2909152604090912054909150610f799060019061317c565b82108015610fba5750600088815260d260205260409020610f9b83600161313a565b81548110610fab57610fab6130ef565b90600052602060002001548610155b15610fcd57610fc8886125c4565b610fde565b80861015610fde57610fde886125c4565b505b600486015460058701546040517f17b8644f386d1c7c7138ef98b3c8035622bbe94d7be9b26f71d2654a547c29439261101a928b92612e58565b60405180910390a150505050505050565b60d3602052816000526040600020818154811061104757600080fd5b90600052602060002001600091509150505481565b60d2602052816000526040600020818154811061104757600080fd5b60cd5460015b818110156110e757600081815260cf602052604081205460ff16151590036110ce574260cd82815481106110b4576110b46130ef565b9060005260206000209060070201600301819055506110d7565b6110d781610d26565b6110e0816132ec565b905061107e565b5050565b6033546001600160a01b031633146111155760405162461bcd60e51b81526004016105d59061305b565b6109096000612731565b6002606554036111415760405162461bcd60e51b81526004016105d59061309d565b600260655560975460ff16156111695760405162461bcd60e51b81526004016105d5906130df565b600082815260cf6020526040902054829060ff166111995760405162461bcd60e51b81526004016105d590613337565b600082116111b95760405162461bcd60e51b81526004016105d590613379565b600060cd84815481106111ce576111ce6130ef565b6000918252602080832087845260d0825260408085203386529092529220600790910290910191506111ff85610d26565b6001810154156112ea578054600086815260d1602090815260408083203384529091528120546005850154600285015492939264e8d4a51000916112429161311b565b86600401548660010154611256919061311b565b611260919061313a565b61126a9190613168565b611274919061313a565b61127e919061317c565b600087815260d1602090815260408083203380855292528220829055919250906112a890836122cd565b90507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e333389846040516112df94939291906131d5565b60405180910390a150505b81546000906113059082906001600160a01b03163388612411565b90508082600101600082825461131b919061313a565b909155505060ca546001600160a01b0316156113e057600282015460ca546040516370a0823160e01b81526113b8916001600160a01b0316906370a0823190611368903390600401612e4a565b602060405180830381865afa158015611385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a991906132a2565b8460010154610baf919061311b565b60028401819055600685015482916113cf9161313a565b6113d9919061317c565b6006850155505b64e8d4a51000836005015483600201546113fa919061311b565b8460040154846001015461140e919061311b565b611418919061313a565b6114229190613168565b82556040517f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b690610869903390899085906132c3565b6033546001600160a01b031633146114825760405162461bcd60e51b81526004016105d59061305b565b610909612790565b6033546001600160a01b031633146114b45760405162461bcd60e51b81526004016105d59061305b565b60975460ff16156114d75760405162461bcd60e51b81526004016105d5906130df565b60cb546001146114f95760405162461bcd60e51b81526004016105d5906133e3565b60cc8190556040517faf8fc8a4c9a55a9a29c3e99cd1797d43062c696f192896c79cbebd7da3286d829061152e908390612c04565b60405180910390a150565b600054610100900460ff166115545760005460ff1615611558565b303b155b6115745760405162461bcd60e51b81526004016105d59061344b565b600054610100900460ff16158015611596576000805461ffff19166101011790555b6001600160a01b0382166115bc5760405162461bcd60e51b81526004016105d59061348d565b6115c46127e8565b6115cc612817565b6115d4612845565b60c980546001600160a01b0380851673ffffffffffffffffffffffffffffffffffffffff1992831617909255600160cb8190556040805160e081018252600080825260208201818152928201818152606083018281526080840183815260a0850184815260c0860185815260cd8054998a018155909552945160079097027f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e8101805498909a16979098169690961790975592517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2f86015591517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3085015593517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3184015590517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3283015591517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3382015590517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db349091015580156110e7576000805461ff00191690555050565b6033546001600160a01b031633146117aa5760405162461bcd60e51b81526004016105d59061305b565b60975460ff16156117cd5760405162461bcd60e51b81526004016105d5906130df565b60cd84815481106117e0576117e06130ef565b9060005260206000209060070201600301546000036118115760405162461bcd60e51b81526004016105d5906134cf565b811561183757600083116118375760405162461bcd60e51b81526004016105d590613511565b801561184a57611845611078565b611853565b61185384610d26565b600084815260cf602052604090205460ff161580156118725750600083115b156118cb57600084815260cf602052604090819020805460ff19166001179055517f6140f1d5adcbca6c6b24c3b5e695335cd1a2071c7e03881172dc9eb0e488225c906118c29086904290613521565b60405180910390a15b8260000361197a57600084815260cf60205260408120805460ff1916905560cd8054869081106118fd576118fd6130ef565b906000526020600020906007020160010181905550600060cd8581548110611927576119276130ef565b9060005260206000209060070201600201819055507f4654f9b7bb3ba4d66e3a4e972e39db189ac7b4fdf5f2a95d57a4eb4d91a16d45844260405161196d929190613521565b60405180910390a1611a08565b8260cd858154811061198e5761198e6130ef565b9060005260206000209060070201600101819055508160cd85815481106119b7576119b76130ef565b9060005260206000209060070201600201819055507f12558fa101886c4fd9ad5e0b9932a6ffd3653b63380b1da3f024ddaf506c22eb8484846040516119ff93929190612e58565b60405180910390a15b50505050565b600082815260d0602090815260408083206001600160a01b03851684529091529020600101545b92915050565b60008060cd8481548110611a5157611a516130ef565b60009182526020918290206040805160e081018252600790930290910180546001600160a01b0316835260018101549383019390935260028301549082015260038201546060820181905260048301546080830152600583015460a083015260069092015460c082015291501580611acc5750806060015142105b80611ad8575060cc5442105b15611ae7576000915050611a35565b600084815260d0602090815260408083206001600160a01b0380881685529083528184208251606081018452815481526001820154948101949094526002015483830152845191516370a0823160e01b81529293929116906370a0823190611b53903090600401612e4a565b602060405180830381865afa158015611b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9491906132a2565b608084015160a0850151919250906000839003611bb957600095505050505050611a35565b600088815260cf602052604090205460ff1615611c6d576000856060015142611be2919061317c565b90506000818760200151611bf6919061311b565b905084611c0864e8d4a510008361311b565b611c129190613168565b611c1c908561313a565b60c088015190945015611c6a576000828860400151611c3b919061311b565b60c0890151909150611c5264e8d4a510008361311b565b611c5c9190613168565b611c66908561313a565b9350505b50505b8351600089815260d1602090815260408083206001600160a01b038c168452909152808220549087015191929164e8d4a5100090611cac90869061311b565b868960200151611cbc919061311b565b611cc6919061313a565b611cd09190613168565b611cda919061313a565b611ce4919061317c565b9650611a3595505050505050565b606060cd805480602002602001604051908101604052809291908181526020016000905b82821015611d915760008481526020908190206040805160e0810182526007860290920180546001600160a01b03168352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a08401526006015460c08301529083529092019101611d16565b50505050905090565b60ca546001600160a01b03163314611dc45760405162461bcd60e51b81526004016105d590613561565b60cd5460005b81811015611a0857600081815260cf602052604090205460ff1615611f6957600081815260d0602090815260408083206001600160a01b038816845290915281206001810154909103611e1d5750611f69565b600060cd8381548110611e3257611e326130ef565b90600052602060002090600702019050611e4b83610d26565b6000826000015464e8d4a5100083600501548560020154611e6c919061311b565b84600401548660010154611e80919061311b565b611e8a919061313a565b611e949190613168565b611e9e919061317c565b600085815260d1602090815260408083206001600160a01b038c168452909152812080549293508392909190611ed590849061313a565b909155505060028301546001840154600090611ef590610baf908a61311b565b60028601819055600585015490915064e8d4a5100090611f15908361311b565b85600401548760010154611f29919061311b565b611f33919061313a565b611f3d9190613168565b855560068401548290611f5190839061313a565b611f5b919061317c565b846006018190555050505050505b611f72816132ec565b9050611dca565b836001600160a01b038116611fa05760405162461bcd60e51b81526004016105d59061348d565b6033546001600160a01b03163314611fca5760405162461bcd60e51b81526004016105d59061305b565b60975460ff1615611fed5760405162461bcd60e51b81526004016105d5906130df565b611ff685612878565b156120135760405162461bcd60e51b81526004016105d5906135a3565b821561203957600084116120395760405162461bcd60e51b81526004016105d590613511565b811561204757612047611078565b600060cc54421161205a5760cc5461205c565b425b6040805160e0810182526001600160a01b038981168252602082018981529282018881526060830185815260006080850181815260a0860182815260c0870183815260cd8054600181018255945296517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e6007909402938401805473ffffffffffffffffffffffffffffffffffffffff1916919097161790955595517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2f82015591517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db30830155517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3182015592517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db32840155517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db33830155517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3490910155905084156121fd5760cb54600090815260cf60205260409020805460ff191660011790555b60cb805490600061220d836132ec565b909155506001600160a01b038716600090815260ce60205260409081902091909155517f5f9d2cd19aa3f32e9e8cc45267a493f9956c1b955a220136161ff8ad595bc78290612261908890889088906132c3565b60405180910390a1505050505050565b6033546001600160a01b0316331461229b5760405162461bcd60e51b81526004016105d59061305b565b6001600160a01b0381166122c15760405162461bcd60e51b81526004016105d59061360b565b6122ca81612731565b50565b60c9546040516370a0823160e01b815260009182916001600160a01b03909116906370a0823190612302903090600401612e4a565b602060405180830381865afa15801561231f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234391906132a2565b9050600081116123655760405162461bcd60e51b81526004016105d59061364d565b8083111561238b5760c954612384906001600160a01b031685836128a9565b9050611a35565b60c9546123a2906001600160a01b031685856128a9565b82915050611a35565b60975460ff166123cd5760405162461bcd60e51b81526004016105d59061368f565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516124079190612e4a565b60405180910390a1565b600080846001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016124409190612e4a565b602060405180830381865afa15801561245d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248191906132a2565b905085156124a25761249d6001600160a01b03861685856128a9565b6124b7565b6124b76001600160a01b038616853086612931565b6040516370a0823160e01b81526000906001600160a01b038716906370a08231906124e6903090600401612e4a565b602060405180830381865afa158015612503573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252791906132a2565b90508661253d57612538828261317c565b612547565b612547818361317c565b925050505b949350505050565b600060038211156125b5575080600061256e600283613168565b61257990600161313a565b90505b818110156125af579050806002816125948186613168565b61259e919061313a565b6125a89190613168565b905061257c565b50919050565b81156125bf575060015b919050565b600060cd82815481106125d9576125d96130ef565b60009182526020909120600790910201546040516370a0823160e01b81526001600160a01b03909116906370a0823190612617903090600401612e4a565b602060405180830381865afa158015612634573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265891906132a2565b600083815260d260205260408120549192509081906126799060019061317c565b90505b600084815260d26020526040902080548290811061269c5761269c6130ef565b906000526020600020015483106126f257600084815260d3602052604090208054829081106126cd576126cd6130ef565b600091825260208083209091015486835260d590915260409091208290559150612702565b6126fb8161369f565b905061267c565b508060cd8481548110612717576127176130ef565b906000526020600020906007020160010181905550505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460ff16156127b35760405162461bcd60e51b81526004016105d5906130df565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586123fa3390565b600054610100900460ff1661280f5760405162461bcd60e51b81526004016105d59061370e565b610909612952565b600054610100900460ff1661283e5760405162461bcd60e51b81526004016105d59061370e565b6001606555565b600054610100900460ff1661286c5760405162461bcd60e51b81526004016105d59061370e565b6097805460ff19169055565b6001600160a01b038116600090815260ce602052604081205480820361289f5760006128a2565b60015b9392505050565b61292c8363a9059cbb60e01b84846040516024016128c89291906132d1565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612982565b505050565b611a08846323b872dd60e01b8585856040516024016128c89392919061371e565b600054610100900460ff166129795760405162461bcd60e51b81526004016105d59061370e565b61090933612731565b60006129d7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612a119092919063ffffffff16565b80519091501561292c57808060200190518101906129f59190613744565b61292c5760405162461bcd60e51b81526004016105d5906137bd565b606061254c848460008585843b612a3a5760405162461bcd60e51b81526004016105d5906137ff565b600080866001600160a01b03168587604051612a569190613831565b60006040518083038185875af1925050503d8060008114612a93576040519150601f19603f3d011682016040523d82523d6000602084013e612a98565b606091505b509150915061254782828660608315612ab25750816128a2565b825115612ac25782518084602001fd5b8160405162461bcd60e51b81526004016105d59190612b9a565b828054828255906000526020600020908101928215612b17579160200282015b82811115612b17578235825591602001919060010190612afc565b50612b23929150612b27565b5090565b5b80821115612b235760008155600101612b28565b60005b83811015612b57578181015183820152602001612b3f565b83811115611a085750506000910152565b6000612b72825190565b808452602084019350612b89818560208601612b3c565b601f01601f19169290920192915050565b602080825281016128a28184612b68565b60006001600160a01b038216611a35565b612bc581612bab565b81146122ca57600080fd5b8035611a3581612bbc565b600060208284031215612bf057612bf0600080fd5b600061254c8484612bd0565b805b82525050565b60208101611a358284612bfc565b80612bc5565b8035611a3581612c12565b60008060408385031215612c3957612c39600080fd5b6000612c458585612c18565b9250506020612c5685828601612bd0565b9150509250929050565b6000611a3582612bab565b6000611a3582612c60565b612bfe81612c6b565b60208101611a358284612c76565b600060208284031215612ca257612ca2600080fd5b600061254c8484612c18565b612bfe81612bab565b60e08101612cc5828a612cae565b612cd26020830189612bfc565b612cdf6040830188612bfc565b612cec6060830187612bfc565b612cf96080830186612bfc565b612d0660a0830185612bfc565b612d1360c0830184612bfc565b98975050505050505050565b60008060408385031215612d3557612d35600080fd5b6000612d418585612c18565b9250506020612c5685828601612c18565b60008083601f840112612d6757612d67600080fd5b50813567ffffffffffffffff811115612d8257612d82600080fd5b602083019150836020820283011115612d9d57612d9d600080fd5b9250929050565b600080600080600060608688031215612dbf57612dbf600080fd5b6000612dcb8888612c18565b955050602086013567ffffffffffffffff811115612deb57612deb600080fd5b612df788828901612d52565b9450945050604086013567ffffffffffffffff811115612e1957612e19600080fd5b612e2588828901612d52565b92509250509295509295909350565b801515612bfe565b60208101611a358284612e34565b60208101611a358284612cae565b60608101612e668286612bfc565b612e736020830185612bfc565b61254c6040830184612bfc565b801515612bc5565b8035611a3581612e80565b60008060008060808587031215612eac57612eac600080fd5b6000612eb88787612c18565b9450506020612ec987828801612c18565b9350506040612eda87828801612c18565b9250506060612eeb87828801612e88565b91505092959194509250565b8051612f038382612cae565b506020810151612f166020840182612bfc565b506040810151612f296040840182612bfc565b506060810151612f3c6060840182612bfc565b506080810151612f4f6080840182612bfc565b5060a0810151612f6260a0840182612bfc565b5060c081015161292c60c0840182612bfc565b612f7f8282612ef7565b5060e00190565b60200190565b6000612f96825190565b808452602093840193830160005b82811015612fc9578151612fb88782612f75565b965050602082019150600101612fa4565b5093949350505050565b602080825281016128a28184612f8c565b60008060408385031215612ffa57612ffa600080fd5b6000612d418585612bd0565b6000806000806080858703121561301f5761301f600080fd5b6000612eb88787612bd0565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152612f86565b60208082528101611a358161302b565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050612f86565b60208082528101611a358161306b565b60108152602081017f5061757361626c653a207061757365640000000000000000000000000000000081529050612f86565b60208082528101611a35816130ad565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561313557613135613105565b500290565b6000821982111561314d5761314d613105565b500190565b634e487b7160e01b600052601260045260246000fd5b60008261317757613177613152565b500490565b60008282101561318e5761318e613105565b500390565b60118152602081017f4e6f2070656e64696e672072657761726400000000000000000000000000000081529050612f86565b60208082528101611a3581613193565b608081016131e38287612cae565b6131f06020830186612cae565b6131fd6040830185612bfc565b61320a6060830184612bfc565b95945050505050565b600b8152602081017f5a65726f20616d6f756e7400000000000000000000000000000000000000000081529050612f86565b60208082528101611a3581613213565b60198152602081017f4e6f7420656e6f756768207374616b696e6742616c616e63650000000000000081529050612f86565b60208082528101611a3581613255565b8051611a3581612c12565b6000602082840312156132b7576132b7600080fd5b600061254c8484613297565b60608101612e668286612cae565b604081016132df8285612cae565b6128a26020830184612bfc565b6000600182016132fe576132fe613105565b5060010190565b60138152602081017f506f6f6c206973206e6f74206661726d696e670000000000000000000000000081529050612f86565b60208082528101611a3581613305565b60128152602081017f43616e206e6f74207374616b65207a65726f000000000000000000000000000081529050612f86565b60208082528101611a3581613347565b602f8152602081017f43616e206e6f74207365742073746172742074696d657374616d70206166746581527f7220616464696e67206120706f6f6c0000000000000000000000000000000000602082015290505b60400190565b60208082528101611a3581613389565b602e8152602081017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181527f647920696e697469616c697a6564000000000000000000000000000000000000602082015290506133dd565b60208082528101611a35816133f3565b600c8152602081017f5a65726f2061646472657373000000000000000000000000000000000000000081529050612f86565b60208082528101611a358161345b565b600f8152602081017f506f6f6c206e6f7420657869737473000000000000000000000000000000000081529050612f86565b60208082528101611a358161349d565b600a8152602081017f4f6e6c7920626f6e75730000000000000000000000000000000000000000000081529050612f86565b60208082528101611a35816134df565b604081016132df8285612bfc565b60138152602081017f4f6e6c7920766544454720636f6e74726163740000000000000000000000000081529050612f86565b60208082528101611a358161352f565b60138152602081017f416c726561647920696e2074686520706f6f6c0000000000000000000000000081529050612f86565b60208082528101611a3581613571565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015290506133dd565b60208082528101611a35816135b3565b601a8152602081017f4e6f20446567697320746f6b656e20696e2074686520706f6f6c00000000000081529050612f86565b60208082528101611a358161361b565b60148152602081017f5061757361626c653a206e6f742070617573656400000000000000000000000081529050612f86565b60208082528101611a358161365d565b6000816136ae576136ae613105565b506000190190565b602b8152602081017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015290506133dd565b60208082528101611a35816136b6565b6060810161372c8286612cae565b612e736020830185612cae565b8051611a3581612e80565b60006020828403121561375957613759600080fd5b600061254c8484613739565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f74207375636365656400000000000000000000000000000000000000000000602082015290506133dd565b60208082528101611a3581613765565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529050612f86565b60208082528101611a35816137cd565b6000613819825190565b613827818560208601612b3c565b9290920192915050565b611a35818361380f56fea2646970667358221220ffcc75fcc29ecb16e105e7b002874edc0782cc8655d9a9903156b99a5556c47164736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025c5760003560e01c80637b0472f011610145578063cdcd2907116100bd578063d54465181161008c578063e6fd48bc11610071578063e6fd48bc14610583578063eced55261461058c578063f2fde38b1461059857600080fd5b8063d54465181461055d578063e4a763151461057057600080fd5b8063cdcd29071461050f578063cdfb6cf314610522578063d13f67bc14610535578063d41dcbea1461054857600080fd5b8063a06ddcb311610114578063c44bef75116100f9578063c44bef75146104be578063c4d66de8146104d1578063c73d2bae146104e457600080fd5b8063a06ddcb31461047b578063bfa7decb1461049e57600080fd5b80637b0472f0146103fe5780638456cb59146104115780638da5cb5b1461041957806393f1a40b1461043257600080fd5b8063441a3e70116101d85780635bf56068116101a75780635e4651f91161018c5780635e4651f9146103db578063630b5ba1146103ee578063715018a6146103f657600080fd5b80635bf56068146103b45780635c975abb146103c757600080fd5b8063441a3e70146103685780634b34b6871461037b5780634f3e7ba61461038e57806351eb05a6146103a157600080fd5b806329baefff1161022f5780632a48235b116102145780632a48235b1461031a5780632c678a3e146103405780633f4ba83a1461036057600080fd5b806329baefff146102f157806329fd2007146102fa57600080fd5b806306fdde031461026157806307a96cbf146102b357806317fb77de146102c857806318fccc76146102de575b600080fd5b61029d6040518060400160405280601581526020017f4465676973204c50204661726d696e6720506f6f6c000000000000000000000081525081565b6040516102aa9190612b9a565b60405180910390f35b6102c66102c1366004612bdb565b6105ab565b005b6102d160cb5481565b6040516102aa9190612c04565b6102c66102ec366004612c23565b61060d565b6102d160d45481565b60c95461030d906001600160a01b031681565b6040516102aa9190612c7f565b61032d610328366004612c8d565b61087e565b6040516102aa9796959493929190612cb7565b6102d161034e366004612bdb565b60ce6020526000908152604090205481565b6102c66108d7565b6102c6610376366004612d1f565b61090b565b6102c6610389366004612da4565b610c6a565b60ca5461030d906001600160a01b031681565b6102c66103af366004612c8d565b610d26565b6102d16103c2366004612d1f565b61102b565b60975460ff165b6040516102aa9190612e3c565b6102d16103e9366004612d1f565b61105c565b6102c6611078565b6102c66110eb565b6102c661040c366004612d1f565b61111f565b6102c6611458565b6033546001600160a01b03166040516102aa9190612e4a565b61046c610440366004612c23565b60d060209081526000928352604080842090915290825290208054600182015460029092015490919083565b6040516102aa93929190612e58565b6103ce610489366004612c8d565b60cf6020526000908152604090205460ff1681565b6102d16104ac366004612c8d565b60d56020526000908152604090205481565b6102c66104cc366004612c8d565b61148a565b6102c66104df366004612bdb565b611539565b6102d16104f2366004612c23565b60d160209081526000928352604080842090915290825290205481565b6102c661051d366004612e93565b611780565b6102d1610530366004612c23565b611a0e565b6102d1610543366004612c23565b611a3b565b610550611cf2565b6040516102aa9190612fd3565b6102c661056b366004612fe4565b611d9a565b6102c661057e366004613006565b611f79565b6102d160cc5481565b6102d164e8d4a5100081565b6102c66105a6366004612bdb565b612271565b6033546001600160a01b031633146105de5760405162461bcd60e51b81526004016105d59061305b565b60405180910390fd5b60ca805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60026065540361062f5760405162461bcd60e51b81526004016105d59061309d565b600260655560975460ff16156106575760405162461bcd60e51b81526004016105d5906130df565b600082815260cf602052604090205460ff161561067c5761067782610d26565b6106a6565b4260cd8381548110610690576106906130ef565b9060005260206000209060070201600301819055505b600060cd83815481106106bb576106bb6130ef565b600091825260208083206040805160e081018252600790940290910180546001600160a01b03168452600181015484840152600280820154858401526003820154606086015260048201546080860152600582015460a0860190815260069092015460c086015288865260d084528286203380885290855283872080548b895260d1875285892092895291909552928620549151908401549496509294939192909164e8d4a510009161076d9161311b565b86608001518660010154610781919061311b565b61078b919061313a565b6107959190613168565b61079f919061313a565b6107a9919061317c565b600086815260d1602090815260408083203384529091528120559050806107e25760405162461bcd60e51b81526004016105d5906131c5565b64e8d4a510008360a0015183600201546107fc919061311b565b84608001518460010154610810919061311b565b61081a919061313a565b6108249190613168565b8255600061083285836122cd565b90507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e3386888460405161086994939291906131d5565b60405180910390a15050600160655550505050565b60cd818154811061088e57600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b039095169650929491939092919087565b6033546001600160a01b031633146109015760405162461bcd60e51b81526004016105d59061305b565b6109096123ab565b565b60026065540361092d5760405162461bcd60e51b81526004016105d59061309d565b600260655560975460ff16156109555760405162461bcd60e51b81526004016105d5906130df565b600081116109755760405162461bcd60e51b81526004016105d590613245565b600060cd838154811061098a5761098a6130ef565b6000918252602080832086845260d08252604080852033865290925292206001810154600790920290920192508311156109d65760405162461bcd60e51b81526004016105d590613287565b600084815260cf602052604090205460ff16156109fb576109f684610d26565b610a02565b4260038301555b8054600085815260d1602090815260408083203384529091528120546005850154600285015492939264e8d4a5100091610a3b9161311b565b86600401548660010154610a4f919061311b565b610a59919061313a565b610a639190613168565b610a6d919061313a565b610a77919061317c565b600086815260d160209081526040808320338085529252822082905591925090610aa190836122cd565b90507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e33338884604051610ad894939291906131d5565b60405180910390a18354600090610afc906001906001600160a01b03163389612411565b905080846001016000828254610b12919061317c565b909155505060ca546001600160a01b031615610bdc57600284015460ca546040516370a0823160e01b8152610bb4916001600160a01b0316906370a0823190610b5f903390600401612e4a565b602060405180830381865afa158015610b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba091906132a2565b8660010154610baf919061311b565b612554565b6002860181905560068701548291610bcb9161313a565b610bd5919061317c565b6006870155505b64e8d4a5100085600501548560020154610bf6919061311b565b86600401548660010154610c0a919061311b565b610c14919061313a565b610c1e9190613168565b84556040517ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56890610c549033908a9085906132c3565b60405180910390a1505060016065555050505050565b6033546001600160a01b03163314610c945760405162461bcd60e51b81526004016105d59061305b565b600085815260d260205260409020610cad908585612adc565b50600085815260d360205260409020610cc7908383612adc565b50600082826000818110610cdd57610cdd6130ef565b905060200201351115610d0857600085815260cf60205260409020805460ff19166001179055610d1f565b600085815260cf60205260409020805460ff191690555b5050505050565b600060cd8281548110610d3b57610d3b6130ef565b9060005260206000209060070201905080600301544211610d5a575050565b80546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610d8a903090600401612e4a565b602060405180830381865afa158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcb91906132a2565b905080600003610de057504260039091015550565b6000826003015442610df2919061317c565b90506000836001015482610e06919061311b565b90506000846002015483610e1a919061311b565b905083610e2c64e8d4a510008461311b565b610e369190613168565b856004016000828254610e49919061313a565b90915550506006850154600003610e665760006005860155610e9d565b6006850154610e7a64e8d4a510008361311b565b610e849190613168565b856005016000828254610e97919061313a565b90915550505b60c9546001600160a01b031663b476739830610eb9848661313a565b6040518363ffffffff1660e01b8152600401610ed69291906132d1565b600060405180830381600087803b158015610ef057600080fd5b505af1158015610f04573d6000803e3d6000fd5b50504260038801555050600086815260d5602090815260408083205460d29092529091205415610fe057600087815260d260205260408120805483908110610f4e57610f4e6130ef565b60009182526020808320909101548a835260d2909152604090912054909150610f799060019061317c565b82108015610fba5750600088815260d260205260409020610f9b83600161313a565b81548110610fab57610fab6130ef565b90600052602060002001548610155b15610fcd57610fc8886125c4565b610fde565b80861015610fde57610fde886125c4565b505b600486015460058701546040517f17b8644f386d1c7c7138ef98b3c8035622bbe94d7be9b26f71d2654a547c29439261101a928b92612e58565b60405180910390a150505050505050565b60d3602052816000526040600020818154811061104757600080fd5b90600052602060002001600091509150505481565b60d2602052816000526040600020818154811061104757600080fd5b60cd5460015b818110156110e757600081815260cf602052604081205460ff16151590036110ce574260cd82815481106110b4576110b46130ef565b9060005260206000209060070201600301819055506110d7565b6110d781610d26565b6110e0816132ec565b905061107e565b5050565b6033546001600160a01b031633146111155760405162461bcd60e51b81526004016105d59061305b565b6109096000612731565b6002606554036111415760405162461bcd60e51b81526004016105d59061309d565b600260655560975460ff16156111695760405162461bcd60e51b81526004016105d5906130df565b600082815260cf6020526040902054829060ff166111995760405162461bcd60e51b81526004016105d590613337565b600082116111b95760405162461bcd60e51b81526004016105d590613379565b600060cd84815481106111ce576111ce6130ef565b6000918252602080832087845260d0825260408085203386529092529220600790910290910191506111ff85610d26565b6001810154156112ea578054600086815260d1602090815260408083203384529091528120546005850154600285015492939264e8d4a51000916112429161311b565b86600401548660010154611256919061311b565b611260919061313a565b61126a9190613168565b611274919061313a565b61127e919061317c565b600087815260d1602090815260408083203380855292528220829055919250906112a890836122cd565b90507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e333389846040516112df94939291906131d5565b60405180910390a150505b81546000906113059082906001600160a01b03163388612411565b90508082600101600082825461131b919061313a565b909155505060ca546001600160a01b0316156113e057600282015460ca546040516370a0823160e01b81526113b8916001600160a01b0316906370a0823190611368903390600401612e4a565b602060405180830381865afa158015611385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a991906132a2565b8460010154610baf919061311b565b60028401819055600685015482916113cf9161313a565b6113d9919061317c565b6006850155505b64e8d4a51000836005015483600201546113fa919061311b565b8460040154846001015461140e919061311b565b611418919061313a565b6114229190613168565b82556040517f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b690610869903390899085906132c3565b6033546001600160a01b031633146114825760405162461bcd60e51b81526004016105d59061305b565b610909612790565b6033546001600160a01b031633146114b45760405162461bcd60e51b81526004016105d59061305b565b60975460ff16156114d75760405162461bcd60e51b81526004016105d5906130df565b60cb546001146114f95760405162461bcd60e51b81526004016105d5906133e3565b60cc8190556040517faf8fc8a4c9a55a9a29c3e99cd1797d43062c696f192896c79cbebd7da3286d829061152e908390612c04565b60405180910390a150565b600054610100900460ff166115545760005460ff1615611558565b303b155b6115745760405162461bcd60e51b81526004016105d59061344b565b600054610100900460ff16158015611596576000805461ffff19166101011790555b6001600160a01b0382166115bc5760405162461bcd60e51b81526004016105d59061348d565b6115c46127e8565b6115cc612817565b6115d4612845565b60c980546001600160a01b0380851673ffffffffffffffffffffffffffffffffffffffff1992831617909255600160cb8190556040805160e081018252600080825260208201818152928201818152606083018281526080840183815260a0850184815260c0860185815260cd8054998a018155909552945160079097027f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e8101805498909a16979098169690961790975592517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2f86015591517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3085015593517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3184015590517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3283015591517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3382015590517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db349091015580156110e7576000805461ff00191690555050565b6033546001600160a01b031633146117aa5760405162461bcd60e51b81526004016105d59061305b565b60975460ff16156117cd5760405162461bcd60e51b81526004016105d5906130df565b60cd84815481106117e0576117e06130ef565b9060005260206000209060070201600301546000036118115760405162461bcd60e51b81526004016105d5906134cf565b811561183757600083116118375760405162461bcd60e51b81526004016105d590613511565b801561184a57611845611078565b611853565b61185384610d26565b600084815260cf602052604090205460ff161580156118725750600083115b156118cb57600084815260cf602052604090819020805460ff19166001179055517f6140f1d5adcbca6c6b24c3b5e695335cd1a2071c7e03881172dc9eb0e488225c906118c29086904290613521565b60405180910390a15b8260000361197a57600084815260cf60205260408120805460ff1916905560cd8054869081106118fd576118fd6130ef565b906000526020600020906007020160010181905550600060cd8581548110611927576119276130ef565b9060005260206000209060070201600201819055507f4654f9b7bb3ba4d66e3a4e972e39db189ac7b4fdf5f2a95d57a4eb4d91a16d45844260405161196d929190613521565b60405180910390a1611a08565b8260cd858154811061198e5761198e6130ef565b9060005260206000209060070201600101819055508160cd85815481106119b7576119b76130ef565b9060005260206000209060070201600201819055507f12558fa101886c4fd9ad5e0b9932a6ffd3653b63380b1da3f024ddaf506c22eb8484846040516119ff93929190612e58565b60405180910390a15b50505050565b600082815260d0602090815260408083206001600160a01b03851684529091529020600101545b92915050565b60008060cd8481548110611a5157611a516130ef565b60009182526020918290206040805160e081018252600790930290910180546001600160a01b0316835260018101549383019390935260028301549082015260038201546060820181905260048301546080830152600583015460a083015260069092015460c082015291501580611acc5750806060015142105b80611ad8575060cc5442105b15611ae7576000915050611a35565b600084815260d0602090815260408083206001600160a01b0380881685529083528184208251606081018452815481526001820154948101949094526002015483830152845191516370a0823160e01b81529293929116906370a0823190611b53903090600401612e4a565b602060405180830381865afa158015611b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9491906132a2565b608084015160a0850151919250906000839003611bb957600095505050505050611a35565b600088815260cf602052604090205460ff1615611c6d576000856060015142611be2919061317c565b90506000818760200151611bf6919061311b565b905084611c0864e8d4a510008361311b565b611c129190613168565b611c1c908561313a565b60c088015190945015611c6a576000828860400151611c3b919061311b565b60c0890151909150611c5264e8d4a510008361311b565b611c5c9190613168565b611c66908561313a565b9350505b50505b8351600089815260d1602090815260408083206001600160a01b038c168452909152808220549087015191929164e8d4a5100090611cac90869061311b565b868960200151611cbc919061311b565b611cc6919061313a565b611cd09190613168565b611cda919061313a565b611ce4919061317c565b9650611a3595505050505050565b606060cd805480602002602001604051908101604052809291908181526020016000905b82821015611d915760008481526020908190206040805160e0810182526007860290920180546001600160a01b03168352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a08401526006015460c08301529083529092019101611d16565b50505050905090565b60ca546001600160a01b03163314611dc45760405162461bcd60e51b81526004016105d590613561565b60cd5460005b81811015611a0857600081815260cf602052604090205460ff1615611f6957600081815260d0602090815260408083206001600160a01b038816845290915281206001810154909103611e1d5750611f69565b600060cd8381548110611e3257611e326130ef565b90600052602060002090600702019050611e4b83610d26565b6000826000015464e8d4a5100083600501548560020154611e6c919061311b565b84600401548660010154611e80919061311b565b611e8a919061313a565b611e949190613168565b611e9e919061317c565b600085815260d1602090815260408083206001600160a01b038c168452909152812080549293508392909190611ed590849061313a565b909155505060028301546001840154600090611ef590610baf908a61311b565b60028601819055600585015490915064e8d4a5100090611f15908361311b565b85600401548760010154611f29919061311b565b611f33919061313a565b611f3d9190613168565b855560068401548290611f5190839061313a565b611f5b919061317c565b846006018190555050505050505b611f72816132ec565b9050611dca565b836001600160a01b038116611fa05760405162461bcd60e51b81526004016105d59061348d565b6033546001600160a01b03163314611fca5760405162461bcd60e51b81526004016105d59061305b565b60975460ff1615611fed5760405162461bcd60e51b81526004016105d5906130df565b611ff685612878565b156120135760405162461bcd60e51b81526004016105d5906135a3565b821561203957600084116120395760405162461bcd60e51b81526004016105d590613511565b811561204757612047611078565b600060cc54421161205a5760cc5461205c565b425b6040805160e0810182526001600160a01b038981168252602082018981529282018881526060830185815260006080850181815260a0860182815260c0870183815260cd8054600181018255945296517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e6007909402938401805473ffffffffffffffffffffffffffffffffffffffff1916919097161790955595517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2f82015591517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db30830155517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3182015592517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db32840155517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db33830155517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3490910155905084156121fd5760cb54600090815260cf60205260409020805460ff191660011790555b60cb805490600061220d836132ec565b909155506001600160a01b038716600090815260ce60205260409081902091909155517f5f9d2cd19aa3f32e9e8cc45267a493f9956c1b955a220136161ff8ad595bc78290612261908890889088906132c3565b60405180910390a1505050505050565b6033546001600160a01b0316331461229b5760405162461bcd60e51b81526004016105d59061305b565b6001600160a01b0381166122c15760405162461bcd60e51b81526004016105d59061360b565b6122ca81612731565b50565b60c9546040516370a0823160e01b815260009182916001600160a01b03909116906370a0823190612302903090600401612e4a565b602060405180830381865afa15801561231f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234391906132a2565b9050600081116123655760405162461bcd60e51b81526004016105d59061364d565b8083111561238b5760c954612384906001600160a01b031685836128a9565b9050611a35565b60c9546123a2906001600160a01b031685856128a9565b82915050611a35565b60975460ff166123cd5760405162461bcd60e51b81526004016105d59061368f565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516124079190612e4a565b60405180910390a1565b600080846001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016124409190612e4a565b602060405180830381865afa15801561245d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248191906132a2565b905085156124a25761249d6001600160a01b03861685856128a9565b6124b7565b6124b76001600160a01b038616853086612931565b6040516370a0823160e01b81526000906001600160a01b038716906370a08231906124e6903090600401612e4a565b602060405180830381865afa158015612503573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252791906132a2565b90508661253d57612538828261317c565b612547565b612547818361317c565b925050505b949350505050565b600060038211156125b5575080600061256e600283613168565b61257990600161313a565b90505b818110156125af579050806002816125948186613168565b61259e919061313a565b6125a89190613168565b905061257c565b50919050565b81156125bf575060015b919050565b600060cd82815481106125d9576125d96130ef565b60009182526020909120600790910201546040516370a0823160e01b81526001600160a01b03909116906370a0823190612617903090600401612e4a565b602060405180830381865afa158015612634573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265891906132a2565b600083815260d260205260408120549192509081906126799060019061317c565b90505b600084815260d26020526040902080548290811061269c5761269c6130ef565b906000526020600020015483106126f257600084815260d3602052604090208054829081106126cd576126cd6130ef565b600091825260208083209091015486835260d590915260409091208290559150612702565b6126fb8161369f565b905061267c565b508060cd8481548110612717576127176130ef565b906000526020600020906007020160010181905550505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460ff16156127b35760405162461bcd60e51b81526004016105d5906130df565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586123fa3390565b600054610100900460ff1661280f5760405162461bcd60e51b81526004016105d59061370e565b610909612952565b600054610100900460ff1661283e5760405162461bcd60e51b81526004016105d59061370e565b6001606555565b600054610100900460ff1661286c5760405162461bcd60e51b81526004016105d59061370e565b6097805460ff19169055565b6001600160a01b038116600090815260ce602052604081205480820361289f5760006128a2565b60015b9392505050565b61292c8363a9059cbb60e01b84846040516024016128c89291906132d1565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612982565b505050565b611a08846323b872dd60e01b8585856040516024016128c89392919061371e565b600054610100900460ff166129795760405162461bcd60e51b81526004016105d59061370e565b61090933612731565b60006129d7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612a119092919063ffffffff16565b80519091501561292c57808060200190518101906129f59190613744565b61292c5760405162461bcd60e51b81526004016105d5906137bd565b606061254c848460008585843b612a3a5760405162461bcd60e51b81526004016105d5906137ff565b600080866001600160a01b03168587604051612a569190613831565b60006040518083038185875af1925050503d8060008114612a93576040519150601f19603f3d011682016040523d82523d6000602084013e612a98565b606091505b509150915061254782828660608315612ab25750816128a2565b825115612ac25782518084602001fd5b8160405162461bcd60e51b81526004016105d59190612b9a565b828054828255906000526020600020908101928215612b17579160200282015b82811115612b17578235825591602001919060010190612afc565b50612b23929150612b27565b5090565b5b80821115612b235760008155600101612b28565b60005b83811015612b57578181015183820152602001612b3f565b83811115611a085750506000910152565b6000612b72825190565b808452602084019350612b89818560208601612b3c565b601f01601f19169290920192915050565b602080825281016128a28184612b68565b60006001600160a01b038216611a35565b612bc581612bab565b81146122ca57600080fd5b8035611a3581612bbc565b600060208284031215612bf057612bf0600080fd5b600061254c8484612bd0565b805b82525050565b60208101611a358284612bfc565b80612bc5565b8035611a3581612c12565b60008060408385031215612c3957612c39600080fd5b6000612c458585612c18565b9250506020612c5685828601612bd0565b9150509250929050565b6000611a3582612bab565b6000611a3582612c60565b612bfe81612c6b565b60208101611a358284612c76565b600060208284031215612ca257612ca2600080fd5b600061254c8484612c18565b612bfe81612bab565b60e08101612cc5828a612cae565b612cd26020830189612bfc565b612cdf6040830188612bfc565b612cec6060830187612bfc565b612cf96080830186612bfc565b612d0660a0830185612bfc565b612d1360c0830184612bfc565b98975050505050505050565b60008060408385031215612d3557612d35600080fd5b6000612d418585612c18565b9250506020612c5685828601612c18565b60008083601f840112612d6757612d67600080fd5b50813567ffffffffffffffff811115612d8257612d82600080fd5b602083019150836020820283011115612d9d57612d9d600080fd5b9250929050565b600080600080600060608688031215612dbf57612dbf600080fd5b6000612dcb8888612c18565b955050602086013567ffffffffffffffff811115612deb57612deb600080fd5b612df788828901612d52565b9450945050604086013567ffffffffffffffff811115612e1957612e19600080fd5b612e2588828901612d52565b92509250509295509295909350565b801515612bfe565b60208101611a358284612e34565b60208101611a358284612cae565b60608101612e668286612bfc565b612e736020830185612bfc565b61254c6040830184612bfc565b801515612bc5565b8035611a3581612e80565b60008060008060808587031215612eac57612eac600080fd5b6000612eb88787612c18565b9450506020612ec987828801612c18565b9350506040612eda87828801612c18565b9250506060612eeb87828801612e88565b91505092959194509250565b8051612f038382612cae565b506020810151612f166020840182612bfc565b506040810151612f296040840182612bfc565b506060810151612f3c6060840182612bfc565b506080810151612f4f6080840182612bfc565b5060a0810151612f6260a0840182612bfc565b5060c081015161292c60c0840182612bfc565b612f7f8282612ef7565b5060e00190565b60200190565b6000612f96825190565b808452602093840193830160005b82811015612fc9578151612fb88782612f75565b965050602082019150600101612fa4565b5093949350505050565b602080825281016128a28184612f8c565b60008060408385031215612ffa57612ffa600080fd5b6000612d418585612bd0565b6000806000806080858703121561301f5761301f600080fd5b6000612eb88787612bd0565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152612f86565b60208082528101611a358161302b565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050612f86565b60208082528101611a358161306b565b60108152602081017f5061757361626c653a207061757365640000000000000000000000000000000081529050612f86565b60208082528101611a35816130ad565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561313557613135613105565b500290565b6000821982111561314d5761314d613105565b500190565b634e487b7160e01b600052601260045260246000fd5b60008261317757613177613152565b500490565b60008282101561318e5761318e613105565b500390565b60118152602081017f4e6f2070656e64696e672072657761726400000000000000000000000000000081529050612f86565b60208082528101611a3581613193565b608081016131e38287612cae565b6131f06020830186612cae565b6131fd6040830185612bfc565b61320a6060830184612bfc565b95945050505050565b600b8152602081017f5a65726f20616d6f756e7400000000000000000000000000000000000000000081529050612f86565b60208082528101611a3581613213565b60198152602081017f4e6f7420656e6f756768207374616b696e6742616c616e63650000000000000081529050612f86565b60208082528101611a3581613255565b8051611a3581612c12565b6000602082840312156132b7576132b7600080fd5b600061254c8484613297565b60608101612e668286612cae565b604081016132df8285612cae565b6128a26020830184612bfc565b6000600182016132fe576132fe613105565b5060010190565b60138152602081017f506f6f6c206973206e6f74206661726d696e670000000000000000000000000081529050612f86565b60208082528101611a3581613305565b60128152602081017f43616e206e6f74207374616b65207a65726f000000000000000000000000000081529050612f86565b60208082528101611a3581613347565b602f8152602081017f43616e206e6f74207365742073746172742074696d657374616d70206166746581527f7220616464696e67206120706f6f6c0000000000000000000000000000000000602082015290505b60400190565b60208082528101611a3581613389565b602e8152602081017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181527f647920696e697469616c697a6564000000000000000000000000000000000000602082015290506133dd565b60208082528101611a35816133f3565b600c8152602081017f5a65726f2061646472657373000000000000000000000000000000000000000081529050612f86565b60208082528101611a358161345b565b600f8152602081017f506f6f6c206e6f7420657869737473000000000000000000000000000000000081529050612f86565b60208082528101611a358161349d565b600a8152602081017f4f6e6c7920626f6e75730000000000000000000000000000000000000000000081529050612f86565b60208082528101611a35816134df565b604081016132df8285612bfc565b60138152602081017f4f6e6c7920766544454720636f6e74726163740000000000000000000000000081529050612f86565b60208082528101611a358161352f565b60138152602081017f416c726561647920696e2074686520706f6f6c0000000000000000000000000081529050612f86565b60208082528101611a3581613571565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015290506133dd565b60208082528101611a35816135b3565b601a8152602081017f4e6f20446567697320746f6b656e20696e2074686520706f6f6c00000000000081529050612f86565b60208082528101611a358161361b565b60148152602081017f5061757361626c653a206e6f742070617573656400000000000000000000000081529050612f86565b60208082528101611a358161365d565b6000816136ae576136ae613105565b506000190190565b602b8152602081017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015290506133dd565b60208082528101611a35816136b6565b6060810161372c8286612cae565b612e736020830185612cae565b8051611a3581612e80565b60006020828403121561375957613759600080fd5b600061254c8484613739565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f74207375636365656400000000000000000000000000000000000000000000602082015290506133dd565b60208082528101611a3581613765565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529050612f86565b60208082528101611a35816137cd565b6000613819825190565b613827818560208601612b3c565b9290920192915050565b611a35818361380f56fea2646970667358221220ffcc75fcc29ecb16e105e7b002874edc0782cc8655d9a9903156b99a5556c47164736f6c634300080d0033",
  "devdoc": {
    "details": "The pool id starts from 1 rather than 0         The degis reward is calculated by timestamp rather than block number         VeDEG will boost the farming speed by having a extra reward type         The extra reward is shared by those staking lptokens with veDEG balances         Every time the veDEG balance change, the reward will be updated         The basic reward depends on the liquidity inside the pool         Update with a piecewise function         liquidity amount:   |---------------|------------------|----------------                             0           threshold 1        threshold 2          reward speed:            speed1          speed2             speed3         The speed update will be updated one tx after the last tx that triggers the threshold         The reward update will be another one tx later",
    "kind": "dev",
    "methods": {
      "add(address,uint256,uint256,bool)": {
        "details": "Can only be called by the owner      The reward speed can be 0 and set later by setDegisReward function",
        "params": {
          "_basicDegisPerSecond": "Basic reward speed(per second) for this new pool",
          "_bonusDegisPerSecond": "Bonus reward speed(per second) for this new pool",
          "_lpToken": "LP token address",
          "_withUpdate": "Whether update all pools' status"
        }
      },
      "getPoolList()": {
        "returns": {
          "_0": "pooList Total pool list"
        }
      },
      "getUserBalance(uint256,address)": {
        "params": {
          "_poolId": "Id of the pool",
          "_user": "User address"
        },
        "returns": {
          "_0": "balance User's balance (lpToken)"
        }
      },
      "harvest(uint256,address)": {
        "params": {
          "_poolId": "Id of the farming pool",
          "_to": "Receiver of degis rewards"
        }
      },
      "massUpdatePools()": {
        "details": "Can be called by anyone      Only update those active pools"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingDegis(uint256,address)": {
        "params": {
          "_poolId": "PoolId of this farming pool",
          "_user": "User address"
        },
        "returns": {
          "_0": "pendingDegisAmount Amount of pending degis"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDegisReward(uint256,uint256,uint256,bool)": {
        "params": {
          "_basicDegisPerSecond": "New basic reward amount per second",
          "_bonusDegisPerSecond": "New bonus reward amount per second",
          "_poolId": "Id of the farming pool",
          "_withUpdate": "Whether update all pools"
        }
      },
      "setPiecewise(uint256,uint256[],uint256[])": {
        "params": {
          "_poolId": "Id of the pool",
          "_reward": "Piecewise reward",
          "_threshold": "Piecewise threshold"
        }
      },
      "setStartTimestamp(uint256)": {
        "params": {
          "_startTimestamp": "New start block timestamp"
        }
      },
      "stake(uint256,uint256)": {
        "details": "Can only stake to the pools that are still farming",
        "params": {
          "_amount": "Staking amount",
          "_poolId": "Id of the farming pool"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBonus(address,uint256)": {
        "details": "When veDEG has balance change      Only called by veDEG contract",
        "params": {
          "_newVeDEGBalance": "New veDEG balance",
          "_user": "User address"
        }
      },
      "updatePool(uint256)": {
        "params": {
          "_poolId": "Id of the farming pool"
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "_amount": "Amount of lp tokens to withdraw",
          "_poolId": "Id of the farming pool"
        }
      }
    },
    "title": "Farming Pool",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add(address,uint256,uint256,bool)": {
        "notice": "Add a new lp into the pool"
      },
      "getPoolList()": {
        "notice": "Get the total pool list"
      },
      "getUserBalance(uint256,address)": {
        "notice": "Get a user's balance"
      },
      "harvest(uint256,address)": {
        "notice": "Harvest the degis reward and can be sent to another address"
      },
      "massUpdatePools()": {
        "notice": "Update all farming pools (except for those stopped ones)"
      },
      "pendingDegis(uint256,address)": {
        "notice": "Check the amount of pending degis reward"
      },
      "setDegisReward(uint256,uint256,uint256,bool)": {
        "notice": "Update the degisPerSecond for a specific pool (set to 0 to stop farming)"
      },
      "setPiecewise(uint256,uint256[],uint256[])": {
        "notice": "Set piecewise reward and threshold"
      },
      "setStartTimestamp(uint256)": {
        "notice": "Set the start block timestamp"
      },
      "stake(uint256,uint256)": {
        "notice": "Stake LP token into the farming pool"
      },
      "updateBonus(address,uint256)": {
        "notice": "Update a user's bonus"
      },
      "updatePool(uint256)": {
        "notice": "Update the pool's reward status"
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw lptoken from the pool"
      }
    },
    "notice": "This contract is for LPToken mining on Degis",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2523,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2526,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3760,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2403,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 2515,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2715,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 2759,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2611,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 2700,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12031,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "degis",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IDegisToken)35545"
      },
      {
        "astId": 12034,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "veDEG",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IVeDEG)17259"
      },
      {
        "astId": 12039,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "_nextPoolId",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 12041,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "startTimestamp",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 12060,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "poolList",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_struct(PoolInfo)12056_storage)dyn_storage"
      },
      {
        "astId": 12064,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "poolMapping",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12068,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "isFarming",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 12082,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "userInfo",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)12075_storage))"
      },
      {
        "astId": 12088,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "extraClaimable",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 12093,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "thresholdBasic",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 12098,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "piecewiseBasic",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 12100,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "currentRewardLevel",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 12104,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "poolRewardLevel",
        "offset": 0,
        "slot": "213",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)12056_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)12056_storage",
        "encoding": "dynamic_array",
        "label": "struct FarmingPoolUpgradeable.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDegisToken)35545": {
        "encoding": "inplace",
        "label": "contract IDegisToken",
        "numberOfBytes": "20"
      },
      "t_contract(IVeDEG)17259": {
        "encoding": "inplace",
        "label": "contract IVeDEG",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)12075_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FarmingPoolUpgradeable.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)12075_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)12075_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct FarmingPoolUpgradeable.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)12075_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PoolInfo)12056_storage": {
        "encoding": "inplace",
        "label": "struct FarmingPoolUpgradeable.PoolInfo",
        "members": [
          {
            "astId": 12043,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12045,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "basicDegisPerSecond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12047,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "bonusDegisPerSecond",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12049,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12051,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "accDegisPerShare",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 12053,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "accDegisPerBonusShare",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 12055,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "totalBonus",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(UserInfo)12075_storage": {
        "encoding": "inplace",
        "label": "struct FarmingPoolUpgradeable.UserInfo",
        "members": [
          {
            "astId": 12070,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12072,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "stakingBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12074,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "bonus",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}