{
  "address": "0x2708DCD0fd7823a44a1156f2E487817A45070aC0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_degis",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basicDegisPerSecond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bonusDegisPerSecond",
          "type": "uint256"
        }
      ],
      "name": "DegisRewardChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FarmingPoolStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FarmingPoolStopped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pendingReward",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basicDegisPerSecond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bonusDegisPerSecond",
          "type": "uint256"
        }
      ],
      "name": "NewPoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accDegisPerShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accDegisPerBonusShare",
          "type": "uint256"
        }
      ],
      "name": "PoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        }
      ],
      "name": "StartTimestampChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_nextPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_basicDegisPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bonusDegisPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "degis",
      "outputs": [
        {
          "internalType": "contract IDegisToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "basicDegisPerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bonusDegisPerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accDegisPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accDegisPerBonusShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBonus",
              "type": "uint256"
            }
          ],
          "internalType": "struct FarmingPool.PoolInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isFarming",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingDegis",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolList",
      "outputs": [
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "basicDegisPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bonusDegisPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accDegisPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accDegisPerBonusShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBonus",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_basicDegisPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bonusDegisPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "setDegisReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setStartTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_veDEG",
          "type": "address"
        }
      ],
      "name": "setVeDEG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newVeDEGBalance",
          "type": "uint256"
        }
      ],
      "name": "updateBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bonus",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veDEG",
      "outputs": [
        {
          "internalType": "contract IVeDEG",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c85a8566b08c737a34c114b8e570899d017ecc2b2b43db7ae654e371c74b7f4",
  "receipt": {
    "to": null,
    "from": "0xeB496257B64Cc2D39c291B209F465f3cfADE0873",
    "contractAddress": "0x2708DCD0fd7823a44a1156f2E487817A45070aC0",
    "transactionIndex": 22,
    "gasUsed": "2686536",
    "logsBloom": "0x
    "blockHash": "0x434252e25bb633ca33e4dab0ab030d6cc19aeaad143d3f69a04158d0ce9a151b",
    "transactionHash": "0x1c85a8566b08c737a34c114b8e570899d017ecc2b2b43db7ae654e371c74b7f4",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 12821286,
        "transactionHash": "0x1c85a8566b08c737a34c114b8e570899d017ecc2b2b43db7ae654e371c74b7f4",
        "address": "0x2708DCD0fd7823a44a1156f2E487817A45070aC0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000eb496257b64cc2d39c291b209f465f3cfade0873"
        ],
        "data": "0x",
        "logIndex": 89,
        "blockHash": "0x434252e25bb633ca33e4dab0ab030d6cc19aeaad143d3f69a04158d0ce9a151b"
      }
    ],
    "blockNumber": 12821286,
    "cumulativeGasUsed": "6853348",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9f285507Ea5B4F33822CA7aBb5EC8953ce37A645"
  ],
  "numDeployments": 1,
  "solcInputHash": "9e66e8167932ddce74b010238de2b798",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_degis\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basicDegisPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusDegisPerSecond\",\"type\":\"uint256\"}],\"name\":\"DegisRewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FarmingPoolStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FarmingPoolStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basicDegisPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusDegisPerSecond\",\"type\":\"uint256\"}],\"name\":\"NewPoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accDegisPerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accDegisPerBonusShare\",\"type\":\"uint256\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"}],\"name\":\"StartTimestampChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nextPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_basicDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"degis\",\"outputs\":[{\"internalType\":\"contract IDegisToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basicDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDegisPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDegisPerBonusShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"}],\"internalType\":\"struct FarmingPool.PoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isFarming\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingDegis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basicDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDegisPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDegisPerBonusShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basicDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setDegisReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"}],\"name\":\"setStartTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_veDEG\",\"type\":\"address\"}],\"name\":\"setVeDEG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newVeDEGBalance\",\"type\":\"uint256\"}],\"name\":\"updateBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veDEG\",\"outputs\":[{\"internalType\":\"contract IVeDEG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool id starts from 1 rather than 0         The degis reward is calculated by timestamp rather than block number         VeDEG will boost the farming speed by having a extra reward type         The extra reward is shared by those staking lptokens with veDEG balances         Every time the veDEG balance change, the reward will be updated\",\"kind\":\"dev\",\"methods\":{\"add(address,uint256,uint256,bool)\":{\"details\":\"Can only be called by the owner      The reward speed can be 0 and set later by setDegisReward function\",\"params\":{\"_basicDegisPerSecond\":\"Basic reward speed(per second) for this new pool\",\"_bonusDegisPerSecond\":\"Bonus reward speed(per second) for this new pool\",\"_lpToken\":\"LP token address\",\"_withUpdate\":\"Whether update all pools' status\"}},\"getPoolList()\":{\"returns\":{\"_0\":\"pooList Total pool list\"}},\"getUserBalance(uint256,address)\":{\"params\":{\"_poolId\":\"Id of the pool\",\"_user\":\"User address\"},\"returns\":{\"_0\":\"balance User's balance (lpToken)\"}},\"harvest(uint256,address)\":{\"params\":{\"_poolId\":\"Id of the farming pool\",\"_to\":\"Receiver of degis rewards\"}},\"massUpdatePools()\":{\"details\":\"Can be called by anyone      Only update those active pools\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingDegis(uint256,address)\":{\"params\":{\"_poolId\":\"PoolId of this farming pool\",\"_user\":\"User address\"},\"returns\":{\"_0\":\"pendingDegisAmount Amount of pending degis\"}},\"renounceOwnership()\":{\"details\":\"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.\"},\"setDegisReward(uint256,uint256,uint256,bool)\":{\"params\":{\"_basicDegisPerSecond\":\"New basic reward amount per second\",\"_bonusDegisPerSecond\":\"New bonus reward amount per second\",\"_poolId\":\"Id of the farming pool\",\"_withUpdate\":\"Whether update all pools\"}},\"setStartTimestamp(uint256)\":{\"params\":{\"_startTimestamp\":\"New start block timestamp\"}},\"stake(uint256,uint256)\":{\"details\":\"Can only stake to the pools that are still farming\",\"params\":{\"_amount\":\"Staking amount\",\"_poolId\":\"Id of the farming pool\"}},\"transferOwnership(address)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"newOwner\":\"Address of the new owner\"}},\"updateBonus(address,uint256)\":{\"details\":\"When veDEG has balance change      Only called by veDEG contract\",\"params\":{\"_newVeDEGBalance\":\"New veDEG balance\",\"_user\":\"User address\"}},\"updatePool(uint256)\":{\"params\":{\"_poolId\":\"Id of the farming pool\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of lp tokens to withdraw\",\"_poolId\":\"Id of the farming pool\"}}},\"title\":\"Farming Pool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add(address,uint256,uint256,bool)\":{\"notice\":\"Add a new lp into the pool\"},\"getPoolList()\":{\"notice\":\"Get the total pool list\"},\"getUserBalance(uint256,address)\":{\"notice\":\"Get a user's balance\"},\"harvest(uint256,address)\":{\"notice\":\"Harvest the degis reward and can be sent to another address\"},\"massUpdatePools()\":{\"notice\":\"Update all farming pools (except for those stopped ones)\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pendingDegis(uint256,address)\":{\"notice\":\"Check the amount of pending degis reward\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner.\"},\"setDegisReward(uint256,uint256,uint256,bool)\":{\"notice\":\"Update the degisPerSecond for a specific pool (set to 0 to stop farming)\"},\"setStartTimestamp(uint256)\":{\"notice\":\"Set the start block timestamp\"},\"stake(uint256,uint256)\":{\"notice\":\"Stake LP token into the farming pool\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).\"},\"updateBonus(address,uint256)\":{\"notice\":\"Update a user's bonus\"},\"updatePool(uint256)\":{\"notice\":\"Update the pool's reward status\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw lptoken from the pool\"}},\"notice\":\"This contract is for LPToken mining on Degis\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farming/FarmingPool.sol\":\"FarmingPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x6881efb8fa7b41a7a7c2e6e5b31f0f19d0735a6485f2912f8db5802546aeaf16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x86ebc6cea2b539c2d4a79a4754f7c90c43c45c9aaf0aab32ecffb1565afc5e0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe7713f1b362f8b80e28d5a7e8b66c3f2236203fd86d01eca0a29a9e6a3f4d97f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"contracts/farming/FarmingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n    *******         **********     ***********     *****     ***********\\n    *      *        *              *                 *       *\\n    *        *      *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     **********     *       *****     *       ***********\\n    *         *     *              *         *       *                 *\\n    *         *     *              *         *       *                 *\\n    *        *      *              *         *       *                 *\\n    *      *        *              *         *       *                 *\\n    *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {OwnableWithoutContext} from \\\"../utils/OwnableWithoutContext.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {IDegisToken} from \\\"../tokens/interfaces/IDegisToken.sol\\\";\\nimport {Math} from \\\"../libraries/Math.sol\\\";\\nimport {IVeDEG} from \\\"../governance/interfaces/IVeDEG.sol\\\";\\n\\n/**\\n * @title  Farming Pool\\n * @notice This contract is for LPToken mining on Degis\\n * @dev    The pool id starts from 1 rather than 0\\n *         The degis reward is calculated by timestamp rather than block number\\n *\\n *         VeDEG will boost the farming speed by having a extra reward type\\n *         The extra reward is shared by those staking lptokens with veDEG balances\\n *         Every time the veDEG balance change, the reward will be updated\\n */\\ncontract FarmingPool is OwnableWithoutContext, ReentrancyGuard, Pausable {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IDegisToken;\\n    using Math for uint256;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    string public constant name = \\\"Degis LP Farming Pool\\\";\\n\\n    // The reward token is degis\\n    IDegisToken public degis;\\n\\n    // The bonus reward depends on veDEG\\n    IVeDEG public veDEG;\\n\\n    // SCALE/Precision used for calculating rewards\\n    uint256 public constant SCALE = 1e12;\\n\\n    // PoolId starts from 1\\n    uint256 public _nextPoolId;\\n\\n    // Farming starts from a certain block timestamp\\n    // To keep the same with naughty price pools, we change from block numbers to timestamps\\n    uint256 public startTimestamp;\\n\\n    struct PoolInfo {\\n        address lpToken; // LPToken address\\n        uint256 basicDegisPerSecond; // Basic Reward speed\\n        uint256 bonusDegisPerSecond; // Bonus reward speed\\n        uint256 lastRewardTimestamp; // Last reward timestamp\\n        uint256 accDegisPerShare; // Accumulated degis per share (for those without veDEG boosting)\\n        uint256 accDegisPerBonusShare; // Accumulated degis per bonus share (for those with veDEG boosting)\\n        uint256 totalBonus; // Total bonus factors\\n    }\\n    PoolInfo[] public poolList;\\n\\n    // lptoken address => poolId\\n    mapping(address => uint256) public poolMapping;\\n\\n    // poolId => alreadyFarming\\n    mapping(uint256 => bool) public isFarming;\\n\\n    struct UserInfo {\\n        uint256 rewardDebt; // degis reward debt\\n        uint256 stakingBalance; // the amount of a user's staking in the pool\\n        uint256 bonus; // user bonus point (by veDEG balance)\\n    }\\n    // poolId => userAddress => userInfo\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event StartTimestampChanged(uint256 startTimestamp);\\n    event Stake(address staker, uint256 poolId, uint256 amount);\\n    event Withdraw(address staker, uint256 poolId, uint256 amount);\\n    event Harvest(\\n        address staker,\\n        address rewardReceiver,\\n        uint256 poolId,\\n        uint256 pendingReward\\n    );\\n    event NewPoolAdded(\\n        address lpToken,\\n        uint256 basicDegisPerSecond,\\n        uint256 bonusDegisPerSecond\\n    );\\n    event FarmingPoolStarted(uint256 poolId, uint256 timestamp);\\n    event FarmingPoolStopped(uint256 poolId, uint256 timestamp);\\n    event DegisRewardChanged(\\n        uint256 poolId,\\n        uint256 basicDegisPerSecond,\\n        uint256 bonusDegisPerSecond\\n    );\\n    event PoolUpdated(\\n        uint256 poolId,\\n        uint256 accDegisPerShare,\\n        uint256 accDegisPerBonusShare\\n    );\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(address _degis) OwnableWithoutContext(msg.sender) {\\n        degis = IDegisToken(_degis);\\n\\n        // Start from 1\\n        _nextPoolId = 1;\\n\\n        poolList.push(\\n            PoolInfo({\\n                lpToken: address(0),\\n                basicDegisPerSecond: 0,\\n                bonusDegisPerSecond: 0,\\n                lastRewardTimestamp: 0,\\n                accDegisPerShare: 0,\\n                accDegisPerBonusShare: 0,\\n                totalBonus: 0\\n            })\\n        );\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice The address can not be zero\\n     */\\n    modifier notZeroAddress(address _address) {\\n        require(_address != address(0), \\\"Zero address\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice The pool is still in farming\\n     */\\n    modifier stillFarming(uint256 _poolId) {\\n        require(isFarming[_poolId], \\\"Pool is not farming\\\");\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** View Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Check the amount of pending degis reward\\n     * @param _poolId PoolId of this farming pool\\n     * @param _user User address\\n     * @return pendingDegisAmount Amount of pending degis\\n     */\\n    function pendingDegis(uint256 _poolId, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo memory poolInfo = poolList[_poolId];\\n\\n        if (\\n            poolInfo.lastRewardTimestamp == 0 ||\\n            block.timestamp < poolInfo.lastRewardTimestamp ||\\n            block.timestamp < startTimestamp\\n        ) return 0;\\n\\n        UserInfo memory user = userInfo[_poolId][_user];\\n\\n        // Total lp token balance\\n        uint256 lp_balance = IERC20(poolInfo.lpToken).balanceOf(address(this));\\n\\n        // Accumulated shares to be calculated\\n        uint256 accDegisPerShare = poolInfo.accDegisPerShare;\\n        uint256 accDegisPerBonusShare = poolInfo.accDegisPerBonusShare;\\n\\n        if (lp_balance == 0) return 0;\\n        else {\\n            // If the pool is still farming, update the info\\n            if (isFarming[_poolId]) {\\n                // Deigs amount given to this pool\\n                uint256 timePassed = block.timestamp -\\n                    poolInfo.lastRewardTimestamp;\\n                uint256 basicReward = poolInfo.basicDegisPerSecond * timePassed;\\n                // Update accDegisPerShare\\n                // LPToken may have different decimals\\n                accDegisPerShare += (basicReward * SCALE) / lp_balance;\\n\\n                // If there is any bonus reward\\n                if (poolInfo.totalBonus > 0) {\\n                    uint256 bonusReward = poolInfo.bonusDegisPerSecond *\\n                        timePassed;\\n                    accDegisPerBonusShare +=\\n                        (bonusReward * SCALE) /\\n                        poolInfo.totalBonus;\\n                }\\n            }\\n\\n            // If the pool has stopped, not update the info\\n            uint256 pending = (user.stakingBalance *\\n                accDegisPerShare +\\n                user.bonus *\\n                accDegisPerBonusShare) /\\n                SCALE -\\n                user.rewardDebt;\\n\\n            return pending;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the total pool list\\n     * @return pooList Total pool list\\n     */\\n    function getPoolList() external view returns (PoolInfo[] memory) {\\n        return poolList;\\n    }\\n\\n    /**\\n     * @notice Get a user's balance\\n     * @param _poolId Id of the pool\\n     * @param _user User address\\n     * @return balance User's balance (lpToken)\\n     */\\n    function getUserBalance(uint256 _poolId, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return userInfo[_poolId][_user].stakingBalance;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Set Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setVeDEG(address _veDEG) external onlyOwner {\\n        veDEG = IVeDEG(_veDEG);\\n    }\\n\\n    /**\\n     * @notice Set the start block timestamp\\n     * @param _startTimestamp New start block timestamp\\n     */\\n    function setStartTimestamp(uint256 _startTimestamp)\\n        external\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        // Can only be set before any pool is added\\n        require(\\n            _nextPoolId == 1,\\n            \\\"Can not set start timestamp after adding a pool\\\"\\n        );\\n\\n        startTimestamp = _startTimestamp;\\n        emit StartTimestampChanged(_startTimestamp);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Main Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Add a new lp into the pool\\n     * @dev Can only be called by the owner\\n     *      The reward speed can be 0 and set later by setDegisReward function\\n     * @param _lpToken LP token address\\n     * @param _basicDegisPerSecond Basic reward speed(per second) for this new pool\\n     * @param _bonusDegisPerSecond Bonus reward speed(per second) for this new pool\\n     * @param _withUpdate Whether update all pools' status\\n     */\\n    function add(\\n        address _lpToken,\\n        uint256 _basicDegisPerSecond,\\n        uint256 _bonusDegisPerSecond,\\n        bool _withUpdate\\n    ) public notZeroAddress(_lpToken) onlyOwner whenNotPaused {\\n        // Check if already exists, if the poolId is 0, that means not in the pool\\n        require(!_alreadyInPool(_lpToken), \\\"Already in the pool\\\");\\n\\n        if (_bonusDegisPerSecond > 0)\\n            require(_basicDegisPerSecond > 0, \\\"Only bonus\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\\n            ? block.timestamp\\n            : startTimestamp;\\n\\n        // Push this new pool into the list\\n        poolList.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                basicDegisPerSecond: _basicDegisPerSecond,\\n                bonusDegisPerSecond: _bonusDegisPerSecond,\\n                lastRewardTimestamp: lastRewardTimestamp,\\n                accDegisPerShare: 0,\\n                accDegisPerBonusShare: 0,\\n                totalBonus: 0\\n            })\\n        );\\n\\n        // Store the poolId and set the farming status to true\\n        if (_basicDegisPerSecond > 0) isFarming[_nextPoolId] = true;\\n\\n        poolMapping[_lpToken] = _nextPoolId++;\\n\\n        emit NewPoolAdded(_lpToken, _basicDegisPerSecond, _bonusDegisPerSecond);\\n    }\\n\\n    /**\\n     * @notice Update the degisPerSecond for a specific pool (set to 0 to stop farming)\\n     * @param _poolId Id of the farming pool\\n     * @param _basicDegisPerSecond New basic reward amount per second\\n     * @param _bonusDegisPerSecond New bonus reward amount per second\\n     * @param _withUpdate Whether update all pools\\n     */\\n    function setDegisReward(\\n        uint256 _poolId,\\n        uint256 _basicDegisPerSecond,\\n        uint256 _bonusDegisPerSecond,\\n        bool _withUpdate\\n    ) public onlyOwner whenNotPaused {\\n        // Ensure there already exists this pool\\n        require(poolList[_poolId].lastRewardTimestamp != 0, \\\"Pool not exists\\\");\\n\\n        if (_bonusDegisPerSecond > 0)\\n            require(_basicDegisPerSecond > 0, \\\"Only bonus\\\");\\n\\n        if (_withUpdate) massUpdatePools();\\n        else updatePool(_poolId);\\n\\n        // Not farming now + reward > 0 => Restart\\n        if (isFarming[_poolId] == false && _basicDegisPerSecond > 0) {\\n            isFarming[_poolId] = true;\\n            emit FarmingPoolStarted(_poolId, block.timestamp);\\n        }\\n\\n        if (_basicDegisPerSecond == 0) {\\n            isFarming[_poolId] = false;\\n            emit FarmingPoolStopped(_poolId, block.timestamp);\\n        } else {\\n            poolList[_poolId].basicDegisPerSecond = _basicDegisPerSecond;\\n            poolList[_poolId].bonusDegisPerSecond = _bonusDegisPerSecond;\\n            emit DegisRewardChanged(\\n                _poolId,\\n                _basicDegisPerSecond,\\n                _bonusDegisPerSecond\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Stake LP token into the farming pool\\n     * @dev Can only stake to the pools that are still farming\\n     * @param _poolId Id of the farming pool\\n     * @param _amount Staking amount\\n     */\\n    function stake(uint256 _poolId, uint256 _amount)\\n        public\\n        nonReentrant\\n        whenNotPaused\\n        stillFarming(_poolId)\\n    {\\n        require(_amount > 0, \\\"Can not stake zero\\\");\\n\\n        PoolInfo storage pool = poolList[_poolId];\\n        UserInfo storage user = userInfo[_poolId][msg.sender];\\n\\n        // Must update first\\n        updatePool(_poolId);\\n\\n        // First distribute the reward if exists\\n        if (user.stakingBalance > 0) {\\n            uint256 pending = (user.stakingBalance *\\n                pool.accDegisPerShare +\\n                user.bonus *\\n                pool.accDegisPerBonusShare) /\\n                SCALE -\\n                user.rewardDebt;\\n\\n            // Real reward amount\\n            uint256 reward = _safeDegisTransfer(msg.sender, pending);\\n            emit Harvest(msg.sender, msg.sender, _poolId, reward);\\n        }\\n\\n        // Actual deposit amount\\n        uint256 actualAmount = _safeLPTransfer(\\n            false,\\n            pool.lpToken,\\n            msg.sender,\\n            _amount\\n        );\\n\\n        user.stakingBalance += actualAmount;\\n\\n        if (address(veDEG) != address(0)) {\\n            // Update the user's bonus if veDEG boosting is on\\n            uint256 oldBonus = user.bonus;\\n            user.bonus = (user.stakingBalance * veDEG.balanceOf(msg.sender))\\n                .sqrt();\\n            // Update the pool's total bonus\\n            pool.totalBonus += user.bonus - oldBonus;\\n        }\\n\\n        user.rewardDebt =\\n            (user.stakingBalance *\\n                pool.accDegisPerShare +\\n                user.bonus *\\n                pool.accDegisPerBonusShare) /\\n            SCALE;\\n\\n        emit Stake(msg.sender, _poolId, actualAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw lptoken from the pool\\n     * @param _poolId Id of the farming pool\\n     * @param _amount Amount of lp tokens to withdraw\\n     */\\n    function withdraw(uint256 _poolId, uint256 _amount)\\n        public\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(_amount > 0, \\\"Zero amount\\\");\\n\\n        PoolInfo storage pool = poolList[_poolId];\\n        UserInfo storage user = userInfo[_poolId][msg.sender];\\n\\n        require(user.stakingBalance >= _amount, \\\"Not enough stakingBalance\\\");\\n\\n        // Update if the pool is still farming\\n        // Users can withdraw even after the pool stopped\\n        if (isFarming[_poolId]) updatePool(_poolId);\\n\\n        uint256 pending = (user.stakingBalance *\\n            pool.accDegisPerShare +\\n            user.bonus *\\n            pool.accDegisPerBonusShare) /\\n            SCALE -\\n            user.rewardDebt;\\n\\n        uint256 reward = _safeDegisTransfer(msg.sender, pending);\\n        emit Harvest(msg.sender, msg.sender, _poolId, reward);\\n\\n        uint256 actualAmount = _safeLPTransfer(\\n            true,\\n            pool.lpToken,\\n            msg.sender,\\n            _amount\\n        );\\n\\n        user.stakingBalance -= actualAmount;\\n\\n        // Update the user's bonus when veDEG boosting is on\\n        if (address(veDEG) != address(0)) {\\n            uint256 oldBonus = user.bonus;\\n            user.bonus = (user.stakingBalance * veDEG.balanceOf(msg.sender))\\n                .sqrt();\\n            // Update the pool's total bonus\\n            pool.totalBonus += user.bonus - oldBonus;\\n        }\\n\\n        user.rewardDebt =\\n            (user.stakingBalance *\\n                pool.accDegisPerShare +\\n                user.bonus *\\n                pool.accDegisPerBonusShare) /\\n            SCALE;\\n\\n        emit Withdraw(msg.sender, _poolId, actualAmount);\\n    }\\n\\n    /**\\n     * @notice Harvest the degis reward and can be sent to another address\\n     * @param _poolId Id of the farming pool\\n     * @param _to Receiver of degis rewards\\n     */\\n    function harvest(uint256 _poolId, address _to)\\n        public\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        // Only update the pool when it is still in farming\\n        if (isFarming[_poolId]) updatePool(_poolId);\\n\\n        PoolInfo memory pool = poolList[_poolId];\\n        UserInfo storage user = userInfo[_poolId][msg.sender];\\n\\n        uint256 pendingReward = (user.stakingBalance *\\n            pool.accDegisPerShare +\\n            user.bonus *\\n            pool.accDegisPerBonusShare) /\\n            SCALE -\\n            user.rewardDebt;\\n\\n        require(pendingReward > 0, \\\"No pending reward\\\");\\n\\n        // Update the reward debt\\n        user.rewardDebt =\\n            (user.stakingBalance *\\n                pool.accDegisPerShare +\\n                user.bonus *\\n                pool.accDegisPerBonusShare) /\\n            SCALE;\\n\\n        // Transfer the reward\\n        uint256 reward = _safeDegisTransfer(_to, pendingReward);\\n\\n        emit Harvest(msg.sender, _to, _poolId, reward);\\n    }\\n\\n    /**\\n     * @notice Update the pool's reward status\\n     * @param _poolId Id of the farming pool\\n     */\\n    function updatePool(uint256 _poolId) public {\\n        PoolInfo storage pool = poolList[_poolId];\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));\\n\\n        // No LP deposited, then just update the lastRewardTimestamp\\n        if (lpSupply == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 timePassed = block.timestamp - pool.lastRewardTimestamp;\\n\\n        uint256 basicReward = timePassed * pool.basicDegisPerSecond;\\n        uint256 bonusReward = timePassed * pool.bonusDegisPerSecond;\\n\\n        pool.accDegisPerShare += (basicReward * SCALE) / lpSupply;\\n\\n        if (pool.totalBonus == 0) {\\n            pool.accDegisPerBonusShare = 0;\\n        } else {\\n            pool.accDegisPerBonusShare +=\\n                (bonusReward * SCALE) /\\n                pool.totalBonus;\\n        }\\n\\n        // Don't forget to set the farming pool as minter\\n        degis.mintDegis(address(this), basicReward + bonusReward);\\n\\n        pool.lastRewardTimestamp = block.timestamp;\\n\\n        emit PoolUpdated(\\n            _poolId,\\n            pool.accDegisPerShare,\\n            pool.accDegisPerBonusShare\\n        );\\n    }\\n\\n    /**\\n     * @notice Update all farming pools (except for those stopped ones)\\n     * @dev Can be called by anyone\\n     *      Only update those active pools\\n     */\\n    function massUpdatePools() public {\\n        uint256 length = poolList.length;\\n        for (uint256 poolId; poolId < length; poolId++) {\\n            if (isFarming[poolId] == false) continue;\\n            else updatePool(poolId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update a user's bonus\\n     * @dev When veDEG has balance change\\n     *      Only called by veDEG contract\\n     * @param _user User address\\n     * @param _newVeDEGBalance New veDEG balance\\n     */\\n    function updateBonus(address _user, uint256 _newVeDEGBalance) external {\\n        require(msg.sender == address(veDEG), \\\"Only veDEG contract\\\");\\n\\n        // loop over each pool : beware gas cost!\\n        uint256 length = poolList.length;\\n\\n        for (uint256 poolId; poolId < length; ++poolId) {\\n            // Skip if the pool is not farming\\n            if (!isFarming[poolId]) continue;\\n\\n            UserInfo storage user = userInfo[poolId][_user];\\n            // Skip if user doesn't have any deposit in the pool\\n            if (user.stakingBalance == 0) continue;\\n\\n            PoolInfo storage pool = poolList[poolId];\\n\\n            // first, update pool\\n            updatePool(poolId);\\n\\n            // get oldFactor\\n            uint256 oldFactor = user.bonus; // get old factor\\n            // calculate newFactor\\n            uint256 newFactor = (_newVeDEGBalance * user.stakingBalance).sqrt();\\n            // update user factor\\n            user.bonus = newFactor;\\n            // update reward debt, take into account newFactor\\n            user.rewardDebt =\\n                (user.stakingBalance *\\n                    pool.accDegisPerShare +\\n                    newFactor *\\n                    pool.accDegisPerBonusShare) /\\n                SCALE;\\n\\n            // Update the pool's total bonus\\n            pool.totalBonus += newFactor - oldFactor;\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ********************************** Internal Functions ********************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Check if a lptoken has been added into the pool before\\n     * @dev This can also be written as a modifier\\n     * @param _lpToken LP token address\\n     * @return _isInPool Wether this lp is already in pool\\n     */\\n    function _alreadyInPool(address _lpToken)\\n        internal\\n        view\\n        returns (bool _isInPool)\\n    {\\n        uint256 poolId = poolMapping[_lpToken];\\n\\n        _isInPool = (poolId != 0) ? true : false;\\n    }\\n\\n    /**\\n     * @notice Safe degis transfer (check if the pool has enough DEGIS token)\\n     * @param _to User's address\\n     * @param _amount Amount to transfer\\n     */\\n    function _safeDegisTransfer(address _to, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 poolDegisBalance = degis.balanceOf(address(this));\\n        require(poolDegisBalance > 0, \\\"No Degis token in the pool\\\");\\n\\n        if (_amount > poolDegisBalance) {\\n            degis.safeTransfer(_to, poolDegisBalance);\\n            return (poolDegisBalance);\\n        } else {\\n            degis.safeTransfer(_to, _amount);\\n            return _amount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Finish the transfer of LP Token\\n     * @dev The lp token may have loss during transfer\\n     * @param _out Whether the lp token is out\\n     * @param _lpToken LP token address\\n     * @param _user User address\\n     * @param _amount Amount of lp tokens\\n     */\\n    function _safeLPTransfer(\\n        bool _out,\\n        address _lpToken,\\n        address _user,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        uint256 poolBalanceBefore = IERC20(_lpToken).balanceOf(address(this));\\n\\n        if (_out) IERC20(_lpToken).safeTransfer(_user, _amount);\\n        else IERC20(_lpToken).safeTransferFrom(_user, address(this), _amount);\\n\\n        uint256 poolBalanceAfter = IERC20(_lpToken).balanceOf(address(this));\\n\\n        return\\n            _out\\n                ? poolBalanceBefore - poolBalanceAfter\\n                : poolBalanceAfter - poolBalanceBefore;\\n    }\\n}\\n\",\"keccak256\":\"0xa7c37bee5280536dda96074362c1e30a57c991f4706f4c793c1ab356a95f5710\",\"license\":\"GPL-3.0-or-later\"},\"contracts/governance/interfaces/IVeDEG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IVeERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the VePtp\\n */\\ninterface IVeDEG is IVeERC20 {\\n    function isUser(address _addr) external view returns (bool);\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function claim() external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function getStakedPtp(address _addr) external view returns (uint256);\\n\\n    function getVotes(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd94b4bbc128ff5eb2b57c1987f6546a9ea89236da1b80394d6e6961137ac126d\",\"license\":\"MIT\"},\"contracts/governance/interfaces/IVeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IVeERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x331dcfe8459bcba4ac8a2208cc110e3daf481a3e599a797ab9b7272ef8577c9e\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nlibrary Math {\\n    uint256 internal constant WAD = 10**18;\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n}\\n\",\"keccak256\":\"0x14d3b9b1d0e6d4f619a02cba3d4485cfb8af4c3e99bed82151bdb9c0a16b7fda\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IDegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDegisToken is IERC20, IERC20Permit {\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Functions ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n    function CAP() external view returns (uint256);\\n\\n    /**\\n     * @notice Mint degis tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be minted\\n     */\\n    function mintDegis(address _account, uint256 _amount) external;\\n\\n    /**\\n     * @notice Burn degis tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be burned\\n     */\\n    function burnDegis(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x2675ac6dcc4488569e495c713897e2658573fdc21934ab92fd49ff57035265a8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/OwnableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev The owner can be set during deployment, not default to be msg.sender\\n */\\nabstract contract OwnableWithoutContext {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address _initialOwner) {\\n        _transferOwnership(_initialOwner);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. It will not be possible to call\\n     *         `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * @dev    Renouncing ownership will leave the contract without an owner,\\n     *         thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Can only be called by the current owner.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Internal function without access restriction.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x458cfb3ba5712cff38112281f21dc378e6a7ae43645671a90cbf3e357a86469e\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002fcd38038062002fcd833981016040819052620000349162000262565b336200004081620001d8565b506001808055600280546001600160a81b0319166101006001600160a01b039485160217905560048190556040805160e081018252600080825260208201818152928201818152606083018281526080840183815260a0850184815260c0860185815260068054998a01815590955294517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f600790980297880180546001600160a01b031916919099161790975593517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d40860155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4185015591517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4284015592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4383015591517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4482015590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d45909101556200028f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006001600160a01b0382165b92915050565b620002468162000228565b81146200025257600080fd5b50565b805162000235816200023b565b600060208284031215620002795762000279600080fd5b600062000287848462000255565b949350505050565b612d2e806200029f6000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80637b0472f011610104578063cdfb6cf3116100a2578063e4a7631511610071578063e4a7631514610448578063e6fd48bc1461045b578063eced552614610464578063f2fde38b1461047057600080fd5b8063cdfb6cf3146103fa578063d13f67bc1461040d578063d41dcbea14610420578063d54465181461043557600080fd5b806393f1a40b116100de57806393f1a40b14610368578063a06ddcb3146103b1578063c44bef75146103d4578063cdcd2907146103e757600080fd5b80637b0472f0146103345780638456cb59146103475780638da5cb5b1461034f57600080fd5b80633f4ba83a1161017157806351eb05a61161014b57806351eb05a6146102fd5780635c975abb14610310578063630b5ba114610324578063715018a61461032c57600080fd5b80633f4ba83a146102cf578063441a3e70146102d75780634f3e7ba6146102ea57600080fd5b806318fccc76116101ad57806318fccc761461025157806329fd2007146102645780632a48235b146102895780632c678a3e146102af57600080fd5b806306fdde03146101d457806307a96cbf1461022657806317fb77de1461023b575b600080fd5b6102106040518060400160405280601581526020017f4465676973204c50204661726d696e6720506f6f6c000000000000000000000081525081565b60405161021d919061221e565b60405180910390f35b61023961023436600461225f565b610483565b005b61024460045481565b60405161021d9190612288565b61023961025f3660046122a7565b6104f4565b60025461027c9061010090046001600160a01b031681565b60405161021d9190612303565b61029c610297366004612311565b610703565b60405161021d979695949392919061233b565b6102446102bd36600461225f565b60076020526000908152604090205481565b61023961075c565b6102396102e53660046123a3565b61079f565b60035461027c906001600160a01b031681565b61023961030b366004612311565b610abe565b60025460ff165b60405161021d91906123de565b610239610cef565b610239610d37565b6102396103423660046123a3565b610d7a565b610239611080565b6000546001600160a01b031660405161021d91906123ec565b6103a26103763660046122a7565b600960209081526000928352604080842090915290825290208054600182015460029092015490919083565b60405161021d939291906123fa565b6103176103bf366004612311565b60086020526000908152604090205460ff1681565b6102396103e2366004612311565b6110c1565b6102396103f5366004612435565b61117f565b6102446104083660046122a7565b6113c8565b61024461041b3660046122a7565b6113f5565b61042861167c565b60405161021d9190612575565b610239610443366004612586565b611724565b6102396104563660046125a8565b611872565b61024460055481565b61024464e8d4a5100081565b61023961047e36600461225f565b611b69565b336104966000546001600160a01b031690565b6001600160a01b0316146104c55760405162461bcd60e51b81526004016104bc906125fd565b60405180910390fd5b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600260015414156105175760405162461bcd60e51b81526004016104bc9061263f565b600260015561052860025460ff1690565b156105455760405162461bcd60e51b81526004016104bc90612681565b60008281526008602052604090205460ff16156105655761056582610abe565b60006006838154811061057a5761057a612691565b600091825260208083206040805160e081018252600790940290910180546001600160a01b03168452600181015484840152600280820154858401526003820154606086015260048201546080860152600582015460a0860190815260069092015460c08601528886526009845282862033875290935290842080549151928101549395509392909164e8d4a510009161061491906126bd565b8560800151856001015461062891906126bd565b61063291906126dc565b61063c919061270a565b610646919061271e565b9050600081116106685760405162461bcd60e51b81526004016104bc90612767565b64e8d4a510008360a00151836002015461068291906126bd565b8460800151846001015461069691906126bd565b6106a091906126dc565b6106aa919061270a565b825560006106b88583611bd4565b90507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e338688846040516106ef9493929190612777565b60405180910390a150506001805550505050565b6006818154811061071357600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b039095169650929491939092919087565b3361076f6000546001600160a01b031690565b6001600160a01b0316146107955760405162461bcd60e51b81526004016104bc906125fd565b61079d611cc0565b565b600260015414156107c25760405162461bcd60e51b81526004016104bc9061263f565b60026001556107d360025460ff1690565b156107f05760405162461bcd60e51b81526004016104bc90612681565b600081116108105760405162461bcd60e51b81526004016104bc906127e7565b60006006838154811061082557610825612691565b6000918252602080832086845260098252604080852033865290925292206001810154600790920290920192508311156108715760405162461bcd60e51b81526004016104bc90612829565b60008481526008602052604090205460ff16156108915761089184610abe565b6000816000015464e8d4a51000846005015484600201546108b291906126bd565b856004015485600101546108c691906126bd565b6108d091906126dc565b6108da919061270a565b6108e4919061271e565b905060006108f23383611bd4565b90507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e333388846040516109299493929190612777565b60405180910390a1835460009061094d906001906001600160a01b03163389611d26565b905080846001016000828254610963919061271e565b90915550506003546001600160a01b031615610a315760028401546003546040516370a0823160e01b8152610a05916001600160a01b0316906370a08231906109b09033906004016123ec565b602060405180830381865afa1580156109cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f19190612844565b8660010154610a0091906126bd565b611e69565b60028601819055610a1790829061271e565b866006016000828254610a2a91906126dc565b9091555050505b64e8d4a5100085600501548560020154610a4b91906126bd565b86600401548660010154610a5f91906126bd565b610a6991906126dc565b610a73919061270a565b84556040517ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56890610aa99033908a908590612865565b60405180910390a15050600180555050505050565b600060068281548110610ad357610ad3612691565b9060005260206000209060070201905080600301544211610af2575050565b80546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610b229030906004016123ec565b602060405180830381865afa158015610b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b639190612844565b905080610b7557504260039091015550565b6000826003015442610b87919061271e565b90506000836001015482610b9b91906126bd565b90506000846002015483610baf91906126bd565b905083610bc164e8d4a51000846126bd565b610bcb919061270a565b856004016000828254610bde91906126dc565b90915550506006850154610bf85760006005860155610c2f565b6006850154610c0c64e8d4a51000836126bd565b610c16919061270a565b856005016000828254610c2991906126dc565b90915550505b60025461010090046001600160a01b031663b476739830610c5084866126dc565b6040518363ffffffff1660e01b8152600401610c6d929190612873565b600060405180830381600087803b158015610c8757600080fd5b505af1158015610c9b573d6000803e3d6000fd5b50504260038801555050600485015460058601546040517f17b8644f386d1c7c7138ef98b3c8035622bbe94d7be9b26f71d2654a547c294392610cdf928a926123fa565b60405180910390a1505050505050565b60065460005b81811015610d335760008181526008602052604090205460ff16610d1857610d21565b610d2181610abe565b80610d2b8161288e565b915050610cf5565b5050565b33610d4a6000546001600160a01b031690565b6001600160a01b031614610d705760405162461bcd60e51b81526004016104bc906125fd565b61079d6000611ed9565b60026001541415610d9d5760405162461bcd60e51b81526004016104bc9061263f565b6002600155610dae60025460ff1690565b15610dcb5760405162461bcd60e51b81526004016104bc90612681565b600082815260086020526040902054829060ff16610dfb5760405162461bcd60e51b81526004016104bc906128db565b60008211610e1b5760405162461bcd60e51b81526004016104bc9061291d565b600060068481548110610e3057610e30612691565b60009182526020808320878452600982526040808520338652909252922060079091029091019150610e6185610abe565b600181015415610f0e576000816000015464e8d4a5100084600501548460020154610e8c91906126bd565b85600401548560010154610ea091906126bd565b610eaa91906126dc565b610eb4919061270a565b610ebe919061271e565b90506000610ecc3383611bd4565b90507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e33338984604051610f039493929190612777565b60405180910390a150505b8154600090610f299082906001600160a01b03163388611d26565b905080826001016000828254610f3f91906126dc565b90915550506003546001600160a01b0316156110085760028201546003546040516370a0823160e01b8152610fdc916001600160a01b0316906370a0823190610f8c9033906004016123ec565b602060405180830381865afa158015610fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcd9190612844565b8460010154610a0091906126bd565b60028401819055610fee90829061271e565b84600601600082825461100191906126dc565b9091555050505b64e8d4a510008360050154836002015461102291906126bd565b8460040154846001015461103691906126bd565b61104091906126dc565b61104a919061270a565b82556040517f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b6906106ef90339089908590612865565b336110936000546001600160a01b031690565b6001600160a01b0316146110b95760405162461bcd60e51b81526004016104bc906125fd565b61079d611f36565b336110d46000546001600160a01b031690565b6001600160a01b0316146110fa5760405162461bcd60e51b81526004016104bc906125fd565b60025460ff161561111d5760405162461bcd60e51b81526004016104bc90612681565b60045460011461113f5760405162461bcd60e51b81526004016104bc90612987565b60058190556040517faf8fc8a4c9a55a9a29c3e99cd1797d43062c696f192896c79cbebd7da3286d8290611174908390612288565b60405180910390a150565b336111926000546001600160a01b031690565b6001600160a01b0316146111b85760405162461bcd60e51b81526004016104bc906125fd565b60025460ff16156111db5760405162461bcd60e51b81526004016104bc90612681565b600684815481106111ee576111ee612691565b906000526020600020906007020160030154600014156112205760405162461bcd60e51b81526004016104bc906129c9565b811561124657600083116112465760405162461bcd60e51b81526004016104bc90612a0b565b801561125957611254610cef565b611262565b61126284610abe565b60008481526008602052604090205460ff161580156112815750600083115b156112da5760008481526008602052604090819020805460ff19166001179055517f6140f1d5adcbca6c6b24c3b5e695335cd1a2071c7e03881172dc9eb0e488225c906112d19086904290612a1b565b60405180910390a15b826113345760008481526008602052604090819020805460ff19169055517f4654f9b7bb3ba4d66e3a4e972e39db189ac7b4fdf5f2a95d57a4eb4d91a16d45906113279086904290612a1b565b60405180910390a16113c2565b826006858154811061134857611348612691565b906000526020600020906007020160010181905550816006858154811061137157611371612691565b9060005260206000209060070201600201819055507f12558fa101886c4fd9ad5e0b9932a6ffd3653b63380b1da3f024ddaf506c22eb8484846040516113b9939291906123fa565b60405180910390a15b50505050565b60008281526009602090815260408083206001600160a01b03851684529091529020600101545b92915050565b6000806006848154811061140b5761140b612691565b60009182526020918290206040805160e081018252600790930290910180546001600160a01b0316835260018101549383019390935260028301549082015260038201546060820181905260048301546080830152600583015460a083015260069092015460c0820152915015806114865750806060015142105b80611492575060055442105b156114a15760009150506113ef565b60008481526009602090815260408083206001600160a01b0380881685529083528184208251606081018452815481526001820154948101949094526002015483830152845191516370a0823160e01b81529293929116906370a082319061150d9030906004016123ec565b602060405180830381865afa15801561152a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154e9190612844565b608084015160a0850151919250908261156f576000955050505050506113ef565b60008881526008602052604090205460ff1615611623576000856060015142611598919061271e565b905060008187602001516115ac91906126bd565b9050846115be64e8d4a51000836126bd565b6115c8919061270a565b6115d290856126dc565b60c0880151909450156116205760008288604001516115f191906126bd565b60c089015190915061160864e8d4a51000836126bd565b611612919061270a565b61161c90856126dc565b9350505b50505b6000846000015164e8d4a5100083876040015161164091906126bd565b85886020015161165091906126bd565b61165a91906126dc565b611664919061270a565b61166e919061271e565b96506113ef95505050505050565b60606006805480602002602001604051908101604052809291908181526020016000905b8282101561171b5760008481526020908190206040805160e0810182526007860290920180546001600160a01b03168352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a08401526006015460c083015290835290920191016116a0565b50505050905090565b6003546001600160a01b0316331461174e5760405162461bcd60e51b81526004016104bc90612a5b565b60065460005b818110156113c25760008181526008602052604090205460ff1661177757611862565b60008181526009602090815260408083206001600160a01b0388168452909152902060018101546117a85750611862565b6000600683815481106117bd576117bd612691565b906000526020600020906007020190506117d683610abe565b600282015460018301546000906117f190610a0090896126bd565b60028501819055600584015490915064e8d4a510009061181190836126bd565b8460040154866001015461182591906126bd565b61182f91906126dc565b611839919061270a565b8455611845828261271e565b83600601600082825461185891906126dc565b9091555050505050505b61186b8161288e565b9050611754565b836001600160a01b0381166118995760405162461bcd60e51b81526004016104bc90612a9d565b336118ac6000546001600160a01b031690565b6001600160a01b0316146118d25760405162461bcd60e51b81526004016104bc906125fd565b60025460ff16156118f55760405162461bcd60e51b81526004016104bc90612681565b6118fe85611f8e565b1561191b5760405162461bcd60e51b81526004016104bc90612adf565b821561194157600084116119415760405162461bcd60e51b81526004016104bc90612a0b565b811561194f5761194f610cef565b6000600554421161196257600554611964565b425b6040805160e0810182526001600160a01b038981168252602082018981529282018881526060830185815260006080850181815260a0860182815260c0870183815260068054600181018255945296517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f6007909402938401805473ffffffffffffffffffffffffffffffffffffffff1916919097161790955595517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4082015591517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d41830155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4282015592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d43840155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d44830155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d459091015590508415611b05576004546000908152600860205260409020805460ff191660011790555b60048054906000611b158361288e565b909155506001600160a01b0387166000908152600760205260409081902091909155517f5f9d2cd19aa3f32e9e8cc45267a493f9956c1b955a220136161ff8ad595bc78290610cdf90889088908890612865565b33611b7c6000546001600160a01b031690565b6001600160a01b031614611ba25760405162461bcd60e51b81526004016104bc906125fd565b6001600160a01b038116611bc85760405162461bcd60e51b81526004016104bc90612b47565b611bd181611ed9565b50565b6002546040516370a0823160e01b815260009182916101009091046001600160a01b0316906370a0823190611c0d9030906004016123ec565b602060405180830381865afa158015611c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4e9190612844565b905060008111611c705760405162461bcd60e51b81526004016104bc90612b89565b80831115611c9b57600254611c949061010090046001600160a01b03168583611fbd565b90506113ef565b600254611cb79061010090046001600160a01b03168585611fbd565b829150506113ef565b60025460ff16611ce25760405162461bcd60e51b81526004016104bc90612bcb565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051611d1c91906123ec565b60405180910390a1565b600080846001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611d5591906123ec565b602060405180830381865afa158015611d72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d969190612844565b90508515611db757611db26001600160a01b0386168585611fbd565b611dcc565b611dcc6001600160a01b038616853086612045565b6040516370a0823160e01b81526000906001600160a01b038716906370a0823190611dfb9030906004016123ec565b602060405180830381865afa158015611e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3c9190612844565b905086611e5257611e4d828261271e565b611e5c565b611e5c818361271e565b925050505b949350505050565b60006003821115611eca5750806000611e8360028361270a565b611e8e9060016126dc565b90505b81811015611ec457905080600281611ea9818661270a565b611eb391906126dc565b611ebd919061270a565b9050611e91565b50919050565b8115611ed4575060015b919050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60025460ff1615611f595760405162461bcd60e51b81526004016104bc90612681565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611d0f3390565b6001600160a01b03811660009081526007602052604081205480611fb3576000611fb6565b60015b9392505050565b6120408363a9059cbb60e01b8484604051602401611fdc929190612873565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612066565b505050565b6113c2846323b872dd60e01b858585604051602401611fdc93929190612bdb565b60006120bb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120f59092919063ffffffff16565b80519091501561204057808060200190518101906120d99190612c01565b6120405760405162461bcd60e51b81526004016104bc90612c7a565b6060611e61848460008585843b61211e5760405162461bcd60e51b81526004016104bc90612cbc565b600080866001600160a01b0316858760405161213a9190612cee565b60006040518083038185875af1925050503d8060008114612177576040519150601f19603f3d011682016040523d82523d6000602084013e61217c565b606091505b5091509150611e5c82828660608315612196575081611fb6565b8251156121a65782518084602001fd5b8160405162461bcd60e51b81526004016104bc919061221e565b60005b838110156121db5781810151838201526020016121c3565b838111156113c25750506000910152565b60006121f6825190565b80845260208401935061220d8185602086016121c0565b601f01601f19169290920192915050565b60208082528101611fb681846121ec565b60006001600160a01b0382166113ef565b6122498161222f565b8114611bd157600080fd5b80356113ef81612240565b60006020828403121561227457612274600080fd5b6000611e618484612254565b805b82525050565b602081016113ef8284612280565b80612249565b80356113ef81612296565b600080604083850312156122bd576122bd600080fd5b60006122c9858561229c565b92505060206122da85828601612254565b9150509250929050565b60006113ef8261222f565b60006113ef826122e4565b612282816122ef565b602081016113ef82846122fa565b60006020828403121561232657612326600080fd5b6000611e61848461229c565b6122828161222f565b60e08101612349828a612332565b6123566020830189612280565b6123636040830188612280565b6123706060830187612280565b61237d6080830186612280565b61238a60a0830185612280565b61239760c0830184612280565b98975050505050505050565b600080604083850312156123b9576123b9600080fd5b60006123c5858561229c565b92505060206122da8582860161229c565b801515612282565b602081016113ef82846123d6565b602081016113ef8284612332565b606081016124088286612280565b6124156020830185612280565b611e616040830184612280565b801515612249565b80356113ef81612422565b6000806000806080858703121561244e5761244e600080fd5b600061245a878761229c565b945050602061246b8782880161229c565b935050604061247c8782880161229c565b925050606061248d8782880161242a565b91505092959194509250565b80516124a58382612332565b5060208101516124b86020840182612280565b5060408101516124cb6040840182612280565b5060608101516124de6060840182612280565b5060808101516124f16080840182612280565b5060a081015161250460a0840182612280565b5060c081015161204060c0840182612280565b6125218282612499565b5060e00190565b60200190565b6000612538825190565b808452602093840193830160005b8281101561256b57815161255a8782612517565b965050602082019150600101612546565b5093949350505050565b60208082528101611fb6818461252e565b6000806040838503121561259c5761259c600080fd5b60006123c58585612254565b600080600080608085870312156125c1576125c1600080fd5b600061245a8787612254565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152612528565b602080825281016113ef816125cd565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050612528565b602080825281016113ef8161260d565b60108152602081017f5061757361626c653a207061757365640000000000000000000000000000000081529050612528565b602080825281016113ef8161264f565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156126d7576126d76126a7565b500290565b600082198211156126ef576126ef6126a7565b500190565b634e487b7160e01b600052601260045260246000fd5b600082612719576127196126f4565b500490565b600082821015612730576127306126a7565b500390565b60118152602081017f4e6f2070656e64696e672072657761726400000000000000000000000000000081529050612528565b602080825281016113ef81612735565b608081016127858287612332565b6127926020830186612332565b61279f6040830185612280565b6127ac6060830184612280565b95945050505050565b600b8152602081017f5a65726f20616d6f756e7400000000000000000000000000000000000000000081529050612528565b602080825281016113ef816127b5565b60198152602081017f4e6f7420656e6f756768207374616b696e6742616c616e63650000000000000081529050612528565b602080825281016113ef816127f7565b80516113ef81612296565b60006020828403121561285957612859600080fd5b6000611e618484612839565b606081016124088286612332565b604081016128818285612332565b611fb66020830184612280565b60006000198214156128a2576128a26126a7565b5060010190565b60138152602081017f506f6f6c206973206e6f74206661726d696e670000000000000000000000000081529050612528565b602080825281016113ef816128a9565b60128152602081017f43616e206e6f74207374616b65207a65726f000000000000000000000000000081529050612528565b602080825281016113ef816128eb565b602f8152602081017f43616e206e6f74207365742073746172742074696d657374616d70206166746581527f7220616464696e67206120706f6f6c0000000000000000000000000000000000602082015290505b60400190565b602080825281016113ef8161292d565b600f8152602081017f506f6f6c206e6f7420657869737473000000000000000000000000000000000081529050612528565b602080825281016113ef81612997565b600a8152602081017f4f6e6c7920626f6e75730000000000000000000000000000000000000000000081529050612528565b602080825281016113ef816129d9565b604081016128818285612280565b60138152602081017f4f6e6c7920766544454720636f6e74726163740000000000000000000000000081529050612528565b602080825281016113ef81612a29565b600c8152602081017f5a65726f2061646472657373000000000000000000000000000000000000000081529050612528565b602080825281016113ef81612a6b565b60138152602081017f416c726561647920696e2074686520706f6f6c0000000000000000000000000081529050612528565b602080825281016113ef81612aad565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529050612981565b602080825281016113ef81612aef565b601a8152602081017f4e6f20446567697320746f6b656e20696e2074686520706f6f6c00000000000081529050612528565b602080825281016113ef81612b57565b60148152602081017f5061757361626c653a206e6f742070617573656400000000000000000000000081529050612528565b602080825281016113ef81612b99565b60608101612be98286612332565b6124156020830185612332565b80516113ef81612422565b600060208284031215612c1657612c16600080fd5b6000611e618484612bf6565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f7420737563636565640000000000000000000000000000000000000000000060208201529050612981565b602080825281016113ef81612c22565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529050612528565b602080825281016113ef81612c8a565b6000612cd6825190565b612ce48185602086016121c0565b9290920192915050565b6113ef8183612ccc56fea2646970667358221220e36f1687abf6c2373ee9afad3d0ee222564d5aa26c20d8d586d0c0be15abe41b64736f6c634300080a0033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "The pool id starts from 1 rather than 0         The degis reward is calculated by timestamp rather than block number         VeDEG will boost the farming speed by having a extra reward type         The extra reward is shared by those staking lptokens with veDEG balances         Every time the veDEG balance change, the reward will be updated",
    "kind": "dev",
    "methods": {
      "add(address,uint256,uint256,bool)": {
        "details": "Can only be called by the owner      The reward speed can be 0 and set later by setDegisReward function",
        "params": {
          "_basicDegisPerSecond": "Basic reward speed(per second) for this new pool",
          "_bonusDegisPerSecond": "Bonus reward speed(per second) for this new pool",
          "_lpToken": "LP token address",
          "_withUpdate": "Whether update all pools' status"
        }
      },
      "getPoolList()": {
        "returns": {
          "_0": "pooList Total pool list"
        }
      },
      "getUserBalance(uint256,address)": {
        "params": {
          "_poolId": "Id of the pool",
          "_user": "User address"
        },
        "returns": {
          "_0": "balance User's balance (lpToken)"
        }
      },
      "harvest(uint256,address)": {
        "params": {
          "_poolId": "Id of the farming pool",
          "_to": "Receiver of degis rewards"
        }
      },
      "massUpdatePools()": {
        "details": "Can be called by anyone      Only update those active pools"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingDegis(uint256,address)": {
        "params": {
          "_poolId": "PoolId of this farming pool",
          "_user": "User address"
        },
        "returns": {
          "_0": "pendingDegisAmount Amount of pending degis"
        }
      },
      "renounceOwnership()": {
        "details": "Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner."
      },
      "setDegisReward(uint256,uint256,uint256,bool)": {
        "params": {
          "_basicDegisPerSecond": "New basic reward amount per second",
          "_bonusDegisPerSecond": "New bonus reward amount per second",
          "_poolId": "Id of the farming pool",
          "_withUpdate": "Whether update all pools"
        }
      },
      "setStartTimestamp(uint256)": {
        "params": {
          "_startTimestamp": "New start block timestamp"
        }
      },
      "stake(uint256,uint256)": {
        "details": "Can only stake to the pools that are still farming",
        "params": {
          "_amount": "Staking amount",
          "_poolId": "Id of the farming pool"
        }
      },
      "transferOwnership(address)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "newOwner": "Address of the new owner"
        }
      },
      "updateBonus(address,uint256)": {
        "details": "When veDEG has balance change      Only called by veDEG contract",
        "params": {
          "_newVeDEGBalance": "New veDEG balance",
          "_user": "User address"
        }
      },
      "updatePool(uint256)": {
        "params": {
          "_poolId": "Id of the farming pool"
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "_amount": "Amount of lp tokens to withdraw",
          "_poolId": "Id of the farming pool"
        }
      }
    },
    "title": "Farming Pool",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add(address,uint256,uint256,bool)": {
        "notice": "Add a new lp into the pool"
      },
      "getPoolList()": {
        "notice": "Get the total pool list"
      },
      "getUserBalance(uint256,address)": {
        "notice": "Get a user's balance"
      },
      "harvest(uint256,address)": {
        "notice": "Harvest the degis reward and can be sent to another address"
      },
      "massUpdatePools()": {
        "notice": "Update all farming pools (except for those stopped ones)"
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pendingDegis(uint256,address)": {
        "notice": "Check the amount of pending degis reward"
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."
      },
      "setDegisReward(uint256,uint256,uint256,bool)": {
        "notice": "Update the degisPerSecond for a specific pool (set to 0 to stop farming)"
      },
      "setStartTimestamp(uint256)": {
        "notice": "Set the start block timestamp"
      },
      "stake(uint256,uint256)": {
        "notice": "Stake LP token into the farming pool"
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`)."
      },
      "updateBonus(address,uint256)": {
        "notice": "Update a user's bonus"
      },
      "updatePool(uint256)": {
        "notice": "Update the pool's reward status"
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw lptoken from the pool"
      }
    },
    "notice": "This contract is for LPToken mining on Degis",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29165,
        "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4263,
        "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4178,
        "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 9307,
        "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
        "label": "degis",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(IDegisToken)28780"
      },
      {
        "astId": 9310,
        "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
        "label": "veDEG",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IVeDEG)14841"
      },
      {
        "astId": 9315,
        "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
        "label": "_nextPoolId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 9317,
        "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
        "label": "startTimestamp",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 9336,
        "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
        "label": "poolList",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(PoolInfo)9332_storage)dyn_storage"
      },
      {
        "astId": 9340,
        "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
        "label": "poolMapping",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9344,
        "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
        "label": "isFarming",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 9358,
        "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
        "label": "userInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)9351_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)9332_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)9332_storage",
        "encoding": "dynamic_array",
        "label": "struct FarmingPool.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDegisToken)28780": {
        "encoding": "inplace",
        "label": "contract IDegisToken",
        "numberOfBytes": "20"
      },
      "t_contract(IVeDEG)14841": {
        "encoding": "inplace",
        "label": "contract IVeDEG",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)9351_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FarmingPool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)9351_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)9351_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct FarmingPool.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)9351_storage)"
      },
      "t_struct(PoolInfo)9332_storage": {
        "encoding": "inplace",
        "label": "struct FarmingPool.PoolInfo",
        "members": [
          {
            "astId": 9319,
            "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9321,
            "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
            "label": "basicDegisPerSecond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9323,
            "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
            "label": "bonusDegisPerSecond",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9325,
            "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9327,
            "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
            "label": "accDegisPerShare",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9329,
            "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
            "label": "accDegisPerBonusShare",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9331,
            "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
            "label": "totalBonus",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(UserInfo)9351_storage": {
        "encoding": "inplace",
        "label": "struct FarmingPool.UserInfo",
        "members": [
          {
            "astId": 9346,
            "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9348,
            "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
            "label": "stakingBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9350,
            "contract": "contracts/farming/FarmingPool.sol:FarmingPool",
            "label": "bonus",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}