{
  "address": "0x4389817D9525a54211C2E14DaA03C6FBd42Dc23e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPolicyCore",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPolicyCore",
          "type": "address"
        }
      ],
      "name": "PolicyCoreAddressChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PAIR_INIT_CODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_nextId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        }
      ],
      "name": "deployPolicyToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeRate",
          "type": "uint256"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        }
      ],
      "name": "getInitCodeHashForPolicyToken",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress2",
          "type": "address"
        }
      ],
      "name": "getPairAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyCore",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyCore",
          "type": "address"
        }
      ],
      "name": "setPolicyCoreAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x660ad7abdc218ba3b04bd7ef400ec66e57b641cd8f6c8d762125cdd349198493",
  "receipt": {
    "to": null,
    "from": "0xeB496257B64Cc2D39c291B209F465f3cfADE0873",
    "contractAddress": "0x4389817D9525a54211C2E14DaA03C6FBd42Dc23e",
    "transactionIndex": 3,
    "gasUsed": "4116851",
    "logsBloom": "0x
    "blockHash": "0xfa8fdca850ee965a7db070eee8f75635868ce668e1c495845648885d8eb70c7d",
    "transactionHash": "0x660ad7abdc218ba3b04bd7ef400ec66e57b641cd8f6c8d762125cdd349198493",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 12821466,
        "transactionHash": "0x660ad7abdc218ba3b04bd7ef400ec66e57b641cd8f6c8d762125cdd349198493",
        "address": "0x4389817D9525a54211C2E14DaA03C6FBd42Dc23e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000eb496257b64cc2d39c291b209f465f3cfade0873"
        ],
        "data": "0x",
        "logIndex": 26,
        "blockHash": "0xfa8fdca850ee965a7db070eee8f75635868ce668e1c495845648885d8eb70c7d"
      }
    ],
    "blockNumber": 12821466,
    "cumulativeGasUsed": "4591349",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5d69373591e8167ec6bb1a459f6000ca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPolicyCore\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPolicyCore\",\"type\":\"address\"}],\"name\":\"PolicyCoreAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PAIR_INIT_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"deployPolicyToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"getInitCodeHashForPolicyToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress2\",\"type\":\"address\"}],\"name\":\"getPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyCore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyCore\",\"type\":\"address\"}],\"name\":\"setPolicyCoreAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Factory contract to deploy new pools periodically      Each pool(product) will have a unique naughtyId      Each pool will have its pool token      PolicyToken - Stablecoin      Token 0 may change but Token 1 is always stablecoin.\",\"kind\":\"dev\",\"methods\":{\"deployPolicyToken(string,uint256)\":{\"params\":{\"_decimals\":\"Decimals of the policyToken\",\"_policyTokenName\":\"Name of the policyToken\"},\"returns\":{\"_0\":\"tokenAddress PolicyToken address\"}},\"deployPool(address,address,uint256,uint256)\":{\"params\":{\"_deadline\":\"Deadline of the pool\",\"_feeRate\":\"Fee rate given to LP holders\",\"_policyTokenAddress\":\"Address of policy token\",\"_stablecoin\":\"Address of the stable coin\"},\"returns\":{\"_0\":\"poolAddress Address of the pool\"}},\"getInitCodeHashForPolicyToken(string,uint256)\":{\"details\":\"For test/task convinience, pre-compute the address      Ethers.js:      Address = ethers.utils.getCreate2Address(factory address, salt, INIT_CODE_HASH)\",\"params\":{\"_decimals\":\"Token decimals of this policy token\",\"_tokenName\":\"Name of the policy token to be deployed\"}},\"getLatestTokenAddress()\":{\"returns\":{\"_0\":\"tokenAddress Latest token address\"}},\"getPairAddress(address,address)\":{\"params\":{\"_tokenAddress1\":\"Address of token1\",\"_tokenAddress2\":\"Address of toekn2\"},\"returns\":{\"_0\":\"Pool address of the two tokens\"}},\"renounceOwnership()\":{\"details\":\"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.\"},\"setPolicyCoreAddress(address)\":{\"details\":\"Only callable by the owner         < PolicyCore should be the minter of policyToken >         < This process is done inside constructor >\",\"params\":{\"_policyCore\":\"Address of policyCore contract\"}},\"transferOwnership(address)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"newOwner\":\"Address of the new owner\"}}},\"title\":\"Naughty Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployPolicyToken(string,uint256)\":{\"notice\":\"For each round we need to first create the policytoken(ERC20)\"},\"deployPool(address,address,uint256,uint256)\":{\"notice\":\"After deploy the policytoken and get the address,         we deploy the policyToken - stablecoin pool contract\"},\"getInitCodeHashForPolicyToken(string,uint256)\":{\"notice\":\"Get the INIT_CODE_HASH for policy tokens with parameters\"},\"getLatestTokenAddress()\":{\"notice\":\"Get the latest token address just deployed\"},\"getPairAddress(address,address)\":{\"notice\":\"Get the pair address deployed by the factory         PolicyToken address first, and then stablecoin address         The order of the tokens will be sorted inside the function\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner.\"},\"setPolicyCoreAddress(address)\":{\"notice\":\"Remember to call this function to set the policyCore address\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/naughty-price/NaughtyFactory.sol\":\"NaughtyFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x53a0bb51b8a505e04aaf065de27c0e31cadf38194f8a9a6ec92b7bcd3c5826e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nlibrary Math {\\n    uint256 internal constant WAD = 10**18;\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n}\\n\",\"keccak256\":\"0x14d3b9b1d0e6d4f619a02cba3d4485cfb8af4c3e99bed82151bdb9c0a16b7fda\",\"license\":\"MIT\"},\"contracts/naughty-price/NPPolicyToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n    *******         **********     ***********     *****     ***********\\n    *      *        *              *                 *       *\\n    *        *      *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     **********     *       *****     *       ***********\\n    *         *     *              *         *       *                 *\\n    *         *     *              *         *       *                 *\\n    *        *      *              *         *       *                 *\\n    *      *        *              *         *       *                 *\\n    *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.10;\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title  Policy Token for Naughty Price\\n * @notice This is the contract for token price policy token.\\n *         It is a ERC20 token with an owner and a minter.\\n *         The owner should be the deployer at first.\\n *         The minter should be the policyCore contract.\\n * @dev    It is different from the flight delay token.\\n *         That is an ERC721 NFT and this is an ERC20 token.\\n */\\ncontract NPPolicyToken is ERC20 {\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    address public minter;\\n\\n    uint256 private tokenDecimals;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event Mint(address account, uint256 amount);\\n    event Burn(address account, uint256 amount);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _minter,\\n        uint256 _decimals\\n    ) ERC20(_name, _symbol) {\\n        minter = _minter;\\n        tokenDecimals = _decimals;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Modifiers **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Only the minter can mint\\n     */\\n    modifier onlyMinter() {\\n        require(msg.sender == minter, \\\"only minter can call this function\\\");\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Main Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Mint some policy tokens\\n     * @param _account Address to receive the tokens\\n     * @param _amount Amount to be minted\\n     */\\n    function mint(address _account, uint256 _amount) public onlyMinter {\\n        _mint(_account, _amount);\\n        emit Mint(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Burn some policy tokens\\n     * @param _account Address to burn tokens\\n     * @param _amount Amount to be burned\\n     */\\n    function burn(address _account, uint256 _amount) public onlyMinter {\\n        _burn(_account, _amount);\\n        emit Burn(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Get the decimals of this token\\n     * @dev It should be the same as its paired stablecoin\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return uint8(tokenDecimals);\\n    }\\n}\\n\",\"keccak256\":\"0xc9b7cdd39f8712e065e3c4d1c1120d249309f973289ffdfbb36225ea8c9d57e0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/NaughtyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n    *******         **********     ***********     *****     ***********\\n    *      *        *              *                 *       *\\n    *        *      *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     **********     *       *****     *       ***********\\n    *         *     *              *         *       *                 *\\n    *         *     *              *         *       *                 *\\n    *        *      *              *         *       *                 *\\n    *      *        *              *         *       *                 *\\n    *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.10;\\nimport \\\"./NPPolicyToken.sol\\\";\\nimport \\\"./NaughtyPair.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {INaughtyPair} from \\\"./interfaces/INaughtyPair.sol\\\";\\nimport {IPolicyCore} from \\\"./interfaces/IPolicyCore.sol\\\";\\nimport {OwnableWithoutContext} from \\\"../utils/OwnableWithoutContext.sol\\\";\\n\\n/**\\n * @title Naughty Factory\\n * @dev Factory contract to deploy new pools periodically\\n *      Each pool(product) will have a unique naughtyId\\n *      Each pool will have its pool token\\n *      PolicyToken - Stablecoin\\n *      Token 0 may change but Token 1 is always stablecoin.\\n */\\n\\ncontract NaughtyFactory is OwnableWithoutContext {\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // PolicyToken Address => StableCoin Address => Pool Address\\n    mapping(address => mapping(address => address)) getPair;\\n\\n    // Store all the pairs' addresses\\n    address[] public allPairs;\\n\\n    // Store all policy tokens' addresses\\n    address[] public allTokens;\\n\\n    uint256 public _nextId;\\n\\n    // Address of policyCore\\n    address public policyCore;\\n\\n    // INIT_CODE_HASH for NaughtyPair, may be used in frontend\\n    bytes32 public constant PAIR_INIT_CODE_HASH =\\n        keccak256(abi.encodePacked(type(NaughtyPair).creationCode));\\n\\n    event PolicyCoreAddressChanged(\\n        address oldPolicyCore,\\n        address newPolicyCore\\n    );\\n\\n    constructor() OwnableWithoutContext(msg.sender) {}\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Modifiers ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Only called by policyCore contract\\n     */\\n    modifier onlyPolicyCore() {\\n        require(\\n            policyCore != address(0) && msg.sender == policyCore,\\n            \\\"Only called by policyCore contract\\\"\\n        );\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get the latest token address just deployed\\n     * @return tokenAddress Latest token address\\n     */\\n    function getLatestTokenAddress() external view returns (address) {\\n        uint256 currentTokenId = _nextId - 1;\\n        return allTokens[currentTokenId];\\n    }\\n\\n    /**\\n     * @notice Get the INIT_CODE_HASH for policy tokens with parameters\\n     * @dev For test/task convinience, pre-compute the address\\n     *      Ethers.js:\\n     *      Address = ethers.utils.getCreate2Address(factory address, salt, INIT_CODE_HASH)\\n     * @param _tokenName Name of the policy token to be deployed\\n     * @param _decimals Token decimals of this policy token\\n     */\\n    function getInitCodeHashForPolicyToken(\\n        string memory _tokenName,\\n        uint256 _decimals\\n    ) public view returns (bytes32) {\\n        bytes memory bytecode = _getPolicyTokenBytecode(_tokenName, _decimals);\\n        return keccak256(bytecode);\\n    }\\n\\n    /**\\n     * @notice Get the pair address deployed by the factory\\n     *         PolicyToken address first, and then stablecoin address\\n     *         The order of the tokens will be sorted inside the function\\n     * @param _tokenAddress1 Address of token1\\n     * @param _tokenAddress2 Address of toekn2\\n     * @return Pool address of the two tokens\\n     */\\n    function getPairAddress(address _tokenAddress1, address _tokenAddress2)\\n        public\\n        view\\n        returns (address)\\n    {\\n        // Policy token address at the first place\\n        (address token0, address token1) = IPolicyCore(policyCore)\\n            .supportedStablecoin(_tokenAddress2)\\n            ? (_tokenAddress1, _tokenAddress2)\\n            : (_tokenAddress2, _tokenAddress1);\\n\\n        address _pairAddress = getPair[token0][token1];\\n\\n        return _pairAddress;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Set Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Remember to call this function to set the policyCore address\\n     * @dev    Only callable by the owner\\n     *         < PolicyCore should be the minter of policyToken >\\n     *         < This process is done inside constructor >\\n     * @param _policyCore Address of policyCore contract\\n     */\\n    function setPolicyCoreAddress(address _policyCore) external onlyOwner {\\n        emit PolicyCoreAddressChanged(policyCore, _policyCore);\\n        policyCore = _policyCore;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Main Functions *********************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice For each round we need to first create the policytoken(ERC20)\\n     * @param _policyTokenName Name of the policyToken\\n     * @param _decimals Decimals of the policyToken\\n     * @return tokenAddress PolicyToken address\\n     */\\n    function deployPolicyToken(\\n        string memory _policyTokenName,\\n        uint256 _decimals\\n    ) external onlyPolicyCore returns (address) {\\n        bytes32 salt = keccak256(abi.encodePacked(_policyTokenName));\\n\\n        bytes memory bytecode = _getPolicyTokenBytecode(\\n            _policyTokenName,\\n            _decimals\\n        );\\n\\n        address _policTokenAddress = _deploy(bytecode, salt);\\n\\n        allTokens.push(_policTokenAddress);\\n\\n        _nextId++;\\n\\n        return _policTokenAddress;\\n    }\\n\\n    /**\\n     * @notice After deploy the policytoken and get the address,\\n     *         we deploy the policyToken - stablecoin pool contract\\n     * @param _policyTokenAddress Address of policy token\\n     * @param _stablecoin Address of the stable coin\\n     * @param _deadline Deadline of the pool\\n     * @param _feeRate Fee rate given to LP holders\\n     * @return poolAddress Address of the pool\\n     */\\n    function deployPool(\\n        address _policyTokenAddress,\\n        address _stablecoin,\\n        uint256 _deadline,\\n        uint256 _feeRate\\n    ) public onlyPolicyCore returns (address) {\\n        bytes memory bytecode = type(NaughtyPair).creationCode;\\n\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(_policyTokenAddress, _stablecoin)\\n        );\\n\\n        address _poolAddress = _deploy(bytecode, salt);\\n\\n        INaughtyPair(_poolAddress).initialize(\\n            _policyTokenAddress,\\n            _stablecoin,\\n            _deadline,\\n            _feeRate\\n        );\\n\\n        getPair[_policyTokenAddress][_stablecoin] = _poolAddress;\\n\\n        allPairs.push(_poolAddress);\\n\\n        return _poolAddress;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Deploy function with create2\\n     * @param code Byte code of the contract (creation code)\\n     * @param salt Salt for the deployment\\n     * @return addr The deployed contract address\\n     */\\n    function _deploy(bytes memory code, bytes32 salt)\\n        internal\\n        returns (address addr)\\n    {\\n        assembly {\\n            addr := create2(0, add(code, 0x20), mload(code), salt)\\n            if iszero(extcodesize(addr)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the policyToken bytecode (with constructor parameters)\\n     * @param _tokenName Name of policyToken\\n     * @param _decimals Decimals of policyToken\\n     */\\n    function _getPolicyTokenBytecode(\\n        string memory _tokenName,\\n        uint256 _decimals\\n    ) internal view returns (bytes memory) {\\n        bytes memory bytecode = type(NPPolicyToken).creationCode;\\n\\n        // Encodepacked the parameters\\n        // The minter is set to be the policyCore address\\n        return\\n            abi.encodePacked(\\n                bytecode,\\n                abi.encode(_tokenName, _tokenName, policyCore, _decimals)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xc014ad16abdb8c53a1f30f49882a0045fe806d80d8b36a287c9e9148c90d4c9c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/NaughtyPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n    *******         **********     ***********     *****     ***********\\n    *      *        *              *                 *       *\\n    *        *      *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     **********     *       *****     *       ***********\\n    *         *     *              *         *       *                 *\\n    *         *     *              *         *       *                 *\\n    *        *      *              *         *       *                 *\\n    *      *        *              *         *       *                 *\\n    *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.10;\\n\\nimport {Math} from \\\"../libraries/Math.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"../utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title  Naughty Pair\\n * @notice This is the contract for the naughtyPrice swapping pair.\\n *         Every time a new naughtyPrice product is online you need to deploy this contract.\\n *         The contract will be initialized with two tokens and a deadline.\\n *         Token0 will be policy tokens and token1 will be stablecoins.\\n *         The swaps are only availale before the deadline.\\n */\\ncontract NaughtyPair is ERC20(\\\"Naughty Pool LP\\\", \\\"NLP\\\"), ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // naughtyFactory contract address\\n    address public factory;\\n\\n    // Token addresses in the pool\\n    address public token0; // Insurance Token\\n    address public token1; // USDT\\n\\n    uint112 private reserve0; // Amount of Insurance Token\\n    uint112 private reserve1; // Amount of USDT\\n\\n    // Used for modifiers\\n    bool public unlocked = true;\\n\\n    // Every pool will have a deadline\\n    uint256 public deadline;\\n\\n    // Fee Rate, given to LP holders (0 ~ 1000)\\n    uint256 public feeRate;\\n\\n    // Minimum liquidity locked\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event ReserveUpdated(uint256 reserve0, uint256 reserve1);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amountAIn,\\n        uint256 amountBIn,\\n        uint256 amountAOut,\\n        uint256 amountBOut,\\n        address indexed to\\n    );\\n\\n    event Mint(address indexed sender, uint256 amountA, uint256 amountB);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amountA,\\n        uint256 amountB,\\n        address indexed to\\n    );\\n\\n    constructor() {\\n        factory = msg.sender; // deployed by factory contract\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Can not swap after the deadline\\n     * @dev Each pool will have a deadline and it was set when deployed\\n     */\\n    modifier beforeDeadline() {\\n        require(block.timestamp <= deadline, \\\"Can not swap after deadline\\\");\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Init Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Initialize the contract status after the deployment by factory\\n     * @param _token0 Token0 address (policy token address)\\n     * @param _token1 Token1 address (stablecoin address)\\n     * @param _deadline Deadline for this pool\\n     * @param _feeRate Fee rate to LP holders (1000 <=> 100%)\\n     */\\n    function initialize(\\n        address _token0,\\n        address _token1,\\n        uint256 _deadline,\\n        uint256 _feeRate\\n    ) external {\\n        require(\\n            msg.sender == factory,\\n            \\\"can only be initialized by the factory contract\\\"\\n        );\\n        require(_feeRate <= 1000, \\\"feeRate over 1.0\\\");\\n\\n        token0 = _token0;\\n        token1 = _token1;\\n\\n        // deadline for the whole pool after which no swap will be allowed\\n        deadline = _deadline;\\n\\n        feeRate = _feeRate;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get reserve0 (Policy token) and reserve1 (stablecoin).\\n     * @dev This function always put policy token at the first place!\\n     * @return _reserve0 Reserve of token0\\n     * @return _reserve1 Reserve of token1\\n     */\\n    function getReserves()\\n        public\\n        view\\n        returns (uint112 _reserve0, uint112 _reserve1)\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Mint LP Token to liquidity providers\\n     *         Called when adding liquidity.\\n     * @param to The user address\\n     * @return liquidity The LP token amount\\n     */\\n    function mint(address to)\\n        external\\n        nonReentrant\\n        returns (uint256 liquidity)\\n    {\\n        (uint112 _reserve0, uint112 _reserve1) = getReserves(); // gas savings\\n\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this)); // policy token balance after deposit\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this)); // stablecoin balance after deposit\\n\\n        uint256 amount0 = balance0 - _reserve0; // just deposit\\n        uint256 amount1 = balance1 - _reserve1;\\n\\n        uint256 _totalSupply = totalSupply(); // gas savings\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0 * amount1 - MINIMUM_LIQUIDITY);\\n            _mint(address(this), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = min(\\n                (amount0 * _totalSupply) / _reserve0,\\n                (amount1 * _totalSupply) / _reserve1\\n            );\\n        }\\n\\n        require(liquidity > 0, \\\"insufficient liquidity minted\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1);\\n\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    /**\\n     * @notice Burn LP tokens give back the original tokens\\n     * @param _to User address\\n     * @return amount0 Amount of token0 to be sent back\\n     * @return amount1 Amount of token1 to be sent back\\n     */\\n    function burn(address _to)\\n        external\\n        nonReentrant\\n        returns (uint256 amount0, uint256 amount1)\\n    {\\n        // (uint112 _reserve0, uint112 _reserve1) = getReserves(); // gas savings\\n\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this)); // policy token balance\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this)); // stablecoin balance\\n\\n        uint256 liquidity = balanceOf(address(this)) - MINIMUM_LIQUIDITY;\\n\\n        uint256 _totalSupply = totalSupply(); // gas savings\\n\\n        // How many tokens to be sent back\\n        amount0 = (liquidity * balance0) / _totalSupply;\\n        amount1 = (liquidity * balance1) / _totalSupply;\\n\\n        require(amount0 > 0 && amount1 > 0, \\\"Insufficient liquidity burned\\\");\\n\\n        // Currently all the liquidity in the pool was just sent by the user, so burn all\\n        _burn(address(this), liquidity);\\n\\n        // Transfer tokens out and update the balance\\n        IERC20(token0).safeTransfer(_to, amount0);\\n        IERC20(token1).safeTransfer(_to, amount1);\\n        balance0 = IERC20(token0).balanceOf(address(this));\\n        balance1 = IERC20(token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1);\\n\\n        emit Burn(msg.sender, amount0, amount1, _to);\\n    }\\n\\n    /**\\n     * @notice Finish the swap process\\n     * @param _amount0Out Amount of token0 to be given out (may be 0)\\n     * @param _amount1Out Amount of token1 to be given out (may be 0)\\n     * @param _to Address to receive the swap result\\n     */\\n    function swap(\\n        uint256 _amount0Out,\\n        uint256 _amount1Out,\\n        address _to\\n    ) external beforeDeadline nonReentrant {\\n        require(\\n            _amount0Out > 0 || _amount1Out > 0,\\n            \\\"Output amount need to be >0\\\"\\n        );\\n\\n        (uint256 _reserve0, uint256 _reserve1) = getReserves(); // gas savings\\n        require(\\n            _amount0Out < _reserve0 && _amount1Out < _reserve1,\\n            \\\"Not enough liquidity\\\"\\n        );\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(_to != _token0 && _to != _token1, \\\"INVALID_TO\\\");\\n\\n            if (_amount0Out > 0) IERC20(_token0).safeTransfer(_to, _amount0Out);\\n            if (_amount1Out > 0) IERC20(_token1).safeTransfer(_to, _amount1Out);\\n\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - _amount0Out\\n            ? balance0 - (_reserve0 - _amount0Out)\\n            : 0;\\n        uint256 amount1In = balance1 > _reserve1 - _amount1Out\\n            ? balance1 - (_reserve1 - _amount1Out)\\n            : 0;\\n\\n        require(amount0In > 0 || amount1In > 0, \\\"INSUFFICIENT_INPUT_AMOUNT\\\");\\n\\n        {\\n            uint256 balance0Adjusted = balance0 * 1000 - amount0In * feeRate;\\n            uint256 balance1Adjusted = balance1 * 1000 - amount1In * feeRate;\\n\\n            require(\\n                balance0Adjusted * balance1Adjusted >=\\n                    _reserve0 * _reserve1 * (1000**2),\\n                \\\"The remaining x*y is less than K\\\"\\n            );\\n        }\\n\\n        _update(balance0, balance1);\\n\\n        emit Swap(\\n            msg.sender,\\n            amount0In,\\n            amount1In,\\n            _amount0Out,\\n            _amount1Out,\\n            _to\\n        );\\n    }\\n\\n    /**\\n     * @notice Syncrinize the status of this pool\\n     */\\n    function sync() external nonReentrant {\\n        _update(\\n            IERC20(token0).balanceOf(address(this)),\\n            IERC20(token1).balanceOf(address(this))\\n        );\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ********************************** Internal Functions ********************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Update the reserves of the pool\\n     * @param balance0 Balance of token0\\n     * @param balance1 Balance of token1\\n     */\\n    function _update(uint256 balance0, uint256 balance1) private {\\n        uint112 MAX_NUM = type(uint112).max;\\n        require(balance0 <= MAX_NUM && balance1 <= MAX_NUM, \\\"Uint112 OVERFLOW\\\");\\n\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n\\n        emit ReserveUpdated(reserve0, reserve1);\\n    }\\n\\n    /**\\n     * @notice Get the smaller one of two numbers\\n     * @param x The first number\\n     * @param y The second number\\n     * @return z The smaller one\\n     */\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n}\\n\",\"keccak256\":\"0x498a89aa021449438adbbdc2b96b1f26115b82152c0e47dfbe4e01507440758d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/interfaces/INaughtyPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface INaughtyPair is IERC20 {\\n    function initialize(\\n        address _token0,\\n        address _token1,\\n        uint256 _deadline,\\n        uint256 _feeRate\\n    ) external;\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function feeRate() external view returns (uint256);\\n\\n    function deadline() external view returns (uint256);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 _reserve0, uint112 _reserve1);\\n\\n    function swap(\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n\\n    function burn(address) external returns (uint256, uint256);\\n\\n    function mint(address) external returns (uint256);\\n\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0x9e8350da8ead9e167ad8274005d55b5c2dd8ba878947e0eda58da10f70a6b0aa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/interfaces/IPolicyCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface IPolicyCore {\\n    /**\\n     * @notice Find the address by its name\\n     */\\n    function findAddressbyName(string memory _policyTokenName)\\n        external\\n        view\\n        returns (address _policyTokenAddress);\\n\\n    /**\\n     * @notice Find the name by address\\n     */\\n    function findNamebyAddress(address _policyTokenAddress)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Check whether the stablecoin is supported\\n     */\\n    function supportedStablecoin(address _coinAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    function delegateDeposit(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function deployPool(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _poolDeadline,\\n        uint256 _feeRate\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x0b8eeb08a2d6b2060417a265c82d9f3f7fed123695f027b533322ce532c09257\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/OwnableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev The owner can be set during deployment, not default to be msg.sender\\n */\\nabstract contract OwnableWithoutContext {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address _initialOwner) {\\n        _transferOwnership(_initialOwner);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. It will not be possible to call\\n     *         `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * @dev    Renouncing ownership will leave the contract without an owner,\\n     *         thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Can only be called by the current owner.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Internal function without access restriction.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x458cfb3ba5712cff38112281f21dc378e6a7ae43645671a90cbf3e357a86469e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x62e49c6c64dfb07ffea8c68cd1993ea9be67a2aa3acff47dc7762771f4eb76a4\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000fd5760003560e01c806387f0061a1162000097578063b4f69a2f116200006e578063b4f69a2f14620001e5578063e30145e014620001fc578063f2f2fff51462000210578063f2fde38b146200021a57600080fd5b806387f0061a14620001b25780638da5cb5b14620001c95780639fd2650e14620001db57600080fd5b806357b84f8c11620000d857806357b84f8c146200016e57806361c8f99d1462000178578063634282af1462000191578063715018a614620001a857600080fd5b80631e3dd18b14620001025780633a5f69f81462000131578063490d73501462000148575b600080fd5b620001196200011336600462000975565b62000231565b604051620001289190620009c5565b60405180910390f35b6200011962000142366004620009ed565b6200025c565b6200015f6200015936600462000b6b565b62000422565b60405162000128919062000bd1565b6200015f62000443565b6200018f6200018936600462000be1565b62000491565b005b62000119620001a236600462000975565b62000546565b6200018f62000557565b62000119620001c336600462000b6b565b620005a2565b6000546001600160a01b031662000119565b62000119620006ad565b62000119620001f636600462000c06565b620006f4565b60055462000119906001600160a01b031681565b6200015f60045481565b6200018f6200022b36600462000be1565b620007c8565b600281815481106200024257600080fd5b6000918252602090912001546001600160a01b0316905081565b6005546000906001600160a01b0316158015906200028457506005546001600160a01b031633145b620002ac5760405162461bcd60e51b8152600401620002a39062000c99565b60405180910390fd5b600060405180602001620002c0906200093e565b6020820181038252601f19601f82011660405250905060008686604051602001620002ed92919062000cda565b60405160208183030381529060405280519060200120905060006200031383836200083c565b6040517feb990c590000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063eb990c599062000363908b908b908b908b9060040162000cfe565b600060405180830381600087803b1580156200037e57600080fd5b505af115801562000393573d6000803e3d6000fd5b5050506001600160a01b03808a1660009081526001602081815260408084208d861685529091528220805493861673ffffffffffffffffffffffffffffffffffffffff1994851681179091556002805492830181559092527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180549092161790555092505050949350505050565b60008062000431848462000856565b80516020909101209150505b92915050565b60405162000454602082016200093e565b601f1982820381018352601f90910116604081905262000478919060200162000d9c565b6040516020818303038152906040528051906020012081565b33620004a56000546001600160a01b031690565b6001600160a01b031614620004ce5760405162461bcd60e51b8152600401620002a39062000da8565b6005546040517f3589df28c7a4e563855a6dad51377b5e4a78c2c46954792d4ebcc2b6f477af2d916200050f916001600160a01b0390911690849062000de3565b60405180910390a16005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600381815481106200024257600080fd5b336200056b6000546001600160a01b031690565b6001600160a01b031614620005945760405162461bcd60e51b8152600401620002a39062000da8565b620005a06000620008e1565b565b6005546000906001600160a01b031615801590620005ca57506005546001600160a01b031633145b620005e95760405162461bcd60e51b8152600401620002a39062000c99565b600083604051602001620005fe919062000d9c565b604051602081830303815290604052805190602001209050600062000624858562000856565b905060006200063482846200083c565b6003805460018101825560009182527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841617905560048054929350906200069e8362000e1f565b90915550909695505050505050565b6000806001600454620006c1919062000e3d565b905060038181548110620006d957620006d962000e57565b6000918252602090912001546001600160a01b031692915050565b6005546040517f5cb3b14f000000000000000000000000000000000000000000000000000000008152600091829182916001600160a01b031690635cb3b14f9062000744908790600401620009c5565b602060405180830381865afa15801562000762573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000788919062000e83565b6200079557838562000798565b84845b6001600160a01b039182166000908152600160209081526040808320938516835292905220541695945050505050565b33620007dc6000546001600160a01b031690565b6001600160a01b031614620008055760405162461bcd60e51b8152600401620002a39062000da8565b6001600160a01b0381166200082e5760405162461bcd60e51b8152600401620002a39062000f01565b6200083981620008e1565b50565b6000818351602085016000f59050803b6200043d57600080fd5b60606000604051806020016200086c906200094c565b601f1982820381018352601f9091011660408190526005549192508291620008a991879182916001600160a01b0390911690889060200162000f48565b60408051601f1981840301815290829052620008c9929160200162000f82565b60405160208183030381529060405291505092915050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61265a8062000f9d83390190565b61132280620035f783390190565b805b81146200083957600080fd5b80356200043d816200095a565b6000602082840312156200098c576200098c600080fd5b60006200099a848462000968565b949350505050565b60006001600160a01b0382166200043d565b620009bf81620009a2565b82525050565b602081016200043d8284620009b4565b6200095c81620009a2565b80356200043d81620009d5565b6000806000806080858703121562000a085762000a08600080fd5b600062000a168787620009e0565b945050602062000a2987828801620009e0565b935050604062000a3c8782880162000968565b925050606062000a4f8782880162000968565b91505092959194509250565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171562000a9a5762000a9a62000a5b565b6040525050565b600062000aad60405190565b905062000abb828262000a71565b919050565b600067ffffffffffffffff82111562000add5762000add62000a5b565b601f19601f83011660200192915050565b82818337506000910152565b600062000b1162000b0b8462000ac0565b62000aa1565b90508281526020810184848401111562000b2e5762000b2e600080fd5b62000b3b84828562000aee565b509392505050565b600082601f83011262000b595762000b59600080fd5b81356200099a84826020860162000afa565b6000806040838503121562000b835762000b83600080fd5b823567ffffffffffffffff81111562000b9f5762000b9f600080fd5b62000bad8582860162000b43565b925050602062000bc08582860162000968565b9150509250929050565b80620009bf565b602081016200043d828462000bca565b60006020828403121562000bf85762000bf8600080fd5b60006200099a8484620009e0565b6000806040838503121562000c1e5762000c1e600080fd5b600062000c2c8585620009e0565b925050602062000bc085828601620009e0565b60228152602081017f4f6e6c792063616c6c656420627920706f6c696379436f726520636f6e74726181527f6374000000000000000000000000000000000000000000000000000000000000602082015290505b60400190565b602080825281016200043d8162000c3f565b60006200043d8260601b90565b60006200043d8262000cab565b620009bf62000cd482620009a2565b62000cb8565b62000ce6818462000cc5565b60140162000cf5818362000cc5565b60140192915050565b6080810162000d0e8287620009b4565b62000d1d6020830186620009b4565b62000d2c604083018562000bca565b62000d3b606083018462000bca565b95945050505050565b60005b8381101562000d6157818101518382015260200162000d47565b8381111562000d71576000848401525b50505050565b600062000d82825190565b62000d9281856020860162000d44565b9290920192915050565b6200043d818362000d77565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726040830152606082016200043d565b6040810162000df38285620009b4565b62000e026020830184620009b4565b9392505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141562000e365762000e3662000e09565b5060010190565b60008282101562000e525762000e5262000e09565b500390565b634e487b7160e01b600052603260045260246000fd5b8015156200095c565b80516200043d8162000e6d565b60006020828403121562000e9a5762000e9a600080fd5b60006200099a848462000e76565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f64647265737300000000000000000000000000000000000000000000000000006020820152905062000c93565b602080825281016200043d8162000ea8565b600062000f1e825190565b80845260208401935062000f3781856020860162000d44565b601f01601f19169290920192915050565b6080808252810162000f5b818762000f13565b9050818103602083015262000f71818662000f13565b905062000d2c6040830185620009b4565b62000f8e818462000d77565b905062000e02818362000d7756fe60806040526009805460ff60e01b1916600160e01b1790553480156200002457600080fd5b506040518060400160405280600f81526020016e04e61756768747920506f6f6c204c5608c1b8152506040518060400160405280600381526020016204e4c560ec1b815250816003908051906020019062000081929190620000b7565b50805162000097906004906020840190620000b7565b5050600160055550600680546001600160a01b03191633179055620001a4565b828054620000c59062000173565b90600052602060002090601f016020900481019282620000e9576000855562000134565b82601f106200010457805160ff191683800117855562000134565b8280016001018555821562000134579182015b828111156200013457825182559160200191906001019062000117565b506200014292915062000146565b5090565b5b8082111562000142576000815560010162000147565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200018857607f821691505b602082108114156200019e576200019e6200015d565b50919050565b6124a680620001b46000396000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c806370a08231116100e3578063ba9a7a561161008c578063dd62ed3e11610066578063dd62ed3e14610374578063eb990c59146103ad578063fff6cae9146103c057600080fd5b8063ba9a7a5614610345578063c45a01551461034e578063d21220a71461036157600080fd5b8063978bbdb9116100bd578063978bbdb914610316578063a457c2d71461031f578063a9059cbb1461033257600080fd5b806370a08231146102c457806389afcb44146102ed57806395d89b411461030e57600080fd5b806329dcb0cf116101455780636a5e26501161011f5780636a5e26501461026f5780636a6278421461029c5780636d9a640a146102af57600080fd5b806329dcb0cf14610244578063313ce5671461024d578063395093511461025c57600080fd5b80630dfe1681116101765780630dfe16811461020057806318160ddd1461022057806323b872dd1461023157600080fd5b806306fdde031461019d5780630902f1ac146101bb578063095ea7b3146101e0575b600080fd5b6101a56103c8565b6040516101b291906117d6565b60405180910390f35b6009546001600160701b0380821691600160701b9004166040516101b29291906117f8565b6101f36101ee366004611857565b61045a565b6040516101b2919061189c565b600754610213906001600160a01b031681565b6040516101b291906118b3565b6002545b6040516101b291906118c7565b6101f361023f3660046118d5565b610471565b610224600a5481565b60126040516101b2919061192e565b6101f361026a366004611857565b6104e5565b6009546101f3907c0100000000000000000000000000000000000000000000000000000000900460ff1681565b6102246102aa36600461193c565b610521565b6102c26102bd36600461195d565b6107a1565b005b6102246102d236600461193c565b6001600160a01b031660009081526020819052604090205490565b6103006102fb36600461193c565b610b6c565b6040516101b29291906119a3565b6101a5610e8f565b610224600b5481565b6101f361032d366004611857565b610e9e565b6101f3610340366004611857565b610ef9565b6102246103e881565b600654610213906001600160a01b031681565b600854610213906001600160a01b031681565b6102246103823660046119be565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102c26103bb3660046119f1565b610f06565b6102c2610fa5565b6060600380546103d790611a6b565b80601f016020809104026020016040519081016040528092919081815260200182805461040390611a6b565b80156104505780601f1061042557610100808354040283529160200191610450565b820191906000526020600020905b81548152906001019060200180831161043357829003601f168201915b5050505050905090565b60006104673384846110bd565b5060015b92915050565b600061047e848484611171565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156104cb5760405162461bcd60e51b81526004016104c290611aec565b60405180910390fd5b6104d885338584036110bd565b60019150505b9392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161046791859061051c908690611b12565b6110bd565b6000600260055414156105465760405162461bcd60e51b81526004016104c290611b5e565b600260055560008061056c6009546001600160701b0380821692600160701b9092041690565b6007546040516370a0823160e01b81529294509092506000916001600160a01b03909116906370a08231906105a59030906004016118b3565b602060405180830381865afa1580156105c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e69190611b79565b6008546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061061c9030906004016118b3565b602060405180830381865afa158015610639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065d9190611b79565b905060006106746001600160701b03861684611b9a565b9050600061068b6001600160701b03861684611b9a565b9050600061069860025490565b9050806106d1576106be6103e86106af8486611bb1565b6106b99190611b9a565b611286565b97506106cc306103e86112f6565b610718565b6107156001600160701b0388166106e88386611bb1565b6106f29190611be6565b6001600160701b0388166107068486611bb1565b6107109190611be6565b6113aa565b97505b600088116107385760405162461bcd60e51b81526004016104c290611c2c565b61074289896112f6565b61074c85856113c0565b336001600160a01b03167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f84846040516107879291906119a3565b60405180910390a250506001600555509395945050505050565b600a544211156107c35760405162461bcd60e51b81526004016104c290611c6e565b600260055414156107e65760405162461bcd60e51b81526004016104c290611b5e565b6002600555821515806107f95750600082115b6108155760405162461bcd60e51b81526004016104c290611cb0565b6000806108366009546001600160701b0380821692600160701b9092041690565b6001600160701b031691506001600160701b03169150818510801561085a57508084105b6108765760405162461bcd60e51b81526004016104c290611cf2565b60075460085460009182916001600160a01b039182169190811690871682148015906108b45750806001600160a01b0316876001600160a01b031614155b6108d05760405162461bcd60e51b81526004016104c290611d34565b88156108ea576108ea6001600160a01b038316888b611487565b8715610904576109046001600160a01b038216888a611487565b6040516370a0823160e01b81526001600160a01b038316906370a08231906109309030906004016118b3565b602060405180830381865afa15801561094d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109719190611b79565b6040516370a0823160e01b81529094506001600160a01b038216906370a08231906109a09030906004016118b3565b602060405180830381865afa1580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e19190611b79565b92505050600087856109f39190611b9a565b8311610a00576000610a14565b610a0a8886611b9a565b610a149084611b9a565b90506000610a228886611b9a565b8311610a2f576000610a43565b610a398886611b9a565b610a439084611b9a565b90506000821180610a545750600081115b610a705760405162461bcd60e51b81526004016104c290611d76565b6000600b5483610a809190611bb1565b610a8c866103e8611bb1565b610a969190611b9a565b90506000600b5483610aa89190611bb1565b610ab4866103e8611bb1565b610abe9190611b9a565b9050610aca8789611bb1565b610ad790620f4240611bb1565b610ae18284611bb1565b1015610aff5760405162461bcd60e51b81526004016104c290611db6565b5050610b0b84846113c0565b866001600160a01b0316336001600160a01b03167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82284848d8d604051610b549493929190611dc6565b60405180910390a35050600160055550505050505050565b60008060026005541415610b925760405162461bcd60e51b81526004016104c290611b5e565b60026005556007546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610bc89030906004016118b3565b602060405180830381865afa158015610be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c099190611b79565b6008546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610c3f9030906004016118b3565b602060405180830381865afa158015610c5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c809190611b79565b3060009081526020819052604081205491925090610ca1906103e890611b9a565b90506000610cae60025490565b905080610cbb8584611bb1565b610cc59190611be6565b955080610cd28484611bb1565b610cdc9190611be6565b9450600086118015610cee5750600085115b610d0a5760405162461bcd60e51b81526004016104c290611e36565b610d14308361150f565b600754610d2b906001600160a01b03168888611487565b600854610d42906001600160a01b03168887611487565b6007546040516370a0823160e01b81526001600160a01b03909116906370a0823190610d729030906004016118b3565b602060405180830381865afa158015610d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db39190611b79565b6008546040516370a0823160e01b81529195506001600160a01b0316906370a0823190610de49030906004016118b3565b602060405180830381865afa158015610e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e259190611b79565b9250610e3184846113c0565b866001600160a01b0316336001600160a01b03167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968888604051610e769291906119a3565b60405180910390a3505050506001600581905550915091565b6060600480546103d790611a6b565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610ee25760405162461bcd60e51b81526004016104c290611e9e565b610eef33858584036110bd565b5060019392505050565b6000610467338484611171565b6006546001600160a01b03163314610f305760405162461bcd60e51b81526004016104c290611f06565b6103e8811115610f525760405162461bcd60e51b81526004016104c290611f48565b600780546001600160a01b039586167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556008805494909516931692909217909255600a91909155600b55565b60026005541415610fc85760405162461bcd60e51b81526004016104c290611b5e565b60026005556007546040516370a0823160e01b81526110b6916001600160a01b0316906370a0823190610fff9030906004016118b3565b602060405180830381865afa15801561101c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110409190611b79565b6008546040516370a0823160e01b81526001600160a01b03909116906370a08231906110709030906004016118b3565b602060405180830381865afa15801561108d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b19190611b79565b6113c0565b6001600555565b6001600160a01b0383166110e35760405162461bcd60e51b81526004016104c290611fb0565b6001600160a01b0382166111095760405162461bcd60e51b81526004016104c290612018565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906111649085906118c7565b60405180910390a3505050565b6001600160a01b0383166111975760405162461bcd60e51b81526004016104c290612080565b6001600160a01b0382166111bd5760405162461bcd60e51b81526004016104c2906120e8565b6001600160a01b038316600090815260208190526040902054818110156111f65760405162461bcd60e51b81526004016104c290612150565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061122d908490611b12565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161127791906118c7565b60405180910390a35b50505050565b600060038211156112e757508060006112a0600283611be6565b6112ab906001611b12565b90505b818110156112e1579050806002816112c68186611be6565b6112d09190611b12565b6112da9190611be6565b90506112ae565b50919050565b81156112f1575060015b919050565b6001600160a01b03821661131c5760405162461bcd60e51b81526004016104c290612192565b806002600082825461132e9190611b12565b90915550506001600160a01b0382166000908152602081905260408120805483929061135b908490611b12565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061139e9085906118c7565b60405180910390a35050565b60008183106113b957816104de565b5090919050565b6001600160701b038083118015906113e15750806001600160701b03168211155b6113fd5760405162461bcd60e51b81526004016104c2906121d4565b600980546001600160701b03848116600160701b9081027fffffffff000000000000000000000000000000000000000000000000000000009093168288161792909217928390556040517f32dc813d3f262a05478ad1165d5701040e411d9a6e1684c8c2da1c8e6f3b80229361147a938184169391041690612205565b60405180910390a1505050565b61150a8363a9059cbb60e01b84846040516024016114a6929190612220565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526115e0565b505050565b6001600160a01b0382166115355760405162461bcd60e51b81526004016104c290612286565b6001600160a01b0382166000908152602081905260409020548181101561156e5760405162461bcd60e51b81526004016104c2906122ee565b6001600160a01b038316600090815260208190526040812083830390556002805484929061159d908490611b9a565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111649086906118c7565b6000611635826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661166f9092919063ffffffff16565b80519091501561150a57808060200190518101906116539190612311565b61150a5760405162461bcd60e51b81526004016104c29061238a565b606061167e8484600085611686565b949350505050565b6060824710156116a85760405162461bcd60e51b81526004016104c2906123f2565b843b6116c65760405162461bcd60e51b81526004016104c290612434565b600080866001600160a01b031685876040516116e29190612466565b60006040518083038185875af1925050503d806000811461171f576040519150601f19603f3d011682016040523d82523d6000602084013e611724565b606091505b509150915061173482828661173f565b979650505050505050565b6060831561174e5750816104de565b82511561175e5782518084602001fd5b8160405162461bcd60e51b81526004016104c291906117d6565b60005b8381101561179357818101518382015260200161177b565b838111156112805750506000910152565b60006117ae825190565b8084526020840193506117c5818560208601611778565b601f01601f19169290920192915050565b602080825281016104de81846117a4565b6001600160701b0381165b82525050565b6040810161180682856117e7565b6104de60208301846117e7565b60006001600160a01b03821661046b565b61182d81611813565b811461183857600080fd5b50565b803561046b81611824565b8061182d565b803561046b81611846565b6000806040838503121561186d5761186d600080fd5b6000611879858561183b565b925050602061188a8582860161184c565b9150509250929050565b8015156117f2565b6020810161046b8284611894565b6117f281611813565b6020810161046b82846118aa565b806117f2565b6020810161046b82846118c1565b6000806000606084860312156118ed576118ed600080fd5b60006118f9868661183b565b935050602061190a8682870161183b565b925050604061191b8682870161184c565b9150509250925092565b60ff81166117f2565b6020810161046b8284611925565b60006020828403121561195157611951600080fd5b600061167e848461183b565b60008060006060848603121561197557611975600080fd5b6000611981868661184c565b93505060206119928682870161184c565b925050604061191b8682870161183b565b604081016119b182856118c1565b6104de60208301846118c1565b600080604083850312156119d4576119d4600080fd5b60006119e0858561183b565b925050602061188a8582860161183b565b60008060008060808587031215611a0a57611a0a600080fd5b6000611a16878761183b565b9450506020611a278782880161183b565b9350506040611a388782880161184c565b9250506060611a498782880161184c565b91505092959194509250565b634e487b7160e01b600052602260045260246000fd5b600281046001821680611a7f57607f821691505b602082108114156112e1576112e1611a55565b60288152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206181527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015290505b60400190565b6020808252810161046b81611a92565b634e487b7160e01b600052601160045260246000fd5b60008219821115611b2557611b25611afc565b500190565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815290505b60200190565b6020808252810161046b81611b2a565b805161046b81611846565b600060208284031215611b8e57611b8e600080fd5b600061167e8484611b6e565b600082821015611bac57611bac611afc565b500390565b6000816000190483118215151615611bcb57611bcb611afc565b500290565b634e487b7160e01b600052601260045260246000fd5b600082611bf557611bf5611bd0565b500490565b601d8152602081017f696e73756666696369656e74206c6971756964697479206d696e74656400000081529050611b58565b6020808252810161046b81611bfa565b601b8152602081017f43616e206e6f74207377617020616674657220646561646c696e65000000000081529050611b58565b6020808252810161046b81611c3c565b601b8152602081017f4f757470757420616d6f756e74206e65656420746f206265203e30000000000081529050611b58565b6020808252810161046b81611c7e565b60148152602081017f4e6f7420656e6f756768206c697175696469747900000000000000000000000081529050611b58565b6020808252810161046b81611cc0565b600a8152602081017f494e56414c49445f544f0000000000000000000000000000000000000000000081529050611b58565b6020808252810161046b81611d02565b60198152602081017f494e53554646494349454e545f494e5055545f414d4f554e540000000000000081529050611b58565b6020808252810161046b81611d44565b60208082527f5468652072656d61696e696e6720782a79206973206c657373207468616e204b9101908152611b58565b6020808252810161046b81611d86565b60808101611dd482876118c1565b611de160208301866118c1565b611dee60408301856118c1565b611dfb60608301846118c1565b95945050505050565b601d8152602081017f496e73756666696369656e74206c6971756964697479206275726e656400000081529050611b58565b6020808252810161046b81611e04565b60258152602081017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781527f207a65726f00000000000000000000000000000000000000000000000000000060208201529050611ae6565b6020808252810161046b81611e46565b602f8152602081017f63616e206f6e6c7920626520696e697469616c697a656420627920746865206681527f6163746f727920636f6e7472616374000000000000000000000000000000000060208201529050611ae6565b6020808252810161046b81611eae565b60108152602081017f66656552617465206f76657220312e300000000000000000000000000000000081529050611b58565b6020808252810161046b81611f16565b60248152602081017f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481527f726573730000000000000000000000000000000000000000000000000000000060208201529050611ae6565b6020808252810161046b81611f58565b60228152602081017f45524332303a20617070726f766520746f20746865207a65726f20616464726581527f737300000000000000000000000000000000000000000000000000000000000060208201529050611ae6565b6020808252810161046b81611fc0565b60258152602081017f45524332303a207472616e736665722066726f6d20746865207a65726f20616481527f647265737300000000000000000000000000000000000000000000000000000060208201529050611ae6565b6020808252810161046b81612028565b60238152602081017f45524332303a207472616e7366657220746f20746865207a65726f206164647281527f657373000000000000000000000000000000000000000000000000000000000060208201529050611ae6565b6020808252810161046b81612090565b60268152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206281527f616c616e6365000000000000000000000000000000000000000000000000000060208201529050611ae6565b6020808252810161046b816120f8565b601f8152602081017f45524332303a206d696e7420746f20746865207a65726f20616464726573730081529050611b58565b6020808252810161046b81612160565b60108152602081017f55696e74313132204f564552464c4f570000000000000000000000000000000081529050611b58565b6020808252810161046b816121a2565b600061046b6121f96001600160701b03841681565b90565b6117f2816121e4565b6040810161221382856121fc565b6104de60208301846121fc565b604081016119b182856118aa565b60218152602081017f45524332303a206275726e2066726f6d20746865207a65726f2061646472657381527f730000000000000000000000000000000000000000000000000000000000000060208201529050611ae6565b6020808252810161046b8161222e565b60228152602081017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e81527f636500000000000000000000000000000000000000000000000000000000000060208201529050611ae6565b6020808252810161046b81612296565b80151561182d565b805161046b816122fe565b60006020828403121561232657612326600080fd5b600061167e8484612306565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f7420737563636565640000000000000000000000000000000000000000000060208201529050611ae6565b6020808252810161046b81612332565b60268152602081017f416464726573733a20696e73756666696369656e742062616c616e636520666f81527f722063616c6c000000000000000000000000000000000000000000000000000060208201529050611ae6565b6020808252810161046b8161239a565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529050611b58565b6020808252810161046b81612402565b600061244e825190565b61245c818560208601611778565b9290920192915050565b61046b818361244456fea2646970667358221220479cce3b089b64d5b776ff62e1f77cd423e1a7169232a12f585878144e8b3e9364736f6c634300080a003360806040523480156200001157600080fd5b5060405162001322380380620013228339810160408190526200003491620002c4565b8351849084906200004d90600390602085019062000093565b5080516200006390600490602084019062000093565b5050600580546001600160a01b0319166001600160a01b03949094169390931790925560065550620003b2915050565b828054620000a19062000381565b90600052602060002090601f016020900481019282620000c5576000855562000110565b82601f10620000e057805160ff191683800117855562000110565b8280016001018555821562000110579182015b8281111562000110578251825591602001919060010190620000f3565b506200011e92915062000122565b5090565b5b808211156200011e576000815560010162000123565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681016001600160401b038111828210171562000177576200017762000139565b6040525050565b60006200018a60405190565b90506200019882826200014f565b919050565b60006001600160401b03821115620001b957620001b962000139565b601f19601f83011660200192915050565b60005b83811015620001e7578181015183820152602001620001cd565b83811115620001f7576000848401525b50505050565b6000620002146200020e846200019d565b6200017e565b905082815260208101848484011115620002315762000231600080fd5b6200023e848285620001ca565b509392505050565b600082601f8301126200025c576200025c600080fd5b81516200026e848260208601620001fd565b949350505050565b60006001600160a01b0382165b92915050565b620002948162000276565b8114620002a057600080fd5b50565b8051620002838162000289565b8062000294565b80516200028381620002b0565b60008060008060808587031215620002df57620002df600080fd5b84516001600160401b03811115620002fa57620002fa600080fd5b620003088782880162000246565b602087015190955090506001600160401b038111156200032b576200032b600080fd5b620003398782880162000246565b93505060406200034c87828801620002a3565b92505060606200035f87828801620002b7565b91505092959194509250565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200039657607f821691505b60208210811415620003ac57620003ac6200036b565b50919050565b610f6080620003c26000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac146101da578063a457c2d7146101ed578063a9059cbb14610200578063dd62ed3e1461021357600080fd5b806340c10f191461019457806370a08231146101a957806395d89b41146101d257600080fd5b806318160ddd116100c857806318160ddd1461014d57806323b872dd1461015e578063313ce56714610171578063395093511461018157600080fd5b806306fdde03146100ef578063075461721461010d578063095ea7b31461012d575b600080fd5b6100f761024c565b604051610104919061089e565b60405180910390f35b600554610120906001600160a01b031681565b60405161010491906108cf565b61014061013b366004610910565b6102de565b6040516101049190610955565b6002545b6040516101049190610969565b61014061016c366004610977565b6102f5565b60065460405161010491906109d0565b61014061018f366004610910565b610369565b6101a76101a2366004610910565b6103a5565b005b6101516101b73660046109de565b6001600160a01b031660009081526020819052604090205490565b6100f7610416565b6101a76101e8366004610910565b610425565b6101406101fb366004610910565b61048a565b61014061020e366004610910565b6104e5565b610151610221366004610a07565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461025b90610a50565b80601f016020809104026020016040519081016040528092919081815260200182805461028790610a50565b80156102d45780601f106102a9576101008083540402835291602001916102d4565b820191906000526020600020905b8154815290600101906020018083116102b757829003601f168201915b5050505050905090565b60006102eb3384846104f2565b5060015b92915050565b60006103028484846105a6565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561034f5760405162461bcd60e51b815260040161034690610ad7565b60405180910390fd5b61035c85338584036104f2565b60019150505b9392505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102eb9185906103a0908690610afd565b6104f2565b6005546001600160a01b031633146103cf5760405162461bcd60e51b815260040161034690610b6d565b6103d982826106bb565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885828260405161040a929190610b7d565b60405180910390a15050565b60606004805461025b90610a50565b6005546001600160a01b0316331461044f5760405162461bcd60e51b815260040161034690610b6d565b610459828261076f565b7fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5828260405161040a929190610b7d565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104ce5760405162461bcd60e51b815260040161034690610bf0565b6104db33858584036104f2565b5060019392505050565b60006102eb3384846105a6565b6001600160a01b0383166105185760405162461bcd60e51b815260040161034690610c58565b6001600160a01b03821661053e5760405162461bcd60e51b815260040161034690610cc0565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610599908590610969565b60405180910390a3505050565b6001600160a01b0383166105cc5760405162461bcd60e51b815260040161034690610d28565b6001600160a01b0382166105f25760405162461bcd60e51b815260040161034690610d90565b6001600160a01b0383166000908152602081905260409020548181101561062b5760405162461bcd60e51b815260040161034690610df8565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610662908490610afd565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106ac9190610969565b60405180910390a35b50505050565b6001600160a01b0382166106e15760405162461bcd60e51b815260040161034690610e08565b80600260008282546106f39190610afd565b90915550506001600160a01b03821660009081526020819052604081208054839290610720908490610afd565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610763908590610969565b60405180910390a35050565b6001600160a01b0382166107955760405162461bcd60e51b815260040161034690610e9b565b6001600160a01b038216600090815260208190526040902054818110156107ce5760405162461bcd60e51b815260040161034690610f03565b6001600160a01b03831660009081526020819052604081208383039055600280548492906107fd908490610f13565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610599908690610969565b60005b8381101561085b578181015183820152602001610843565b838111156106b55750506000910152565b6000610876825190565b80845260208401935061088d818560208601610840565b601f01601f19169290920192915050565b60208082528101610362818461086c565b60006001600160a01b0382166102ef565b6108c9816108af565b82525050565b602081016102ef82846108c0565b6108e6816108af565b81146108f157600080fd5b50565b80356102ef816108dd565b806108e6565b80356102ef816108ff565b6000806040838503121561092657610926600080fd5b600061093285856108f4565b925050602061094385828601610905565b9150509250929050565b8015156108c9565b602081016102ef828461094d565b806108c9565b602081016102ef8284610963565b60008060006060848603121561098f5761098f600080fd5b600061099b86866108f4565b93505060206109ac868287016108f4565b92505060406109bd86828701610905565b9150509250925092565b60ff81166108c9565b602081016102ef82846109c7565b6000602082840312156109f3576109f3600080fd5b60006109ff84846108f4565b949350505050565b60008060408385031215610a1d57610a1d600080fd5b6000610a2985856108f4565b9250506020610943858286016108f4565b634e487b7160e01b600052602260045260246000fd5b600281046001821680610a6457607f821691505b60208210811415610a7757610a77610a3a565b50919050565b60288152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206181527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015290505b60400190565b602080825281016102ef81610a7d565b634e487b7160e01b600052601160045260246000fd5b60008219821115610b1057610b10610ae7565b500190565b60228152602081017f6f6e6c79206d696e7465722063616e2063616c6c20746869732066756e63746981527f6f6e00000000000000000000000000000000000000000000000000000000000060208201529050610ad1565b602080825281016102ef81610b15565b60408101610b8b82856108c0565b6103626020830184610963565b60258152602081017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781527f207a65726f00000000000000000000000000000000000000000000000000000060208201529050610ad1565b602080825281016102ef81610b98565b60248152602081017f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481527f726573730000000000000000000000000000000000000000000000000000000060208201529050610ad1565b602080825281016102ef81610c00565b60228152602081017f45524332303a20617070726f766520746f20746865207a65726f20616464726581527f737300000000000000000000000000000000000000000000000000000000000060208201529050610ad1565b602080825281016102ef81610c68565b60258152602081017f45524332303a207472616e736665722066726f6d20746865207a65726f20616481527f647265737300000000000000000000000000000000000000000000000000000060208201529050610ad1565b602080825281016102ef81610cd0565b60238152602081017f45524332303a207472616e7366657220746f20746865207a65726f206164647281527f657373000000000000000000000000000000000000000000000000000000000060208201529050610ad1565b602080825281016102ef81610d38565b60268152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206281527f616c616e6365000000000000000000000000000000000000000000000000000060208201529050610ad1565b602080825281016102ef81610da0565b602080825281016102ef81601f81527f45524332303a206d696e7420746f20746865207a65726f206164647265737300602082015260400190565b60218152602081017f45524332303a206275726e2066726f6d20746865207a65726f2061646472657381527f730000000000000000000000000000000000000000000000000000000000000060208201529050610ad1565b602080825281016102ef81610e43565b60228152602081017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e81527f636500000000000000000000000000000000000000000000000000000000000060208201529050610ad1565b602080825281016102ef81610eab565b600082821015610f2557610f25610ae7565b50039056fea264697066735822122030dbcddff7c5adae0cb6a0a93ff26020b7b95458a89e3f448fc29b21014a567664736f6c634300080a0033a2646970667358221220d8908d32f489632632030f029bb91d2e763c6dd9156477542f045c72fec6287464736f6c634300080a0033",
  "devdoc": {
    "details": "Factory contract to deploy new pools periodically      Each pool(product) will have a unique naughtyId      Each pool will have its pool token      PolicyToken - Stablecoin      Token 0 may change but Token 1 is always stablecoin.",
    "kind": "dev",
    "methods": {
      "deployPolicyToken(string,uint256)": {
        "params": {
          "_decimals": "Decimals of the policyToken",
          "_policyTokenName": "Name of the policyToken"
        },
        "returns": {
          "_0": "tokenAddress PolicyToken address"
        }
      },
      "deployPool(address,address,uint256,uint256)": {
        "params": {
          "_deadline": "Deadline of the pool",
          "_feeRate": "Fee rate given to LP holders",
          "_policyTokenAddress": "Address of policy token",
          "_stablecoin": "Address of the stable coin"
        },
        "returns": {
          "_0": "poolAddress Address of the pool"
        }
      },
      "getInitCodeHashForPolicyToken(string,uint256)": {
        "details": "For test/task convinience, pre-compute the address      Ethers.js:      Address = ethers.utils.getCreate2Address(factory address, salt, INIT_CODE_HASH)",
        "params": {
          "_decimals": "Token decimals of this policy token",
          "_tokenName": "Name of the policy token to be deployed"
        }
      },
      "getLatestTokenAddress()": {
        "returns": {
          "_0": "tokenAddress Latest token address"
        }
      },
      "getPairAddress(address,address)": {
        "params": {
          "_tokenAddress1": "Address of token1",
          "_tokenAddress2": "Address of toekn2"
        },
        "returns": {
          "_0": "Pool address of the two tokens"
        }
      },
      "renounceOwnership()": {
        "details": "Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner."
      },
      "setPolicyCoreAddress(address)": {
        "details": "Only callable by the owner         < PolicyCore should be the minter of policyToken >         < This process is done inside constructor >",
        "params": {
          "_policyCore": "Address of policyCore contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "newOwner": "Address of the new owner"
        }
      }
    },
    "title": "Naughty Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployPolicyToken(string,uint256)": {
        "notice": "For each round we need to first create the policytoken(ERC20)"
      },
      "deployPool(address,address,uint256,uint256)": {
        "notice": "After deploy the policytoken and get the address,         we deploy the policyToken - stablecoin pool contract"
      },
      "getInitCodeHashForPolicyToken(string,uint256)": {
        "notice": "Get the INIT_CODE_HASH for policy tokens with parameters"
      },
      "getLatestTokenAddress()": {
        "notice": "Get the latest token address just deployed"
      },
      "getPairAddress(address,address)": {
        "notice": "Get the pair address deployed by the factory         PolicyToken address first, and then stablecoin address         The order of the tokens will be sorted inside the function"
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."
      },
      "setPolicyCoreAddress(address)": {
        "notice": "Remember to call this function to set the policyCore address"
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`)."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29210,
        "contract": "contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 22358,
        "contract": "contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 22361,
        "contract": "contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 22364,
        "contract": "contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory",
        "label": "allTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 22366,
        "contract": "contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory",
        "label": "_nextId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 22368,
        "contract": "contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory",
        "label": "policyCore",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}