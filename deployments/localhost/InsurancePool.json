{
  "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_emergencyPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_degisLottery",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdtAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "BuyNewPolicy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFactor",
          "type": "uint256"
        }
      ],
      "name": "CollateralFactorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newFrozenTime",
          "type": "uint256"
        }
      ],
      "name": "FrozenTimeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "policyFlowAddress",
          "type": "address"
        }
      ],
      "name": "PolicyFlowChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_premiumToEmergency",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_premiumToLottery",
          "type": "uint256"
        }
      ],
      "name": "PremiumDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toLP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toLottery",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toEmergency",
          "type": "uint256"
        }
      ],
      "name": "RewardDistributionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LPValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activePremiums",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableCapacity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_payoff",
          "type": "uint256"
        }
      ],
      "name": "checkCapacity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "degisLottery",
      "outputs": [
        {
          "internalType": "contract IDegisLottery",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frozenTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUnlockedFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_unlockedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_userBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_premium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payoff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_realPayoff",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "payClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyFlow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseIncentiveAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realStakingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "revertAllUnstakeRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "revertUnstakeRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardDistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_factor",
          "type": "uint256"
        }
      ],
      "name": "setCollateralFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFrozenTime",
          "type": "uint256"
        }
      ],
      "name": "setFrozenTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "_newDistribution",
          "type": "uint256[3]"
        }
      ],
      "name": "setIncomeDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyFlowAddress",
          "type": "address"
        }
      ],
      "name": "setPolicyFlow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_premium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payoff",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "updateWhenBuy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_premium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payoff",
          "type": "uint256"
        }
      ],
      "name": "updateWhenExpire",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x43fd2370258530cb3ecbf94b95490c4357d79e6c4f36f8f76920f0e0850e0775",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "transactionIndex": 0,
    "gasUsed": "3156704",
    "logsBloom": "0x
    "blockHash": "0xf9b6a4f3f86a324cf1bc0756464b55ba8c744739624462ff37d6bd2171db3603",
    "transactionHash": "0x43fd2370258530cb3ecbf94b95490c4357d79e6c4f36f8f76920f0e0850e0775",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11,
        "transactionHash": "0x43fd2370258530cb3ecbf94b95490c4357d79e6c4f36f8f76920f0e0850e0775",
        "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf9b6a4f3f86a324cf1bc0756464b55ba8c744739624462ff37d6bd2171db3603"
      }
    ],
    "blockNumber": 11,
    "cumulativeGasUsed": "3156704",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9"
  ],
  "numDeployments": 1,
  "solcInputHash": "891f6e83b97076056766f10193ee5514",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_emergencyPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_degisLottery\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"BuyNewPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFactor\",\"type\":\"uint256\"}],\"name\":\"CollateralFactorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newFrozenTime\",\"type\":\"uint256\"}],\"name\":\"FrozenTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"policyFlowAddress\",\"type\":\"address\"}],\"name\":\"PolicyFlowChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_premiumToEmergency\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_premiumToLottery\",\"type\":\"uint256\"}],\"name\":\"PremiumDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toLP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toLottery\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toEmergency\",\"type\":\"uint256\"}],\"name\":\"RewardDistributionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePremiums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_payoff\",\"type\":\"uint256\"}],\"name\":\"checkCapacity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"degisLottery\",\"outputs\":[{\"internalType\":\"contract IDegisLottery\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frozenTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnlockedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_userBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payoff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_realPayoff\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"payClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyFlow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseIncentiveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realStakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"revertAllUnstakeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"revertUnstakeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_factor\",\"type\":\"uint256\"}],\"name\":\"setCollateralFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFrozenTime\",\"type\":\"uint256\"}],\"name\":\"setFrozenTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"_newDistribution\",\"type\":\"uint256[3]\"}],\"name\":\"setIncomeDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyFlowAddress\",\"type\":\"address\"}],\"name\":\"setPolicyFlow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payoff\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"updateWhenBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payoff\",\"type\":\"uint256\"}],\"name\":\"updateWhenExpire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"checkCapacity(uint256)\":{\"params\":{\"_payoff\":\"Payoff of the policy to be bought\"},\"returns\":{\"_0\":\"Whether there is enough capacity in the pool for this payoff\"}},\"constructor\":{\"params\":{\"_degisLottery\":\"Lottery address\",\"_emergencyPool\":\"Emergency pool address\",\"_usdtAddress\":\"USDT address\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getUnlockedFor(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_unlockedAmount\":\"Unlocked amount of the pool\"}},\"getUserBalance(address)\":{\"details\":\"Used in many places so give it a seperate function\",\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_userBalance\":\"Real balance of this user\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"payClaim(uint256,uint256,uint256,address)\":{\"params\":{\"_payoff\":\"Max payoff of the policy\",\"_premium\":\"Premium of the policy\",\"_realPayoff\":\"Real payoff of the policy\",\"_user\":\"Address of the policy claimer\"}},\"renounceOwnership()\":{\"details\":\"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.\"},\"revertAllUnstakeRequest(address)\":{\"params\":{\"_user\":\"user's address\"}},\"revertUnstakeRequest(address)\":{\"params\":{\"_user\":\"user's address\"}},\"setCollateralFactor(uint256)\":{\"params\":{\"_factor\":\"The new collateral factor\"}},\"setFrozenTime(uint256)\":{\"params\":{\"_newFrozenTime\":\"New frozen time, in timestamp(s)\"}},\"setIncomeDistribution(uint256[3])\":{\"params\":{\"_newDistribution\":\"New distribution [LP, Lottery, Emergency]\"}},\"stake(uint256)\":{\"params\":{\"_amount\":\"The amount that the user want to stake\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"newOwner\":\"Address of the new owner\"}},\"unstake(uint256)\":{\"details\":\"Only unstake by yourself\",\"params\":{\"_amount\":\"The amount that the user want to unstake\"}},\"updateWhenBuy(uint256,uint256,address)\":{\"details\":\"Capacity check is done before calling this function\",\"params\":{\"_payoff\":\"Policy's payoff (max payoff)\",\"_premium\":\"Policy's premium\",\"_user\":\"Address of the buyer\"}},\"updateWhenExpire(uint256,uint256)\":{\"params\":{\"_payoff\":\"Policy's payoff (max payoff)\",\"_premium\":\"Policy's premium\"}}},\"title\":\"Insurance Pool\",\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"checkCapacity(uint256)\":{\"notice\":\"Check the conditions when receive new buying request\"},\"constructor\":{\"notice\":\"Constructor function\"},\"getUnlockedFor(address)\":{\"notice\":\"Get the balance that one user(LP) can unlock\"},\"getUserBalance(address)\":{\"notice\":\"Get the real balance: LPValue * LP_Num\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"payClaim(uint256,uint256,uint256,address)\":{\"notice\":\"Pay a claim\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner.\"},\"revertAllUnstakeRequest(address)\":{\"notice\":\"revert all unstake requests for a user\"},\"revertUnstakeRequest(address)\":{\"notice\":\"revert the last unstake request for a user\"},\"setCollateralFactor(uint256)\":{\"notice\":\"Change the collateral factor\"},\"setFrozenTime(uint256)\":{\"notice\":\"Set a new frozen time\"},\"setIncomeDistribution(uint256[3])\":{\"notice\":\"Set the premium reward distribution\"},\"setPolicyFlow(address)\":{\"notice\":\"Set the address of policyFlow\"},\"stake(uint256)\":{\"notice\":\"LPs stake assets into the pool\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).\"},\"unstake(uint256)\":{\"notice\":\"Unstake from the pool (May fail if a claim happens before this operation)\"},\"unstakeMax()\":{\"notice\":\"Unstake the max amount of a user\"},\"updateWhenBuy(uint256,uint256,address)\":{\"notice\":\"Update the pool variables when buying policies\"},\"updateWhenExpire(uint256,uint256)\":{\"notice\":\"Update the status when a policy expires\"}},\"notice\":\"Insurance pool is the reserved risk pool for flight delay product.         For simplicity, some state variables are in the InsurancePoolStore contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/miserable-flight/InsurancePool.sol\":\"InsurancePool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x86ebc6cea2b539c2d4a79a4754f7c90c43c45c9aaf0aab32ecffb1565afc5e0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x53a0bb51b8a505e04aaf065de27c0e31cadf38194f8a9a6ec92b7bcd3c5826e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"contracts/libraries/SafePRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\\n/**\\n * @notice This prb-math version is 2.4.1\\n *         https://github.com/hifi-finance/prb-math\\n */\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary SafePRBMath {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xde32d51501046713a6f2a8e808317352efe7ca7099d6aa985e75df48ec1ec244\",\"license\":\"MIT\"},\"contracts/lucky-box/interfaces/IDegisLottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IDegisLottery {\\n    /**\\n     * @notice Inject funds\\n     * @param _amount amount to inject in USD\\n     * @dev Callable by operator\\n     */\\n    function injectFunds(uint256 _amount) external;\\n\\n    /**\\n     * @notice View current lottery id\\n     */\\n    function currentLotteryId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaadcb8f8666b8394f380f7226f84624087bf14dce5e7439c02fb0a745fe57a23\",\"license\":\"MIT\"},\"contracts/miserable-flight/InsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../libraries/SafePRBMath.sol\\\";\\n\\nimport \\\"../lucky-box/interfaces/IDegisLottery.sol\\\";\\n\\nimport \\\"../utils/OwnableWithoutContext.sol\\\";\\n\\nimport \\\"./abstracts/InsurancePoolStore.sol\\\";\\n\\n/**\\n * @title  Insurance Pool\\n * @notice Insurance pool is the reserved risk pool for flight delay product.\\n *         For simplicity, some state variables are in the InsurancePoolStore contract.\\n */\\ncontract InsurancePool is\\n    ERC20(\\\"Degis FlightDelay LPToken\\\", \\\"DLP\\\"),\\n    InsurancePoolStore,\\n    OwnableWithoutContext,\\n    ReentrancyGuard\\n{\\n    using SafeERC20 for IERC20;\\n    using SafePRBMath for uint256;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Other Contracts ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    IERC20 public USDT;\\n    IDegisLottery public degisLottery;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Constructor function\\n     * @param _emergencyPool Emergency pool address\\n     * @param _degisLottery Lottery address\\n     * @param _usdtAddress USDT address\\n     */\\n    constructor(\\n        address _emergencyPool,\\n        address _degisLottery,\\n        address _usdtAddress\\n    ) {\\n        // Initialize some factors\\n        collateralFactor = 1e18;\\n        lockedRatio = 1e18;\\n        LPValue = 1e18;\\n\\n        emergencyPool = _emergencyPool;\\n\\n        USDT = IERC20(_usdtAddress);\\n\\n        degisLottery = IDegisLottery(_degisLottery);\\n\\n        // Initial distribution, 0: LP 1: Lottery 2: Emergency\\n        rewardDistribution[0] = 50;\\n        rewardDistribution[1] = 40;\\n        rewardDistribution[2] = 10;\\n\\n        frozenTime = 7 days;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Only the policyFlow contract can call some functions\\n     */\\n    modifier onlyPolicyFlow() {\\n        require(\\n            _msgSender() == policyFlow,\\n            \\\"Only the policyFlow contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice The address can not be zero\\n     */\\n    modifier notZeroAddress(address _address) {\\n        require(_address != address(0), \\\"Can not be zero address\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice There is a frozen time for unstaking\\n     */\\n    modifier afterFrozenTime(address _user) {\\n        require(\\n            block.timestamp >= userInfo[_user].depositTime + frozenTime,\\n            \\\"Can not withdraw until the fronzen time\\\"\\n        );\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get the real balance: LPValue * LP_Num\\n     * @dev Used in many places so give it a seperate function\\n     * @param _user User's address\\n     * @return _userBalance Real balance of this user\\n     */\\n    function getUserBalance(address _user)\\n        public\\n        view\\n        returns (uint256 _userBalance)\\n    {\\n        uint256 lp_num = balanceOf(_user);\\n        _userBalance = lp_num.mul(LPValue);\\n    }\\n\\n    /**\\n     * @notice Get the balance that one user(LP) can unlock\\n     * @param _user User's address\\n     * @return _unlockedAmount Unlocked amount of the pool\\n     */\\n    function getUnlockedFor(address _user)\\n        public\\n        view\\n        returns (uint256 _unlockedAmount)\\n    {\\n        uint256 userBalance = getUserBalance(_user);\\n        _unlockedAmount = availableCapacity >= userBalance\\n            ? userBalance\\n            : availableCapacity;\\n    }\\n\\n    /**\\n     * @notice Check the conditions when receive new buying request\\n     * @param _payoff Payoff of the policy to be bought\\n     * @return Whether there is enough capacity in the pool for this payoff\\n     */\\n    function checkCapacity(uint256 _payoff) external view returns (bool) {\\n        return availableCapacity >= _payoff;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Owner Functions *********************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Set a new frozen time\\n     * @param _newFrozenTime New frozen time, in timestamp(s)\\n     */\\n    function setFrozenTime(uint256 _newFrozenTime) external onlyOwner {\\n        frozenTime = _newFrozenTime;\\n        emit FrozenTimeChanged(_newFrozenTime);\\n    }\\n\\n    /**\\n     * @notice Set the address of policyFlow\\n     */\\n    function setPolicyFlow(address _policyFlowAddress)\\n        public\\n        onlyOwner\\n        notZeroAddress(_policyFlowAddress)\\n    {\\n        policyFlow = _policyFlowAddress;\\n        emit PolicyFlowChanged(_policyFlowAddress);\\n    }\\n\\n    /**\\n     * @notice Set the premium reward distribution\\n     * @param _newDistribution New distribution [LP, Lottery, Emergency]\\n     */\\n    function setIncomeDistribution(uint256[3] memory _newDistribution)\\n        public\\n        onlyOwner\\n    {\\n        uint256 sum = _newDistribution[0] +\\n            _newDistribution[1] +\\n            _newDistribution[2];\\n        require(sum == 100, \\\"Reward distribution must sum to 100\\\");\\n\\n        for (uint256 i = 0; i < 3; i++) {\\n            rewardDistribution[i] = _newDistribution[i];\\n        }\\n        emit RewardDistributionChanged(\\n            _newDistribution[0],\\n            _newDistribution[1],\\n            _newDistribution[2]\\n        );\\n    }\\n\\n    /**\\n     * @notice Change the collateral factor\\n     * @param _factor The new collateral factor\\n     */\\n    function setCollateralFactor(uint256 _factor) public onlyOwner {\\n        require(_factor > 0, \\\"Collateral Factor should be larger than 0\\\");\\n        uint256 oldFactor = collateralFactor;\\n        collateralFactor = _factor.div(100);\\n        emit CollateralFactorChanged(oldFactor, _factor);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice LPs stake assets into the pool\\n     * @param _amount The amount that the user want to stake\\n     */\\n    function stake(uint256 _amount)\\n        external\\n        notZeroAddress(_msgSender())\\n        nonReentrant\\n    {\\n        require(\\n            IERC20(USDT).balanceOf(_msgSender()) >= _amount && _amount > 0,\\n            \\\"You do not have enough USD or input 0 amount\\\"\\n        );\\n\\n        _deposit(_msgSender(), _amount);\\n    }\\n\\n    /**\\n     * @notice Unstake from the pool (May fail if a claim happens before this operation)\\n     * @dev Only unstake by yourself\\n     * @param _amount The amount that the user want to unstake\\n     */\\n    function unstake(uint256 _amount)\\n        external\\n        notZeroAddress(_msgSender())\\n        afterFrozenTime(_msgSender())\\n        nonReentrant\\n    {\\n        address _user = _msgSender();\\n\\n        uint256 userBalance = getUserBalance(_user);\\n        require(\\n            _amount <= userBalance && _amount > 0,\\n            \\\"Not enough balance to be unlocked or your withdraw amount is 0\\\"\\n        );\\n\\n        uint256 unlocked = totalStakingBalance - lockedBalance;\\n        uint256 unstakeAmount = _amount;\\n\\n        // Will jump this part when the pool has enough liquidity\\n        if (_amount > unlocked) {\\n            uint256 remainingURequest = _amount - unlocked;\\n            unstakeRequests[_user].push(\\n                UnstakeRequest(remainingURequest, 0, false)\\n            );\\n            unstakeQueue.push(_user);\\n            unstakeAmount = unlocked; // only withdraw the unlocked value\\n            userInfo[_user].pendingBalance += remainingURequest;\\n        }\\n\\n        _withdraw(_user, unstakeAmount);\\n    }\\n\\n    /**\\n     * @notice Unstake the max amount of a user\\n     */\\n    function unstakeMax()\\n        external\\n        notZeroAddress(_msgSender())\\n        afterFrozenTime(_msgSender())\\n        nonReentrant\\n    {\\n        address _user = _msgSender();\\n\\n        uint256 userBalance = getUserBalance(_user);\\n\\n        uint256 unlocked = totalStakingBalance - lockedBalance;\\n        uint256 unstakeAmount = userBalance;\\n\\n        // Will jump this part when the pool has enough liquidity\\n        if (userBalance > unlocked) {\\n            uint256 remainingURequest = userBalance - unlocked;\\n            unstakeRequests[_user].push(\\n                UnstakeRequest(remainingURequest, 0, false)\\n            );\\n            unstakeQueue.push(_user);\\n            unstakeAmount = unlocked; // only withdraw the unlocked value\\n            userInfo[_user].pendingBalance += remainingURequest;\\n        }\\n\\n        _withdraw(_user, unstakeAmount);\\n    }\\n\\n    /**\\n     * @notice Update the pool variables when buying policies\\n     * @dev Capacity check is done before calling this function\\n     * @param _premium Policy's premium\\n     * @param _payoff Policy's payoff (max payoff)\\n     * @param _user Address of the buyer\\n     */\\n    function updateWhenBuy(\\n        uint256 _premium,\\n        uint256 _payoff,\\n        address _user\\n    ) external onlyPolicyFlow {\\n        // Update pool status\\n        lockedBalance += _payoff;\\n        activePremiums += _premium;\\n        availableCapacity -= _payoff;\\n\\n        // Update lockedRatio\\n        _updateLockedRatio();\\n\\n        // Remember approval\\n        USDT.safeTransferFrom(_user, address(this), _premium);\\n\\n        emit BuyNewPolicy(_user, _premium, _payoff);\\n    }\\n\\n    /**\\n     * @notice Update the status when a policy expires\\n     * @param _premium Policy's premium\\n     * @param _payoff Policy's payoff (max payoff)\\n     */\\n    function updateWhenExpire(uint256 _premium, uint256 _payoff)\\n        external\\n        onlyPolicyFlow\\n    {\\n        // Update pool status\\n        activePremiums -= _premium;\\n        lockedBalance -= _payoff;\\n        availableCapacity += _payoff;\\n\\n        // Distribute the premium\\n        _distributePremium(_premium);\\n\\n        // If there is any unstake request in the queue\\n        uint256 remainingPayoff = _payoff;\\n        if (unstakeQueue.length > 0) {\\n            _dealUnstakeQueue(remainingPayoff);\\n        }\\n\\n        _updateLPValue();\\n    }\\n\\n    /**\\n     * @notice Pay a claim\\n     * @param _premium Premium of the policy\\n     * @param _payoff Max payoff of the policy\\n     * @param _realPayoff Real payoff of the policy\\n     * @param _user Address of the policy claimer\\n     */\\n    function payClaim(\\n        uint256 _premium,\\n        uint256 _payoff,\\n        uint256 _realPayoff,\\n        address _user\\n    ) external onlyPolicyFlow notZeroAddress(_user) {\\n        // Update the pool status\\n        lockedBalance -= _payoff;\\n        totalStakingBalance -= _realPayoff;\\n        realStakingBalance -= _realPayoff;\\n        activePremiums -= _premium;\\n\\n        // Distribute the premium\\n        _distributePremium(_premium);\\n\\n        // Pay the claim\\n        USDT.safeTransfer(_user, _realPayoff);\\n\\n        _updateLPValue();\\n    }\\n\\n    /**\\n     * @notice revert the last unstake request for a user\\n     * @param _user user's address\\n     */\\n    function revertUnstakeRequest(address _user)\\n        public\\n        notZeroAddress(_user)\\n    {\\n        require(\\n            _msgSender() == _user || _msgSender() == owner(),\\n            \\\"Only the owner or the user himself can revert\\\"\\n        );\\n\\n        UnstakeRequest[] storage userRequests = unstakeRequests[_user];\\n        require(\\n            userRequests.length > 0,\\n            \\\"this user has no pending unstake request\\\"\\n        );\\n\\n        uint256 index = userRequests.length - 1;\\n        uint256 remainingRequest = userRequests[index].pendingAmount -\\n            userRequests[index].fulfilledAmount;\\n\\n        realStakingBalance += remainingRequest;\\n        userInfo[_user].pendingBalance -= remainingRequest;\\n\\n        _removeOneRequest(_user);\\n    }\\n\\n    /**\\n     * @notice revert all unstake requests for a user\\n     * @param _user user's address\\n     */\\n    function revertAllUnstakeRequest(address _user)\\n        public\\n        notZeroAddress(_user)\\n    {\\n        require(\\n            _msgSender() == _user || _msgSender() == owner(),\\n            \\\"Only the owner or the user himself can revert\\\"\\n        );\\n\\n        UnstakeRequest[] storage userRequests = unstakeRequests[_user];\\n        require(\\n            userRequests.length > 0,\\n            \\\"this user has no pending unstake request\\\"\\n        );\\n        _removeAllRequest(_user);\\n        delete unstakeRequests[_user];\\n\\n        uint256 remainingRequest = userInfo[_user].pendingBalance;\\n        realStakingBalance += remainingRequest;\\n        userInfo[_user].pendingBalance = 0;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ********************************** Internal Functions ********************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Remove all unstake requests for a user\\n     * @param _user User's address\\n     */\\n    function _removeAllRequest(address _user) internal {\\n        for (uint256 i = 0; i < unstakeRequests[_user].length; i += 1) {\\n            _removeOneRequest(_user);\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove one(the latest) unstake requests for a user\\n     * @param _user User's address\\n     */\\n    function _removeOneRequest(address _user) internal {\\n        uint256 index = unstakeQueue.length - 1;\\n\\n        while (index >= 0) {\\n            if (unstakeQueue[index] == _user) break;\\n            index -= 1;\\n        }\\n\\n        for (uint256 j = index; j < unstakeQueue.length - 1; j += 1) {\\n            unstakeQueue[j] = unstakeQueue[j + 1];\\n        }\\n\\n        unstakeQueue.pop();\\n    }\\n\\n    /**\\n     * @notice Finish the deposit process\\n     * @dev LPValue will not change during deposit\\n     * @param _user Address of the user who deposits\\n     * @param _amount Amount he deposits\\n     */\\n    function _deposit(address _user, uint256 _amount) internal {\\n        uint256 amountWithFactor = _amount.mul(collateralFactor);\\n\\n        // Update the pool's status\\n        totalStakingBalance += _amount;\\n        realStakingBalance += _amount;\\n        availableCapacity += amountWithFactor;\\n\\n        _updateLockedRatio();\\n\\n        // msg.sender always pays\\n        USDT.safeTransferFrom(_user, address(this), _amount);\\n\\n        // LP Token number need to be newly minted\\n        uint256 lp_num = _amount.div(LPValue);\\n        _mint(_user, lp_num);\\n\\n        userInfo[_user].depositTime = block.timestamp;\\n\\n        emit Stake(_user, _amount);\\n    }\\n\\n    /**\\n     * @notice _withdraw: finish the withdraw action, only when meeting the conditions\\n     * @dev LPValue will not change during withdraw\\n     * @param _user address of the user who withdraws\\n     * @param _amount the amount he withdraws\\n     */\\n    function _withdraw(address _user, uint256 _amount) internal {\\n        uint256 amountWithFactor = _amount.mul(collateralFactor);\\n        // Update the pool's status\\n        totalStakingBalance -= _amount;\\n        realStakingBalance -= _amount;\\n        availableCapacity -= amountWithFactor;\\n\\n        _updateLockedRatio();\\n\\n        USDT.safeTransfer(_user, _amount);\\n\\n        uint256 lp_num = _amount.div(LPValue);\\n        _burn(_user, lp_num);\\n\\n        emit Unstake(_user, _amount);\\n    }\\n\\n    /**\\n     * @notice Distribute the premium to lottery and emergency pool\\n     * @param _premium Premium amount to be distributed\\n     */\\n    function _distributePremium(uint256 _premium) internal {\\n        uint256 premiumToLottery = _premium.mul(rewardDistribution[1].div(100));\\n\\n        uint256 premiumToEmergency = _premium.mul(\\n            rewardDistribution[2].div(100)\\n        );\\n\\n        // Transfer some reward to emergency pool\\n        USDT.safeTransfer(emergencyPool, premiumToEmergency);\\n\\n        // Transfer some reward to lottery\\n        degisLottery.injectFunds(premiumToLottery);\\n\\n        emit PremiumDistributed(premiumToEmergency, premiumToLottery);\\n    }\\n\\n    /**\\n     * @notice Update the value of each lp token\\n     * @dev Normally it will update when claim or expire\\n     */\\n    function _updateLPValue() internal {\\n        uint256 totalLP = totalSupply();\\n        uint256 totalBalance = IERC20(USDT).balanceOf(address(this));\\n\\n        LPValue = (totalBalance - activePremiums).div(totalLP);\\n    }\\n\\n    /**\\n     * @notice Update the pool's locked ratio\\n     */\\n    function _updateLockedRatio() internal {\\n        if (lockedBalance == 0) lockedRatio = 0;\\n        else lockedRatio = lockedBalance.div(totalStakingBalance);\\n    }\\n\\n    /**\\n     * @notice When some capacity unlocked, deal with the unstake queue\\n     * @dev Normally we do not need this process\\n     * @param remainingPayoff Remaining payoff amount\\n     */\\n    function _dealUnstakeQueue(uint256 remainingPayoff) internal {\\n        uint256 pendingAmount;\\n        for (uint256 i = unstakeQueue.length - 1; i >= 0; i -= 1) {\\n            if (remainingPayoff >= 0) {\\n                address pendingUser = unstakeQueue[i];\\n                for (\\n                    uint256 j = 0;\\n                    j < unstakeRequests[pendingUser].length;\\n                    j++\\n                ) {\\n                    pendingAmount = unstakeRequests[pendingUser][j]\\n                        .pendingAmount;\\n                    if (remainingPayoff > pendingAmount) {\\n                        remainingPayoff -= pendingAmount;\\n\\n                        for (\\n                            uint256 k = 0;\\n                            k < unstakeRequests[pendingUser].length - 1;\\n                            k += 1\\n                        ) {\\n                            unstakeRequests[pendingUser][k] = unstakeRequests[\\n                                pendingUser\\n                            ][k + 1];\\n                        }\\n                        unstakeRequests[pendingUser].pop();\\n\\n                        _withdraw(pendingUser, pendingAmount);\\n                    } else {\\n                        unstakeRequests[pendingUser][j]\\n                            .pendingAmount -= remainingPayoff;\\n                        unstakeRequests[pendingUser][j]\\n                            .fulfilledAmount += remainingPayoff;\\n                        _withdraw(pendingUser, remainingPayoff);\\n\\n                        remainingPayoff = 0;\\n                        break;\\n                    }\\n                }\\n            } else break;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b09b3e5d497d513270ac1de855d5a2a2bbf71c9e98d7a1c6f35e588d6de1a4c\",\"license\":\"MIT\"},\"contracts/miserable-flight/abstracts/InsurancePoolStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nabstract contract InsurancePoolStore {\\n    address public policyFlow;\\n    address public emergencyPool;\\n\\n    uint256 public purchaseIncentiveAmount;\\n\\n    uint256 public frozenTime = 7 days; // 7 days\\n\\n    struct UserInfo {\\n        uint256 depositTime;\\n        uint256 pendingBalance; // the amount in the unstake queue\\n    }\\n    mapping(address => UserInfo) userInfo;\\n\\n    //  of every unstake request in the queue\\n    struct UnstakeRequest {\\n        uint256 pendingAmount;\\n        uint256 fulfilledAmount;\\n        bool isPaidOut; // if this request has been fully paid out // maybe redundant\\n    }\\n\\n    // a user's unstake requests\\n    mapping(address => UnstakeRequest[]) internal unstakeRequests;\\n\\n    // list of all unstake users\\n    address[] internal unstakeQueue;\\n\\n    // 1 LP = LPValue(USD)\\n    uint256 public LPValue;\\n\\n    // Total staking balance of the pool\\n    uint256 public totalStakingBalance;\\n\\n    // Real staking balance = current staking balance - sum(unstake request in the queue)\\n    uint256 public realStakingBalance;\\n\\n    // Locked balance is for potiential payoff\\n    uint256 public lockedBalance;\\n\\n    // locked relation = locked balance / totalStakingBalance\\n    uint256 public lockedRatio; //  1e18 = 1  1e17 = 0.1  1e19 = 10\\n    uint256 public collateralFactor; //  1e18 = 1  1e17 = 0.1  1e19 = 10\\n\\n    // Available capacity for taking new\\n    uint256 public availableCapacity;\\n\\n    // Premiums have been paid but the policies haven't expired\\n    uint256 public activePremiums;\\n\\n    // [0]: LP, [1]: Lottery, [2]: Emergency\\n    uint256[3] public rewardDistribution;\\n\\n    // events\\n    event Stake(address indexed userAddress, uint256 amount);\\n    event Unstake(address indexed userAddress, uint256 amount);\\n\\n    event CollateralFactorChanged(uint256 oldFactor, uint256 newFactor);\\n\\n    event PolicyFlowChanged(address policyFlowAddress);\\n\\n    event BuyNewPolicy(\\n        address indexed userAddress,\\n        uint256 premium,\\n        uint256 payout\\n    );\\n    event RewardDistributionChanged(\\n        uint256 toLP,\\n        uint256 toLottery,\\n        uint256 toEmergency\\n    );\\n\\n    event FrozenTimeChanged(uint256 _newFrozenTime);\\n\\n    event PremiumDistributed(\\n        uint256 _premiumToEmergency,\\n        uint256 _premiumToLottery\\n    );\\n}\\n\",\"keccak256\":\"0x58d3a29baf7cee20542edcab6ecdc266c370696014f6348b556e860832f971ca\",\"license\":\"MIT\"},\"contracts/utils/OwnableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nabstract contract OwnableWithoutContext {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. It will not be possible to call\\n     *         `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * @dev    Renouncing ownership will leave the contract without an owner,\\n     *         thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Can only be called by the current owner.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Internal function without access restriction.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xaac82abf26ffda125b5b404f6e1945a89711f66ecbdd99986b0e1e4ca63e69dd\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62cbabae4910e168e99b9c2c3e3b5c9c7ad5e7abd961dcc63b7ea3d83d8ea87e\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405262093a806008553480156200001857600080fd5b5060405162003561380380620035618339810160408190526200003b9162000275565b6040518060400160405280601981526020017f446567697320466c6967687444656c6179204c50546f6b656e00000000000000815250604051806040016040528060038152602001620444c560ec1b8152508160039080519060200190620000a592919062000195565b508051620000bb90600490602084019062000195565b505050620000cf336200014360201b60201c565b6001601855670de0b6b3a764000060118190556010819055600c55600680546001600160a01b03199081166001600160a01b039586161790915560198054821692851692909217909155601a80549091169190921617905560326014556028601555600a60165562093a8060085562000314565b601780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001a390620002e3565b90600052602060002090601f016020900481019282620001c7576000855562000212565b82601f10620001e257805160ff191683800117855562000212565b8280016001018555821562000212579182015b8281111562000212578251825591602001919060010190620001f5565b506200022092915062000224565b5090565b5b8082111562000220576000815560010162000225565b60006001600160a01b0382165b92915050565b62000259816200023b565b81146200026557600080fd5b50565b805162000248816200024e565b6000806000606084860312156200028f576200028f600080fd5b60006200029d868662000268565b9350506020620002b08682870162000268565b9250506040620002c38682870162000268565b9150509250925092565b634e487b7160e01b600052602260045260246000fd5b600281046001821680620002f857607f821691505b602082108114156200030e576200030e620002cd565b50919050565b61323d80620003246000396000f3fe608060405234801561001057600080fd5b50600436106102735760003560e01c806395d89b4111610151578063cba9aa4f116100c3578063df011c4111610087578063df011c4114610552578063e766c8351461055b578063ea1a767914610564578063f03816ea1461056d578063f2fde38b14610580578063fa4bc20a1461059357600080fd5b8063cba9aa4f146104eb578063d8a9bdb7146104f4578063dd62ed3e146104fd578063ddc2c18514610536578063de2fbaba1461054957600080fd5b8063a9059cbb11610115578063a9059cbb14610476578063b496991a14610489578063b5c2215714610492578063bf131f4b146104a5578063bff9e65f146104b8578063c54e44eb146104d857600080fd5b806395d89b411461042c578063a21bc3fb14610434578063a457c2d71461043d578063a59b364514610450578063a694fc3a1461046357600080fd5b806347734892116101ea5780637b80889b116101ae5780637b80889b146103d05780637d36f766146103d95780638da5cb5b146103ec5780638f6987a2146103fd578063906db9ff14610410578063942465ed1461041957600080fd5b80634773489214610371578063561dae91146103845780635c326caf1461038c57806370a082311461039f578063715018a6146103c857600080fd5b806323b872dd1161023c57806323b872dd146102f45780632e17de7814610307578063313ce5671461031c578063395093511461032b5780634020a4ad1461033e57806343d387f81461035157600080fd5b806216bd781461027857806306fdde03146102a4578063095ea7b3146102b957806312fa0d7a146102cc57806318160ddd146102ec575b600080fd5b61028e610286366004612461565b601254101590565b60405161029b919061248c565b60405180910390f35b6102ac6105a6565b60405161029b91906124f8565b61028e6102c736600461252e565b610638565b6102df6102da36600461256b565b61064f565b60405161029b9190612592565b6002546102df565b61028e6103023660046125a0565b610678565b61031a610315366004612461565b6106ea565b005b601260405161029b91906125f9565b61028e61033936600461252e565b6108b9565b61031a61034c36600461256b565b6108f5565b600554610364906001600160a01b031681565b60405161029b9190612610565b6102df61037f36600461256b565b610a0f565b61031a610a36565b61031a61039a36600461256b565b610bd8565b6102df6103ad36600461256b565b6001600160a01b031660009081526020819052604090205490565b61031a610c8f565b6102df600f5481565b6102df6103e7366004612461565b610cd4565b6017546001600160a01b0316610364565b61031a61040b36600461261e565b610ceb565b6102df60085481565b61031a610427366004612640565b610d91565b6102ac610e7d565b6102df60125481565b61028e61044b36600461252e565b610e8c565b600654610364906001600160a01b031681565b61031a610471366004612461565b610ee7565b61028e61048436600461252e565b610fdb565b6102df60075481565b61031a6104a0366004612461565b610fe8565b61031a6104b33660046126a4565b611084565b601a546104cb906001600160a01b031681565b60405161029b9190612709565b6019546104cb906001600160a01b031681565b6102df600c5481565b6102df600e5481565b6102df61050b366004612717565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61031a610544366004612461565b611169565b6102df60105481565b6102df60115481565b6102df600d5481565b6102df60135481565b61031a61057b36600461256b565b6111e2565b61031a61058e36600461256b565b611336565b61031a6105a1366004612843565b6113a1565b6060600380546105b59061287a565b80601f01602080910402602001604051908101604052809291908181526020018280546105e19061287a565b801561062e5780601f106106035761010080835404028352916020019161062e565b820191906000526020600020905b81548152906001019060200180831161061157829003601f168201915b5050505050905090565b60006106453384846114a8565b5060015b92915050565b60008061065b83610a0f565b905080601254101561066f57601254610671565b805b9392505050565b600061068584848461155c565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156106d25760405162461bcd60e51b81526004016106c9906128ec565b60405180910390fd5b6106df85338584036114a8565b506001949350505050565b33806107085760405162461bcd60e51b81526004016106c990612930565b60085433600081815260096020526040902054909161072691612956565b4210156107455760405162461bcd60e51b81526004016106c9906129b0565b600260185414156107685760405162461bcd60e51b81526004016106c9906129f2565b600260185533600061077982610a0f565b905080851115801561078b5750600085115b6107a75760405162461bcd60e51b81526004016106c990612a5a565b6000600f54600d546107b99190612a6a565b905085818111156108a15760006107d08389612a6a565b6001600160a01b0386166000818152600a60209081526040808320815160608101835286815280840185815281840186815283546001808201865594885286882093516003909102909301928355905182840155516002909101805460ff1916911515919091179055600b80548083019091557f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b03191686179055938352600990915281209091018054869550929350839290919061089a908490612956565b9091555050505b6108ab8482611671565b505060016018555050505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916106459185906108f0908690612956565b6114a8565b806001600160a01b03811661091c5760405162461bcd60e51b81526004016106c990612930565b336001600160a01b038316148061093d57506017546001600160a01b031633145b6109595760405162461bcd60e51b81526004016106c990612ac9565b6001600160a01b0382166000908152600a60205260409020805461098f5760405162461bcd60e51b81526004016106c990612b1c565b6109988361175d565b6001600160a01b0383166000908152600a602052604081206109b991612402565b6001600160a01b038316600090815260096020526040812060010154600e8054919283926109e8908490612956565b9091555050506001600160a01b039092166000908152600960205260408120600101555050565b6001600160a01b038116600090815260208190526040812054600c5461067190829061179f565b3380610a545760405162461bcd60e51b81526004016106c990612930565b600854336000818152600960205260409020549091610a7291612956565b421015610a915760405162461bcd60e51b81526004016106c9906129b0565b60026018541415610ab45760405162461bcd60e51b81526004016106c9906129f2565b6002601855336000610ac582610a0f565b90506000600f54600d54610ad99190612a6a565b90508181811115610bc1576000610af08385612a6a565b6001600160a01b0386166000818152600a60209081526040808320815160608101835286815280840185815281840186815283546001808201865594885286882093516003909102909301928355905182840155516002909101805460ff1916911515919091179055600b80548083019091557f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b031916861790559383526009909152812090910180548695509293508392909190610bba908490612956565b9091555050505b610bcb8482611671565b5050600160185550505050565b33610beb6017546001600160a01b031690565b6001600160a01b031614610c115760405162461bcd60e51b81526004016106c990612b5c565b806001600160a01b038116610c385760405162461bcd60e51b81526004016106c990612930565b600580546001600160a01b0319166001600160a01b0384161790556040517f5555268576901f37625e3ab2764fd0bbb1f18eea39aa25cccf9789842520210690610c83908490612610565b60405180910390a15050565b33610ca26017546001600160a01b031690565b6001600160a01b031614610cc85760405162461bcd60e51b81526004016106c990612b5c565b610cd260006117ab565b565b60148160038110610ce457600080fd5b0154905081565b6005546001600160a01b0316336001600160a01b031614610d1e5760405162461bcd60e51b81526004016106c990612bba565b8160136000828254610d309190612a6a565b9250508190555080600f6000828254610d499190612a6a565b925050819055508060126000828254610d629190612956565b90915550610d719050826117fd565b600b54819015610d8457610d84816118f7565b610d8c611be2565b505050565b6005546001600160a01b0316336001600160a01b031614610dc45760405162461bcd60e51b81526004016106c990612bba565b806001600160a01b038116610deb5760405162461bcd60e51b81526004016106c990612930565b83600f6000828254610dfd9190612a6a565b9250508190555082600d6000828254610e169190612a6a565b9250508190555082600e6000828254610e2f9190612a6a565b925050819055508460136000828254610e489190612a6a565b90915550610e579050856117fd565b601954610e6e906001600160a01b03168385611c85565b610e76611be2565b5050505050565b6060600480546105b59061287a565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610ed05760405162461bcd60e51b81526004016106c990612c0a565b610edd33858584036114a8565b5060019392505050565b3380610f055760405162461bcd60e51b81526004016106c990612930565b60026018541415610f285760405162461bcd60e51b81526004016106c9906129f2565b60026018556019546040516370a0823160e01b815283916001600160a01b0316906370a0823190610f5d903390600401612610565b602060405180830381865afa158015610f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9e9190612c25565b10158015610fac5750600082115b610fc85760405162461bcd60e51b81526004016106c990612c8d565b610fd23383611cdb565b50506001601855565b600061064533848461155c565b33610ffb6017546001600160a01b031690565b6001600160a01b0316146110215760405162461bcd60e51b81526004016106c990612b5c565b600081116110415760405162461bcd60e51b81526004016106c990612ce1565b60115461104f826064611dcc565b6011556040517f2fb14d81e1059e5450c519131ffcfc7c4b522c061d35cc68611bacca1f82e37590610c839083908590612cf1565b6005546001600160a01b0316336001600160a01b0316146110b75760405162461bcd60e51b81526004016106c990612bba565b81600f60008282546110c99190612956565b9250508190555082601360008282546110e29190612956565b9250508190555081601260008282546110fb9190612a6a565b909155506111099050611de1565b601954611121906001600160a01b0316823086611e03565b806001600160a01b03167f48a70649351698478f15267ca75cb3da80814ac5087d87178c657801b662fa96848460405161115c929190612cf1565b60405180910390a2505050565b3361117c6017546001600160a01b031690565b6001600160a01b0316146111a25760405162461bcd60e51b81526004016106c990612b5c565b60088190556040517fd0ba4d65f742a2b66a0a13ef1de69627184d31735bd5ae1f01899de3a213e4aa906111d7908390612592565b60405180910390a150565b806001600160a01b0381166112095760405162461bcd60e51b81526004016106c990612930565b336001600160a01b038316148061122a57506017546001600160a01b031633145b6112465760405162461bcd60e51b81526004016106c990612ac9565b6001600160a01b0382166000908152600a60205260409020805461127c5760405162461bcd60e51b81526004016106c990612b1c565b805460009061128d90600190612a6a565b905060008282815481106112a3576112a3612d0c565b9060005260206000209060030201600101548383815481106112c7576112c7612d0c565b9060005260206000209060030201600001546112e39190612a6a565b905080600e60008282546112f79190612956565b90915550506001600160a01b03851660009081526009602052604081206001018054839290611327908490612a6a565b90915550610e76905085611e24565b336113496017546001600160a01b031690565b6001600160a01b03161461136f5760405162461bcd60e51b81526004016106c990612b5c565b6001600160a01b0381166113955760405162461bcd60e51b81526004016106c990612d63565b61139e816117ab565b50565b336113b46017546001600160a01b031690565b6001600160a01b0316146113da5760405162461bcd60e51b81526004016106c990612b5c565b604081015160208201518251600092916113f391612956565b6113fd9190612956565b90508060641461141f5760405162461bcd60e51b81526004016106c990612db1565b60005b60038110156114695782816003811061143d5761143d612d0c565b60200201516014826003811061145557611455612d0c565b01558061146181612dc1565b915050611422565b508151602083015160408085015190517f2501d1816d6e1d277a8cbb431b1a33074b592eb245028dba71f05d558fafae3793610c839390929091612ddc565b6001600160a01b0383166114ce5760405162461bcd60e51b81526004016106c990612e43565b6001600160a01b0382166114f45760405162461bcd60e51b81526004016106c990612e90565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061154f908590612592565b60405180910390a3505050565b6001600160a01b0383166115825760405162461bcd60e51b81526004016106c990612ee0565b6001600160a01b0382166115a85760405162461bcd60e51b81526004016106c990612f2e565b6001600160a01b038316600090815260208190526040902054818110156115e15760405162461bcd60e51b81526004016106c990612f7f565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611618908490612956565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516116629190612592565b60405180910390a35b50505050565b60006116886011548361179f90919063ffffffff16565b905081600d600082825461169c9190612a6a565b9250508190555081600e60008282546116b59190612a6a565b9250508190555080601260008282546116ce9190612a6a565b909155506116dc9050611de1565b6019546116f3906001600160a01b03168484611c85565b600061170a600c5484611dcc90919063ffffffff16565b90506117168482611f5c565b836001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd8460405161174f9190612592565b60405180910390a250505050565b60005b6001600160a01b0382166000908152600a602052604090205481101561179b5761178982611e24565b611794600182612956565b9050611760565b5050565b6000610671838361202d565b601780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061181b6118146064601460015b015490611dcc565b839061179f565b9050600061183761183060646014600261180c565b849061179f565b600654601954919250611857916001600160a01b03908116911683611c85565b601a546040516338d67afb60e21b81526001600160a01b039091169063e359ebec90611887908590600401612592565b600060405180830381600087803b1580156118a157600080fd5b505af11580156118b5573d6000803e3d6000fd5b505050507f9761fc045fbd64d3df258b9138e72c435856255787dfef0428a74ead73954fb481836040516118ea929190612cf1565b60405180910390a1505050565b600b54600090819061190b90600190612a6a565b90505b6000600b828154811061192357611923612d0c565b60009182526020822001546001600160a01b031691505b6001600160a01b0382166000908152600a6020526040902054811015611bce576001600160a01b0382166000908152600a6020526040902080548290811061198457611984612d0c565b906000526020600020906003020160000154935083851115611b04576119aa8486612a6a565b945060005b6001600160a01b0383166000908152600a60205260409020546119d490600190612a6a565b811015611aa0576001600160a01b0383166000908152600a602052604090206119fe826001612956565b81548110611a0e57611a0e612d0c565b9060005260206000209060030201600a6000856001600160a01b03166001600160a01b031681526020019081526020016000208281548110611a5257611a52612d0c565b6000918252602090912082546003909202019081556001808301548183015560029283015492909101805460ff191660ff909316151592909217909155611a999082612956565b90506119af565b506001600160a01b0382166000908152600a60205260409020805480611ac857611ac8612f8f565b6000828152602081206003600019909301928302018181556001810191909155600201805460ff191690559055611aff8285611671565b611bbc565b6001600160a01b0382166000908152600a60205260409020805486919083908110611b3157611b31612d0c565b90600052602060002090600302016000016000828254611b519190612a6a565b90915550506001600160a01b0382166000908152600a60205260409020805486919083908110611b8357611b83612d0c565b90600052602060002090600302016001016000828254611ba39190612956565b90915550611bb390508286611671565b60009450611bce565b80611bc681612dc1565b91505061193a565b5050611bdb600182612a6a565b905061190e565b6000611bed60025490565b6019546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190611c23903090600401612610565b602060405180830381865afa158015611c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c649190612c25565b9050611c7e8260135483611c789190612a6a565b90611dcc565b600c555050565b610d8c8363a9059cbb60e01b8484604051602401611ca4929190612fa5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526120ee565b6000611cf26011548361179f90919063ffffffff16565b905081600d6000828254611d069190612956565b9250508190555081600e6000828254611d1f9190612956565b925050819055508060126000828254611d389190612956565b90915550611d469050611de1565b601954611d5e906001600160a01b0316843085611e03565b6000611d75600c5484611dcc90919063ffffffff16565b9050611d81848261217d565b6001600160a01b03841660008181526009602052604090819020429055517febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a9061174f908690612592565b600061067183670de0b6b3a764000084612231565b600f54611def576000601055565b600d54600f54611dfe91611dcc565b601055565b61166b846323b872dd60e01b858585604051602401611ca493929190612fb3565b600b54600090611e3690600190612a6a565b90505b816001600160a01b0316600b8281548110611e5657611e56612d0c565b6000918252602090912001546001600160a01b03161415611e7657611e88565b611e81600182612a6a565b9050611e39565b805b600b54611e9990600190612a6a565b811015611f2457600b611ead826001612956565b81548110611ebd57611ebd612d0c565b600091825260209091200154600b80546001600160a01b039092169183908110611ee957611ee9612d0c565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055611f1d600182612956565b9050611e8a565b50600b805480611f3657611f36612f8f565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b6001600160a01b038216611f825760405162461bcd60e51b81526004016106c99061300a565b6001600160a01b03821660009081526020819052604090205481811015611fbb5760405162461bcd60e51b81526004016106c990613057565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611fea908490612a6a565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061154f908690612592565b60008080600019848609848602925082811083820303915050670de0b6b3a76400008110612070578060405163698d9a0160e11b81526004016106c99190612592565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826120aa5780670de0b6b3a7640000850401945050505050610649565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6000612143826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122f99092919063ffffffff16565b805190915015610d8c57808060200190518101906121619190613090565b610d8c5760405162461bcd60e51b81526004016106c9906130f6565b6001600160a01b0382166121a35760405162461bcd60e51b81526004016106c990613138565b80600260008282546121b59190612956565b90915550506001600160a01b038216600090815260208190526040812080548392906121e2908490612956565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612225908590612592565b60405180910390a35050565b60008080600019858709858702925082811083820303915050806000141561226c5783828161226257612262613067565b0492505050610671565b838110612290578084604051631dcf306360e21b81526004016106c9929190612cf1565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60606123088484600085612310565b949350505050565b6060824710156123325760405162461bcd60e51b81526004016106c990613189565b843b6123505760405162461bcd60e51b81526004016106c9906131cb565b600080866001600160a01b0316858760405161236c91906131fd565b60006040518083038185875af1925050503d80600081146123a9576040519150601f19603f3d011682016040523d82523d6000602084013e6123ae565b606091505b50915091506123be8282866123c9565b979650505050505050565b606083156123d8575081610671565b8251156123e85782518084602001fd5b8160405162461bcd60e51b81526004016106c991906124f8565b508054600082556003029060005260206000209081019061139e91905b80821115612445576000808255600182015560028101805460ff1916905560030161241f565b5090565b805b811461139e57600080fd5b803561064981612449565b60006020828403121561247657612476600080fd5b60006123088484612456565b8015155b82525050565b602081016106498284612482565b60005b838110156124b557818101518382015260200161249d565b8381111561166b5750506000910152565b60006124d0825190565b8084526020840193506124e781856020860161249a565b601f01601f19169290920192915050565b6020808252810161067181846124c6565b60006001600160a01b038216610649565b61244b81612509565b80356106498161251a565b6000806040838503121561254457612544600080fd5b60006125508585612523565b925050602061256185828601612456565b9150509250929050565b60006020828403121561258057612580600080fd5b60006123088484612523565b80612486565b60208101610649828461258c565b6000806000606084860312156125b8576125b8600080fd5b60006125c48686612523565b93505060206125d586828701612523565b92505060406125e686828701612456565b9150509250925092565b60ff8116612486565b6020810161064982846125f0565b61248681612509565b602081016106498284612607565b6000806040838503121561263457612634600080fd5b60006125508585612456565b6000806000806080858703121561265957612659600080fd5b60006126658787612456565b945050602061267687828801612456565b935050604061268787828801612456565b925050606061269887828801612523565b91505092959194509250565b6000806000606084860312156126bc576126bc600080fd5b60006126c88686612456565b93505060206126d986828701612456565b92505060406125e686828701612523565b600061064982612509565b6000610649826126ea565b612486816126f5565b602081016106498284612700565b6000806040838503121561272d5761272d600080fd5b60006127398585612523565b925050602061256185828601612523565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156127865761278661274a565b6040525050565b600061279860405190565b90506127a48282612760565b919050565b600067ffffffffffffffff8211156127c3576127c361274a565b5060200290565b60006127dd6127d8846127a9565b61278d565b905080602084028301858111156127f6576127f6600080fd5b835b818110156128185761280a8782612456565b8352602092830192016127f8565b5050509392505050565b600082601f83011261283657612836600080fd5b60036123088482856127ca565b60006060828403121561285857612858600080fd5b60006123088484612822565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061288e57607f821691505b602082108114156128a1576128a1612864565b50919050565b60288152602081017f45524332303a207472616e7366657220616d6f756e74206578636565647320618152676c6c6f77616e636560c01b602082015290505b60400190565b60208082528101610649816128a7565b60178152602081017f43616e206e6f74206265207a65726f2061646472657373000000000000000000815290505b60200190565b60208082528101610649816128fc565b634e487b7160e01b600052601160045260246000fd5b6000821982111561296957612969612940565b500190565b60278152602081017f43616e206e6f7420776974686472617720756e74696c207468652066726f6e7a815266656e2074696d6560c81b602082015290506128e6565b602080825281016106498161296e565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c008152905061292a565b60208082528101610649816129c0565b603e8152602081017f4e6f7420656e6f7567682062616c616e636520746f20626520756e6c6f636b6581527f64206f7220796f757220776974686472617720616d6f756e7420697320300000602082015290506128e6565b6020808252810161064981612a02565b600082821015612a7c57612a7c612940565b500390565b602d8152602081017f4f6e6c7920746865206f776e6572206f722074686520757365722068696d736581526c1b198818d85b881c995d995c9d609a1b602082015290506128e6565b6020808252810161064981612a81565b60288152602081017f74686973207573657220686173206e6f2070656e64696e6720756e7374616b65815267081c995c5d595cdd60c21b602082015290506128e6565b6020808252810161064981612ad9565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815261292a565b6020808252810161064981612b2c565b60338152602081017f4f6e6c792074686520706f6c696379466c6f7720636f6e74726163742063616e8152721031b0b636103a3434b990333ab731ba34b7b760691b602082015290506128e6565b6020808252810161064981612b6c565b60258152602081017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77815264207a65726f60d81b602082015290506128e6565b6020808252810161064981612bca565b805161064981612449565b600060208284031215612c3a57612c3a600080fd5b60006123088484612c1a565b602c8152602081017f596f7520646f206e6f74206861766520656e6f75676820555344206f7220696e81526b1c1d5d080c08185b5bdd5b9d60a21b602082015290506128e6565b6020808252810161064981612c46565b60298152602081017f436f6c6c61746572616c20466163746f722073686f756c64206265206c61726781526806572207468616e20360bc1b602082015290506128e6565b6020808252810161064981612c9d565b60408101612cff828561258c565b610671602083018461258c565b634e487b7160e01b600052603260045260246000fd5b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015290506128e6565b6020808252810161064981612d22565b60238152602081017f52657761726420646973747269627574696f6e206d7573742073756d20746f2081526203130360ec1b602082015290506128e6565b6020808252810161064981612d73565b6000600019821415612dd557612dd5612940565b5060010190565b60608101612dea828661258c565b612df7602083018561258c565b612308604083018461258c565b60248152602081017f45524332303a20617070726f76652066726f6d20746865207a65726f206164648152637265737360e01b602082015290506128e6565b6020808252810161064981612e04565b60228152602081017f45524332303a20617070726f766520746f20746865207a65726f206164647265815261737360f01b602082015290506128e6565b6020808252810161064981612e53565b60258152602081017f45524332303a207472616e736665722066726f6d20746865207a65726f206164815264647265737360d81b602082015290506128e6565b6020808252810161064981612ea0565b60238152602081017f45524332303a207472616e7366657220746f20746865207a65726f206164647281526265737360e81b602082015290506128e6565b6020808252810161064981612ef0565b60268152602081017f45524332303a207472616e7366657220616d6f756e7420657863656564732062815265616c616e636560d01b602082015290506128e6565b6020808252810161064981612f3e565b634e487b7160e01b600052603160045260246000fd5b60408101612cff8285612607565b60608101612fc18286612607565b612df76020830185612607565b60218152602081017f45524332303a206275726e2066726f6d20746865207a65726f206164647265738152607360f81b602082015290506128e6565b6020808252810161064981612fce565b60228152602081017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e815261636560f01b602082015290506128e6565b602080825281016106498161301a565b634e487b7160e01b600052601260045260246000fd5b80151561244b565b80516106498161307d565b6000602082840312156130a5576130a5600080fd5b60006123088484613085565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015290506128e6565b60208082528101610649816130b1565b601f8152602081017f45524332303a206d696e7420746f20746865207a65726f2061646472657373008152905061292a565b6020808252810161064981613106565b60268152602081017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b602082015290506128e6565b6020808252810161064981613148565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000008152905061292a565b6020808252810161064981613199565b60006131e5825190565b6131f381856020860161249a565b9290920192915050565b61064981836131db56fea26469706673582212206bda7f4fd79efc41fd0edc78207b201e97e580f1059dcb4a67ce483730ff6f4064736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102735760003560e01c806395d89b4111610151578063cba9aa4f116100c3578063df011c4111610087578063df011c4114610552578063e766c8351461055b578063ea1a767914610564578063f03816ea1461056d578063f2fde38b14610580578063fa4bc20a1461059357600080fd5b8063cba9aa4f146104eb578063d8a9bdb7146104f4578063dd62ed3e146104fd578063ddc2c18514610536578063de2fbaba1461054957600080fd5b8063a9059cbb11610115578063a9059cbb14610476578063b496991a14610489578063b5c2215714610492578063bf131f4b146104a5578063bff9e65f146104b8578063c54e44eb146104d857600080fd5b806395d89b411461042c578063a21bc3fb14610434578063a457c2d71461043d578063a59b364514610450578063a694fc3a1461046357600080fd5b806347734892116101ea5780637b80889b116101ae5780637b80889b146103d05780637d36f766146103d95780638da5cb5b146103ec5780638f6987a2146103fd578063906db9ff14610410578063942465ed1461041957600080fd5b80634773489214610371578063561dae91146103845780635c326caf1461038c57806370a082311461039f578063715018a6146103c857600080fd5b806323b872dd1161023c57806323b872dd146102f45780632e17de7814610307578063313ce5671461031c578063395093511461032b5780634020a4ad1461033e57806343d387f81461035157600080fd5b806216bd781461027857806306fdde03146102a4578063095ea7b3146102b957806312fa0d7a146102cc57806318160ddd146102ec575b600080fd5b61028e610286366004612461565b601254101590565b60405161029b919061248c565b60405180910390f35b6102ac6105a6565b60405161029b91906124f8565b61028e6102c736600461252e565b610638565b6102df6102da36600461256b565b61064f565b60405161029b9190612592565b6002546102df565b61028e6103023660046125a0565b610678565b61031a610315366004612461565b6106ea565b005b601260405161029b91906125f9565b61028e61033936600461252e565b6108b9565b61031a61034c36600461256b565b6108f5565b600554610364906001600160a01b031681565b60405161029b9190612610565b6102df61037f36600461256b565b610a0f565b61031a610a36565b61031a61039a36600461256b565b610bd8565b6102df6103ad36600461256b565b6001600160a01b031660009081526020819052604090205490565b61031a610c8f565b6102df600f5481565b6102df6103e7366004612461565b610cd4565b6017546001600160a01b0316610364565b61031a61040b36600461261e565b610ceb565b6102df60085481565b61031a610427366004612640565b610d91565b6102ac610e7d565b6102df60125481565b61028e61044b36600461252e565b610e8c565b600654610364906001600160a01b031681565b61031a610471366004612461565b610ee7565b61028e61048436600461252e565b610fdb565b6102df60075481565b61031a6104a0366004612461565b610fe8565b61031a6104b33660046126a4565b611084565b601a546104cb906001600160a01b031681565b60405161029b9190612709565b6019546104cb906001600160a01b031681565b6102df600c5481565b6102df600e5481565b6102df61050b366004612717565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61031a610544366004612461565b611169565b6102df60105481565b6102df60115481565b6102df600d5481565b6102df60135481565b61031a61057b36600461256b565b6111e2565b61031a61058e36600461256b565b611336565b61031a6105a1366004612843565b6113a1565b6060600380546105b59061287a565b80601f01602080910402602001604051908101604052809291908181526020018280546105e19061287a565b801561062e5780601f106106035761010080835404028352916020019161062e565b820191906000526020600020905b81548152906001019060200180831161061157829003601f168201915b5050505050905090565b60006106453384846114a8565b5060015b92915050565b60008061065b83610a0f565b905080601254101561066f57601254610671565b805b9392505050565b600061068584848461155c565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156106d25760405162461bcd60e51b81526004016106c9906128ec565b60405180910390fd5b6106df85338584036114a8565b506001949350505050565b33806107085760405162461bcd60e51b81526004016106c990612930565b60085433600081815260096020526040902054909161072691612956565b4210156107455760405162461bcd60e51b81526004016106c9906129b0565b600260185414156107685760405162461bcd60e51b81526004016106c9906129f2565b600260185533600061077982610a0f565b905080851115801561078b5750600085115b6107a75760405162461bcd60e51b81526004016106c990612a5a565b6000600f54600d546107b99190612a6a565b905085818111156108a15760006107d08389612a6a565b6001600160a01b0386166000818152600a60209081526040808320815160608101835286815280840185815281840186815283546001808201865594885286882093516003909102909301928355905182840155516002909101805460ff1916911515919091179055600b80548083019091557f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b03191686179055938352600990915281209091018054869550929350839290919061089a908490612956565b9091555050505b6108ab8482611671565b505060016018555050505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916106459185906108f0908690612956565b6114a8565b806001600160a01b03811661091c5760405162461bcd60e51b81526004016106c990612930565b336001600160a01b038316148061093d57506017546001600160a01b031633145b6109595760405162461bcd60e51b81526004016106c990612ac9565b6001600160a01b0382166000908152600a60205260409020805461098f5760405162461bcd60e51b81526004016106c990612b1c565b6109988361175d565b6001600160a01b0383166000908152600a602052604081206109b991612402565b6001600160a01b038316600090815260096020526040812060010154600e8054919283926109e8908490612956565b9091555050506001600160a01b039092166000908152600960205260408120600101555050565b6001600160a01b038116600090815260208190526040812054600c5461067190829061179f565b3380610a545760405162461bcd60e51b81526004016106c990612930565b600854336000818152600960205260409020549091610a7291612956565b421015610a915760405162461bcd60e51b81526004016106c9906129b0565b60026018541415610ab45760405162461bcd60e51b81526004016106c9906129f2565b6002601855336000610ac582610a0f565b90506000600f54600d54610ad99190612a6a565b90508181811115610bc1576000610af08385612a6a565b6001600160a01b0386166000818152600a60209081526040808320815160608101835286815280840185815281840186815283546001808201865594885286882093516003909102909301928355905182840155516002909101805460ff1916911515919091179055600b80548083019091557f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b031916861790559383526009909152812090910180548695509293508392909190610bba908490612956565b9091555050505b610bcb8482611671565b5050600160185550505050565b33610beb6017546001600160a01b031690565b6001600160a01b031614610c115760405162461bcd60e51b81526004016106c990612b5c565b806001600160a01b038116610c385760405162461bcd60e51b81526004016106c990612930565b600580546001600160a01b0319166001600160a01b0384161790556040517f5555268576901f37625e3ab2764fd0bbb1f18eea39aa25cccf9789842520210690610c83908490612610565b60405180910390a15050565b33610ca26017546001600160a01b031690565b6001600160a01b031614610cc85760405162461bcd60e51b81526004016106c990612b5c565b610cd260006117ab565b565b60148160038110610ce457600080fd5b0154905081565b6005546001600160a01b0316336001600160a01b031614610d1e5760405162461bcd60e51b81526004016106c990612bba565b8160136000828254610d309190612a6a565b9250508190555080600f6000828254610d499190612a6a565b925050819055508060126000828254610d629190612956565b90915550610d719050826117fd565b600b54819015610d8457610d84816118f7565b610d8c611be2565b505050565b6005546001600160a01b0316336001600160a01b031614610dc45760405162461bcd60e51b81526004016106c990612bba565b806001600160a01b038116610deb5760405162461bcd60e51b81526004016106c990612930565b83600f6000828254610dfd9190612a6a565b9250508190555082600d6000828254610e169190612a6a565b9250508190555082600e6000828254610e2f9190612a6a565b925050819055508460136000828254610e489190612a6a565b90915550610e579050856117fd565b601954610e6e906001600160a01b03168385611c85565b610e76611be2565b5050505050565b6060600480546105b59061287a565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610ed05760405162461bcd60e51b81526004016106c990612c0a565b610edd33858584036114a8565b5060019392505050565b3380610f055760405162461bcd60e51b81526004016106c990612930565b60026018541415610f285760405162461bcd60e51b81526004016106c9906129f2565b60026018556019546040516370a0823160e01b815283916001600160a01b0316906370a0823190610f5d903390600401612610565b602060405180830381865afa158015610f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9e9190612c25565b10158015610fac5750600082115b610fc85760405162461bcd60e51b81526004016106c990612c8d565b610fd23383611cdb565b50506001601855565b600061064533848461155c565b33610ffb6017546001600160a01b031690565b6001600160a01b0316146110215760405162461bcd60e51b81526004016106c990612b5c565b600081116110415760405162461bcd60e51b81526004016106c990612ce1565b60115461104f826064611dcc565b6011556040517f2fb14d81e1059e5450c519131ffcfc7c4b522c061d35cc68611bacca1f82e37590610c839083908590612cf1565b6005546001600160a01b0316336001600160a01b0316146110b75760405162461bcd60e51b81526004016106c990612bba565b81600f60008282546110c99190612956565b9250508190555082601360008282546110e29190612956565b9250508190555081601260008282546110fb9190612a6a565b909155506111099050611de1565b601954611121906001600160a01b0316823086611e03565b806001600160a01b03167f48a70649351698478f15267ca75cb3da80814ac5087d87178c657801b662fa96848460405161115c929190612cf1565b60405180910390a2505050565b3361117c6017546001600160a01b031690565b6001600160a01b0316146111a25760405162461bcd60e51b81526004016106c990612b5c565b60088190556040517fd0ba4d65f742a2b66a0a13ef1de69627184d31735bd5ae1f01899de3a213e4aa906111d7908390612592565b60405180910390a150565b806001600160a01b0381166112095760405162461bcd60e51b81526004016106c990612930565b336001600160a01b038316148061122a57506017546001600160a01b031633145b6112465760405162461bcd60e51b81526004016106c990612ac9565b6001600160a01b0382166000908152600a60205260409020805461127c5760405162461bcd60e51b81526004016106c990612b1c565b805460009061128d90600190612a6a565b905060008282815481106112a3576112a3612d0c565b9060005260206000209060030201600101548383815481106112c7576112c7612d0c565b9060005260206000209060030201600001546112e39190612a6a565b905080600e60008282546112f79190612956565b90915550506001600160a01b03851660009081526009602052604081206001018054839290611327908490612a6a565b90915550610e76905085611e24565b336113496017546001600160a01b031690565b6001600160a01b03161461136f5760405162461bcd60e51b81526004016106c990612b5c565b6001600160a01b0381166113955760405162461bcd60e51b81526004016106c990612d63565b61139e816117ab565b50565b336113b46017546001600160a01b031690565b6001600160a01b0316146113da5760405162461bcd60e51b81526004016106c990612b5c565b604081015160208201518251600092916113f391612956565b6113fd9190612956565b90508060641461141f5760405162461bcd60e51b81526004016106c990612db1565b60005b60038110156114695782816003811061143d5761143d612d0c565b60200201516014826003811061145557611455612d0c565b01558061146181612dc1565b915050611422565b508151602083015160408085015190517f2501d1816d6e1d277a8cbb431b1a33074b592eb245028dba71f05d558fafae3793610c839390929091612ddc565b6001600160a01b0383166114ce5760405162461bcd60e51b81526004016106c990612e43565b6001600160a01b0382166114f45760405162461bcd60e51b81526004016106c990612e90565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061154f908590612592565b60405180910390a3505050565b6001600160a01b0383166115825760405162461bcd60e51b81526004016106c990612ee0565b6001600160a01b0382166115a85760405162461bcd60e51b81526004016106c990612f2e565b6001600160a01b038316600090815260208190526040902054818110156115e15760405162461bcd60e51b81526004016106c990612f7f565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611618908490612956565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516116629190612592565b60405180910390a35b50505050565b60006116886011548361179f90919063ffffffff16565b905081600d600082825461169c9190612a6a565b9250508190555081600e60008282546116b59190612a6a565b9250508190555080601260008282546116ce9190612a6a565b909155506116dc9050611de1565b6019546116f3906001600160a01b03168484611c85565b600061170a600c5484611dcc90919063ffffffff16565b90506117168482611f5c565b836001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd8460405161174f9190612592565b60405180910390a250505050565b60005b6001600160a01b0382166000908152600a602052604090205481101561179b5761178982611e24565b611794600182612956565b9050611760565b5050565b6000610671838361202d565b601780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061181b6118146064601460015b015490611dcc565b839061179f565b9050600061183761183060646014600261180c565b849061179f565b600654601954919250611857916001600160a01b03908116911683611c85565b601a546040516338d67afb60e21b81526001600160a01b039091169063e359ebec90611887908590600401612592565b600060405180830381600087803b1580156118a157600080fd5b505af11580156118b5573d6000803e3d6000fd5b505050507f9761fc045fbd64d3df258b9138e72c435856255787dfef0428a74ead73954fb481836040516118ea929190612cf1565b60405180910390a1505050565b600b54600090819061190b90600190612a6a565b90505b6000600b828154811061192357611923612d0c565b60009182526020822001546001600160a01b031691505b6001600160a01b0382166000908152600a6020526040902054811015611bce576001600160a01b0382166000908152600a6020526040902080548290811061198457611984612d0c565b906000526020600020906003020160000154935083851115611b04576119aa8486612a6a565b945060005b6001600160a01b0383166000908152600a60205260409020546119d490600190612a6a565b811015611aa0576001600160a01b0383166000908152600a602052604090206119fe826001612956565b81548110611a0e57611a0e612d0c565b9060005260206000209060030201600a6000856001600160a01b03166001600160a01b031681526020019081526020016000208281548110611a5257611a52612d0c565b6000918252602090912082546003909202019081556001808301548183015560029283015492909101805460ff191660ff909316151592909217909155611a999082612956565b90506119af565b506001600160a01b0382166000908152600a60205260409020805480611ac857611ac8612f8f565b6000828152602081206003600019909301928302018181556001810191909155600201805460ff191690559055611aff8285611671565b611bbc565b6001600160a01b0382166000908152600a60205260409020805486919083908110611b3157611b31612d0c565b90600052602060002090600302016000016000828254611b519190612a6a565b90915550506001600160a01b0382166000908152600a60205260409020805486919083908110611b8357611b83612d0c565b90600052602060002090600302016001016000828254611ba39190612956565b90915550611bb390508286611671565b60009450611bce565b80611bc681612dc1565b91505061193a565b5050611bdb600182612a6a565b905061190e565b6000611bed60025490565b6019546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190611c23903090600401612610565b602060405180830381865afa158015611c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c649190612c25565b9050611c7e8260135483611c789190612a6a565b90611dcc565b600c555050565b610d8c8363a9059cbb60e01b8484604051602401611ca4929190612fa5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526120ee565b6000611cf26011548361179f90919063ffffffff16565b905081600d6000828254611d069190612956565b9250508190555081600e6000828254611d1f9190612956565b925050819055508060126000828254611d389190612956565b90915550611d469050611de1565b601954611d5e906001600160a01b0316843085611e03565b6000611d75600c5484611dcc90919063ffffffff16565b9050611d81848261217d565b6001600160a01b03841660008181526009602052604090819020429055517febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a9061174f908690612592565b600061067183670de0b6b3a764000084612231565b600f54611def576000601055565b600d54600f54611dfe91611dcc565b601055565b61166b846323b872dd60e01b858585604051602401611ca493929190612fb3565b600b54600090611e3690600190612a6a565b90505b816001600160a01b0316600b8281548110611e5657611e56612d0c565b6000918252602090912001546001600160a01b03161415611e7657611e88565b611e81600182612a6a565b9050611e39565b805b600b54611e9990600190612a6a565b811015611f2457600b611ead826001612956565b81548110611ebd57611ebd612d0c565b600091825260209091200154600b80546001600160a01b039092169183908110611ee957611ee9612d0c565b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055611f1d600182612956565b9050611e8a565b50600b805480611f3657611f36612f8f565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b6001600160a01b038216611f825760405162461bcd60e51b81526004016106c99061300a565b6001600160a01b03821660009081526020819052604090205481811015611fbb5760405162461bcd60e51b81526004016106c990613057565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611fea908490612a6a565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061154f908690612592565b60008080600019848609848602925082811083820303915050670de0b6b3a76400008110612070578060405163698d9a0160e11b81526004016106c99190612592565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826120aa5780670de0b6b3a7640000850401945050505050610649565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6000612143826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122f99092919063ffffffff16565b805190915015610d8c57808060200190518101906121619190613090565b610d8c5760405162461bcd60e51b81526004016106c9906130f6565b6001600160a01b0382166121a35760405162461bcd60e51b81526004016106c990613138565b80600260008282546121b59190612956565b90915550506001600160a01b038216600090815260208190526040812080548392906121e2908490612956565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612225908590612592565b60405180910390a35050565b60008080600019858709858702925082811083820303915050806000141561226c5783828161226257612262613067565b0492505050610671565b838110612290578084604051631dcf306360e21b81526004016106c9929190612cf1565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60606123088484600085612310565b949350505050565b6060824710156123325760405162461bcd60e51b81526004016106c990613189565b843b6123505760405162461bcd60e51b81526004016106c9906131cb565b600080866001600160a01b0316858760405161236c91906131fd565b60006040518083038185875af1925050503d80600081146123a9576040519150601f19603f3d011682016040523d82523d6000602084013e6123ae565b606091505b50915091506123be8282866123c9565b979650505050505050565b606083156123d8575081610671565b8251156123e85782518084602001fd5b8160405162461bcd60e51b81526004016106c991906124f8565b508054600082556003029060005260206000209081019061139e91905b80821115612445576000808255600182015560028101805460ff1916905560030161241f565b5090565b805b811461139e57600080fd5b803561064981612449565b60006020828403121561247657612476600080fd5b60006123088484612456565b8015155b82525050565b602081016106498284612482565b60005b838110156124b557818101518382015260200161249d565b8381111561166b5750506000910152565b60006124d0825190565b8084526020840193506124e781856020860161249a565b601f01601f19169290920192915050565b6020808252810161067181846124c6565b60006001600160a01b038216610649565b61244b81612509565b80356106498161251a565b6000806040838503121561254457612544600080fd5b60006125508585612523565b925050602061256185828601612456565b9150509250929050565b60006020828403121561258057612580600080fd5b60006123088484612523565b80612486565b60208101610649828461258c565b6000806000606084860312156125b8576125b8600080fd5b60006125c48686612523565b93505060206125d586828701612523565b92505060406125e686828701612456565b9150509250925092565b60ff8116612486565b6020810161064982846125f0565b61248681612509565b602081016106498284612607565b6000806040838503121561263457612634600080fd5b60006125508585612456565b6000806000806080858703121561265957612659600080fd5b60006126658787612456565b945050602061267687828801612456565b935050604061268787828801612456565b925050606061269887828801612523565b91505092959194509250565b6000806000606084860312156126bc576126bc600080fd5b60006126c88686612456565b93505060206126d986828701612456565b92505060406125e686828701612523565b600061064982612509565b6000610649826126ea565b612486816126f5565b602081016106498284612700565b6000806040838503121561272d5761272d600080fd5b60006127398585612523565b925050602061256185828601612523565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156127865761278661274a565b6040525050565b600061279860405190565b90506127a48282612760565b919050565b600067ffffffffffffffff8211156127c3576127c361274a565b5060200290565b60006127dd6127d8846127a9565b61278d565b905080602084028301858111156127f6576127f6600080fd5b835b818110156128185761280a8782612456565b8352602092830192016127f8565b5050509392505050565b600082601f83011261283657612836600080fd5b60036123088482856127ca565b60006060828403121561285857612858600080fd5b60006123088484612822565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061288e57607f821691505b602082108114156128a1576128a1612864565b50919050565b60288152602081017f45524332303a207472616e7366657220616d6f756e74206578636565647320618152676c6c6f77616e636560c01b602082015290505b60400190565b60208082528101610649816128a7565b60178152602081017f43616e206e6f74206265207a65726f2061646472657373000000000000000000815290505b60200190565b60208082528101610649816128fc565b634e487b7160e01b600052601160045260246000fd5b6000821982111561296957612969612940565b500190565b60278152602081017f43616e206e6f7420776974686472617720756e74696c207468652066726f6e7a815266656e2074696d6560c81b602082015290506128e6565b602080825281016106498161296e565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c008152905061292a565b60208082528101610649816129c0565b603e8152602081017f4e6f7420656e6f7567682062616c616e636520746f20626520756e6c6f636b6581527f64206f7220796f757220776974686472617720616d6f756e7420697320300000602082015290506128e6565b6020808252810161064981612a02565b600082821015612a7c57612a7c612940565b500390565b602d8152602081017f4f6e6c7920746865206f776e6572206f722074686520757365722068696d736581526c1b198818d85b881c995d995c9d609a1b602082015290506128e6565b6020808252810161064981612a81565b60288152602081017f74686973207573657220686173206e6f2070656e64696e6720756e7374616b65815267081c995c5d595cdd60c21b602082015290506128e6565b6020808252810161064981612ad9565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815261292a565b6020808252810161064981612b2c565b60338152602081017f4f6e6c792074686520706f6c696379466c6f7720636f6e74726163742063616e8152721031b0b636103a3434b990333ab731ba34b7b760691b602082015290506128e6565b6020808252810161064981612b6c565b60258152602081017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77815264207a65726f60d81b602082015290506128e6565b6020808252810161064981612bca565b805161064981612449565b600060208284031215612c3a57612c3a600080fd5b60006123088484612c1a565b602c8152602081017f596f7520646f206e6f74206861766520656e6f75676820555344206f7220696e81526b1c1d5d080c08185b5bdd5b9d60a21b602082015290506128e6565b6020808252810161064981612c46565b60298152602081017f436f6c6c61746572616c20466163746f722073686f756c64206265206c61726781526806572207468616e20360bc1b602082015290506128e6565b6020808252810161064981612c9d565b60408101612cff828561258c565b610671602083018461258c565b634e487b7160e01b600052603260045260246000fd5b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015290506128e6565b6020808252810161064981612d22565b60238152602081017f52657761726420646973747269627574696f6e206d7573742073756d20746f2081526203130360ec1b602082015290506128e6565b6020808252810161064981612d73565b6000600019821415612dd557612dd5612940565b5060010190565b60608101612dea828661258c565b612df7602083018561258c565b612308604083018461258c565b60248152602081017f45524332303a20617070726f76652066726f6d20746865207a65726f206164648152637265737360e01b602082015290506128e6565b6020808252810161064981612e04565b60228152602081017f45524332303a20617070726f766520746f20746865207a65726f206164647265815261737360f01b602082015290506128e6565b6020808252810161064981612e53565b60258152602081017f45524332303a207472616e736665722066726f6d20746865207a65726f206164815264647265737360d81b602082015290506128e6565b6020808252810161064981612ea0565b60238152602081017f45524332303a207472616e7366657220746f20746865207a65726f206164647281526265737360e81b602082015290506128e6565b6020808252810161064981612ef0565b60268152602081017f45524332303a207472616e7366657220616d6f756e7420657863656564732062815265616c616e636560d01b602082015290506128e6565b6020808252810161064981612f3e565b634e487b7160e01b600052603160045260246000fd5b60408101612cff8285612607565b60608101612fc18286612607565b612df76020830185612607565b60218152602081017f45524332303a206275726e2066726f6d20746865207a65726f206164647265738152607360f81b602082015290506128e6565b6020808252810161064981612fce565b60228152602081017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e815261636560f01b602082015290506128e6565b602080825281016106498161301a565b634e487b7160e01b600052601260045260246000fd5b80151561244b565b80516106498161307d565b6000602082840312156130a5576130a5600080fd5b60006123088484613085565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015290506128e6565b60208082528101610649816130b1565b601f8152602081017f45524332303a206d696e7420746f20746865207a65726f2061646472657373008152905061292a565b6020808252810161064981613106565b60268152602081017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b602082015290506128e6565b6020808252810161064981613148565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000008152905061292a565b6020808252810161064981613199565b60006131e5825190565b6131f381856020860161249a565b9290920192915050565b61064981836131db56fea26469706673582212206bda7f4fd79efc41fd0edc78207b201e97e580f1059dcb4a67ce483730ff6f4064736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "checkCapacity(uint256)": {
        "params": {
          "_payoff": "Payoff of the policy to be bought"
        },
        "returns": {
          "_0": "Whether there is enough capacity in the pool for this payoff"
        }
      },
      "constructor": {
        "params": {
          "_degisLottery": "Lottery address",
          "_emergencyPool": "Emergency pool address",
          "_usdtAddress": "USDT address"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getUnlockedFor(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_unlockedAmount": "Unlocked amount of the pool"
        }
      },
      "getUserBalance(address)": {
        "details": "Used in many places so give it a seperate function",
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_userBalance": "Real balance of this user"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "payClaim(uint256,uint256,uint256,address)": {
        "params": {
          "_payoff": "Max payoff of the policy",
          "_premium": "Premium of the policy",
          "_realPayoff": "Real payoff of the policy",
          "_user": "Address of the policy claimer"
        }
      },
      "renounceOwnership()": {
        "details": "Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner."
      },
      "revertAllUnstakeRequest(address)": {
        "params": {
          "_user": "user's address"
        }
      },
      "revertUnstakeRequest(address)": {
        "params": {
          "_user": "user's address"
        }
      },
      "setCollateralFactor(uint256)": {
        "params": {
          "_factor": "The new collateral factor"
        }
      },
      "setFrozenTime(uint256)": {
        "params": {
          "_newFrozenTime": "New frozen time, in timestamp(s)"
        }
      },
      "setIncomeDistribution(uint256[3])": {
        "params": {
          "_newDistribution": "New distribution [LP, Lottery, Emergency]"
        }
      },
      "stake(uint256)": {
        "params": {
          "_amount": "The amount that the user want to stake"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "newOwner": "Address of the new owner"
        }
      },
      "unstake(uint256)": {
        "details": "Only unstake by yourself",
        "params": {
          "_amount": "The amount that the user want to unstake"
        }
      },
      "updateWhenBuy(uint256,uint256,address)": {
        "details": "Capacity check is done before calling this function",
        "params": {
          "_payoff": "Policy's payoff (max payoff)",
          "_premium": "Policy's premium",
          "_user": "Address of the buyer"
        }
      },
      "updateWhenExpire(uint256,uint256)": {
        "params": {
          "_payoff": "Policy's payoff (max payoff)",
          "_premium": "Policy's premium"
        }
      }
    },
    "title": "Insurance Pool",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "checkCapacity(uint256)": {
        "notice": "Check the conditions when receive new buying request"
      },
      "constructor": {
        "notice": "Constructor function"
      },
      "getUnlockedFor(address)": {
        "notice": "Get the balance that one user(LP) can unlock"
      },
      "getUserBalance(address)": {
        "notice": "Get the real balance: LPValue * LP_Num"
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "payClaim(uint256,uint256,uint256,address)": {
        "notice": "Pay a claim"
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."
      },
      "revertAllUnstakeRequest(address)": {
        "notice": "revert all unstake requests for a user"
      },
      "revertUnstakeRequest(address)": {
        "notice": "revert the last unstake request for a user"
      },
      "setCollateralFactor(uint256)": {
        "notice": "Change the collateral factor"
      },
      "setFrozenTime(uint256)": {
        "notice": "Set a new frozen time"
      },
      "setIncomeDistribution(uint256[3])": {
        "notice": "Set the premium reward distribution"
      },
      "setPolicyFlow(address)": {
        "notice": "Set the address of policyFlow"
      },
      "stake(uint256)": {
        "notice": "LPs stake assets into the pool"
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`)."
      },
      "unstake(uint256)": {
        "notice": "Unstake from the pool (May fail if a claim happens before this operation)"
      },
      "unstakeMax()": {
        "notice": "Unstake the max amount of a user"
      },
      "updateWhenBuy(uint256,uint256,address)": {
        "notice": "Update the pool variables when buying policies"
      },
      "updateWhenExpire(uint256,uint256)": {
        "notice": "Update the status when a policy expires"
      }
    },
    "notice": "Insurance pool is the reserved risk pool for flight delay product.         For simplicity, some state variables are in the InsurancePoolStore contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2448,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2454,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2456,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2458,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2460,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 14917,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "policyFlow",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 14919,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "emergencyPool",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 14921,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "purchaseIncentiveAmount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 14924,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "frozenTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 14934,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "userInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(UserInfo)14929_storage)"
      },
      {
        "astId": 14947,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "unstakeRequests",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_struct(UnstakeRequest)14941_storage)dyn_storage)"
      },
      {
        "astId": 14950,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "unstakeQueue",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 14952,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "LPValue",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 14954,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "totalStakingBalance",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 14956,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "realStakingBalance",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 14958,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "lockedBalance",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 14960,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "lockedRatio",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 14962,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "collateralFactor",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 14964,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "availableCapacity",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 14966,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "activePremiums",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 14970,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "rewardDistribution",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_uint256)3_storage"
      },
      {
        "astId": 21796,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "_owner",
        "offset": 0,
        "slot": "23",
        "type": "t_address"
      },
      {
        "astId": 2403,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "_status",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 12451,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "USDT",
        "offset": 0,
        "slot": "25",
        "type": "t_contract(IERC20)3056"
      },
      {
        "astId": 12454,
        "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
        "label": "degisLottery",
        "offset": 0,
        "slot": "26",
        "type": "t_contract(IDegisLottery)11789"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(UnstakeRequest)14941_storage)dyn_storage": {
        "base": "t_struct(UnstakeRequest)14941_storage",
        "encoding": "dynamic_array",
        "label": "struct InsurancePoolStore.UnstakeRequest[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDegisLottery)11789": {
        "encoding": "inplace",
        "label": "contract IDegisLottery",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3056": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(UnstakeRequest)14941_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct InsurancePoolStore.UnstakeRequest[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UnstakeRequest)14941_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserInfo)14929_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct InsurancePoolStore.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)14929_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(UnstakeRequest)14941_storage": {
        "encoding": "inplace",
        "label": "struct InsurancePoolStore.UnstakeRequest",
        "members": [
          {
            "astId": 14936,
            "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
            "label": "pendingAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14938,
            "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
            "label": "fulfilledAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14940,
            "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
            "label": "isPaidOut",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo)14929_storage": {
        "encoding": "inplace",
        "label": "struct InsurancePoolStore.UserInfo",
        "members": [
          {
            "astId": 14926,
            "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
            "label": "depositTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14928,
            "contract": "contracts/miserable-flight/InsurancePool.sol:InsurancePool",
            "label": "pendingBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}