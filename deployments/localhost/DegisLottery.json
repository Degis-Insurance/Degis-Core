{
  "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_DEGTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_randomGeneratorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AdminTokenRecovery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        }
      ],
      "name": "LotteryClose",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "injectedAmount",
          "type": "uint256"
        }
      ],
      "name": "LotteryFundInjection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pendingRewards",
          "type": "uint256"
        }
      ],
      "name": "LotteryNumberDrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        }
      ],
      "name": "LotteryOpen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "randomGenerator",
          "type": "address"
        }
      ],
      "name": "RandomNumberGeneratorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        }
      ],
      "name": "ReceiveRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "TicketsPurchase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "TicketsRedeem",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEGToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RewardsToNextLottery",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TICKET_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ticketNumbers",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_ticketAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "buyTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentLotteryId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drawLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentRoundWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stopIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_position",
          "type": "uint256"
        }
      ],
      "name": "getPoolTicketsInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stopIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        }
      ],
      "name": "getUserTicketsInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "injectFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lotteries",
      "outputs": [
        {
          "internalType": "enum DegisLottery.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finalNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomGenerator",
      "outputs": [
        {
          "internalType": "contract IRandomNumberGenerator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "receiveRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "receiveRward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverWrongTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ticketNumbers",
          "type": "uint256[]"
        }
      ],
      "name": "redeemTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operatorAddress",
          "type": "address"
        }
      ],
      "name": "setOperatorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_randomNumberGenerator",
          "type": "address"
        }
      ],
      "name": "setRandomNumberGenerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256[4]",
          "name": "_stageProportion",
          "type": "uint256[4]"
        }
      ],
      "name": "startLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userCheckPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usersRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usersTotalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        }
      ],
      "name": "viewUserAllTicketsInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startRound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endRound",
          "type": "uint256"
        }
      ],
      "name": "viewUserRewardsInfo",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4113062950ad5c89ab14d3321ea47a84c65f2c03ba016213865438b48ad24c73",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "transactionIndex": 0,
    "gasUsed": "3319444",
    "logsBloom": "0x
    "blockHash": "0x404c4d13d60834960d79308254704ba520f0e153d29279c7582299b675d44257",
    "transactionHash": "0x4113062950ad5c89ab14d3321ea47a84c65f2c03ba016213865438b48ad24c73",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8,
        "transactionHash": "0x4113062950ad5c89ab14d3321ea47a84c65f2c03ba016213865438b48ad24c73",
        "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x404c4d13d60834960d79308254704ba520f0e153d29279c7582299b675d44257"
      }
    ],
    "blockNumber": 8,
    "cumulativeGasUsed": "3319444",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "0x0165878A594ca255338adfa4d48449f69242Eb8F"
  ],
  "numDeployments": 1,
  "solcInputHash": "a36abfdb18cc74309b593cc1c7bfe74a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DEGTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomGeneratorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"LotteryClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"injectedAmount\",\"type\":\"uint256\"}],\"name\":\"LotteryFundInjection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"name\":\"LotteryNumberDrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"name\":\"LotteryOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"randomGenerator\",\"type\":\"address\"}],\"name\":\"RandomNumberGeneratorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"}],\"name\":\"ReceiveRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"TicketsPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"TicketsRedeem\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEGToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardsToNextLottery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TICKET_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ticketNumbers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ticketAmounts\",\"type\":\"uint256[]\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRoundWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stopIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"getPoolTicketsInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stopIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getUserTicketsInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"injectFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteries\",\"outputs\":[{\"internalType\":\"enum DegisLottery.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomGenerator\",\"outputs\":[{\"internalType\":\"contract IRandomNumberGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"receiveRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"receiveRward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ticketNumbers\",\"type\":\"uint256[]\"}],\"name\":\"redeemTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"setOperatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_randomNumberGenerator\",\"type\":\"address\"}],\"name\":\"setRandomNumberGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"_stageProportion\",\"type\":\"uint256[4]\"}],\"name\":\"startLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCheckPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"viewUserAllTicketsInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endRound\",\"type\":\"uint256\"}],\"name\":\"viewUserRewardsInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyTickets(uint256[],uint256[])\":{\"details\":\"Can not be called by a smart contract\",\"params\":{\"_ticketAmounts\":\"array of ticket amount\",\"_ticketNumbers\":\"array of ticket numbers between 0 and 9999\"}},\"closeLottery()\":{\"details\":\"Callable only by the operator\"},\"constructor\":{\"details\":\"RandomNumberGenerator must be deployed prior to this contract\",\"params\":{\"_DEGTokenAddress\":\"Address of the DEG token (for buying tickets)\",\"_USDTokenAddress\":\"Address of the USD token (for prize distribution)\",\"_randomGeneratorAddress\":\"Address of the RandomGenerator contract used to work with ChainLink VRF\"}},\"drawLottery()\":{\"details\":\"Callable only by the operator\"},\"getPoolTicketsInfo(uint256,uint256,uint256)\":{\"details\":\"May be a huge number, avoid reading this frequently\",\"params\":{\"_position\":\"Which level to check (0, 1, 2, 3), use 0 to check the 4-digit number\",\"_startIndex\":\"Start number\",\"_stopIndex\":\"Stop number\"}},\"injectFunds(uint256)\":{\"details\":\"Callable by owner(incentive) or injector address(insurancePool income) First transfer USD and then call this function to record\",\"params\":{\"_amount\":\"amount to inject \"}},\"receiveRewards(uint256)\":{\"details\":\"Callable by users only, not contract!\",\"params\":{\"_lotteryId\":\"lottery id\"}},\"receiveRward(uint256,address)\":{\"params\":{\"_lotteryId\":\"lottery id\",\"user\":\"user address\"}},\"recoverWrongTokens(address,uint256)\":{\"params\":{\"_tokenAddress\":\"the address of the token to withdraw\",\"_tokenAmount\":\"token amount to withdraw\"}},\"redeemTickets(uint256[])\":{\"details\":\"Callable by users\",\"params\":{\"_ticketNumbers\":\"Array of ticket numbers\"}},\"renounceOwnership()\":{\"details\":\"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.\"},\"setOperatorAddress(address)\":{\"details\":\"Only callable by the owner\",\"params\":{\"_operatorAddress\":\"address of the operator\"}},\"startLottery(uint256,uint256[4])\":{\"details\":\"Callable only by operator\",\"params\":{\"_endTime\":\"endTime of the lottery (timestamp in s)\",\"_stageProportion\":\"breakdown of rewards per bracket (must sum to 10,000)(100 <=> 1)\"}},\"transferOwnership(address)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"newOwner\":\"Address of the new owner\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyTickets(uint256[],uint256[])\":{\"notice\":\"Buy tickets for the current lottery round\"},\"closeLottery()\":{\"notice\":\"Close a lottery\"},\"constructor\":{\"notice\":\"Constructor function\"},\"drawLottery()\":{\"notice\":\"Draw the final number, calculate reward in DEG for each group,         and make this lottery claimable (need to wait for the random generator)\"},\"getPoolTicketsInfo(uint256,uint256,uint256)\":{\"notice\":\"Get pool tickets info\"},\"getUserTicketsInfo(address,uint256,uint256,uint256)\":{\"notice\":\"Get user tickets info\"},\"injectFunds(uint256)\":{\"notice\":\"Inject funds\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"receiveRewards(uint256)\":{\"notice\":\"Receive all awards from lottery before lottery id\"},\"receiveRward(uint256,address)\":{\"notice\":\"Receive award from a lottery\"},\"recoverWrongTokens(address,uint256)\":{\"notice\":\"Recover wrong tokens sent to the contract, only by the owner All tokens except DEG and USD are wrong tokens\"},\"redeemTickets(uint256[])\":{\"notice\":\"Redeem tickets for all lottery\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner.\"},\"setOperatorAddress(address)\":{\"notice\":\"Set operator, treasury, and injector addresses\"},\"startLottery(uint256,uint256[4])\":{\"notice\":\"Start the lottery\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lucky-box/DegisLottery.sol\":\"DegisLottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x86ebc6cea2b539c2d4a79a4754f7c90c43c45c9aaf0aab32ecffb1565afc5e0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"contracts/lucky-box/DegisLottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IRandomNumberGenerator.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract DegisLottery is ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    IERC20 public DEGToken;\\n    IERC20 public USDToken;\\n    IRandomNumberGenerator public randomGenerator;\\n\\n    address public operatorAddress;\\n\\n    uint256 public constant TICKET_PRICE = 10 ether;\\n\\n    struct Tickets {\\n        mapping(uint256 => uint256) ticketsWeight;\\n        mapping(uint256 => uint256) ticketsAmount;\\n    }\\n    Tickets poolTickets;\\n    mapping(address => Tickets) usersTickets;\\n\\n    enum Status {\\n        Pending,\\n        Open,\\n        Close,\\n        Claimable\\n    }\\n    struct LotteryInfo {\\n        Status status;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256[4] stageProportion;\\n        uint256[4] stageReward;\\n        uint256[4] stageAmount;\\n        uint256[4] stageWeight;\\n        uint256 totalRewards;\\n        uint256 pendingRewards;\\n        uint256 finalNumber;\\n    }\\n    mapping(uint256 => LotteryInfo) public lotteries;\\n\\n    uint256 public RewardsToNextLottery;\\n\\n    uint256 public allPendingRewards;\\n\\n    uint256 public currentLotteryId; // Total Rounds\\n\\n    mapping(address => uint256) public userCheckPoint;\\n    mapping(address => uint256) public usersTotalRewards;\\n\\n    mapping(address => mapping(uint256 => uint256)) public usersRewards;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event TicketsPurchase(\\n        address indexed buyer,\\n        uint256 indexed lotteryId,\\n        uint256 totalAmount\\n    );\\n    event TicketsRedeem(\\n        address indexed redeemer,\\n        uint256 indexed lotteryId,\\n        uint256 totalAmount\\n    );\\n    event LotteryOpen(\\n        uint256 indexed lotteryId,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 totalRewards\\n    );\\n    event LotteryNumberDrawn(\\n        uint256 indexed lotteryId,\\n        uint256 finalNumber,\\n        uint256 pendingRewards\\n    );\\n\\n    event ReceiveRewards(\\n        address indexed claimer,\\n        uint256 amount,\\n        uint256 indexed lotteryId\\n    );\\n\\n    event LotteryClose(uint256 indexed lotteryId);\\n\\n    event LotteryFundInjection(\\n        uint256 indexed lotteryId,\\n        uint256 injectedAmount\\n    );\\n    event RandomNumberGeneratorChanged(address randomGenerator);\\n    event OperatorAddressChanged(address operator);\\n    event AdminTokenRecovery(address indexed token, uint256 amount);\\n\\n    /**\\n     * @notice Constructor function\\n     * @dev RandomNumberGenerator must be deployed prior to this contract\\n     * @param _DEGTokenAddress Address of the DEG token (for buying tickets)\\n     * @param _USDTokenAddress Address of the USD token (for prize distribution)\\n     * @param _randomGeneratorAddress Address of the RandomGenerator contract used to work with ChainLink VRF\\n     */\\n    constructor(\\n        address _DEGTokenAddress,\\n        address _USDTokenAddress,\\n        address _randomGeneratorAddress\\n    ) {\\n        DEGToken = IERC20(_DEGTokenAddress);\\n        USDToken = IERC20(_USDTokenAddress);\\n        randomGenerator = IRandomNumberGenerator(_randomGeneratorAddress);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    modifier notContract() {\\n        require(!_isContract(_msgSender()), \\\"Contract not allowed\\\");\\n        require(_msgSender() == tx.origin, \\\"Proxy contract not allowed\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            _msgSender() == operatorAddress || _msgSender() == owner(),\\n            \\\"Not operator\\\"\\n        );\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function getCurrentRoundWeight() public view returns (uint256) {\\n        return ((currentLotteryId + 24) * 1000000) / (currentLotteryId + 12);\\n    }\\n\\n    /**\\n     * @notice Get pool tickets info\\n     * @dev May be a huge number, avoid reading this frequently\\n     * @param _startIndex Start number\\n     * @param _stopIndex Stop number\\n     * @param _position Which level to check (0, 1, 2, 3), use 0 to check the 4-digit number\\n     */\\n    function getPoolTicketsInfo(\\n        uint256 _startIndex,\\n        uint256 _stopIndex,\\n        uint256 _position\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        uint256[] memory ticketsNumber = new uint256[](\\n            _stopIndex - _startIndex + 1\\n        );\\n        uint256[] memory ticketsAmount = new uint256[](\\n            _stopIndex - _startIndex + 1\\n        );\\n        uint256[] memory ticketsWeight = new uint256[](\\n            _stopIndex - _startIndex + 1\\n        );\\n\\n        for (uint256 i = _startIndex; i <= _stopIndex; i++) {\\n            uint256 encodedNumber = _encodedNumber(i, _position);\\n\\n            ticketsNumber[i - _startIndex] = i;\\n            ticketsAmount[i - _startIndex] = poolTickets.ticketsAmount[\\n                encodedNumber\\n            ];\\n            ticketsWeight[i - _startIndex] = poolTickets.ticketsWeight[\\n                encodedNumber\\n            ];\\n        }\\n        return (ticketsNumber, ticketsAmount, ticketsWeight);\\n    }\\n\\n    /**\\n     * @notice Get user tickets info\\n     */\\n    function getUserTicketsInfo(\\n        address user,\\n        uint256 _startIndex,\\n        uint256 _stopIndex,\\n        uint256 position\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        uint256 length = _stopIndex - _startIndex + 1;\\n\\n        uint256[] memory ticketsNumber = new uint256[](length);\\n        uint256[] memory ticketsAmount = new uint256[](length);\\n        uint256[] memory ticketsWeight = new uint256[](length);\\n\\n        for (uint256 i = _startIndex; i <= _stopIndex; i++) {\\n            uint256 encodedNumber = _encodedNumber(i, position);\\n            ticketsNumber[i - _startIndex] = i;\\n            ticketsAmount[i - _startIndex] = usersTickets[user].ticketsAmount[\\n                encodedNumber\\n            ];\\n            ticketsWeight[i - _startIndex] = usersTickets[user].ticketsWeight[\\n                encodedNumber\\n            ];\\n        }\\n        return (ticketsNumber, ticketsAmount, ticketsWeight);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Set operator, treasury, and injector addresses\\n     * @dev Only callable by the owner\\n     * @param _operatorAddress address of the operator\\n     */\\n    function setOperatorAddress(address _operatorAddress) external onlyOwner {\\n        require(_operatorAddress != address(0), \\\"Cannot be zero address\\\");\\n\\n        operatorAddress = _operatorAddress;\\n\\n        emit OperatorAddressChanged(_operatorAddress);\\n    }\\n\\n    function setRandomNumberGenerator(address _randomNumberGenerator)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _randomNumberGenerator != address(0),\\n            \\\"Can not be zero address\\\"\\n        );\\n\\n        randomGenerator = IRandomNumberGenerator(_randomNumberGenerator);\\n\\n        emit RandomNumberGeneratorChanged(_randomNumberGenerator);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Start the lottery\\n     * @dev Callable only by operator\\n     * @param _endTime endTime of the lottery (timestamp in s)\\n     * @param _stageProportion breakdown of rewards per bracket (must sum to 10,000)(100 <=> 1)\\n     */\\n    function startLottery(\\n        uint256 _endTime,\\n        uint256[4] calldata _stageProportion\\n    ) external onlyOperator {\\n        require(\\n            (currentLotteryId == 0) ||\\n                (lotteries[currentLotteryId].status == Status.Claimable),\\n            \\\"Not time to start lottery\\\"\\n        );\\n\\n        require(\\n            (_stageProportion[0] +\\n                _stageProportion[1] +\\n                _stageProportion[2] +\\n                _stageProportion[3]) <= 10000,\\n            \\\"Total rewards of each bracket should <= 10000\\\"\\n        );\\n\\n        currentLotteryId++;\\n\\n        lotteries[currentLotteryId] = LotteryInfo({\\n            status: Status.Open,\\n            startTime: block.timestamp,\\n            endTime: _endTime,\\n            stageProportion: _stageProportion,\\n            stageReward: [uint256(0), uint256(0), uint256(0), uint256(0)],\\n            stageAmount: [uint256(0), uint256(0), uint256(0), uint256(0)],\\n            stageWeight: [uint256(0), uint256(0), uint256(0), uint256(0)],\\n            totalRewards: RewardsToNextLottery,\\n            pendingRewards: 0,\\n            finalNumber: 0\\n        });\\n        RewardsToNextLottery = 0;\\n\\n        emit LotteryOpen(\\n            currentLotteryId,\\n            lotteries[currentLotteryId].startTime,\\n            lotteries[currentLotteryId].endTime,\\n            lotteries[currentLotteryId].totalRewards\\n        );\\n    }\\n\\n    /**\\n     * @notice Close a lottery\\n     * @dev Callable only by the operator\\n     */\\n    function closeLottery() external onlyOperator nonReentrant {\\n        require(\\n            lotteries[currentLotteryId].status == Status.Open,\\n            \\\"Current lottery is not open\\\"\\n        );\\n\\n        lotteries[currentLotteryId].endTime = block.timestamp;\\n\\n        // Request a random number from the generator\\n        randomGenerator.getRandomNumber();\\n\\n        // Update the lottery status\\n        lotteries[currentLotteryId].status = Status.Close;\\n\\n        emit LotteryClose(currentLotteryId);\\n    }\\n\\n    /**\\n     * @notice Buy tickets for the current lottery round\\n     * @dev Can not be called by a smart contract\\n     * @param _ticketNumbers array of ticket numbers between 0 and 9999\\n     * @param _ticketAmounts array of ticket amount\\n     */\\n    function buyTickets(\\n        uint256[] calldata _ticketNumbers,\\n        uint256[] calldata _ticketAmounts\\n    ) external notContract nonReentrant {\\n        require(_ticketNumbers.length != 0, \\\"No tickets are being bought\\\");\\n        require(\\n            _ticketNumbers.length == _ticketAmounts.length,\\n            \\\"Different lengths\\\"\\n        );\\n\\n        require(\\n            lotteries[currentLotteryId].status == Status.Open,\\n            \\\"Current lottery is not open\\\"\\n        );\\n\\n        if (userCheckPoint[_msgSender()] == 0) {\\n            userCheckPoint[_msgSender()] = currentLotteryId;\\n        }\\n\\n        if (userCheckPoint[_msgSender()] < currentLotteryId) {\\n            receiveRewards(currentLotteryId - 1);\\n        }\\n\\n        uint256 roundWeight = getCurrentRoundWeight();\\n\\n        uint256 totalAmount = 0;\\n\\n        for (uint256 i = 0; i < _ticketNumbers.length; i++) {\\n            _buyTicket(\\n                poolTickets,\\n                _ticketNumbers[i],\\n                _ticketAmounts[i],\\n                roundWeight * _ticketAmounts[i]\\n            );\\n            _buyTicket(\\n                usersTickets[_msgSender()],\\n                _ticketNumbers[i],\\n                _ticketAmounts[i],\\n                roundWeight * _ticketAmounts[i]\\n            );\\n            totalAmount += _ticketAmounts[i];\\n        }\\n\\n        DEGToken.safeTransferFrom(\\n            address(_msgSender()),\\n            address(this),\\n            totalAmount * TICKET_PRICE\\n        );\\n\\n        emit TicketsPurchase(_msgSender(), currentLotteryId, totalAmount);\\n    }\\n\\n    /**\\n     * @notice Redeem tickets for all lottery\\n     * @param _ticketNumbers Array of ticket numbers\\n     * @dev Callable by users\\n     */\\n    function redeemTickets(uint256[] calldata _ticketNumbers)\\n        external\\n        notContract\\n        nonReentrant\\n    {\\n        require(_ticketNumbers.length != 0, \\\"No tickets are being redeem\\\");\\n\\n        require(\\n            lotteries[currentLotteryId].status == Status.Open,\\n            \\\"Sorry, current lottery is not open\\\"\\n        );\\n\\n        if (userCheckPoint[msg.sender] == 0) {\\n            userCheckPoint[msg.sender] = currentLotteryId;\\n        }\\n\\n        if (userCheckPoint[msg.sender] < currentLotteryId) {\\n            receiveRewards(currentLotteryId - 1);\\n        }\\n\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < _ticketNumbers.length; i++) {\\n            uint256 encodedNumber = _encodedNumber(_ticketNumbers[i], 3);\\n\\n            uint256 ticketAmount = usersTickets[msg.sender].ticketsAmount[\\n                encodedNumber\\n            ];\\n            uint256 ticketWight = usersTickets[msg.sender].ticketsWeight[\\n                encodedNumber\\n            ];\\n            _redeemTicket(\\n                poolTickets,\\n                _ticketNumbers[i],\\n                ticketAmount,\\n                ticketWight\\n            );\\n            _redeemTicket(\\n                usersTickets[_msgSender()],\\n                _ticketNumbers[i],\\n                ticketAmount,\\n                ticketWight\\n            );\\n            totalAmount += ticketAmount;\\n        }\\n\\n        require(totalAmount != 0, \\\"No tickets are being bought\\\");\\n\\n        DEGToken.safeTransfer(_msgSender(), totalAmount * TICKET_PRICE);\\n\\n        emit TicketsRedeem(_msgSender(), currentLotteryId, totalAmount);\\n    }\\n\\n    /**\\n     * @notice Inject funds\\n     * @param _amount amount to inject \\n     * @dev Callable by owner(incentive) or injector address(insurancePool income)\\n            First transfer USD and then call this function to record\\n     */\\n    function injectFunds(uint256 _amount) external onlyOperator nonReentrant {\\n        USDToken.safeTransferFrom(_msgSender(), address(this), _amount);\\n\\n        if (lotteries[currentLotteryId].status == Status.Open) {\\n            lotteries[currentLotteryId].totalRewards += _amount;\\n        } else RewardsToNextLottery += _amount;\\n\\n        // tag: This place may need change\\n        require(\\n            allPendingRewards + lotteries[currentLotteryId].totalRewards <=\\n                USDToken.balanceOf(address(this)),\\n            \\\"Wrong USD amount\\\"\\n        );\\n\\n        emit LotteryFundInjection(currentLotteryId, _amount);\\n    }\\n\\n    /**\\n     * @notice Draw the final number, calculate reward in DEG for each group,\\n     *         and make this lottery claimable (need to wait for the random generator)\\n     * @dev Callable only by the operator\\n     */\\n    function drawLottery() external onlyOperator nonReentrant {\\n        require(\\n            lotteries[currentLotteryId].status == Status.Close,\\n            \\\"this lottery has not closed, you should first close it\\\"\\n        );\\n        require(\\n            currentLotteryId == randomGenerator.latestLotteryId(),\\n            \\\"the final number has not been drawn\\\"\\n        );\\n\\n        // Get the final lucky numbers from randomGenerator\\n        uint256 finalNumber = randomGenerator.randomResult();\\n\\n        uint256 lastAmount = 0;\\n        uint256 lastWeight = 0;\\n\\n        LotteryInfo storage currentLottery = lotteries[currentLotteryId];\\n\\n        uint256 tempPendingRewards = 0;\\n\\n        for (uint256 j = 0; j < 4; j++) {\\n            uint256 i = 3 - j;\\n\\n            uint256 encodedNumber = _encodedNumber(finalNumber, i);\\n\\n            currentLottery.stageAmount[i] =\\n                poolTickets.ticketsAmount[encodedNumber] -\\n                lastAmount;\\n            lastAmount = poolTickets.ticketsAmount[encodedNumber];\\n\\n            currentLottery.stageWeight[i] =\\n                poolTickets.ticketsWeight[encodedNumber] -\\n                lastWeight;\\n            lastWeight = poolTickets.ticketsWeight[encodedNumber];\\n\\n            if (currentLottery.stageAmount[i] == 0)\\n                currentLottery.stageReward[i] = 0;\\n            else\\n                currentLottery.stageReward[i] =\\n                    (currentLottery.stageProportion[i] *\\n                        currentLottery.totalRewards) /\\n                    10000;\\n\\n            tempPendingRewards += currentLottery.stageReward[i];\\n        }\\n        currentLottery.pendingRewards += tempPendingRewards;\\n\\n        RewardsToNextLottery =\\n            currentLottery.totalRewards -\\n            currentLottery.pendingRewards;\\n\\n        require(\\n            allPendingRewards + currentLottery.totalRewards <=\\n                USDToken.balanceOf(address(this)),\\n            \\\"Wrong USD amount\\\"\\n        );\\n\\n        // Update internal statuses for this lottery round\\n        currentLottery.finalNumber = finalNumber;\\n        currentLottery.status = Status.Claimable;\\n\\n        // Update all pending rewards\\n        allPendingRewards += currentLottery.pendingRewards;\\n\\n        emit LotteryNumberDrawn(\\n            currentLotteryId,\\n            finalNumber, // final result for this round\\n            lotteries[currentLotteryId].pendingRewards\\n        );\\n    }\\n\\n    /**\\n     * @notice Receive award from a lottery\\n     * @param _lotteryId lottery id\\n     * @param user user address\\n     */\\n    function receiveRward(uint256 _lotteryId, address user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 award = 0;\\n        uint256 lastWeight = 0;\\n        uint256 finalNumber = lotteries[_lotteryId].finalNumber;\\n        for (uint256 j = 0; j < 4; j++) {\\n            uint256 i = 3 - j;\\n            uint256 encodedNumber = _encodedNumber(finalNumber, i);\\n            uint256 weight = usersTickets[user].ticketsWeight[encodedNumber] -\\n                lastWeight;\\n            lastWeight = usersTickets[user].ticketsWeight[encodedNumber];\\n            if (lotteries[_lotteryId].stageWeight[i] != 0) {\\n                award +=\\n                    (lotteries[_lotteryId].stageReward[i] * weight) /\\n                    lotteries[_lotteryId].stageWeight[i];\\n            }\\n        }\\n\\n        return award;\\n    }\\n\\n    /**\\n     * @notice Receive all awards from lottery before lottery id\\n     * @param _lotteryId lottery id\\n     * @dev Callable by users only, not contract!\\n     */\\n    function receiveRewards(uint256 _lotteryId) public notContract {\\n        require(\\n            lotteries[_lotteryId].status == Status.Claimable,\\n            \\\"this round of lottery are not ready for claiming\\\"\\n        );\\n\\n        require(\\n            userCheckPoint[msg.sender] <= _lotteryId,\\n            \\\"all awards have been received\\\"\\n        );\\n\\n        uint256 awards = 0;\\n\\n        for (uint256 i = userCheckPoint[msg.sender]; i <= _lotteryId; i++) {\\n            uint256 award = receiveRward(i, msg.sender);\\n            awards += award;\\n            lotteries[i].pendingRewards -= award;\\n\\n            usersRewards[msg.sender][i] = award;\\n            usersTotalRewards[msg.sender] += award;\\n        }\\n        userCheckPoint[msg.sender] = _lotteryId + 1;\\n\\n        allPendingRewards -= awards;\\n\\n        // require(awards != 0, \\\"no awards\\\");\\n\\n        // Transfer the prize to winner\\n        if (awards != 0) {\\n            USDToken.safeTransfer(msg.sender, awards);\\n        }\\n        emit ReceiveRewards(msg.sender, awards, _lotteryId);\\n    }\\n\\n    /**\\n     * @notice Recover wrong tokens sent to the contract, only by the owner\\n               All tokens except DEG and USD are wrong tokens\\n     * @param _tokenAddress the address of the token to withdraw\\n     * @param _tokenAmount token amount to withdraw\\n     */\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\\n        external\\n        onlyOwner\\n    {\\n        require(_tokenAddress != address(DEGToken), \\\"Cannot recover DEG token\\\");\\n\\n        IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\\n\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Update the status to finish buying a ticket\\n     * @param tickets Tickets to update\\n     * @param _ticketNumber Original number of the ticket\\n     * @param _ticketAmount Amount of this number are being bought\\n     * @param _ticketWeight Weight of this ticket, depends on round\\n     */\\n    function _buyTicket(\\n        Tickets storage tickets,\\n        uint256 _ticketNumber,\\n        uint256 _ticketAmount,\\n        uint256 _ticketWeight\\n    ) internal {\\n        for (uint256 i = 0; i < 4; i++) {\\n            uint256 encodedNumber = _encodedNumber(_ticketNumber, i);\\n            tickets.ticketsWeight[encodedNumber] += _ticketWeight;\\n            tickets.ticketsAmount[encodedNumber] += _ticketAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Update the status to finish redeeming a ticket\\n     * @param tickets Tickets to update\\n     * @param _ticketNumber Original number of the ticket\\n     * @param _ticketAmount Amount of this number are being redeemed\\n     * @param _ticketWeight Weight of this ticket, depends on round\\n     */\\n    function _redeemTicket(\\n        Tickets storage tickets,\\n        uint256 _ticketNumber,\\n        uint256 _ticketAmount,\\n        uint256 _ticketWeight\\n    ) internal {\\n        for (uint256 i = 0; i < 4; i++) {\\n            uint256 encodedNumber = _encodedNumber(_ticketNumber, i);\\n            tickets.ticketsWeight[encodedNumber] -= _ticketWeight;\\n            tickets.ticketsAmount[encodedNumber] -= _ticketAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the encoded number form\\n     * @param _number The original number\\n     * @param _position The number's position/level (0, 1, 2, 3)\\n     */\\n    function _encodedNumber(uint256 _number, uint256 _position)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_number % (10**(_position + 1))) + _position * 10000;\\n    }\\n\\n    /**\\n     * @notice Check if an address is a contract\\n     */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n\\n    //\\n    //\\n\\n    ///\\n\\n    //\\n\\n    //\\n\\n    function _viewUserTicetAmount(address user, uint256 encodedNumber)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return usersTickets[user].ticketsAmount[encodedNumber];\\n    }\\n\\n    function _viewUserTicetWeight(address user, uint256 encodedNumber)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return usersTickets[user].ticketsWeight[encodedNumber];\\n    }\\n\\n    function viewUserAllTicketsInfo(address user, uint256 maxAmount)\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256\\n        )\\n    {\\n        uint256[] memory ticketsNumber = new uint256[](maxAmount);\\n        uint256[] memory ticketsAmount = new uint256[](maxAmount);\\n        uint256[] memory ticketsWeight = new uint256[](maxAmount);\\n\\n        uint256 amount = 0;\\n        uint256 number = 0;\\n        uint256 i0 = 0;\\n        uint256 i1 = 0;\\n        uint256 i2 = 0;\\n        uint256 i3 = 0;\\n\\n        for (i0 = 0; i0 <= 9; i0++) {\\n            number = i0;\\n            if (_viewUserTicetAmount(user, _encodedNumber(number, 0)) == 0)\\n                continue;\\n            for (i1 = 0; i1 <= 9; i1++) {\\n                number = i0 + i1 * 10;\\n                if (_viewUserTicetAmount(user, _encodedNumber(number, 1)) == 0)\\n                    continue;\\n                for (i2 = 0; i2 <= 9; i2++) {\\n                    number = i0 + i1 * 10 + i2 * 100;\\n                    if (\\n                        _viewUserTicetAmount(user, _encodedNumber(number, 2)) ==\\n                        0\\n                    ) continue;\\n                    for (i3 = 0; i3 <= 9; i3++) {\\n                        number = i0 + i1 * 10 + i2 * 100 + i3 * 1000;\\n                        if (\\n                            _viewUserTicetAmount(\\n                                user,\\n                                _encodedNumber(number, 3)\\n                            ) == 0\\n                        ) continue;\\n                        ticketsNumber[amount] = number;\\n                        ticketsAmount[amount] = _viewUserTicetAmount(\\n                            user,\\n                            _encodedNumber(number, 3)\\n                        );\\n                        ticketsWeight[amount] = _viewUserTicetWeight(\\n                            user,\\n                            _encodedNumber(number, 3)\\n                        );\\n                        amount++;\\n                        if (amount >= maxAmount)\\n                            return (\\n                                ticketsNumber,\\n                                ticketsAmount,\\n                                ticketsWeight,\\n                                amount\\n                            );\\n                    }\\n                }\\n            }\\n        }\\n        return (ticketsNumber, ticketsAmount, ticketsWeight, amount);\\n    }\\n\\n    function viewUserRewardsInfo(\\n        address user,\\n        uint256 _startRound,\\n        uint256 _endRound\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        require(\\n            _startRound <= _endRound,\\n            \\\"End lottery smaller than start lottery\\\"\\n        );\\n        require(_endRound <= currentLotteryId, \\\"End lottery round not open\\\");\\n\\n        require(\\n            lotteries[_endRound].status == Status.Claimable,\\n            \\\"this round of lottery are not ready for claiming\\\"\\n        );\\n\\n        uint256[] memory lotteryIds = new uint256[](\\n            _endRound - _startRound + 1\\n        );\\n        uint256[] memory userRewards = new uint256[](\\n            _endRound - _startRound + 1\\n        );\\n        uint256[] memory userDrawed = new uint256[](\\n            _endRound - _startRound + 1\\n        );\\n        uint256 userStartLotteryId = userCheckPoint[user];\\n        for (uint256 i = _startRound; i <= _endRound; i++) {\\n            lotteryIds[i - _startRound] = i;\\n            if (i < userStartLotteryId) {\\n                userDrawed[i - _startRound] = 1;\\n                userRewards[i - _startRound] = usersRewards[user][i];\\n            } else {\\n                userDrawed[i - _startRound] = 0;\\n                userRewards[i - _startRound] = receiveRward(i, user);\\n            }\\n        }\\n        return (lotteryIds, userRewards, userDrawed);\\n    }\\n}\\n\",\"keccak256\":\"0x006e18d7aaea0dbc9555545745ea83970b4b487df5eac5c8b00a23625c6a316c\",\"license\":\"MIT\"},\"contracts/lucky-box/interfaces/IRandomNumberGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IRandomNumberGenerator {\\n    /**\\n     * @notice Views random result\\n     */\\n    function getRandomNumber() external;\\n\\n    function randomResult() external view returns (uint32);\\n\\n    function latestLotteryId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbb69b3b7389b6dedb63fdb0da79ed305192384e8ce2a2c3176fd022705862929\",\"license\":\"MIT\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xb06279e6f1b96475d682c29d19535cc444d7b2e4aa60c8c7b4b0f032230ebff0\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. It will not be possible to call\\n     *         `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * @dev    Renouncing ownership will leave the contract without an owner,\\n     *         thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Can only be called by the current owner.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Internal function without access restriction.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x573a48e60c5226b8470bc2d8ba1f4436c89d865fc83de5449de9d8af0c8cb81a\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80638b06a51f1161010f578063d07f8a43116100a2578063e359ebec11610071578063e359ebec14610464578063e6c1066114610477578063f2fde38b1461048a578063f43d11af1461049d57600080fd5b8063d07f8a4314610418578063d3c89b681461042b578063d77868da1461043e578063dcbad90d1461045157600080fd5b8063929a25ba116100de578063929a25ba146103af578063967159f3146103cf5780639dd693ed146103e2578063c05851441461040557600080fd5b80638b06a51f146103495780638da5cb5b146103695780638f966b4f1461037a5780638fab78b51461038d57600080fd5b80633f138d4b116101875780636be4097c116101565780636be4097c1461031d5780636fd0981614610326578063715018a61461032e57806386c594181461033657600080fd5b80633f138d4b146102d95780634019c948146102ec578063605f73a81461030c57806369d40f781461031557600080fd5b80631398e076116101c35780631398e076146102545780631a95f15f146102ad57806327e605ec146102bc5780632f1d5a60146102c657600080fd5b8063045abca0146101ea5780630db0bf5914610209578063127effb214610234575b600080fd5b6101f3600a5481565b60405161020091906128fe565b60405180910390f35b6101f361021736600461294d565b600f60209081526000928352604080842090915290825290205481565b600554610247906001600160a01b031681565b6040516102009190612993565b61029b6102623660046129a1565b60096020526000908152604090208054600182015460028301546013840154601485015460159095015460ff9094169492939192909186565b60405161020096959493929190612a0b565b6101f3678ac7230489e8000081565b6102c46104b0565b005b6102c46102d4366004612a5a565b610951565b6102c46102e736600461294d565b610a06565b6002546102ff906001600160a01b031681565b6040516102009190612a9a565b6101f3600b5481565b6101f3610ac6565b6101f3600c5481565b6102c4610b01565b6102c4610c77565b6003546102ff906001600160a01b031681565b6101f3610357366004612a5a565b600d6020526000908152604090205481565b6001546001600160a01b0316610247565b6101f3610388366004612aa8565b610cbc565b6103a061039b366004612adb565b610e09565b60405161020093929190612b89565b6101f36103bd366004612a5a565b600e6020526000908152604090205481565b6102c46103dd366004612c1c565b610fee565b6103f56103f036600461294d565b61126d565b6040516102009493929190612c63565b6102c4610413366004612cab565b6115bd565b6102c4610426366004612a5a565b611850565b6102c4610439366004612d36565b6118fa565b6102c461044c3660046129a1565b611bdd565b6004546102ff906001600160a01b031681565b6102c46104723660046129a1565b611dda565b6103a0610485366004612d69565b611fca565b6102c4610498366004612a5a565b6122a9565b6103a06104ab366004612d8d565b612314565b6005546001600160a01b0316336001600160a01b031614806104dc57506001546001600160a01b031633145b6105015760405162461bcd60e51b81526004016104f890612e12565b60405180910390fd5b600260005414156105245760405162461bcd60e51b81526004016104f890612e54565b60026000818155600c5481526009602052604090205460ff16600381111561054e5761054e6129c2565b1461056b5760405162461bcd60e51b81526004016104f890612eb7565b600480546040805163776c70f760e11b815290516001600160a01b039092169263eed8e1ee9282820192602092908290030181865afa1580156105b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d69190612ed2565b600c54146105f65760405162461bcd60e51b81526004016104f890612f31565b6000600460009054906101000a90046001600160a01b03166001600160a01b03166342619f666040518163ffffffff1660e01b8152600401602060405180830381865afa15801561064b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066f9190612f58565b600c54600090815260096020526040812063ffffffff92909216925090819081805b60048110156107f65760006106a7826003612f8f565b905060006106b588836124fd565b6000818152600760205260409020549091506106d2908890612f8f565b85600b0183600481106106e7576106e7612fa6565b0155600081815260076020908152604080832054600690925290912054909750610712908790612f8f565b85600f01836004811061072757610727612fa6565b01556000818152600660205260409020549550600b8501826004811061074f5761074f612fa6565b015461077357600085600701836004811061076c5761076c612fa6565b01556107be565b612710856013015486600301846004811061079057610790612fa6565b015461079c9190612fbc565b6107a69190612ff1565b8560070183600481106107bb576107bb612fa6565b01555b8460070182600481106107d3576107d3612fa6565b01546107df9085613005565b9350505080806107ee9061301d565b915050610691565b508082601401600082825461080b9190613005565b9091555050601482015460138301546108249190612f8f565b600a556003546040516370a0823160e01b81526001600160a01b03909116906370a0823190610857903090600401612993565b602060405180830381865afa158015610874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108989190612ed2565b8260130154600b546108aa9190613005565b11156108c85760405162461bcd60e51b81526004016104f89061305d565b60158201859055815460ff191660031782556014820154600b80546000906108f1908490613005565b9091555050600c54600081815260096020526040908190206014015490517f98e31a6607b8b15b4d5b91de54f4c09ffe4c4cf162aa532c70b5213754e2e7039161093d9189919061306d565b60405180910390a250506001600055505050565b336109646001546001600160a01b031690565b6001600160a01b03161461098a5760405162461bcd60e51b81526004016104f8906130b8565b6001600160a01b0381166109b05760405162461bcd60e51b81526004016104f8906130f3565b600580546001600160a01b0319166001600160a01b0383161790556040517f2cbac2b64384bea29a06e4e8a692a6e5320bfa529be0407a03d41605cb698173906109fb908390612993565b60405180910390a150565b33610a196001546001600160a01b031690565b6001600160a01b031614610a3f5760405162461bcd60e51b81526004016104f8906130b8565b6002546001600160a01b0383811691161415610a6d5760405162461bcd60e51b81526004016104f890613135565b610a816001600160a01b038316338361253c565b816001600160a01b03167f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab7812982604051610aba91906128fe565b60405180910390a25050565b6000600c54600c610ad79190613005565b600c54610ae5906018613005565b610af290620f4240612fbc565b610afc9190612ff1565b905090565b6005546001600160a01b0316336001600160a01b03161480610b2d57506001546001600160a01b031633145b610b495760405162461bcd60e51b81526004016104f890612e12565b60026000541415610b6c5760405162461bcd60e51b81526004016104f890612e54565b60026000556001600c5460009081526009602052604090205460ff166003811115610b9957610b996129c2565b14610bb65760405162461bcd60e51b81526004016104f890613177565b600c546000908152600960205260408082204260029091015560048054825163dbdff2c160e01b815292516001600160a01b039091169363dbdff2c193808401939192919082900301818387803b158015610c1057600080fd5b505af1158015610c24573d6000803e3d6000fd5b5050600c8054600090815260096020526040808220805460ff19166002179055915491519193507f8bc84e5d97533c428862626ac41fe7bc09b1ea2ed5e9e330d84092db8df15366925090a26001600055565b33610c8a6001546001600160a01b031690565b6001600160a01b031614610cb05760405162461bcd60e51b81526004016104f8906130b8565b610cba6000612597565b565b60008281526009602052604081206015015481908190815b6004811015610dfc576000610cea826003612f8f565b90506000610cf884836124fd565b6001600160a01b038916600090815260086020908152604080832084845290915281205491925090610d2b908790612f8f565b6001600160a01b038a1660009081526008602090815260408083208684528252808320548e84526009909252909120909750909150600f018360048110610d7457610d74612fa6565b015415610de65760008a8152600960205260409020600f018360048110610d9d57610d9d612fa6565b015460008b815260096020526040902082906007018560048110610dc357610dc3612fa6565b0154610dcf9190612fbc565b610dd99190612ff1565b610de39088613005565b96505b5050508080610df49061301d565b915050610cd4565b5091925050505b92915050565b606080806000610e198787612f8f565b610e24906001613005565b6001600160401b03811115610e3b57610e3b613187565b604051908082528060200260200182016040528015610e64578160200160208202803683370190505b5090506000610e738888612f8f565b610e7e906001613005565b6001600160401b03811115610e9557610e95613187565b604051908082528060200260200182016040528015610ebe578160200160208202803683370190505b5090506000610ecd8989612f8f565b610ed8906001613005565b6001600160401b03811115610eef57610eef613187565b604051908082528060200260200182016040528015610f18578160200160208202803683370190505b509050885b888111610fde576000610f30828a6124fd565b90508185610f3e8d83612f8f565b81518110610f4e57610f4e612fa6565b60209081029190910181019190915260008281526007909152604090205484610f778d85612f8f565b81518110610f8757610f87612fa6565b60209081029190910181019190915260008281526006909152604090205483610fb08d85612f8f565b81518110610fc057610fc0612fa6565b60209081029190910101525080610fd68161301d565b915050610f1d565b5091989097509095509350505050565b610ff9335b3b151590565b156110165760405162461bcd60e51b81526004016104f8906131c6565b3332146110355760405162461bcd60e51b81526004016104f890613208565b600260005414156110585760405162461bcd60e51b81526004016104f890612e54565b60026000558061107a5760405162461bcd60e51b81526004016104f89061324a565b6001600c5460009081526009602052604090205460ff1660038111156110a2576110a26129c2565b146110bf5760405162461bcd60e51b81526004016104f890613297565b336000908152600d60205260409020546110e757600c54336000908152600d60205260409020555b600c54336000908152600d60205260409020541015611112576111126001600c5461044c9190612f8f565b6000805b828110156111d857600061114385858481811061113557611135612fa6565b9050602002013560036124fd565b3360009081526008602090815260408083208484526001810183528184205492529091205491925090611191600688888781811061118357611183612fa6565b9050602002013584846125e9565b3360009081526008602052604090206111b69088888781811061118357611183612fa6565b6111c08286613005565b945050505080806111d09061301d565b915050611116565b50806111f65760405162461bcd60e51b81526004016104f8906132d9565b61121f3361120c678ac7230489e8000084612fbc565b6002546001600160a01b0316919061253c565b600c54336001600160a01b03167f4351c1b0eab3edfe3ae632c43d3c33b0ce389aa3bebe2586cd5a064b26b666f58360405161125b91906128fe565b60405180910390a35050600160005550565b6060806060600080856001600160401b0381111561128d5761128d613187565b6040519080825280602002602001820160405280156112b6578160200160208202803683370190505b5090506000866001600160401b038111156112d3576112d3613187565b6040519080825280602002602001820160405280156112fc578160200160208202803683370190505b5090506000876001600160401b0381111561131957611319613187565b604051908082528060200260200182016040528015611342578160200160208202803683370190505b509050600080808080805b600984116115a2578394506113938f6113678760006124fd565b6001600160a01b0391909116600090815260086020908152604080832093835260019093019052205490565b61139c57611590565b600092505b60098311611590576113b483600a612fbc565b6113be9085613005565b94506113cf8f6113678760016124fd565b6113d85761157e565b600091505b6009821161157e576113f0826064612fbc565b6113fb84600a612fbc565b6114059086613005565b61140f9190613005565b94506114208f6113678760026124fd565b6114295761156c565b5060005b6009811161156c57611441816103e8612fbc565b61144c836064612fbc565b61145785600a612fbc565b6114619087613005565b61146b9190613005565b6114759190613005565b94506114868f6113678760036124fd565b61148f5761155a565b848987815181106114a2576114a2612fa6565b6020026020010181815250506114bd8f6113678760036124fd565b8887815181106114cf576114cf612fa6565b6020026020010181815250506115128f6114ea8760036124fd565b6001600160a01b03919091166000908152600860209081526040808320938352929052205490565b87878151811061152457611524612fa6565b6020908102919091010152856115398161301d565b9650508d861061155a5750969a509498509296509094506115b49350505050565b806115648161301d565b91505061142d565b816115768161301d565b9250506113dd565b826115888161301d565b9350506113a1565b8361159a8161301d565b94505061134d565b50969a50949850929650909450505050505b92959194509250565b6115c633610ff3565b156115e35760405162461bcd60e51b81526004016104f8906131c6565b3332146116025760405162461bcd60e51b81526004016104f890613208565b600260005414156116255760405162461bcd60e51b81526004016104f890612e54565b6002600055826116475760405162461bcd60e51b81526004016104f8906132d9565b8281146116665760405162461bcd60e51b81526004016104f89061330f565b6001600c5460009081526009602052604090205460ff16600381111561168e5761168e6129c2565b146116ab5760405162461bcd60e51b81526004016104f890613177565b336000908152600d60205260409020546116d357600c54336000908152600d60205260409020555b600c54336000908152600d602052604090205410156116fe576116fe6001600c5461044c9190612f8f565b6000611708610ac6565b90506000805b858110156117d357611776600688888481811061172d5761172d612fa6565b9050602002013587878581811061174657611746612fa6565b9050602002013588888681811061175f5761175f612fa6565b90506020020135876117719190612fbc565b61266a565b33600090815260086020526040902061179b9088888481811061172d5761172d612fa6565b8484828181106117ad576117ad612fa6565b90506020020135826117bf9190613005565b9150806117cb8161301d565b91505061170e565b506117ff33306117eb678ac7230489e8000085612fbc565b6002546001600160a01b03169291906126e4565b600c54336001600160a01b03167fd7d247b583de1023852eef87b48f54354dbec771d01bc2cc49e96094efc322b98360405161183b91906128fe565b60405180910390a35050600160005550505050565b336118636001546001600160a01b031690565b6001600160a01b0316146118895760405162461bcd60e51b81526004016104f8906130b8565b6001600160a01b0381166118af5760405162461bcd60e51b81526004016104f890613351565b600480546001600160a01b0319166001600160a01b0383161790556040517ff9dbce95dc1315f700e67e068c99d0807af333f0b0e29b0e453c733fcfc7e2aa906109fb908390612993565b6005546001600160a01b0316336001600160a01b0316148061192657506001546001600160a01b031633145b6119425760405162461bcd60e51b81526004016104f890612e12565b600c54158061197657506003600c5460009081526009602052604090205460ff166003811115611974576119746129c2565b145b6119925760405162461bcd60e51b81526004016104f890613393565b612710606082013560408301356119ae60208501358535613005565b6119b89190613005565b6119c29190613005565b11156119e05760405162461bcd60e51b81526004016104f8906133eb565b600c80549060006119f08361301d565b90915550506040805161014081019091528060018152602001428152602001838152602001826004806020026040519081016040528092919082600460200280828437600092018290525092845250506040805160808082018352838252602082810185905282840185905260608084018690528187019390935283518083018552858152808201869052808501869052808401869052848701528351808301855285815280820186905280850186905280840186905292860192909252600a549085015260a0840183905260c0909301829052600c54825260099092522081518154829060ff19166001836003811115611aed57611aed6129c2565b021790555060208201516001820155604082015160028201556060820151611b1b90600383019060046128a3565b506080820151611b3190600783019060046128a3565b5060a0820151611b4790600b83019060046128a3565b5060c0820151611b5d90600f83019060046128a3565b5060e08201516013808301919091556101008301516014830155610120909201516015909101556000600a819055600c548082526009602052604091829020600181015460028201549190940154925191937f7745060911034707e68f2069481cb119df60e1d0ca97cb79d00dadfd83f7ad1393610aba939192916133fb565b611be633610ff3565b15611c035760405162461bcd60e51b81526004016104f8906131c6565b333214611c225760405162461bcd60e51b81526004016104f890613208565b600360008281526009602052604090205460ff166003811115611c4757611c476129c2565b14611c645760405162461bcd60e51b81526004016104f89061346e565b336000908152600d6020526040902054811015611c935760405162461bcd60e51b81526004016104f8906134b0565b336000908152600d60205260408120545b828111611d41576000611cb78233610cbc565b9050611cc38184613005565b925080600960008481526020019081526020016000206014016000828254611ceb9190612f8f565b9091555050336000818152600f602090815260408083208684528252808320859055928252600e90529081208054839290611d27908490613005565b90915550829150611d3990508161301d565b915050611ca4565b50611d4d826001613005565b336000908152600d6020526040812091909155600b8054839290611d72908490612f8f565b90915550508015611d9457600354611d94906001600160a01b0316338361253c565b81336001600160a01b03167fe75628587fccf98394f5c7b83e27a7f98b529519f8dd4fb7aa8a6093ee91afa483604051611dce91906128fe565b60405180910390a35050565b6005546001600160a01b0316336001600160a01b03161480611e0657506001546001600160a01b031633145b611e225760405162461bcd60e51b81526004016104f890612e12565b60026000541415611e455760405162461bcd60e51b81526004016104f890612e54565b6002600055611e62336003546001600160a01b03169030846126e4565b6001600c5460009081526009602052604090205460ff166003811115611e8a57611e8a6129c2565b1415611ebf57600c5460009081526009602052604081206013018054839290611eb4908490613005565b90915550611ed79050565b80600a6000828254611ed19190613005565b90915550505b6003546040516370a0823160e01b81526001600160a01b03909116906370a0823190611f07903090600401612993565b602060405180830381865afa158015611f24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f489190612ed2565b600c54600090815260096020526040902060130154600b54611f6a9190613005565b1115611f885760405162461bcd60e51b81526004016104f89061305d565b600c547fd313907aae54d62a2116f9b590d5c0c5d89daceaa23cc97230f0162c8bf55c7982604051611fba91906128fe565b60405180910390a2506001600055565b606080606083851115611fef5760405162461bcd60e51b81526004016104f890613501565b600c548411156120115760405162461bcd60e51b81526004016104f890613543565b600360008581526009602052604090205460ff166003811115612036576120366129c2565b146120535760405162461bcd60e51b81526004016104f89061346e565b600061205f8686612f8f565b61206a906001613005565b6001600160401b0381111561208157612081613187565b6040519080825280602002602001820160405280156120aa578160200160208202803683370190505b50905060006120b98787612f8f565b6120c4906001613005565b6001600160401b038111156120db576120db613187565b604051908082528060200260200182016040528015612104578160200160208202803683370190505b50905060006121138888612f8f565b61211e906001613005565b6001600160401b0381111561213557612135613187565b60405190808252806020026020018201604052801561215e578160200160208202803683370190505b506001600160a01b038a166000908152600d6020526040902054909150885b8881116122995780856121908c83612f8f565b815181106121a0576121a0612fa6565b6020026020010181815250508181101561222c576001836121c18c84612f8f565b815181106121d1576121d1612fa6565b6020908102919091018101919091526001600160a01b038c166000908152600f8252604080822084835290925220548461220b8c84612f8f565b8151811061221b5761221b612fa6565b602002602001018181525050612287565b6000836122398c84612f8f565b8151811061224957612249612fa6565b60200260200101818152505061225f818c610cbc565b8461226a8c84612f8f565b8151811061227a5761227a612fa6565b6020026020010181815250505b806122918161301d565b91505061217d565b5092999198509650945050505050565b336122bc6001546001600160a01b031690565b6001600160a01b0316146122e25760405162461bcd60e51b81526004016104f8906130b8565b6001600160a01b0381166123085760405162461bcd60e51b81526004016104f890613594565b61231181612597565b50565b6060808060006123248787612f8f565b61232f906001613005565b90506000816001600160401b0381111561234b5761234b613187565b604051908082528060200260200182016040528015612374578160200160208202803683370190505b5090506000826001600160401b0381111561239157612391613187565b6040519080825280602002602001820160405280156123ba578160200160208202803683370190505b5090506000836001600160401b038111156123d7576123d7613187565b604051908082528060200260200182016040528015612400578160200160208202803683370190505b509050895b8981116124eb576000612418828b6124fd565b905081856124268e83612f8f565b8151811061243657612436612fa6565b6020908102919091018101919091526001600160a01b038e1660009081526008825260408082208483526001019092522054846124738e85612f8f565b8151811061248357612483612fa6565b6020908102919091018101919091526001600160a01b038e1660009081526008825260408082208483529092522054836124bd8e85612f8f565b815181106124cd576124cd612fa6565b602090810291909101015250806124e38161301d565b915050612405565b50919a90995090975095505050505050565b600061250b82612710612fbc565b612516836001613005565b61252190600a6136b2565b61252b90856136c1565b6125359190613005565b9392505050565b6125928363a9059cbb60e01b848460405160240161255b9291906136d5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261270b565b505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005b600481101561266357600061260185836124fd565b600081815260208890526040812080549293508592909190612624908490612f8f565b9091555050600081815260018701602052604081208054869290612649908490612f8f565b9091555082915061265b90508161301d565b9150506125ec565b5050505050565b60005b600481101561266357600061268285836124fd565b6000818152602088905260408120805492935085929091906126a5908490613005565b90915550506000818152600187016020526040812080548692906126ca908490613005565b909155508291506126dc90508161301d565b91505061266d565b612705846323b872dd60e01b85858560405160240161255b939291906136e3565b50505050565b6000612760826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661279a9092919063ffffffff16565b805190915015612592578080602001905181019061277e9190613711565b6125925760405162461bcd60e51b81526004016104f890613777565b60606127a984846000856127b1565b949350505050565b6060824710156127d35760405162461bcd60e51b81526004016104f8906137c8565b843b6127f15760405162461bcd60e51b81526004016104f89061380a565b600080866001600160a01b0316858760405161280d9190613868565b60006040518083038185875af1925050503d806000811461284a576040519150601f19603f3d011682016040523d82523d6000602084013e61284f565b606091505b509150915061285f82828661286a565b979650505050505050565b60608315612879575081612535565b8251156128895782518084602001fd5b8160405162461bcd60e51b81526004016104f891906138a4565b82600481019282156128d1579160200282015b828111156128d15782518255916020019190600101906128b6565b506128dd9291506128e1565b5090565b5b808211156128dd57600081556001016128e2565b805b82525050565b60208101610e0382846128f6565b60006001600160a01b038216610e03565b6129268161290c565b811461231157600080fd5b8035610e038161291d565b80612926565b8035610e038161293c565b6000806040838503121561296357612963600080fd5b600061296f8585612931565b925050602061298085828601612942565b9150509250929050565b6128f88161290c565b60208101610e03828461298a565b6000602082840312156129b6576129b6600080fd5b60006127a98484612942565b634e487b7160e01b600052602160045260246000fd5b60048110612311576123116129c2565b806129f2816129d8565b919050565b6000610e03826129e8565b6128f8816129f7565b60c08101612a198289612a02565b612a2660208301886128f6565b612a3360408301876128f6565b612a4060608301866128f6565b612a4d60808301856128f6565b61285f60a08301846128f6565b600060208284031215612a6f57612a6f600080fd5b60006127a98484612931565b6000610e038261290c565b6000610e0382612a7b565b6128f881612a86565b60208101610e038284612a91565b60008060408385031215612abe57612abe600080fd5b6000612aca8585612942565b925050602061298085828601612931565b600080600060608486031215612af357612af3600080fd5b6000612aff8686612942565b9350506020612b1086828701612942565b9250506040612b2186828701612942565b9150509250925092565b612b3582826128f6565b5060200190565b60200190565b6000612b4c825190565b808452602093840193830160005b82811015612b7f578151612b6e8782612b2b565b965050602082019150600101612b5a565b5093949350505050565b60608082528101612b9a8186612b42565b90508181036020830152612bae8185612b42565b90508181036040830152612bc28184612b42565b95945050505050565b60008083601f840112612be057612be0600080fd5b5081356001600160401b03811115612bfa57612bfa600080fd5b602083019150836020820283011115612c1557612c15600080fd5b9250929050565b60008060208385031215612c3257612c32600080fd5b82356001600160401b03811115612c4b57612c4b600080fd5b612c5785828601612bcb565b92509250509250929050565b60808082528101612c748187612b42565b90508181036020830152612c888186612b42565b90508181036040830152612c9c8185612b42565b9050612bc260608301846128f6565b60008060008060408587031215612cc457612cc4600080fd5b84356001600160401b03811115612cdd57612cdd600080fd5b612ce987828801612bcb565b945094505060208501356001600160401b03811115612d0a57612d0a600080fd5b612d1687828801612bcb565b95989497509550505050565b8060808101831015610e0357610e03600080fd5b60008060a08385031215612d4c57612d4c600080fd5b6000612d588585612942565b925050602061298085828601612d22565b600080600060608486031215612d8157612d81600080fd5b6000612aff8686612931565b60008060008060808587031215612da657612da6600080fd5b6000612db28787612931565b9450506020612dc387828801612942565b9350506040612dd487828801612942565b9250506060612de587828801612942565b91505092959194509250565b600c8152602081016b2737ba1037b832b930ba37b960a11b81529050612b3c565b60208082528101610e0381612df1565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050612b3c565b60208082528101610e0381612e22565b60368152602081017f74686973206c6f747465727920686173206e6f7420636c6f7365642c20796f75815275081cda1bdd5b1908199a5c9cdd0818db1bdcd9481a5d60521b602082015290505b60400190565b60208082528101610e0381612e64565b8051610e038161293c565b600060208284031215612ee757612ee7600080fd5b60006127a98484612ec7565b60238152602081017f7468652066696e616c206e756d62657220686173206e6f74206265656e20647281526230bbb760e91b60208201529050612eb1565b60208082528101610e0381612ef3565b63ffffffff8116612926565b8051610e0381612f41565b600060208284031215612f6d57612f6d600080fd5b60006127a98484612f4d565b634e487b7160e01b600052601160045260246000fd5b600082821015612fa157612fa1612f79565b500390565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615612fd657612fd6612f79565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261300057613000612fdb565b500490565b6000821982111561301857613018612f79565b500190565b600060001982141561303157613031612f79565b5060010190565b60108152602081016f15dc9bdb99c81554d108185b5bdd5b9d60821b81529050612b3c565b60208082528101610e0381613038565b6040810161307b82856128f6565b61253560208301846128f6565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152612b3c565b60208082528101610e0381613088565b60168152602081017543616e6e6f74206265207a65726f206164647265737360501b81529050612b3c565b60208082528101610e03816130c8565b60188152602081017f43616e6e6f74207265636f7665722044454720746f6b656e000000000000000081529050612b3c565b60208082528101610e0381613103565b601b8152602081017f43757272656e74206c6f7474657279206973206e6f74206f70656e000000000081529050612b3c565b60208082528101610e0381613145565b634e487b7160e01b600052604160045260246000fd5b60148152602081017310dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b81529050612b3c565b60208082528101610e038161319d565b601a8152602081017f50726f787920636f6e7472616374206e6f7420616c6c6f77656400000000000081529050612b3c565b60208082528101610e03816131d6565b601b8152602081017f4e6f207469636b65747320617265206265696e672072656465656d000000000081529050612b3c565b60208082528101610e0381613218565b60228152602081017f536f7272792c2063757272656e74206c6f7474657279206973206e6f74206f7081526132b760f11b60208201529050612eb1565b60208082528101610e038161325a565b601b8152602081017f4e6f207469636b65747320617265206265696e6720626f75676874000000000081529050612b3c565b60208082528101610e03816132a7565b601181526020810170446966666572656e74206c656e6774687360781b81529050612b3c565b60208082528101610e03816132e9565b60178152602081017f43616e206e6f74206265207a65726f206164647265737300000000000000000081529050612b3c565b60208082528101610e038161331f565b60198152602081017f4e6f742074696d6520746f207374617274206c6f74746572790000000000000081529050612b3c565b60208082528101610e0381613361565b602d8152602081017f546f74616c2072657761726473206f66206561636820627261636b657420736881526c06f756c64203c3d20313030303609c1b60208201529050612eb1565b60208082528101610e03816133a3565b6060810161340982866128f6565b61341660208301856128f6565b6127a960408301846128f6565b60308152602081017f7468697320726f756e64206f66206c6f747465727920617265206e6f7420726581526f61647920666f7220636c61696d696e6760801b60208201529050612eb1565b60208082528101610e0381613423565b601d8152602081017f616c6c206177617264732068617665206265656e20726563656976656400000081529050612b3c565b60208082528101610e038161347e565b60268152602081017f456e64206c6f747465727920736d616c6c6572207468616e207374617274206c8152656f747465727960d01b60208201529050612eb1565b60208082528101610e03816134c0565b601a8152602081017f456e64206c6f747465727920726f756e64206e6f74206f70656e00000000000081529050612b3c565b60208082528101610e0381613511565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529050612eb1565b60208082528101610e0381613553565b80825b60018511156135e3578086048111156135c2576135c2612f79565b60018516156135d057908102905b80026135dc8560011c90565b94506135a7565b94509492505050565b6000826135fb57506001612535565b8161360857506000612535565b816001811461361e576002811461362857613655565b6001915050612535565b60ff84111561363957613639612f79565b8360020a91508482111561364f5761364f612f79565b50612535565b5060208310610133831016604e8410600b8410161715613688575081810a8381111561368357613683612f79565b612535565b61369584848460016135a4565b925090508184048111156136ab576136ab612f79565b0292915050565b600061253560001984846135ec565b6000826136d0576136d0612fdb565b500690565b6040810161307b828561298a565b606081016136f1828661298a565b613416602083018561298a565b801515612926565b8051610e03816136fe565b60006020828403121561372657613726600080fd5b60006127a98484613706565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529050612eb1565b60208082528101610e0381613732565b60268152602081017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b60208201529050612eb1565b60208082528101610e0381613787565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529050612b3c565b60208082528101610e03816137d8565b60005b8381101561383557818101518382015260200161381d565b838111156127055750506000910152565b6000613850825190565b61385e81856020860161381a565b9290920192915050565b610e038183613846565b600061387c825190565b80845260208401935061389381856020860161381a565b601f01601f19169290920192915050565b60208082528101612535818461387256fea26469706673582212200f8d4a29b4eda25c574419ac7936e38cb29f3fe290f2c5a26b09f94989d0361b64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyTickets(uint256[],uint256[])": {
        "details": "Can not be called by a smart contract",
        "params": {
          "_ticketAmounts": "array of ticket amount",
          "_ticketNumbers": "array of ticket numbers between 0 and 9999"
        }
      },
      "closeLottery()": {
        "details": "Callable only by the operator"
      },
      "constructor": {
        "details": "RandomNumberGenerator must be deployed prior to this contract",
        "params": {
          "_DEGTokenAddress": "Address of the DEG token (for buying tickets)",
          "_USDTokenAddress": "Address of the USD token (for prize distribution)",
          "_randomGeneratorAddress": "Address of the RandomGenerator contract used to work with ChainLink VRF"
        }
      },
      "drawLottery()": {
        "details": "Callable only by the operator"
      },
      "getPoolTicketsInfo(uint256,uint256,uint256)": {
        "details": "May be a huge number, avoid reading this frequently",
        "params": {
          "_position": "Which level to check (0, 1, 2, 3), use 0 to check the 4-digit number",
          "_startIndex": "Start number",
          "_stopIndex": "Stop number"
        }
      },
      "injectFunds(uint256)": {
        "details": "Callable by owner(incentive) or injector address(insurancePool income) First transfer USD and then call this function to record",
        "params": {
          "_amount": "amount to inject "
        }
      },
      "receiveRewards(uint256)": {
        "details": "Callable by users only, not contract!",
        "params": {
          "_lotteryId": "lottery id"
        }
      },
      "receiveRward(uint256,address)": {
        "params": {
          "_lotteryId": "lottery id",
          "user": "user address"
        }
      },
      "recoverWrongTokens(address,uint256)": {
        "params": {
          "_tokenAddress": "the address of the token to withdraw",
          "_tokenAmount": "token amount to withdraw"
        }
      },
      "redeemTickets(uint256[])": {
        "details": "Callable by users",
        "params": {
          "_ticketNumbers": "Array of ticket numbers"
        }
      },
      "renounceOwnership()": {
        "details": "Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner."
      },
      "setOperatorAddress(address)": {
        "details": "Only callable by the owner",
        "params": {
          "_operatorAddress": "address of the operator"
        }
      },
      "startLottery(uint256,uint256[4])": {
        "details": "Callable only by operator",
        "params": {
          "_endTime": "endTime of the lottery (timestamp in s)",
          "_stageProportion": "breakdown of rewards per bracket (must sum to 10,000)(100 <=> 1)"
        }
      },
      "transferOwnership(address)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "newOwner": "Address of the new owner"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyTickets(uint256[],uint256[])": {
        "notice": "Buy tickets for the current lottery round"
      },
      "closeLottery()": {
        "notice": "Close a lottery"
      },
      "constructor": {
        "notice": "Constructor function"
      },
      "drawLottery()": {
        "notice": "Draw the final number, calculate reward in DEG for each group,         and make this lottery claimable (need to wait for the random generator)"
      },
      "getPoolTicketsInfo(uint256,uint256,uint256)": {
        "notice": "Get pool tickets info"
      },
      "getUserTicketsInfo(address,uint256,uint256,uint256)": {
        "notice": "Get user tickets info"
      },
      "injectFunds(uint256)": {
        "notice": "Inject funds"
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "receiveRewards(uint256)": {
        "notice": "Receive all awards from lottery before lottery id"
      },
      "receiveRward(uint256,address)": {
        "notice": "Receive award from a lottery"
      },
      "recoverWrongTokens(address,uint256)": {
        "notice": "Recover wrong tokens sent to the contract, only by the owner All tokens except DEG and USD are wrong tokens"
      },
      "redeemTickets(uint256[])": {
        "notice": "Redeem tickets for all lottery"
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."
      },
      "setOperatorAddress(address)": {
        "notice": "Set operator, treasury, and injector addresses"
      },
      "startLottery(uint256,uint256[4])": {
        "notice": "Start the lottery"
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`)."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2403,
        "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 21731,
        "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9374,
        "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
        "label": "DEGToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)3056"
      },
      {
        "astId": 9377,
        "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
        "label": "USDToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)3056"
      },
      {
        "astId": 9380,
        "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
        "label": "randomGenerator",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IRandomNumberGenerator)11806"
      },
      {
        "astId": 9382,
        "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
        "label": "operatorAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 9397,
        "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
        "label": "poolTickets",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Tickets)9394_storage"
      },
      {
        "astId": 9402,
        "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
        "label": "usersTickets",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Tickets)9394_storage)"
      },
      {
        "astId": 9442,
        "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
        "label": "lotteries",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(LotteryInfo)9437_storage)"
      },
      {
        "astId": 9444,
        "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
        "label": "RewardsToNextLottery",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 9446,
        "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
        "label": "allPendingRewards",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 9448,
        "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
        "label": "currentLotteryId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 9452,
        "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
        "label": "userCheckPoint",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9456,
        "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
        "label": "usersTotalRewards",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9462,
        "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
        "label": "usersRewards",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_contract(IERC20)3056": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRandomNumberGenerator)11806": {
        "encoding": "inplace",
        "label": "contract IRandomNumberGenerator",
        "numberOfBytes": "20"
      },
      "t_enum(Status)9407": {
        "encoding": "inplace",
        "label": "enum DegisLottery.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Tickets)9394_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DegisLottery.Tickets)",
        "numberOfBytes": "32",
        "value": "t_struct(Tickets)9394_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(LotteryInfo)9437_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DegisLottery.LotteryInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LotteryInfo)9437_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LotteryInfo)9437_storage": {
        "encoding": "inplace",
        "label": "struct DegisLottery.LotteryInfo",
        "members": [
          {
            "astId": 9410,
            "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Status)9407"
          },
          {
            "astId": 9412,
            "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9414,
            "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
            "label": "endTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9418,
            "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
            "label": "stageProportion",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 9422,
            "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
            "label": "stageReward",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 9426,
            "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
            "label": "stageAmount",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 9430,
            "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
            "label": "stageWeight",
            "offset": 0,
            "slot": "15",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 9432,
            "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
            "label": "totalRewards",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256"
          },
          {
            "astId": 9434,
            "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
            "label": "pendingRewards",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256"
          },
          {
            "astId": 9436,
            "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
            "label": "finalNumber",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "704"
      },
      "t_struct(Tickets)9394_storage": {
        "encoding": "inplace",
        "label": "struct DegisLottery.Tickets",
        "members": [
          {
            "astId": 9389,
            "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
            "label": "ticketsWeight",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 9393,
            "contract": "contracts/lucky-box/DegisLottery.sol:DegisLottery",
            "label": "ticketsAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}