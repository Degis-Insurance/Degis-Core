{
  "address": "0xfBA0De7536A616c53B38028db6F12Dd3ff5782ac",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_degisToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "degisPerSecond",
          "type": "uint256"
        }
      ],
      "name": "DegisPerSecondChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "degisPerSecond",
          "type": "uint256"
        }
      ],
      "name": "PoolRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_degisPerSecond",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "degisToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolToken",
          "type": "address"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolToken",
          "type": "address"
        }
      ],
      "name": "getPoolData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "degisPerSecond",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingPoolFactory.PoolData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_degisPerSecond",
          "type": "uint256"
        }
      ],
      "name": "setDegisPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9f3c0f6d5c1af84050606443ab1e3c96243c54bc50a85f8676589e8d10d88c5f",
  "receipt": {
    "to": null,
    "from": "0x32eB34d060c12aD0491d260c436d30e5fB13a8Cd",
    "contractAddress": "0xfBA0De7536A616c53B38028db6F12Dd3ff5782ac",
    "transactionIndex": 1,
    "gasUsed": "2475827",
    "logsBloom": "0x
    "blockHash": "0x297fd71b1a035b386ebe141c4c4bac4fa8ba0e37dc13d73e3aa7b98b5d5b52f5",
    "transactionHash": "0x9f3c0f6d5c1af84050606443ab1e3c96243c54bc50a85f8676589e8d10d88c5f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 17232971,
        "transactionHash": "0x9f3c0f6d5c1af84050606443ab1e3c96243c54bc50a85f8676589e8d10d88c5f",
        "address": "0xfBA0De7536A616c53B38028db6F12Dd3ff5782ac",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000032eb34d060c12ad0491d260c436d30e5fb13a8cd"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x297fd71b1a035b386ebe141c4c4bac4fa8ba0e37dc13d73e3aa7b98b5d5b52f5"
      }
    ],
    "blockNumber": 17232971,
    "cumulativeGasUsed": "2475827",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3b3FF6F69F16ac8593Dc17621fE329EAeA9e303e"
  ],
  "numDeployments": 1,
  "solcInputHash": "d5a9e9a25ef04c87381975d08a927a92",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_degisToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"degisPerSecond\",\"type\":\"uint256\"}],\"name\":\"DegisPerSecondChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"degisPerSecond\",\"type\":\"uint256\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_degisPerSecond\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"degisToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"degisPerSecond\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingPoolFactory.PoolData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_degisPerSecond\",\"type\":\"uint256\"}],\"name\":\"setDegisPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createPool(address,uint256,uint256)\":{\"details\":\"Only called by the owner\",\"params\":{\"_degisPerSecond\":\"Reward speed\",\"_poolToken\":\"Pool token address\",\"_startTimestamp\":\"Start timestamp for reward\"}},\"getPoolAddress(address)\":{\"params\":{\"_poolToken\":\"Pool token address\"}},\"getPoolData(address)\":{\"params\":{\"_poolToken\":\"Pool token address\"},\"returns\":{\"_0\":\"poolData Pool data struct\"}},\"mintReward(address,uint256)\":{\"details\":\"With this function, we only need to add factory contract into minterList\",\"params\":{\"_amount\":\"Amount of degis tokens to mint\",\"_to\":\"The address to mint tokens to\"}},\"renounceOwnership()\":{\"details\":\"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.\"},\"setDegisPerSecond(address,uint256)\":{\"params\":{\"_degisPerSecond\":\"Degis reward per second\",\"_pool\":\"Address of the staking pool\"}},\"transferOwnership(address)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"newOwner\":\"Address of the new owner\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createPool(address,uint256,uint256)\":{\"notice\":\"Creates a staking pool and registers it within the factory\"},\"getPoolAddress(address)\":{\"notice\":\"Get the pool address from pool token address\"},\"getPoolData(address)\":{\"notice\":\"Get pool data from pool token address\"},\"mintReward(address,uint256)\":{\"notice\":\"Mint degis tokens as reward\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner.\"},\"setDegisPerSecond(address,uint256)\":{\"notice\":\"Set degis per second for a pool\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/StakingPoolFactory.sol\":\"StakingPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x86ebc6cea2b539c2d4a79a4754f7c90c43c45c9aaf0aab32ecffb1565afc5e0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe7713f1b362f8b80e28d5a7e8b66c3f2236203fd86d01eca0a29a9e6a3f4d97f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"contracts/staking/CoreStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n    *******         **********     ***********     *****     ***********\\n    *      *        *              *                 *       *\\n    *        *      *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     **********     *       *****     *       ***********\\n    *         *     *              *         *       *                 *\\n    *         *     *              *         *       *                 *\\n    *        *      *              *         *       *                 *\\n    *      *        *              *         *       *                 *\\n    *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.10;\\n\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\nimport {BasePool} from \\\"./abstracts/BasePool.sol\\\";\\n\\ncontract CoreStakingPool is Ownable, BasePool {\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(\\n        address _degisToken,\\n        address _poolToken,\\n        address _factory,\\n        uint256 _startTimestamp,\\n        uint256 _degisPerSecond\\n    )\\n        Ownable(msg.sender)\\n        BasePool(\\n            _degisToken,\\n            _poolToken,\\n            _factory,\\n            _startTimestamp,\\n            _degisPerSecond\\n        )\\n    {}\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Stake function, will call the stake in BasePool\\n     * @param _user User address\\n     * @param _amount Amount to stake\\n     * @param _lockUntil Lock until timestamp (0 means flexible staking)\\n     */\\n    function _stake(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _lockUntil\\n    ) internal override {\\n        super._stake(_user, _amount, _lockUntil);\\n    }\\n\\n    /**\\n     * @notice Unstake function, will check some conditions and call the unstake in BasePool\\n     * @param _user User address\\n     * @param _depositId Deposit id\\n     * @param _amount Amount to unstake\\n     */\\n    function _unstake(\\n        address _user,\\n        uint256 _depositId,\\n        uint256 _amount\\n    ) internal override {\\n        UserInfo storage user = users[_msgSender()];\\n        Deposit memory stakeDeposit = user.deposits[_depositId];\\n        require(\\n            stakeDeposit.lockedFrom == 0 ||\\n                block.timestamp >= stakeDeposit.lockedUntil,\\n            \\\"Deposit not yet unlocked\\\"\\n        );\\n\\n        super._unstake(_user, _depositId, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5346207a0c5283973e52b750e37905c2b743d17b58fcf05d7dda9a5b9185b47d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/StakingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n    *******         **********     ***********     *****     ***********\\n    *      *        *              *                 *       *\\n    *        *      *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     **********     *       *****     *       ***********\\n    *         *     *              *         *       *                 *\\n    *         *     *              *         *       *                 *\\n    *        *      *              *         *       *                 *\\n    *      *        *              *         *       *                 *\\n    *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.10;\\n\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\nimport {IPool} from \\\"./interfaces/IPool.sol\\\";\\nimport {BasePool, CoreStakingPool} from \\\"./CoreStakingPool.sol\\\";\\nimport {IDegisToken} from \\\"../tokens/interfaces/IDegisToken.sol\\\";\\n\\ncontract StakingPoolFactory is Ownable {\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Pool data info\\n    struct PoolData {\\n        address poolToken; // pool token address (Degis / Degis LP Token)\\n        address poolAddress; // pool address (deployed by factory)\\n        uint256 startTimestamp; // pool start timestamp\\n        uint256 degisPerSecond; // reward speed\\n    }\\n\\n    address public degisToken;\\n\\n    // Pool token address  => pool address\\n    mapping(address => address) public pools;\\n\\n    // Pool address => whether exists\\n    mapping(address => bool) public poolExists;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event PoolRegistered(\\n        address indexed by,\\n        address indexed poolToken,\\n        address indexed poolAddress,\\n        uint256 degisPerSecond\\n    );\\n\\n    event DegisPerSecondChanged(address pool, uint256 degisPerSecond);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(address _degisToken) Ownable(msg.sender) {\\n        degisToken = _degisToken;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get the pool address from pool token address\\n     * @param _poolToken Pool token address\\n     */\\n    function getPoolAddress(address _poolToken)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return pools[_poolToken];\\n    }\\n\\n    /**\\n     * @notice Get pool data from pool token address\\n     * @param _poolToken Pool token address\\n     * @return poolData Pool data struct\\n     */\\n    function getPoolData(address _poolToken)\\n        public\\n        view\\n        returns (PoolData memory)\\n    {\\n        // get the pool address from the mapping\\n        address poolAddr = pools[_poolToken];\\n\\n        // throw if there is no pool registered for the token specified\\n        require(poolAddr != address(0), \\\"pool not found\\\");\\n\\n        // read pool information from the pool smart contract\\n        // via the pool interface (IPool)\\n        address poolToken = IPool(poolAddr).poolToken();\\n        uint256 startTimestamp = IPool(poolAddr).startTimestamp();\\n        uint256 degisPerSecond = IPool(poolAddr).degisPerSecond();\\n\\n        // create the in-memory structure and return it\\n        return\\n            PoolData({\\n                poolToken: poolToken,\\n                poolAddress: poolAddr,\\n                startTimestamp: startTimestamp,\\n                degisPerSecond: degisPerSecond\\n            });\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Set degis per second for a pool\\n     * @param _pool Address of the staking pool\\n     * @param _degisPerSecond Degis reward per second\\n     */\\n    function setDegisPerSecond(address _pool, uint256 _degisPerSecond)\\n        external\\n        onlyOwner\\n    {\\n        BasePool(_pool).setDegisPerSecond(_degisPerSecond);\\n\\n        emit DegisPerSecondChanged(_pool, _degisPerSecond);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Creates a staking pool and registers it within the factory\\n     * @dev Only called by the owner\\n     * @param _poolToken Pool token address\\n     * @param _startTimestamp Start timestamp for reward\\n     * @param _degisPerSecond Reward speed\\n     */\\n    function createPool(\\n        address _poolToken,\\n        uint256 _startTimestamp,\\n        uint256 _degisPerSecond\\n    ) external onlyOwner {\\n        // create/deploy new core pool instance\\n        IPool pool = new CoreStakingPool(\\n            degisToken,\\n            _poolToken,\\n            address(this),\\n            _startTimestamp,\\n            _degisPerSecond\\n        );\\n\\n        // register it within a factory\\n        _registerPool(address(pool));\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Register a deployed pool instance within the factory\\n     * @param _poolAddr Address of the already deployed pool instance\\n     */\\n    function _registerPool(address _poolAddr) internal {\\n        // Read pool information from the pool smart contract\\n        // via the pool interface (IPool)\\n        address poolToken = IPool(_poolAddr).poolToken();\\n        uint256 degisPerSecond = IPool(_poolAddr).degisPerSecond();\\n\\n        // Ensure that the pool is not already registered within the factory\\n        require(\\n            pools[poolToken] == address(0),\\n            \\\"This pool is already registered\\\"\\n        );\\n\\n        // Record\\n        pools[poolToken] = _poolAddr;\\n        poolExists[_poolAddr] = true;\\n\\n        emit PoolRegistered(\\n            msg.sender,\\n            poolToken,\\n            _poolAddr,\\n            degisPerSecond\\n        );\\n    }\\n\\n    /**\\n     * @notice Mint degis tokens as reward\\n     * @dev With this function, we only need to add factory contract into minterList\\n     * @param _to The address to mint tokens to\\n     * @param _amount Amount of degis tokens to mint\\n     */\\n    function mintReward(address _to, uint256 _amount) external {\\n        // Verify that sender is a pool registered withing the factory\\n        require(poolExists[msg.sender], \\\"Only called from pool\\\");\\n\\n        // Mint degis tokens as required\\n        IDegisToken(degisToken).mintDegis(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x1195c53d219c6199f235acc08de23553365403a08c274de690d961fc3fbe93c3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/abstracts/BasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/IStakingPoolFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nabstract contract BasePool is IPool, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    struct UserInfo {\\n        uint256 tokenAmount;\\n        uint256 totalWeight;\\n        uint256 rewardDebt;\\n        // An array of holder's deposits\\n        Deposit[] deposits;\\n    }\\n    mapping(address => UserInfo) public users;\\n\\n    // Token address staked in this pool\\n    address public poolToken;\\n\\n    // Reward token: degis\\n    address public degisToken;\\n\\n    // Reward start timestamp\\n    uint256 public startTimestamp;\\n\\n    // Degis reward speed\\n    uint256 public degisPerSecond;\\n\\n    // Last check point\\n    uint256 public lastRewardTimestamp;\\n\\n    // Accumulated degis per weight till now\\n    uint256 public accDegisPerWeight;\\n\\n    // Total weight in the pool\\n    uint256 public totalWeight;\\n\\n    // Factory contract address\\n    address public factory;\\n\\n    // Fees are paid to the previous stakers\\n    uint256 public constant FEE_RATE = 2;\\n\\n    // Weight multiplier constants\\n    uint256 internal constant WEIGHT_MULTIPLIER = 1e6;\\n\\n    uint256 internal constant YEAR_STAKE_WEIGHT_MULTIPLIER =\\n        2 * WEIGHT_MULTIPLIER;\\n\\n    uint256 internal constant REWARD_PER_WEIGHT_MULTIPLIER = 1e12;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event Stake(address user, uint256 amount, uint256 lockUntil);\\n\\n    event Unstake(address user, uint256 amount);\\n\\n    event Harvest(address user, uint256 amount);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Constructor\\n     */\\n    constructor(\\n        address _degisToken,\\n        address _poolToken,\\n        address _factory,\\n        uint256 _startTimestamp,\\n        uint256 _degisPerSecond\\n    ) {\\n        degisToken = _degisToken;\\n        poolToken = _poolToken;\\n        factory = _factory;\\n\\n        degisPerSecond = _degisPerSecond;\\n\\n        startTimestamp = _startTimestamp;\\n\\n        lastRewardTimestamp = block.timestamp > _startTimestamp\\n            ? block.timestamp\\n            : _startTimestamp;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Only the factory can call some functions\\n     */\\n    modifier onlyFactory() {\\n        require(msg.sender == factory, \\\"Only factory\\\");\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get a user's deposit info\\n     * @param _user User address\\n     * @return deposits[] User's deposit info\\n     */\\n    function getUserDeposits(\\n        address _user\\n    ) external view returns (Deposit[] memory) {\\n        return users[_user].deposits;\\n    }\\n\\n    /**\\n     * @notice Get pending rewards\\n     * @param _user User address\\n     * @return pendingReward User's pending rewards\\n     */\\n    function pendingReward(address _user) external view returns (uint256) {\\n        if (\\n            block.timestamp < lastRewardTimestamp ||\\n            block.timestamp < startTimestamp ||\\n            totalWeight == 0\\n        ) return 0;\\n\\n        uint256 blocks = block.timestamp - lastRewardTimestamp;\\n        uint256 degisReward = blocks * degisPerSecond;\\n\\n        // recalculated value for `yieldRewardsPerWeight`\\n        uint256 newDegisPerWeight = rewardToWeight(degisReward, totalWeight) +\\n            accDegisPerWeight;\\n\\n        // based on the rewards per weight value, calculate pending rewards;\\n        UserInfo memory user = users[_user];\\n\\n        uint256 pending = weightToReward(user.totalWeight, newDegisPerWeight) -\\n            user.rewardDebt;\\n\\n        return pending;\\n    }\\n\\n    function rewardToWeight(\\n        uint256 reward,\\n        uint256 rewardPerWeight\\n    ) public pure returns (uint256) {\\n        return (reward * REWARD_PER_WEIGHT_MULTIPLIER) / rewardPerWeight;\\n    }\\n\\n    function weightToReward(\\n        uint256 weight,\\n        uint256 rewardPerWeight\\n    ) public pure returns (uint256) {\\n        return (weight * rewardPerWeight) / REWARD_PER_WEIGHT_MULTIPLIER;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n    function setDegisPerSecond(uint256 _degisPerSecond) external onlyFactory {\\n        degisPerSecond = _degisPerSecond;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Stake tokens\\n     * @param _amount Amount of tokens to stake\\n     * @param _lockUntil Lock until timestamp\\n     */\\n    function stake(uint256 _amount, uint256 _lockUntil) external {\\n        _stake(msg.sender, _amount, _lockUntil);\\n    }\\n\\n    /**\\n     * @notice Unstake tokens\\n     * @param _depositId Deposit id to be unstaked\\n     * @param _amount Amount of tokens to unstake\\n     */\\n    function unstake(uint256 _depositId, uint256 _amount) external {\\n        _unstake(msg.sender, _depositId, _amount);\\n    }\\n\\n    /**\\n     * @notice Harvest your staking rewards\\n     */\\n    function harvest() external {\\n        // First update the pool\\n        updatePool();\\n\\n        UserInfo storage user = users[msg.sender];\\n\\n        // calculate pending yield rewards, this value will be returned\\n        uint256 pending = _pendingReward(msg.sender);\\n\\n        if (pending == 0) return;\\n\\n        _safeDegisTransfer(msg.sender, pending);\\n\\n        user.rewardDebt = weightToReward(user.totalWeight, accDegisPerWeight);\\n\\n        emit Harvest(msg.sender, pending);\\n    }\\n\\n    /**\\n     * @notice Update the pool without fee\\n     */\\n    function updatePool() public {\\n        _updatePoolWithFee(0);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Update pool status with fee (if any)\\n     * @param _fee Fee to be distributed\\n     */\\n    function _updatePoolWithFee(uint256 _fee) internal {\\n        if (block.timestamp <= lastRewardTimestamp) return;\\n\\n        uint256 balance = IERC20(poolToken).balanceOf(address(this));\\n\\n        if (balance == 0) {\\n            lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 timePassed = block.timestamp - lastRewardTimestamp;\\n\\n        // There is _fee when staking\\n        uint256 degisReward = timePassed * degisPerSecond + _fee;\\n\\n        // Mint reward to this staking pool\\n        IStakingPoolFactory(factory).mintReward(address(this), degisReward);\\n\\n        accDegisPerWeight += rewardToWeight(degisReward, totalWeight);\\n\\n        lastRewardTimestamp = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Finish stake process.\\n     *         Two types of staking: normal and lock.\\n     *           - Normal: can unlock any time\\n     *           - Lock: can only unlock after lockUntil timestamp, each stake action will create a different entity\\n     *\\n     * @param _user      User address\\n     * @param _amount    Amount of tokens to stake\\n     * @param _lockUntil Lock until timestamp (0 for normal staking)\\n     */\\n    function _stake(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _lockUntil\\n    ) internal virtual nonReentrant {\\n        require(block.timestamp > startTimestamp, \\\"Pool not started\\\");\\n        require(_amount > 0, \\\"Zero amount\\\");\\n        require(\\n            _lockUntil == 0 || (_lockUntil > block.timestamp),\\n            \\\"Invalid lock interval\\\"\\n        );\\n        if (_lockUntil >= block.timestamp + 365 days)\\n            _lockUntil = block.timestamp + 365 days;\\n\\n        uint256 depositFee;\\n        if (IERC20(poolToken).balanceOf(address(this)) > 0) {\\n            // Charge deposit fee and distribute to previous stakers\\n            depositFee = (_amount * FEE_RATE) / 100;\\n            _updatePoolWithFee(depositFee);\\n        } else updatePool();\\n\\n        UserInfo storage user = users[_user];\\n\\n        if (user.tokenAmount > 0) {\\n            _distributeReward(_user);\\n        }\\n\\n        uint256 previousBalance = IERC20(poolToken).balanceOf(address(this));\\n        transferPoolTokenFrom(msg.sender, address(this), _amount);\\n        uint256 newBalance = IERC20(poolToken).balanceOf(address(this));\\n\\n        // Actual amount is without the fee\\n        uint256 addedAmount = newBalance - previousBalance - depositFee;\\n\\n        // For normal staking, lockFrom = 0, lockUntil = 0\\n        uint256 lockFrom = _lockUntil > 0 ? block.timestamp : 0;\\n        uint256 lockUntil = _lockUntil;\\n\\n        uint256 stakeWeight = timeToWeight(lockUntil - lockFrom) * addedAmount;\\n        assert(stakeWeight > 0);\\n\\n        Deposit memory newDeposit = Deposit({\\n            tokenAmount: addedAmount,\\n            weight: stakeWeight,\\n            lockedFrom: lockFrom,\\n            lockedUntil: lockUntil\\n        });\\n        // deposit ID is an index of the deposit in `deposits` array\\n        user.deposits.push(newDeposit);\\n\\n        user.tokenAmount += addedAmount;\\n        user.totalWeight += stakeWeight;\\n        user.rewardDebt = weightToReward(user.totalWeight, accDegisPerWeight);\\n\\n        totalWeight += stakeWeight;\\n\\n        emit Stake(msg.sender, _amount, _lockUntil);\\n    }\\n\\n    /**\\n     * @notice Finish unstake process\\n     * @param _user User address\\n     * @param _depositId deposit ID to unstake from, zero-indexed\\n     * @param _amount amount of tokens to unstake\\n     */\\n    function _unstake(\\n        address _user,\\n        uint256 _depositId,\\n        uint256 _amount\\n    ) internal virtual nonReentrant {\\n        // verify an amount is set\\n        require(_amount > 0, \\\"zero amount\\\");\\n\\n        UserInfo storage user = users[_user];\\n\\n        Deposit storage stakeDeposit = user.deposits[_depositId];\\n\\n        // verify available balance\\n        // if staker address ot deposit doesn't exist this check will fail as well\\n        require(stakeDeposit.tokenAmount >= _amount, \\\"amount exceeds stake\\\");\\n\\n        // update smart contract state\\n        updatePool();\\n        // and process current pending rewards if any\\n        _distributeReward(_user);\\n\\n        // recalculate deposit weight\\n        uint256 previousWeight = stakeDeposit.weight;\\n\\n        uint256 newWeight = timeToWeight(\\n            stakeDeposit.lockedUntil - stakeDeposit.lockedFrom\\n        ) * (stakeDeposit.tokenAmount - _amount);\\n\\n        // update the deposit, or delete it if its depleted\\n        if (stakeDeposit.tokenAmount - _amount == 0) {\\n            delete user.deposits[_depositId];\\n        } else {\\n            stakeDeposit.tokenAmount -= _amount;\\n            stakeDeposit.weight = newWeight;\\n        }\\n\\n        // update user record\\n        user.tokenAmount -= _amount;\\n        user.totalWeight = user.totalWeight - previousWeight + newWeight;\\n        user.rewardDebt = weightToReward(user.totalWeight, accDegisPerWeight);\\n\\n        // update global variable\\n        totalWeight -= (previousWeight - newWeight);\\n\\n        // otherwise just return tokens back to holder\\n        transferPoolToken(msg.sender, _amount);\\n\\n        // emit an event\\n        emit Unstake(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Lock time => Lock weight\\n     * @dev 1 year = 2e6\\n     *      1 week = 1e6\\n     *      2 weeks = 1e6 * ( 1 + 1 / 365)\\n     */\\n    function timeToWeight(\\n        uint256 _length\\n    ) public pure returns (uint256 _weight) {\\n        _weight =\\n            ((_length * WEIGHT_MULTIPLIER) / 365 days) +\\n            WEIGHT_MULTIPLIER;\\n    }\\n\\n    /**\\n     * @notice Check pending reward after update\\n     * @param _user User address\\n     */\\n    function _pendingReward(\\n        address _user\\n    ) internal view returns (uint256 pending) {\\n        // read user data structure into memory\\n        UserInfo memory user = users[_user];\\n\\n        // and perform the calculation using the values read\\n        return\\n            weightToReward(user.totalWeight, accDegisPerWeight) -\\n            user.rewardDebt;\\n    }\\n\\n    /**\\n     * @notice Distribute reward to staker\\n     * @param _user User address\\n     */\\n    function _distributeReward(address _user) internal {\\n        uint256 pending = _pendingReward(_user);\\n\\n        if (pending == 0) return;\\n        else {\\n            _safeDegisTransfer(_user, pending);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer pool token from pool to user\\n     */\\n    function transferPoolToken(address _to, uint256 _value) internal {\\n        // just delegate call to the target\\n        IERC20(poolToken).safeTransfer(_to, _value);\\n    }\\n\\n    /**\\n     * @notice Transfer pool token from user to pool\\n     * @param _from User address\\n     * @param _to Pool address\\n     * @param _value Amount of tokens to transfer\\n     */\\n    function transferPoolTokenFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        IERC20(poolToken).safeTransferFrom(_from, _to, _value);\\n    }\\n\\n    /**\\n     * @notice Safe degis transfer (check if the pool has enough DEGIS token)\\n     * @param _to User's address\\n     * @param _amount Amount to transfer\\n     */\\n    function _safeDegisTransfer(address _to, uint256 _amount) internal {\\n        uint256 totalDegis = IERC20(degisToken).balanceOf(address(this));\\n        if (_amount > totalDegis) {\\n            IERC20(degisToken).safeTransfer(_to, totalDegis);\\n        } else {\\n            IERC20(degisToken).safeTransfer(_to, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc49cc0583b5ea6def8aaa000ace9f1be8a8512427595acc636c8027cf277c17a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Illuvium Pool\\n *\\n * @notice An abstraction representing a pool, see IlluviumPoolBase for details\\n *\\n * @author Pedro Bergamini, reviewed by Basil Gorin\\n */\\ninterface IPool {\\n    /**\\n     * @dev Deposit is a key data structure used in staking,\\n     *      it represents a unit of stake with its amount, weight and term (time interval)\\n     */\\n    struct Deposit {\\n        // @dev token amount staked\\n        uint256 tokenAmount;\\n        // @dev stake weight\\n        uint256 weight;\\n        // @dev locking period - from\\n        uint256 lockedFrom;\\n        // @dev locking period - until\\n        uint256 lockedUntil;\\n    }\\n\\n    // for the rest of the functions see Soldoc in IlluviumPoolBase\\n\\n    function degisToken() external view returns (address);\\n\\n    function poolToken() external view returns (address);\\n\\n    function startTimestamp() external view returns (uint256);\\n\\n    function degisPerSecond() external view returns (uint256);\\n\\n    function totalWeight() external view returns (uint256);\\n\\n    function accDegisPerWeight() external view returns (uint256);\\n\\n    function pendingReward(address _user) external view returns (uint256);\\n\\n    function setDegisPerSecond(uint256 _degisPerSecond) external;\\n}\\n\",\"keccak256\":\"0x1addf57374e1eaab8ec6835e5f42b4ad3b8badf9b50ef905941409e89c008f88\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/interfaces/IStakingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface IStakingPoolFactory {\\n    function createPool(\\n        address _poolToken,\\n        uint256 _startBlock,\\n        uint256 _degisPerBlock\\n    ) external;\\n\\n    function mintReward(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x85f7c460038075b23c7404f89346f01f995e87d7fb7b94fe9205b6b6fdbd3721\",\"license\":\"GPL-3.0-or-later\"},\"contracts/tokens/interfaces/IDegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDegisToken is IERC20, IERC20Permit {\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Functions ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n    function CAP() external view returns (uint256);\\n\\n    /**\\n     * @notice Mint degis tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be minted\\n     */\\n    function mintDegis(address _account, uint256 _amount) external;\\n\\n    /**\\n     * @notice Burn degis tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be burned\\n     */\\n    function burnDegis(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x2675ac6dcc4488569e495c713897e2658573fdc21934ab92fd49ff57035265a8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x6fe5115c43db85920e7325c78060272343284628b8367ea986dab63747553dde\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev The owner can be set during deployment, not default to be msg.sender\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address _initialOwner) {\\n        _transferOwnership(_initialOwner);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. It will not be possible to call\\n     *         `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * @dev    Renouncing ownership will leave the contract without an owner,\\n     *         thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Can only be called by the current owner.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Internal function without access restriction.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x01872fb0c7277e79dbf69d60aad3ac917dfc22349ce6377d8e388287e4f31e88\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051612c26380380612c2683398101604081905261002f916100e4565b336100398161005f565b50600180546001600160a01b0319166001600160a01b039290921691909117905561010d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006001600160a01b0382165b92915050565b6100cb816100af565b81146100d657600080fd5b50565b80516100bc816100c2565b6000602082840312156100f9576100f9600080fd5b600061010584846100d9565b949350505050565b612b0a8061011c6000396000f3fe60806040523480156200001157600080fd5b5060043610620000d95760003560e01c8063715018a6116200008b578063a4063dbc1162000062578063a4063dbc14620001e0578063b039ddf6146200020c578063f2fde38b146200022357600080fd5b8063715018a614620001ad5780638da5cb5b14620001b75780639a49090e14620001c957600080fd5b80631e1c6a0711620000c05780631e1c6a07146200014b5780634ec5a65c14620001805780635a1c7e79146200019957600080fd5b80631228cbee14620000de57806313d21cdf1462000125575b600080fd5b6200010d620000ef36600462000962565b6001600160a01b039081166000908152600260205260409020541690565b6040516200011c9190620009a0565b60405180910390f35b6200013c6200013636600462000962565b6200023a565b6040516200011c919062000a09565b620001716200015c36600462000962565b60036020526000908152604090205460ff1681565b6040516200011c919062000a22565b620001976200019136600462000a46565b6200040e565b005b6001546200010d906001600160a01b031681565b6200019762000505565b6000546001600160a01b03166200010d565b62000197620001da36600462000a46565b62000550565b6200010d620001f136600462000962565b6002602052600090815260409020546001600160a01b031681565b620001976200021d36600462000a89565b62000607565b620001976200023436600462000962565b620006ab565b6040805160808101825260008082526020820181905291810182905260608101919091526001600160a01b038083166000908152600260205260409020541680620002a25760405162461bcd60e51b8152600401620002999062000b15565b60405180910390fd5b6000816001600160a01b031663cbdf382c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000309919062000b34565b90506000826001600160a01b031663e6fd48bc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200034c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000372919062000b66565b90506000836001600160a01b0316637e4d9f546040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003db919062000b66565b604080516080810182526001600160a01b0395861681529590941660208601529284019190915250606082015292915050565b33620004226000546001600160a01b031690565b6001600160a01b0316146200044b5760405162461bcd60e51b8152600401620002999062000bbc565b6040517fb7ea2cf40000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063b7ea2cf4906200049290849060040162000bce565b600060405180830381600087803b158015620004ad57600080fd5b505af1158015620004c2573d6000803e3d6000fd5b505050507f1c81daae1e3d76078763307fe3d7098b949bfc1ded1764f75980dfcb825856638282604051620004f992919062000bde565b60405180910390a15050565b33620005196000546001600160a01b031690565b6001600160a01b031614620005425760405162461bcd60e51b8152600401620002999062000bbc565b6200054e60006200071f565b565b3360009081526003602052604090205460ff16620005825760405162461bcd60e51b8152600401620002999062000c37565b6001546040517fb47673980000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063b476739890620005cf908590859060040162000bde565b600060405180830381600087803b158015620005ea57600080fd5b505af1158015620005ff573d6000803e3d6000fd5b505050505050565b336200061b6000546001600160a01b031690565b6001600160a01b031614620006445760405162461bcd60e51b8152600401620002999062000bbc565b6001546040516000916001600160a01b03169085903090869086906200066a906200091d565b6200067a95949392919062000c49565b604051809103906000f08015801562000697573d6000803e3d6000fd5b509050620006a5816200077c565b50505050565b33620006bf6000546001600160a01b031690565b6001600160a01b031614620006e85760405162461bcd60e51b8152600401620002999062000bbc565b6001600160a01b038116620007115760405162461bcd60e51b8152600401620002999062000c9f565b6200071c816200071f565b50565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000816001600160a01b031663cbdf382c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620007bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007e3919062000b34565b90506000826001600160a01b0316637e4d9f546040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000826573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200084c919062000b66565b6001600160a01b0383811660009081526002602052604090205491925016156200088a5760405162461bcd60e51b8152600401620002999062000d34565b6001600160a01b038281166000818152600260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19169589169586179055848352600390915290819020805460ff191660011790555133907fdf17567f8d46a5b1eceefa38cd3b367da19add72f89e637b0dcf753235d42be1906200091090869062000bce565b60405180910390a4505050565b611d8e8062000d4783390190565b60006001600160a01b0382165b92915050565b62000949816200092b565b81146200071c57600080fd5b803562000938816200093e565b600060208284031215620009795762000979600080fd5b600062000987848462000955565b949350505050565b6200099a816200092b565b82525050565b602081016200093882846200098f565b806200099a565b8051620009c583826200098f565b506020810151620009da60208401826200098f565b506040810151620009ef6040840182620009b0565b50606081015162000a046060840182620009b0565b505050565b60808101620009388284620009b7565b8015156200099a565b6020810162000938828462000a19565b8062000949565b8035620009388162000a32565b6000806040838503121562000a5e5762000a5e600080fd5b600062000a6c858562000955565b925050602062000a7f8582860162000a39565b9150509250929050565b60008060006060848603121562000aa35762000aa3600080fd5b600062000ab1868662000955565b935050602062000ac48682870162000a39565b925050604062000ad78682870162000a39565b9150509250925092565b600e8152602081017f706f6f6c206e6f7420666f756e64000000000000000000000000000000000000815290505b60200190565b60208082528101620009388162000ae1565b805162000938816200093e565b60006020828403121562000b4b5762000b4b600080fd5b600062000987848462000b27565b8051620009388162000a32565b60006020828403121562000b7d5762000b7d600080fd5b600062000987848462000b59565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815262000b0f565b60208082528101620009388162000b8b565b60208101620009388284620009b0565b6040810162000bee82856200098f565b62000bfd6020830184620009b0565b9392505050565b60158152602081017f4f6e6c792063616c6c65642066726f6d20706f6f6c00000000000000000000008152905062000b0f565b60208082528101620009388162000c04565b60a0810162000c5982886200098f565b62000c6860208301876200098f565b62000c7760408301866200098f565b62000c866060830185620009b0565b62000c956080830184620009b0565b9695505050505050565b602080825281016200093881602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b601f8152602081017f5468697320706f6f6c20697320616c72656164792072656769737465726564008152905062000b0f565b60208082528101620009388162000d0156fe60806040523480156200001157600080fd5b5060405162001d8e38038062001d8e833981016040819052620000349162000154565b8484848484336200004581620000b6565b5060018055600480546001600160a01b038088166001600160a01b03199283161790925560038054878416908316179055600a80549286169290911691909117905560068190556005829055428210620000a05781620000a2565b425b60075550620001d898505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006001600160a01b0382165b92915050565b620001248162000106565b81146200013057600080fd5b50565b8051620001138162000119565b8062000124565b8051620001138162000140565b600080600080600060a08688031215620001715762000171600080fd5b60006200017f888862000133565b9550506020620001928882890162000133565b9450506040620001a58882890162000133565b9350506060620001b88882890162000147565b9250506080620001cb8882890162000147565b9150509295509295909350565b611ba680620001e86000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80639e2c8a5b116100e3578063e3161ddd1161008c578063f2fde38b11610066578063f2fde38b14610314578063f40f0f5214610327578063f8077fae1461033a57600080fd5b8063e3161ddd146102fa578063e6fd48bc14610302578063eb42aa401461030b57600080fd5b8063b7ea2cf4116100bd578063b7ea2cf4146102c1578063c45a0155146102d4578063cbdf382c146102e757600080fd5b80639e2c8a5b1461025e578063a156dc2814610271578063a87430ba1461028457600080fd5b80637b0472f0116101455780638e169d471161011f5780638e169d471461022f578063906ce8a91461024257806396c82e571461025557600080fd5b80637b0472f0146102025780637e4d9f54146102155780638da5cb5b1461021e57600080fd5b80634641257d116101765780634641257d146101d05780635a1c7e79146101da578063715018a6146101fa57600080fd5b80632a5bf6d2146101925780632d11c58a146101bb575b600080fd5b6101a56101a0366004611412565b610343565b6040516101b291906114de565b60405180910390f35b6101c3600281565b6040516101b291906114ef565b6101d86103e3565b005b6004546101ed906001600160a01b031681565b6040516101b29190611506565b6101d861046f565b6101d8610210366004611525565b6104bd565b6101c360065481565b6000546001600160a01b03166101ed565b6101c361023d366004611525565b6104cc565b6101c3610250366004611562565b6104f1565b6101c360095481565b6101d861026c366004611525565b61051a565b6101c361027f366004611525565b610525565b6102b2610292366004611412565b600260208190526000918252604090912080546001820154919092015483565b6040516101b293929190611583565b6101d86102cf366004611562565b610537565b600a546101ed906001600160a01b031681565b6003546101ed906001600160a01b031681565b6101d8610566565b6101c360055481565b6101c360085481565b6101d8610322366004611412565b610570565b6101c3610335366004611412565b6105db565b6101c360075481565b6001600160a01b0381166000908152600260209081526040808320600301805482518185028101850190935280835260609492939192909184015b828210156103d857838290600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250508152602001906001019061037e565b505050509050919050565b6103eb610566565b3360008181526002602052604081209161040490610733565b905080600003610412575050565b61041c338261081d565b61042c82600101546008546104cc565b60028301556040517fc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba9061046390339084906115ab565b60405180910390a15050565b336104826000546001600160a01b031690565b6001600160a01b0316146104b15760405162461bcd60e51b81526004016104a8906115f6565b60405180910390fd5b6104bb60006108cd565b565b6104c8338383610935565b5050565b600064e8d4a510006104de838561161c565b6104e89190611651565b90505b92915050565b6000620f42406301e13380610506828561161c565b6105109190611651565b6104eb9190611665565b6104c8338383610940565b6000816104de64e8d4a510008561161c565b600a546001600160a01b031633146105615760405162461bcd60e51b81526004016104a8906116af565b600655565b6104bb60006109f0565b336105836000546001600160a01b031690565b6001600160a01b0316146105a95760405162461bcd60e51b81526004016104a8906115f6565b6001600160a01b0381166105cf5760405162461bcd60e51b81526004016104a890611719565b6105d8816108cd565b50565b60006007544210806105ee575060055442105b806105f95750600954155b1561060657506000919050565b6000600754426106169190611729565b9050600060065482610628919061161c565b9050600060085461063b83600954610525565b6106459190611665565b6001600160a01b038616600090815260026020818152604080842081516080810183528154815260018201548185015293810154848301526003810180548351818602810186019094528084529697509495939490936060860193879084015b828210156106ff5783829060005260206000209060040201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050815260200190600101906106a5565b505050508152505090506000816040015161071e8360200151856104cc565b6107289190611729565b979650505050505050565b6001600160a01b038116600090815260026020818152604080842081516080810183528154815260018201548185015293810154848301526003810180548351818602810186019094528084528695949293606086019390929190879084015b828210156107ed578382906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505081526020019060010190610793565b50505050815250509050806040015161080c82602001516008546104cc565b6108169190611729565b9392505050565b600480546040516370a0823160e01b81526000926001600160a01b03909216916370a082319161084f91309101611506565b602060405180830381865afa15801561086c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610890919061174b565b9050808211156108b6576004546108b1906001600160a01b03168483610b57565b505050565b6004546108b1906001600160a01b03168484610b57565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6108b1838383610bda565b336000908152600260205260408120600381018054919291859081106109685761096861176c565b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090508060400151600014806109c2575080606001514210155b6109de5760405162461bcd60e51b81526004016104a8906117b4565b6109e9858585610fbc565b5050505050565b60075442116109fc5750565b6003546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610a2d903090600401611506565b602060405180830381865afa158015610a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6e919061174b565b905080600003610a8057505042600755565b600060075442610a909190611729565b905060008360065483610aa3919061161c565b610aad9190611665565b600a546040517f9a49090e0000000000000000000000000000000000000000000000000000000081529192506001600160a01b031690639a49090e90610af990309085906004016115ab565b600060405180830381600087803b158015610b1357600080fd5b505af1158015610b27573d6000803e3d6000fd5b50505050610b3781600954610525565b60086000828254610b489190611665565b90915550504260075550505050565b6108b18363a9059cbb60e01b8484604051602401610b769291906115ab565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526111e1565b600260015403610bfc5760405162461bcd60e51b81526004016104a8906117f6565b60026001556005544211610c225760405162461bcd60e51b81526004016104a890611838565b60008211610c425760405162461bcd60e51b81526004016104a89061187a565b801580610c4e57504281115b610c6a5760405162461bcd60e51b81526004016104a8906118bc565b610c78426301e13380611665565b8110610c8f57610c8c426301e13380611665565b90505b6003546040516370a0823160e01b815260009182916001600160a01b03909116906370a0823190610cc4903090600401611506565b602060405180830381865afa158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d05919061174b565b1115610d32576064610d1860028561161c565b610d229190611651565b9050610d2d816109f0565b610d3a565b610d3a610566565b6001600160a01b0384166000908152600260205260409020805415610d6257610d6285611270565b6003546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610d93903090600401611506565b602060405180830381865afa158015610db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd4919061174b565b9050610de1333087611293565b6003546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610e12903090600401611506565b602060405180830381865afa158015610e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e53919061174b565b9050600084610e628484611729565b610e6c9190611729565b90506000808711610e7e576000610e80565b425b905086600083610e936102508585611729565b610e9d919061161c565b905060008111610eaf57610eaf6118cc565b604080516080810182528581526020808201848152928201868152606083018681526003808d018054600181810183556000928352958220875160049092020190815596519487019490945591516002860155519301929092558854909186918a9190610f1d908490611665565b9250508190555081886001016000828254610f389190611665565b92505081905550610f4f88600101546008546104cc565b88600201819055508160096000828254610f699190611665565b90915550506040517f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b690610fa29033908e908e906118e2565b60405180910390a150506001805550505050505050505050565b600260015403610fde5760405162461bcd60e51b81526004016104a8906117f6565b6002600155806110005760405162461bcd60e51b81526004016104a890611922565b6001600160a01b0383166000908152600260205260408120600381018054919291859081106110315761103161176c565b9060005260206000209060040201905082816000015410156110655760405162461bcd60e51b81526004016104a890611964565b61106d610566565b61107685611270565b6001810154815460009061108b908690611729565b6110a2846002015485600301546102509190611729565b6110ac919061161c565b83549091506110bc908690611729565b600003611101578360030186815481106110d8576110d861176c565b600091825260208220600490910201818155600181018290556002810182905560030155611122565b848360000160008282546111159190611729565b9091555050600183018190555b848460000160008282546111369190611729565b90915550506001840154819061114d908490611729565b6111579190611665565b6001850181905560085461116b91906104cc565b600285015561117a8183611729565b6009600082825461118b9190611729565b9091555061119b905033866112ab565b7f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd33866040516111cc9291906115ab565b60405180910390a15050600180555050505050565b6000611236826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112c29092919063ffffffff16565b8051909150156108b157808060200190518101906112549190611987565b6108b15760405162461bcd60e51b81526004016104a890611a00565b600061127b82610733565b905080600003611289575050565b6104c8828261081d565b6003546108b1906001600160a01b03168484846112d9565b6003546104c8906001600160a01b03168383610b57565b60606112d18484600085611300565b949350505050565b6112fa846323b872dd60e01b858585604051602401610b7693929190611a10565b50505050565b6060824710156113225760405162461bcd60e51b81526004016104a890611a83565b843b6113405760405162461bcd60e51b81526004016104a890611ac5565b600080866001600160a01b0316858760405161135c9190611b23565b60006040518083038185875af1925050503d8060008114611399576040519150601f19603f3d011682016040523d82523d6000602084013e61139e565b606091505b5091509150610728828286606083156113b8575081610816565b8251156113c85782518084602001fd5b8160405162461bcd60e51b81526004016104a89190611b5f565b60006001600160a01b0382166104eb565b6113fc816113e2565b81146105d857600080fd5b80356104eb816113f3565b60006020828403121561142757611427600080fd5b60006112d18484611407565b805b82525050565b80516114478382611433565b50602081015161145a6020840182611433565b50604081015161146d6040840182611433565b5060608101516108b16060840182611433565b61148a828261143b565b5060800190565b60200190565b60006114a1825190565b808452602093840193830160005b828110156114d45781516114c38782611480565b9650506020820191506001016114af565b5093949350505050565b602080825281016104e88184611497565b602081016104eb8284611433565b611435816113e2565b602081016104eb82846114fd565b806113fc565b80356104eb81611514565b6000806040838503121561153b5761153b600080fd5b6000611547858561151a565b92505060206115588582860161151a565b9150509250929050565b60006020828403121561157757611577600080fd5b60006112d1848461151a565b606081016115918286611433565b61159e6020830185611433565b6112d16040830184611433565b604081016115b982856114fd565b6108166020830184611433565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152611491565b602080825281016104eb816115c6565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561163657611636611606565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826116605761166061163b565b500490565b6000821982111561167857611678611606565b500190565b600c8152602081017f4f6e6c7920666163746f7279000000000000000000000000000000000000000081529050611491565b602080825281016104eb8161167d565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015290505b60400190565b602080825281016104eb816116bf565b60008282101561173b5761173b611606565b500390565b80516104eb81611514565b60006020828403121561176057611760600080fd5b60006112d18484611740565b634e487b7160e01b600052603260045260246000fd5b60188152602081017f4465706f736974206e6f742079657420756e6c6f636b6564000000000000000081529050611491565b602080825281016104eb81611782565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050611491565b602080825281016104eb816117c4565b60108152602081017f506f6f6c206e6f7420737461727465640000000000000000000000000000000081529050611491565b602080825281016104eb81611806565b600b8152602081017f5a65726f20616d6f756e7400000000000000000000000000000000000000000081529050611491565b602080825281016104eb81611848565b60158152602081017f496e76616c6964206c6f636b20696e74657276616c000000000000000000000081529050611491565b602080825281016104eb8161188a565b634e487b7160e01b600052600160045260246000fd5b6060810161159182866114fd565b600b8152602081017f7a65726f20616d6f756e7400000000000000000000000000000000000000000081529050611491565b602080825281016104eb816118f0565b60148152602081017f616d6f756e742065786365656473207374616b6500000000000000000000000081529050611491565b602080825281016104eb81611932565b8015156113fc565b80516104eb81611974565b60006020828403121561199c5761199c600080fd5b60006112d1848461197c565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f7420737563636565640000000000000000000000000000000000000000000060208201529050611713565b602080825281016104eb816119a8565b60608101611a1e82866114fd565b61159e60208301856114fd565b60268152602081017f416464726573733a20696e73756666696369656e742062616c616e636520666f81527f722063616c6c000000000000000000000000000000000000000000000000000060208201529050611713565b602080825281016104eb81611a2b565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529050611491565b602080825281016104eb81611a93565b60005b83811015611af0578181015183820152602001611ad8565b838111156112fa5750506000910152565b6000611b0b825190565b611b19818560208601611ad5565b9290920192915050565b6104eb8183611b01565b6000611b37825190565b808452602084019350611b4e818560208601611ad5565b601f01601f19169290920192915050565b602080825281016104e88184611b2d56fea2646970667358221220a8c4c5a4fde164954fb6c4ae7fa4d0847950375c59b32d91c10dee83a702c8b764736f6c634300080d0033a2646970667358221220aa85399abe38574fb91c909e93d5356fcb7027220dbacff717e28316d8d275e564736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createPool(address,uint256,uint256)": {
        "details": "Only called by the owner",
        "params": {
          "_degisPerSecond": "Reward speed",
          "_poolToken": "Pool token address",
          "_startTimestamp": "Start timestamp for reward"
        }
      },
      "getPoolAddress(address)": {
        "params": {
          "_poolToken": "Pool token address"
        }
      },
      "getPoolData(address)": {
        "params": {
          "_poolToken": "Pool token address"
        },
        "returns": {
          "_0": "poolData Pool data struct"
        }
      },
      "mintReward(address,uint256)": {
        "details": "With this function, we only need to add factory contract into minterList",
        "params": {
          "_amount": "Amount of degis tokens to mint",
          "_to": "The address to mint tokens to"
        }
      },
      "renounceOwnership()": {
        "details": "Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner."
      },
      "setDegisPerSecond(address,uint256)": {
        "params": {
          "_degisPerSecond": "Degis reward per second",
          "_pool": "Address of the staking pool"
        }
      },
      "transferOwnership(address)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "newOwner": "Address of the new owner"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createPool(address,uint256,uint256)": {
        "notice": "Creates a staking pool and registers it within the factory"
      },
      "getPoolAddress(address)": {
        "notice": "Get the pool address from pool token address"
      },
      "getPoolData(address)": {
        "notice": "Get pool data from pool token address"
      },
      "mintReward(address,uint256)": {
        "notice": "Mint degis tokens as reward"
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."
      },
      "setDegisPerSecond(address,uint256)": {
        "notice": "Set degis per second for a pool"
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`)."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27805,
        "contract": "contracts/staking/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 24573,
        "contract": "contracts/staking/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "degisToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 24577,
        "contract": "contracts/staking/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "pools",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 24581,
        "contract": "contracts/staking/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "poolExists",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}