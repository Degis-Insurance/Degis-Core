{
  "address": "0xEeCe1075b3bF898204100bcB0a4327BBe87dd52F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldIncomeMaker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newIncomeMaker",
          "type": "address"
        }
      ],
      "name": "IncomeMakerAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProportion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProportion",
          "type": "uint256"
        }
      ],
      "name": "IncomeMakerProportionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPolicyCore",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPolicyCore",
          "type": "address"
        }
      ],
      "name": "PolicyCoreAddressChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PAIR_INIT_CODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_nextId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        }
      ],
      "name": "deployPolicyToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeRate",
          "type": "uint256"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        }
      ],
      "name": "getInitCodeHashForPolicyToken",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress2",
          "type": "address"
        }
      ],
      "name": "getPairAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incomeMaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incomeMakerProportion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyCore",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_incomeMaker",
          "type": "address"
        }
      ],
      "name": "setIncomeMakerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proportion",
          "type": "uint256"
        }
      ],
      "name": "setIncomeMakerProportion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyCore",
          "type": "address"
        }
      ],
      "name": "setPolicyCoreAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3115564443f5e0d2f0fff02ee6faa6d4d5765716adeb191636d1b05966cdde53",
  "receipt": {
    "to": null,
    "from": "0x32eB34d060c12aD0491d260c436d30e5fB13a8Cd",
    "contractAddress": "0xEeCe1075b3bF898204100bcB0a4327BBe87dd52F",
    "transactionIndex": 1,
    "gasUsed": "4479856",
    "logsBloom": "0x
    "blockHash": "0x82e1001c314892bd0df6912663be73bd490e0afabe3ec6b824fcb8a891702e61",
    "transactionHash": "0x3115564443f5e0d2f0fff02ee6faa6d4d5765716adeb191636d1b05966cdde53",
    "logs": [],
    "blockNumber": 17232043,
    "cumulativeGasUsed": "4479856",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0908b805372ad3a5b867a88c8d84f329",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldIncomeMaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newIncomeMaker\",\"type\":\"address\"}],\"name\":\"IncomeMakerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProportion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProportion\",\"type\":\"uint256\"}],\"name\":\"IncomeMakerProportionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPolicyCore\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPolicyCore\",\"type\":\"address\"}],\"name\":\"PolicyCoreAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PAIR_INIT_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"deployPolicyToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"getInitCodeHashForPolicyToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress2\",\"type\":\"address\"}],\"name\":\"getPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incomeMaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incomeMakerProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyCore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incomeMaker\",\"type\":\"address\"}],\"name\":\"setIncomeMakerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proportion\",\"type\":\"uint256\"}],\"name\":\"setIncomeMakerProportion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyCore\",\"type\":\"address\"}],\"name\":\"setPolicyCoreAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deployPolicyToken(string,uint256)\":{\"params\":{\"_decimals\":\"Decimals of the policyToken \",\"_policyTokenName\":\"Name of the policyToken\"},\"returns\":{\"_0\":\"tokenAddress PolicyToken address\"}},\"deployPool(address,address,uint256,uint256)\":{\"params\":{\"_deadline\":\"Deadline of the pool\",\"_feeRate\":\"Fee rate given to LP holders \",\"_policyTokenAddress\":\"Address of policy token\",\"_stablecoin\":\"Address of the stable coin\"},\"returns\":{\"_0\":\"poolAddress Address of the pool\"}},\"getAllTokens()\":{\"returns\":{\"_0\":\"tokens All tokens\"}},\"getInitCodeHashForPolicyToken(string,uint256)\":{\"details\":\"For test/task convinience, pre-compute the address      Ethers.js:      Address = ethers.utils.getCreate2Address(factory address, salt, INIT_CODE_HASH)      salt = keccak256(abi.encodePacked(_policyTokenName))\",\"params\":{\"_decimals\":\"Token decimals of this policy token\",\"_tokenName\":\"Name of the policy token to be deployed\"}},\"getPairAddress(address,address)\":{\"params\":{\"_tokenAddress1\":\"Address of token1\",\"_tokenAddress2\":\"Address of toekn2\"},\"returns\":{\"_0\":\"Pool address of the two tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setIncomeMakerAddress(address)\":{\"details\":\"Only callable by the owner\",\"params\":{\"_incomeMaker\":\"New income maker address\"}},\"setIncomeMakerProportion(uint256)\":{\"details\":\"Only callable by the owner\",\"params\":{\"_proportion\":\"New proportion to income maker contract\"}},\"setPolicyCoreAddress(address)\":{\"details\":\"Only callable by the owner         < PolicyCore should be the minter of policyToken >         < This process is done inside constructor >\",\"params\":{\"_policyCore\":\"Address of policyCore contract\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Naughty Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployPolicyToken(string,uint256)\":{\"notice\":\"Deploy a new policy token.         Detail info is included inside the token name and handled inside policyCore.        \"},\"deployPool(address,address,uint256,uint256)\":{\"notice\":\"After deploy the policytoken and get the address,         we deploy the policyToken - stablecoin pool contract. \"},\"getAllTokens()\":{\"notice\":\"Get the all tokens that have been deployed\"},\"getInitCodeHashForPolicyToken(string,uint256)\":{\"notice\":\"Get the INIT_CODE_HASH for policy tokens with parameters\"},\"getPairAddress(address,address)\":{\"notice\":\"Get the pair address deployed by the factory         PolicyToken address first, and then stablecoin address         The order of the tokens will be sorted inside the function\"},\"setIncomeMakerAddress(address)\":{\"notice\":\"Set income maker address\"},\"setIncomeMakerProportion(uint256)\":{\"notice\":\"Set income maker proportion\"},\"setPolicyCoreAddress(address)\":{\"notice\":\"Remember to call this function to set the policyCore address\"}},\"notice\":\"Factory contract to deploy new price proteciton pools.         Each pool(product) will have a unique naughtyId         Each pool will have its pool token         PolicyToken - Stablecoin         Token 0 may change but Token 1 is always stablecoin.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/naughty-price/NaughtyFactory.sol\":\"NaughtyFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x53a0bb51b8a505e04aaf065de27c0e31cadf38194f8a9a6ec92b7bcd3c5826e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nlibrary Math {\\n    uint256 internal constant WAD = 10**18;\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n}\\n\",\"keccak256\":\"0x14d3b9b1d0e6d4f619a02cba3d4485cfb8af4c3e99bed82151bdb9c0a16b7fda\",\"license\":\"MIT\"},\"contracts/naughty-price/NPPolicyToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n    *******         **********     ***********     *****     ***********\\n    *      *        *              *                 *       *\\n    *        *      *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     **********     *       *****     *       ***********\\n    *         *     *              *         *       *                 *\\n    *         *     *              *         *       *                 *\\n    *        *      *              *         *       *                 *\\n    *      *        *              *         *       *                 *\\n    *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.10;\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title  Policy Token for Naughty Price\\n * @notice This is the contract for token price policy token.\\n *         It is a ERC20 token with an owner and a minter.\\n *         The owner should be the deployer at first.\\n *         The minter should be the policyCore contract.\\n * @dev    It is different from the flight delay token.\\n *         That is an ERC721 NFT and this is an ERC20 token.\\n */\\ncontract NPPolicyToken is ERC20 {\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    address public minter;\\n\\n    uint256 private tokenDecimals;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event Mint(address account, uint256 amount);\\n    event Burn(address account, uint256 amount);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _minter,\\n        uint256 _decimals\\n    ) ERC20(_name, _symbol) {\\n        minter = _minter;\\n        tokenDecimals = _decimals;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Modifiers **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Only the minter can mint\\n     */\\n    modifier onlyMinter() {\\n        require(msg.sender == minter, \\\"Only minter\\\");\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Main Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Mint some policy tokens\\n     * @param _account Address to receive the tokens\\n     * @param _amount Amount to be minted\\n     */\\n    function mint(address _account, uint256 _amount) public onlyMinter {\\n        _mint(_account, _amount);\\n        emit Mint(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Burn some policy tokens\\n     * @param _account Address to burn tokens\\n     * @param _amount Amount to be burned\\n     */\\n    function burn(address _account, uint256 _amount) public onlyMinter {\\n        _burn(_account, _amount);\\n        emit Burn(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Get the decimals of this token\\n     * @dev It should be the same as its paired stablecoin\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return uint8(tokenDecimals);\\n    }\\n}\\n\",\"keccak256\":\"0xbad9d854c923a3b84ca87b72fa9ba73f4283483cae15f1464c883ed8ccd880dc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/NaughtyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n    *******         **********     ***********     *****     ***********\\n    *      *        *              *                 *       *\\n    *        *      *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     **********     *       *****     *       ***********\\n    *         *     *              *         *       *                 *\\n    *         *     *              *         *       *                 *\\n    *        *      *              *         *       *                 *\\n    *      *        *              *         *       *                 *\\n    *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.10;\\nimport \\\"./NPPolicyToken.sol\\\";\\nimport \\\"./NaughtyPair.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { INaughtyPair } from \\\"./interfaces/INaughtyPair.sol\\\";\\nimport { IPolicyCore } from \\\"./interfaces/IPolicyCore.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title Naughty Factory\\n * @notice Factory contract to deploy new price proteciton pools.\\n *\\n *         Each pool(product) will have a unique naughtyId\\n *         Each pool will have its pool token\\n *         PolicyToken - Stablecoin\\n *         Token 0 may change but Token 1 is always stablecoin.\\n */\\n\\ncontract NaughtyFactory is OwnableUpgradeable {\\n    // INIT_CODE_HASH for NaughtyPair, may be used in frontend\\n    bytes32 public constant PAIR_INIT_CODE_HASH =\\n        keccak256(abi.encodePacked(type(NaughtyPair).creationCode));\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // PolicyToken Address => StableCoin Address => Pool Address\\n    mapping(address => mapping(address => address)) internal getPair;\\n\\n    // Store all the pairs' addresses\\n    address[] public allPairs;\\n\\n    // Store all policy tokens' addresses\\n    address[] public allTokens;\\n\\n    // Next pool id to be deployed\\n    uint256 public _nextId;\\n\\n    // Address of policyCore\\n    address public policyCore;\\n\\n    // Address of income maker, part of the transaction fee will be distributed to this address\\n    address public incomeMaker;\\n\\n    // Swap fee proportion to income maker\\n    uint256 public incomeMakerProportion;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event PolicyCoreAddressChanged(\\n        address oldPolicyCore,\\n        address newPolicyCore\\n    );\\n    event IncomeMakerProportionChanged(\\n        uint256 oldProportion,\\n        uint256 newProportion\\n    );\\n    event IncomeMakerAddressChanged(\\n        address oldIncomeMaker,\\n        address newIncomeMaker\\n    );\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        // 40% of swap fee is distributed to income maker contract\\n        // Can be set later\\n        incomeMakerProportion = 40;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Modifiers ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Only called by policyCore contract\\n     */\\n    modifier onlyPolicyCore() {\\n        require(msg.sender == policyCore, \\\"Only called by policyCore\\\");\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get the all tokens that have been deployed\\n     * @return tokens All tokens\\n     */\\n    function getAllTokens() external view returns (address[] memory) {\\n        return allTokens;\\n    }\\n\\n    /**\\n     * @notice Get the INIT_CODE_HASH for policy tokens with parameters\\n     * @dev For test/task convinience, pre-compute the address\\n     *      Ethers.js:\\n     *      Address = ethers.utils.getCreate2Address(factory address, salt, INIT_CODE_HASH)\\n     *      salt = keccak256(abi.encodePacked(_policyTokenName))\\n     * @param _tokenName Name of the policy token to be deployed\\n     * @param _decimals Token decimals of this policy token\\n     */\\n    function getInitCodeHashForPolicyToken(\\n        string memory _tokenName,\\n        uint256 _decimals\\n    ) public view returns (bytes32) {\\n        bytes memory bytecode = _getPolicyTokenBytecode(_tokenName, _decimals);\\n        return keccak256(bytecode);\\n    }\\n\\n    /**\\n     * @notice Get the pair address deployed by the factory\\n     *         PolicyToken address first, and then stablecoin address\\n     *         The order of the tokens will be sorted inside the function\\n     * @param _tokenAddress1 Address of token1\\n     * @param _tokenAddress2 Address of toekn2\\n     * @return Pool address of the two tokens\\n     */\\n    function getPairAddress(\\n        address _tokenAddress1,\\n        address _tokenAddress2\\n    ) public view returns (address) {\\n        // Policy token address at the first place\\n        (address token0, address token1) = IPolicyCore(policyCore)\\n            .supportedStablecoin(_tokenAddress2)\\n            ? (_tokenAddress1, _tokenAddress2)\\n            : (_tokenAddress2, _tokenAddress1);\\n\\n        address _pairAddress = getPair[token0][token1];\\n\\n        return _pairAddress;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Set Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Remember to call this function to set the policyCore address\\n     * @dev    Only callable by the owner\\n     *         < PolicyCore should be the minter of policyToken >\\n     *         < This process is done inside constructor >\\n     * @param _policyCore Address of policyCore contract\\n     */\\n    function setPolicyCoreAddress(address _policyCore) external onlyOwner {\\n        emit PolicyCoreAddressChanged(policyCore, _policyCore);\\n        policyCore = _policyCore;\\n    }\\n\\n    /**\\n     * @notice Set income maker proportion\\n     * @dev    Only callable by the owner\\n     * @param _proportion New proportion to income maker contract\\n     */\\n    function setIncomeMakerProportion(uint256 _proportion) external onlyOwner {\\n        emit IncomeMakerProportionChanged(incomeMakerProportion, _proportion);\\n        incomeMakerProportion = _proportion;\\n    }\\n\\n    /**\\n     * @notice Set income maker address\\n     * @dev Only callable by the owner\\n     * @param _incomeMaker New income maker address\\n     */\\n    function setIncomeMakerAddress(address _incomeMaker) external onlyOwner {\\n        emit IncomeMakerAddressChanged(incomeMaker, _incomeMaker);\\n        incomeMaker = _incomeMaker;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Main Functions *********************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Deploy a new policy token.\\n     *         Detail info is included inside the token name and handled inside policyCore.       \\n     * \\n     * @param _policyTokenName Name of the policyToken\\n     * @param _decimals        Decimals of the policyToken\\n     * \\n     * @return tokenAddress PolicyToken address\\n     */\\n    function deployPolicyToken(\\n        string memory _policyTokenName,\\n        uint256 _decimals\\n    ) external onlyPolicyCore returns (address) {\\n        bytes32 salt = keccak256(abi.encodePacked(_policyTokenName));\\n\\n        bytes memory bytecode = _getPolicyTokenBytecode(\\n            _policyTokenName,\\n            _decimals\\n        );\\n\\n        address _policTokenAddress = _deploy(bytecode, salt);\\n\\n        allTokens.push(_policTokenAddress);\\n\\n        _nextId++;\\n\\n        return _policTokenAddress;\\n    }\\n\\n    /**\\n     * @notice After deploy the policytoken and get the address,\\n     *         we deploy the policyToken - stablecoin pool contract.\\n     * \\n     * @param _policyTokenAddress Address of policy token\\n     * @param _stablecoin         Address of the stable coin\\n     * @param _deadline           Deadline of the pool\\n     * @param _feeRate            Fee rate given to LP holders\\n     * \\n     * @return poolAddress Address of the pool\\n     */\\n    function deployPool(\\n        address _policyTokenAddress,\\n        address _stablecoin,\\n        uint256 _deadline,\\n        uint256 _feeRate\\n    ) public onlyPolicyCore returns (address) {\\n        bytes memory bytecode = type(NaughtyPair).creationCode;\\n\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(_policyTokenAddress, _stablecoin)\\n        );\\n\\n        address _poolAddress = _deploy(bytecode, salt);\\n\\n        INaughtyPair(_poolAddress).initialize(\\n            _policyTokenAddress,\\n            _stablecoin,\\n            _deadline,\\n            _feeRate\\n        );\\n\\n        getPair[_policyTokenAddress][_stablecoin] = _poolAddress;\\n\\n        allPairs.push(_poolAddress);\\n\\n        return _poolAddress;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Deploy function with create2\\n     * @param code Byte code of the contract (creation code)\\n     * @param salt Salt for the deployment\\n     * @return addr The deployed contract address\\n     */\\n    function _deploy(\\n        bytes memory code,\\n        bytes32 salt\\n    ) internal returns (address addr) {\\n        assembly {\\n            addr := create2(0, add(code, 0x20), mload(code), salt)\\n            if iszero(extcodesize(addr)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the policyToken bytecode (with constructor parameters)\\n     * @param _tokenName Name of policyToken\\n     * @param _decimals Decimals of policyToken\\n     */\\n    function _getPolicyTokenBytecode(\\n        string memory _tokenName,\\n        uint256 _decimals\\n    ) internal view returns (bytes memory) {\\n        bytes memory bytecode = type(NPPolicyToken).creationCode;\\n\\n        // Encodepacked the parameters\\n        // The minter is set to be the policyCore address\\n        return\\n            abi.encodePacked(\\n                bytecode,\\n                abi.encode(_tokenName, _tokenName, policyCore, _decimals)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x60b7190bc1d3661ff3fb5851d51a4f722ae948665fb1df2eb7c9f8ab5d1098bf\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/NaughtyPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n    *******         **********     ***********     *****     ***********\\n    *      *        *              *                 *       *\\n    *        *      *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     **********     *       *****     *       ***********\\n    *         *     *              *         *       *                 *\\n    *         *     *              *         *       *                 *\\n    *        *      *              *         *       *                 *\\n    *      *        *              *         *       *                 *\\n    *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.10;\\n\\nimport { Math } from \\\"../libraries/Math.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"../utils/ReentrancyGuard.sol\\\";\\nimport { INaughtyFactory } from \\\"./interfaces/INaughtyFactory.sol\\\";\\n\\n/**\\n * @title  Naughty Pair\\n * @notice This is the contract for the naughtyPrice swapping pair.\\n *         Every time a new naughtyPrice product is online you need to deploy this contract.\\n *         The contract will be initialized with two tokens and a deadline.\\n *         Token0 will be policy tokens and token1 will be stablecoins.\\n *         The swaps are only availale before the deadline.\\n */\\ncontract NaughtyPair is ERC20(\\\"Naughty Pool LP\\\", \\\"NLP\\\"), ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Minimum liquidity locked\\n    uint256 public constant MINIMUM_LIQUIDITY = 10 ** 3;\\n\\n    // naughtyFactory contract address\\n    address public factory;\\n\\n    // Token addresses in the pool\\n    address public token0; // Insurance Token\\n    address public token1; // USDT\\n\\n    uint112 private reserve0; // Amount of Insurance Token\\n    uint112 private reserve1; // Amount of USDT\\n\\n    // Used for modifiers\\n    bool public unlocked = true;\\n\\n    // Every pool will have a deadline\\n    uint256 public deadline;\\n\\n    // Fee Rate, given to LP holders (0 ~ 1000)\\n    uint256 public feeRate;\\n\\n    // reserve0 * reserve1\\n    uint256 public kLast;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event ReserveUpdated(uint256 reserve0, uint256 reserve1);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amountAIn,\\n        uint256 amountBIn,\\n        uint256 amountAOut,\\n        uint256 amountBOut,\\n        address indexed to\\n    );\\n\\n    event Mint(address indexed sender, uint256 amountA, uint256 amountB);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amountA,\\n        uint256 amountB,\\n        address indexed to\\n    );\\n\\n    constructor() {\\n        factory = msg.sender; // deployed by factory contract\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Can not swap after the deadline\\n     * @dev Each pool will have a deadline and it was set when deployed\\n     *      Does not apply to income maker contract\\n     */\\n    modifier beforeDeadline() {\\n        if (msg.sender != INaughtyFactory(factory).incomeMaker()) {\\n            require(block.timestamp <= deadline, \\\"Can not swap after deadline\\\");\\n        }\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Init Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Initialize the contract status after the deployment by factory\\n     *\\n     * @param _token0   Token0 address (policy token address)\\n     * @param _token1   Token1 address (stablecoin address)\\n     * @param _deadline Deadline for this pool\\n     * @param _feeRate  Fee rate to LP holders (1000 <=> 100%)\\n     */\\n    function initialize(\\n        address _token0,\\n        address _token1,\\n        uint256 _deadline,\\n        uint256 _feeRate\\n    ) external {\\n        require(\\n            msg.sender == factory,\\n            \\\"can only be initialized by the factory contract\\\"\\n        );\\n        require(_feeRate <= 1000, \\\"feeRate over 1.0\\\");\\n\\n        token0 = _token0;\\n        token1 = _token1;\\n\\n        // deadline for the whole pool after which no swap will be allowed\\n        deadline = _deadline;\\n\\n        feeRate = _feeRate;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get reserve0 (Policy token) and reserve1 (stablecoin).\\n     * @dev This function always put policy token at the first place!\\n     * @return _reserve0 Reserve of token0\\n     * @return _reserve1 Reserve of token1\\n     */\\n    function getReserves()\\n        public\\n        view\\n        returns (uint112 _reserve0, uint112 _reserve1)\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Mint LP Token to liquidity providers\\n     *         Called when adding liquidity.\\n     * @param to The user address\\n     * @return liquidity The LP token amount\\n     */\\n    function mint(\\n        address to\\n    ) external nonReentrant returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1) = getReserves(); // gas savings\\n\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this)); // policy token balance after deposit\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this)); // stablecoin balance after deposit\\n\\n        uint256 amount0 = balance0 - _reserve0; // just deposit\\n        uint256 amount1 = balance1 - _reserve1;\\n\\n        // Distribute part of the fee to income maker\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n\\n        uint256 _totalSupply = totalSupply(); // gas savings\\n        if (_totalSupply == 0) {\\n            // No liquidity = First add liquidity\\n            liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\\n            // Keep minimum liquidity to this contract\\n            _mint(factory, MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = min(\\n                (amount0 * _totalSupply) / _reserve0,\\n                (amount1 * _totalSupply) / _reserve1\\n            );\\n        }\\n\\n        require(liquidity > 0, \\\"insufficient liquidity minted\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1);\\n\\n        if (feeOn) kLast = reserve0 * reserve1;\\n\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    /**\\n     * @notice Burn LP tokens give back the original tokens\\n     * @param _to User address\\n     * @return amount0 Amount of token0 to be sent back\\n     * @return amount1 Amount of token1 to be sent back\\n     */\\n    function burn(\\n        address _to\\n    ) external nonReentrant returns (uint256 amount0, uint256 amount1) {\\n        // gas savings\\n        (uint112 _reserve0, uint112 _reserve1) = getReserves();\\n        address _token0 = token0;\\n        address _token1 = token1;\\n\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this)); // policy token balance\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this)); // stablecoin balance\\n\\n        uint256 liquidity = balanceOf(address(this));\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n\\n        uint256 _totalSupply = totalSupply(); // gas savings\\n\\n        // How many tokens to be sent back\\n        amount0 = (liquidity * balance0) / _totalSupply;\\n        amount1 = (liquidity * balance1) / _totalSupply;\\n\\n        require(amount0 > 0 && amount1 > 0, \\\"Insufficient liquidity burned\\\");\\n\\n        // Currently all the liquidity in the pool was just sent by the user, so burn all\\n        _burn(address(this), liquidity);\\n\\n        // Transfer tokens out and update the balance\\n        IERC20(_token0).safeTransfer(_to, amount0);\\n        IERC20(_token1).safeTransfer(_to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1);\\n\\n        if (feeOn) kLast = reserve0 * reserve1;\\n\\n        emit Burn(msg.sender, amount0, amount1, _to);\\n    }\\n\\n    /**\\n     * @notice Finish the swap process\\n     * @param _amount0Out Amount of token0 to be given out (may be 0)\\n     * @param _amount1Out Amount of token1 to be given out (may be 0)\\n     * @param _to Address to receive the swap result\\n     */\\n    function swap(\\n        uint256 _amount0Out,\\n        uint256 _amount1Out,\\n        address _to\\n    ) external beforeDeadline nonReentrant {\\n        require(\\n            _amount0Out > 0 || _amount1Out > 0,\\n            \\\"Output amount need to be > 0\\\"\\n        );\\n\\n        (uint112 _reserve0, uint112 _reserve1) = getReserves(); // gas savings\\n        require(\\n            _amount0Out < _reserve0 && _amount1Out < _reserve1,\\n            \\\"Not enough liquidity\\\"\\n        );\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(_to != _token0 && _to != _token1, \\\"INVALID_TO\\\");\\n\\n            if (_amount0Out > 0) IERC20(_token0).safeTransfer(_to, _amount0Out);\\n            if (_amount1Out > 0) IERC20(_token1).safeTransfer(_to, _amount1Out);\\n\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - _amount0Out\\n            ? balance0 - (_reserve0 - _amount0Out)\\n            : 0;\\n        uint256 amount1In = balance1 > _reserve1 - _amount1Out\\n            ? balance1 - (_reserve1 - _amount1Out)\\n            : 0;\\n\\n        require(amount0In > 0 || amount1In > 0, \\\"INSUFFICIENT_INPUT_AMOUNT\\\");\\n\\n        {\\n            uint256 balance0Adjusted = balance0 * 1000 - amount0In * feeRate;\\n            uint256 balance1Adjusted = balance1 * 1000 - amount1In * feeRate;\\n\\n            require(\\n                balance0Adjusted * balance1Adjusted >=\\n                    _reserve0 * _reserve1 * (1000 ** 2),\\n                \\\"The remaining x*y is less than K\\\"\\n            );\\n        }\\n\\n        _update(balance0, balance1);\\n\\n        emit Swap(\\n            msg.sender,\\n            amount0In,\\n            amount1In,\\n            _amount0Out,\\n            _amount1Out,\\n            _to\\n        );\\n    }\\n\\n    /**\\n     * @notice Syncrinize the status of this pool\\n     */\\n    function sync() external nonReentrant {\\n        _update(\\n            IERC20(token0).balanceOf(address(this)),\\n            IERC20(token1).balanceOf(address(this))\\n        );\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ********************************** Internal Functions ********************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Update the reserves of the pool\\n     * @param balance0 Balance of token0\\n     * @param balance1 Balance of token1\\n     */\\n    function _update(uint256 balance0, uint256 balance1) private {\\n        uint112 MAX_NUM = type(uint112).max;\\n        require(balance0 <= MAX_NUM && balance1 <= MAX_NUM, \\\"Uint112 OVERFLOW\\\");\\n\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n\\n        emit ReserveUpdated(reserve0, reserve1);\\n    }\\n\\n    /**\\n     * @notice Get the smaller one of two numbers\\n     * @param x The first number\\n     * @param y The second number\\n     * @return z The smaller one\\n     */\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    function _mintFee(\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private returns (bool feeOn) {\\n        address incomeMaker = INaughtyFactory(factory).incomeMaker();\\n\\n        // If incomeMaker is not zero address, fee is on\\n        feeOn = incomeMaker != address(0);\\n\\n        uint256 _k = kLast;\\n\\n        if (feeOn) {\\n            if (_k != 0) {\\n                uint256 rootK = Math.sqrt(_reserve0 * _reserve1);\\n                uint256 rootKLast = Math.sqrt(_k);\\n\\n                if (rootK > rootKLast) {\\n                    uint256 numerator = totalSupply() *\\n                        (rootK - rootKLast) *\\n                        10;\\n\\n                    // (1 / \\u03c6) - 1\\n                    // Proportion got from factory is based on 100\\n                    // Use 1000/proportion to make it divided (donominator and numerator both * 10)\\n                    // p = 40 (2/5) => 1000/40 = 25\\n                    uint256 incomeMakerProportion = INaughtyFactory(factory)\\n                        .incomeMakerProportion();\\n                    uint256 denominator = rootK *\\n                        (1000 / incomeMakerProportion - 10) +\\n                        rootKLast *\\n                        10;\\n\\n                    uint256 liquidity = numerator / denominator;\\n\\n                    // Mint the liquidity to income maker contract\\n                    if (liquidity > 0) _mint(incomeMaker, liquidity);\\n                }\\n            }\\n        } else if (_k != 0) {\\n            kLast = 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x635ce75d2268aea3df8bbcdc07394e077337ac50673ceca5908d97860613d3d7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/interfaces/INaughtyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface INaughtyFactory {\\n    function getPairAddress(address _tokenAddress1, address _tokenAddress2)\\n        external\\n        view\\n        returns (address);\\n\\n    function deployPolicyToken(\\n        string memory _policyTokenName,\\n        uint256 _decimals\\n    ) external returns (address);\\n\\n    function deployPool(\\n        address _policyTokenAddress,\\n        address _stablecoin,\\n        uint256 _deadline,\\n        uint256 _feeRate\\n    ) external returns (address);\\n\\n    function incomeMaker() external view returns (address);\\n\\n    function incomeMakerProportion() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x52954621ef71dc1217e56e802c04e93f21a8776a8fe6b886ca8b0a2b6e1ab720\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/interfaces/INaughtyPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface INaughtyPair is IERC20 {\\n    function initialize(\\n        address _token0,\\n        address _token1,\\n        uint256 _deadline,\\n        uint256 _feeRate\\n    ) external;\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function feeRate() external view returns (uint256);\\n\\n    function deadline() external view returns (uint256);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 _reserve0, uint112 _reserve1);\\n\\n    function swap(\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n\\n    function burn(address) external returns (uint256, uint256);\\n\\n    function mint(address) external returns (uint256);\\n\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0x9e8350da8ead9e167ad8274005d55b5c2dd8ba878947e0eda58da10f70a6b0aa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/interfaces/IPolicyCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface IPolicyCore {\\n    struct PolicyTokenInfo {\\n        address policyTokenAddress;\\n        bool isCall;\\n        uint256 nameDecimals; // decimals of the name generation\\n        uint256 tokenDecimals; // decimals of the policy token\\n        uint256 strikePrice;\\n        uint256 deadline;\\n        uint256 settleTimestamp;\\n    }\\n\\n    /**\\n     * @notice Find the address by its name\\n     */\\n    function findAddressbyName(string memory _policyTokenName)\\n        external\\n        view\\n        returns (address _policyTokenAddress);\\n\\n    /**\\n     * @notice Find the name by address\\n     */\\n    function findNamebyAddress(address _policyTokenAddress)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Check whether the stablecoin is supported\\n     */\\n    function supportedStablecoin(address _coinAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    function delegateDeposit(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function deployPool(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _poolDeadline,\\n        uint256 _feeRate\\n    ) external returns (address);\\n\\n    function getPolicyTokenInfo(string memory _policyTokenName)\\n        external\\n        view\\n        returns (PolicyTokenInfo memory);\\n\\n    function updateUserQuota(\\n        address _user,\\n        address _policyToken,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7fa671876d2a8a1bb994de6dcd680e81a972939bc99b2d47b064c93da3d4a149\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x62e49c6c64dfb07ffea8c68cd1993ea9be67a2aa3acff47dc7762771f4eb76a4\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615057806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200016c5760003560e01c80638129fc1c11620000dd578063be1bd331116200008b578063e30145e0116200006e578063e30145e014620002d0578063f2f2fff514620002e4578063f2fde38b14620002ee57600080fd5b8063be1bd33114620002a5578063c79c4c6214620002b957600080fd5b80638da5cb5b11620000c05780638da5cb5b1462000265578063b30ebecd1462000277578063b4f69a2f146200028e57600080fd5b80638129fc1c146200024457806387f0061a146200024e57600080fd5b806357b84f8c116200013b578063634282af116200011e578063634282af1462000219578063715018a61462000230578063786df8ec146200023a57600080fd5b806357b84f8c14620001f657806361c8f99d146200020057600080fd5b80631e3dd18b14620001715780632a5c792a14620001a05780633a5f69f814620001b9578063490d735014620001d0575b600080fd5b620001886200018236600462000bc7565b62000305565b60405162000197919062000c17565b60405180910390f35b620001aa62000330565b60405162000197919062000c8c565b62000188620001ca36600462000cbe565b62000394565b620001e7620001e136600462000e3c565b62000538565b60405162000197919062000ea2565b620001e762000559565b620002176200021136600462000eb2565b620005a7565b005b620001886200022a36600462000bc7565b6200063f565b6200021762000650565b620001e7606b5481565b620002176200068b565b620001886200025f36600462000e3c565b62000713565b6033546001600160a01b031662000188565b620002176200028836600462000eb2565b620007fa565b620001886200029f36600462000ed7565b62000892565b606a5462000188906001600160a01b031681565b62000217620002ca36600462000bc7565b62000966565b60695462000188906001600160a01b031681565b620001e760685481565b62000217620002ff36600462000eb2565b620009d5565b606681815481106200031657600080fd5b6000918252602090912001546001600160a01b0316905081565b606060678054806020026020016040519081016040528092919081815260200182805480156200038a57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116200036b575b5050505050905090565b6069546000906001600160a01b03163314620003cd5760405162461bcd60e51b8152600401620003c49062000f43565b60405180910390fd5b600060405180602001620003e19062000b90565b6020820181038252601f19601f820116604052509050600086866040516020016200040e92919062000f84565b604051602081830303815290604052805190602001209050600062000434838362000a36565b6040517feb990c590000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063eb990c599062000484908b908b908b908b9060040162000fa8565b600060405180830381600087803b1580156200049f57600080fd5b505af1158015620004b4573d6000803e3d6000fd5b5050506001600160a01b03808a1660009081526065602090815260408083208c85168452909152812080549285166001600160a01b031993841681179091556066805460018101825592527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e9435490910180549092161790555092505050949350505050565b60008062000547848462000a50565b80516020909101209150505b92915050565b6040516200056a6020820162000b90565b601f1982820381018352601f9091011660408190526200058e919060200162001046565b6040516020818303038152906040528051906020012081565b6033546001600160a01b03163314620005d45760405162461bcd60e51b8152600401620003c49062001083565b6069546040517f3589df28c7a4e563855a6dad51377b5e4a78c2c46954792d4ebcc2b6f477af2d9162000615916001600160a01b0390911690849062001095565b60405180910390a1606980546001600160a01b0319166001600160a01b0392909216919091179055565b606781815481106200031657600080fd5b6033546001600160a01b031633146200067d5760405162461bcd60e51b8152600401620003c49062001083565b62000689600062000adb565b565b600054610100900460ff16620006a85760005460ff1615620006ac565b303b155b620006cb5760405162461bcd60e51b8152600401620003c4906200110e565b600054610100900460ff16158015620006ee576000805461ffff19166101011790555b620006f862000b2d565b6028606b55801562000710576000805461ff00191690555b50565b6069546000906001600160a01b03163314620007435760405162461bcd60e51b8152600401620003c49062000f43565b60008360405160200162000758919062001046565b60405160208183030381529060405280519060200120905060006200077e858562000a50565b905060006200078e828462000a36565b6067805460018101825560009182527f9787eeb91fe3101235e4a76063c7023ecb40f923f97916639c598592fa30d6ae0180546001600160a01b0319166001600160a01b0384161790556068805492935090620007eb8362001136565b90915550909695505050505050565b6033546001600160a01b03163314620008275760405162461bcd60e51b8152600401620003c49062001083565b606a546040517fbfabdf035dcaa5c8487ab344ae430927cd8bacc1ec3d6d600fb599344a276c079162000868916001600160a01b0390911690849062001095565b60405180910390a1606a80546001600160a01b0319166001600160a01b0392909216919091179055565b6069546040517f5cb3b14f000000000000000000000000000000000000000000000000000000008152600091829182916001600160a01b031690635cb3b14f90620008e290879060040162000c17565b602060405180830381865afa15801562000900573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000926919062001168565b6200093357838562000936565b84845b6001600160a01b039182166000908152606560209081526040808320938516835292905220541695945050505050565b6033546001600160a01b03163314620009935760405162461bcd60e51b8152600401620003c49062001083565b7f9bc521ec6408e4c9862a903b71cc867ff65b137b9ddec02734bd4a840817848f606b5482604051620009c89291906200118d565b60405180910390a1606b55565b6033546001600160a01b0316331462000a025760405162461bcd60e51b8152600401620003c49062001083565b6001600160a01b03811662000a2b5760405162461bcd60e51b8152600401620003c49062001205565b620007108162000adb565b6000818351602085016000f59050803b6200055357600080fd5b606060006040518060200162000a669062000b9e565b601f1982820381018352601f909101166040819052606954919250829162000aa391879182916001600160a01b039091169088906020016200124c565b60408051601f198184030181529082905262000ac3929160200162001286565b60405160208183030381529060405291505092915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1662000b575760405162461bcd60e51b8152600401620003c490620012f9565b62000689600054610100900460ff1662000b855760405162461bcd60e51b8152600401620003c490620012f9565b620006893362000adb565b612a13806200130c83390190565b6113038062003d1f83390190565b805b81146200071057600080fd5b8035620005538162000bac565b60006020828403121562000bde5762000bde600080fd5b600062000bec848462000bba565b949350505050565b60006001600160a01b03821662000553565b62000c118162000bf4565b82525050565b6020810162000553828462000c06565b62000c33828262000c06565b5060200190565b60200190565b600062000c4b825190565b808452602093840193830160005b8281101562000c8257815162000c70878262000c27565b96505060208201915060010162000c59565b5093949350505050565b6020808252810162000c9f818462000c40565b9392505050565b62000bae8162000bf4565b8035620005538162000ca6565b6000806000806080858703121562000cd95762000cd9600080fd5b600062000ce7878762000cb1565b945050602062000cfa8782880162000cb1565b935050604062000d0d8782880162000bba565b925050606062000d208782880162000bba565b91505092959194509250565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171562000d6b5762000d6b62000d2c565b6040525050565b600062000d7e60405190565b905062000d8c828262000d42565b919050565b600067ffffffffffffffff82111562000dae5762000dae62000d2c565b601f19601f83011660200192915050565b82818337506000910152565b600062000de262000ddc8462000d91565b62000d72565b90508281526020810184848401111562000dff5762000dff600080fd5b62000e0c84828562000dbf565b509392505050565b600082601f83011262000e2a5762000e2a600080fd5b813562000bec84826020860162000dcb565b6000806040838503121562000e545762000e54600080fd5b823567ffffffffffffffff81111562000e705762000e70600080fd5b62000e7e8582860162000e14565b925050602062000e918582860162000bba565b9150509250929050565b8062000c11565b6020810162000553828462000e9b565b60006020828403121562000ec95762000ec9600080fd5b600062000bec848462000cb1565b6000806040838503121562000eef5762000eef600080fd5b600062000efd858562000cb1565b925050602062000e918582860162000cb1565b60198152602081017f4f6e6c792063616c6c656420627920706f6c696379436f7265000000000000008152905062000c3a565b60208082528101620005538162000f10565b6000620005538260601b90565b6000620005538262000f55565b62000c1162000f7e8262000bf4565b62000f62565b62000f90818462000f6f565b60140162000f9f818362000f6f565b60140192915050565b6080810162000fb8828762000c06565b62000fc7602083018662000c06565b62000fd6604083018562000e9b565b62000fe5606083018462000e9b565b95945050505050565b60005b838110156200100b57818101518382015260200162000ff1565b838111156200101b576000848401525b50505050565b60006200102c825190565b6200103c81856020860162000fee565b9290920192915050565b62000553818362001021565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815262000c3a565b60208082528101620005538162001052565b60408101620010a5828562000c06565b62000c9f602083018462000c06565b602e8152602081017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181527f647920696e697469616c697a6564000000000000000000000000000000000000602082015290505b60400190565b602080825281016200055381620010b4565b634e487b7160e01b600052601160045260246000fd5b6000600182016200114b576200114b62001120565b5060010190565b80151562000bae565b8051620005538162001152565b6000602082840312156200117f576200117f600080fd5b600062000bec84846200115b565b604081016200119d828562000e9b565b62000c9f602083018462000e9b565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f64647265737300000000000000000000000000000000000000000000000000006020820152905062001108565b602080825281016200055381620011ac565b600062001222825190565b8084526020840193506200123b81856020860162000fee565b601f01601f19169290920192915050565b608080825281016200125f818762001217565b9050818103602083015262001275818662001217565b905062000fd6604083018562000c06565b62001292818462001021565b905062000c9f818362001021565b602b8152602081017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981527f6e697469616c697a696e670000000000000000000000000000000000000000006020820152905062001108565b602080825281016200055381620012a056fe60806040526009805460ff60e01b1916600160e01b1790553480156200002457600080fd5b506040518060400160405280600f81526020016e04e61756768747920506f6f6c204c5608c1b8152506040518060400160405280600381526020016204e4c560ec1b815250816003908051906020019062000081929190620000b7565b50805162000097906004906020840190620000b7565b5050600160055550600680546001600160a01b03191633179055620001a3565b828054620000c59062000173565b90600052602060002090601f016020900481019282620000e9576000855562000134565b82601f106200010457805160ff191683800117855562000134565b8280016001018555821562000134579182015b828111156200013457825182559160200191906001019062000117565b506200014292915062000146565b5090565b5b8082111562000142576000815560010162000147565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200018857607f821691505b6020821081036200019d576200019d6200015d565b50919050565b61286080620001b36000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c806370a08231116100ee578063a9059cbb11610097578063d21220a711610071578063d21220a714610375578063dd62ed3e14610388578063eb990c59146103c1578063fff6cae9146103d457600080fd5b8063a9059cbb14610346578063ba9a7a5614610359578063c45a01551461036257600080fd5b806395d89b41116100c857806395d89b4114610322578063978bbdb91461032a578063a457c2d71461033357600080fd5b806370a08231146102cf5780637464fc3d146102f857806389afcb441461030157600080fd5b806329dcb0cf116101505780636a5e26501161012a5780636a5e26501461027a5780636a627842146102a75780636d9a640a146102ba57600080fd5b806329dcb0cf1461024f578063313ce56714610258578063395093511461026757600080fd5b80630dfe1681116101815780630dfe16811461020b57806318160ddd1461022b57806323b872dd1461023c57600080fd5b806306fdde03146101a85780630902f1ac146101c6578063095ea7b3146101eb575b600080fd5b6101b06103dc565b6040516101bd9190611b2e565b60405180910390f35b6009546001600160701b0380821691600160701b9004166040516101bd929190611b50565b6101fe6101f9366004611baf565b61046e565b6040516101bd9190611bf4565b60075461021e906001600160a01b031681565b6040516101bd9190611c0b565b6002545b6040516101bd9190611c1f565b6101fe61024a366004611c2d565b610485565b61022f600a5481565b60126040516101bd9190611c86565b6101fe610275366004611baf565b6104f9565b6009546101fe907c0100000000000000000000000000000000000000000000000000000000900460ff1681565b61022f6102b5366004611c94565b610535565b6102cd6102c8366004611cb5565b610805565b005b61022f6102dd366004611c94565b6001600160a01b031660009081526020819052604090205490565b61022f600c5481565b61031461030f366004611c94565b610c8b565b6040516101bd929190611cfb565b6101b0610fff565b61022f600b5481565b6101fe610341366004611baf565b61100e565b6101fe610354366004611baf565b611069565b61022f6103e881565b60065461021e906001600160a01b031681565b60085461021e906001600160a01b031681565b61022f610396366004611d16565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102cd6103cf366004611d49565b611076565b6102cd611115565b6060600380546103eb90611dc3565b80601f016020809104026020016040519081016040528092919081815260200182805461041790611dc3565b80156104645780601f1061043957610100808354040283529160200191610464565b820191906000526020600020905b81548152906001019060200180831161044757829003601f168201915b5050505050905090565b600061047b33848461122c565b5060015b92915050565b60006104928484846112e0565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156104df5760405162461bcd60e51b81526004016104d690611e43565b60405180910390fd5b6104ec853385840361122c565b60019150505b9392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161047b918590610530908690611e69565b61122c565b60006002600554036105595760405162461bcd60e51b81526004016104d690611eb5565b600260055560008061057f6009546001600160701b0380821692600160701b9092041690565b6007546040516370a0823160e01b81529294509092506000916001600160a01b03909116906370a08231906105b8903090600401611c0b565b602060405180830381865afa1580156105d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f99190611ed0565b6008546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061062f903090600401611c0b565b602060405180830381865afa15801561064c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106709190611ed0565b905060006106876001600160701b03861684611ef1565b9050600061069e6001600160701b03861684611ef1565b905060006106ac87876113f5565b905060006106b960025490565b905080600003610702576103e86106d86106d38587611f08565b6115de565b6106e29190611ef1565b6006549099506106fd906001600160a01b03166103e861164e565b610749565b6107466001600160701b0389166107198387611f08565b6107239190611f3d565b6001600160701b0389166107378487611f08565b6107419190611f3d565b611702565b98505b600089116107695760405162461bcd60e51b81526004016104d690611f83565b6107738a8a61164e565b61077d8686611718565b81156107af576009546107a2906001600160701b03600160701b820481169116611f93565b6001600160701b0316600c555b336001600160a01b03167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f85856040516107ea929190611cfb565b60405180910390a25050600160055550949695505050505050565b600660009054906101000a90046001600160a01b03166001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa158015610858573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087c9190611fd5565b6001600160a01b0316336001600160a01b0316146108b657600a544211156108b65760405162461bcd60e51b81526004016104d690612028565b6002600554036108d85760405162461bcd60e51b81526004016104d690611eb5565b6002600555821515806108eb5750600082115b6109075760405162461bcd60e51b81526004016104d69061206a565b6000806109286009546001600160701b0380821692600160701b9092041690565b91509150816001600160701b03168510801561094c5750806001600160701b031684105b6109685760405162461bcd60e51b81526004016104d6906120ac565b60075460085460009182916001600160a01b039182169190811690871682148015906109a65750806001600160a01b0316876001600160a01b031614155b6109c25760405162461bcd60e51b81526004016104d6906120ee565b88156109dc576109dc6001600160a01b038316888b6117df565b87156109f6576109f66001600160a01b038216888a6117df565b6040516370a0823160e01b81526001600160a01b038316906370a0823190610a22903090600401611c0b565b602060405180830381865afa158015610a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a639190611ed0565b6040516370a0823160e01b81529094506001600160a01b038216906370a0823190610a92903090600401611c0b565b602060405180830381865afa158015610aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad39190611ed0565b92505050600087856001600160701b0316610aee9190611ef1565b8311610afb576000610b18565b610b0e886001600160701b038716611ef1565b610b189084611ef1565b90506000610b2f886001600160701b038716611ef1565b8311610b3c576000610b59565b610b4f886001600160701b038716611ef1565b610b599084611ef1565b90506000821180610b6a5750600081115b610b865760405162461bcd60e51b81526004016104d690612130565b6000600b5483610b969190611f08565b610ba2866103e8611f08565b610bac9190611ef1565b90506000600b5483610bbe9190611f08565b610bca866103e8611f08565b610bd49190611ef1565b9050610be08789611f93565b610bed90620f4240611f93565b6001600160701b0316610c008284611f08565b1015610c1e5760405162461bcd60e51b81526004016104d690612170565b5050610c2a8484611718565b866001600160a01b0316336001600160a01b03167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82284848d8d604051610c739493929190612180565b60405180910390a35050600160055550505050505050565b600080600260055403610cb05760405162461bcd60e51b81526004016104d690611eb5565b6002600555600080610cd66009546001600160701b0380821692600160701b9092041690565b6007546008546040516370a0823160e01b81529395509193506001600160a01b039081169291169060009083906370a0823190610d17903090600401611c0b565b602060405180830381865afa158015610d34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d589190611ed0565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610d889190611c0b565b602060405180830381865afa158015610da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc99190611ed0565b30600090815260208190526040812054919250610de688886113f5565b90506000610df360025490565b905080610e008685611f08565b610e0a9190611f3d565b9a5080610e178585611f08565b610e219190611f3d565b995060008b118015610e33575060008a115b610e4f5760405162461bcd60e51b81526004016104d6906121f0565b610e593084611867565b610e6d6001600160a01b0388168d8d6117df565b610e816001600160a01b0387168d8c6117df565b6040516370a0823160e01b81526001600160a01b038816906370a0823190610ead903090600401611c0b565b602060405180830381865afa158015610eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eee9190611ed0565b6040516370a0823160e01b81529095506001600160a01b038716906370a0823190610f1d903090600401611c0b565b602060405180830381865afa158015610f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5e9190611ed0565b9350610f6a8585611718565b8115610f9c57600954610f8f906001600160701b03600160701b820481169116611f93565b6001600160701b0316600c555b8b6001600160a01b0316336001600160a01b03167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968d8d604051610fe1929190611cfb565b60405180910390a35050505050505050506001600581905550915091565b6060600480546103eb90611dc3565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156110525760405162461bcd60e51b81526004016104d690612258565b61105f338585840361122c565b5060019392505050565b600061047b3384846112e0565b6006546001600160a01b031633146110a05760405162461bcd60e51b81526004016104d6906122c0565b6103e88111156110c25760405162461bcd60e51b81526004016104d690612302565b600780546001600160a01b039586167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556008805494909516931692909217909255600a91909155600b55565b6002600554036111375760405162461bcd60e51b81526004016104d690611eb5565b60026005556007546040516370a0823160e01b8152611225916001600160a01b0316906370a082319061116e903090600401611c0b565b602060405180830381865afa15801561118b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111af9190611ed0565b6008546040516370a0823160e01b81526001600160a01b03909116906370a08231906111df903090600401611c0b565b602060405180830381865afa1580156111fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112209190611ed0565b611718565b6001600555565b6001600160a01b0383166112525760405162461bcd60e51b81526004016104d69061236a565b6001600160a01b0382166112785760405162461bcd60e51b81526004016104d6906123d2565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906112d3908590611c1f565b60405180910390a3505050565b6001600160a01b0383166113065760405162461bcd60e51b81526004016104d69061243a565b6001600160a01b03821661132c5760405162461bcd60e51b81526004016104d6906124a2565b6001600160a01b038316600090815260208190526040902054818110156113655760405162461bcd60e51b81526004016104d69061250a565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061139c908490611e69565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516113e69190611c1f565b60405180910390a35b50505050565b600080600660009054906101000a90046001600160a01b03166001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa15801561144b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146f9190611fd5565b600c546001600160a01b0382161580159450919250906115ca5780156115c55760006114ac61149e8688611f93565b6001600160701b03166115de565b905060006114b9836115de565b9050808211156115c25760006114cf8284611ef1565b6002546114dc9190611f08565b6114e790600a611f08565b90506000600660009054906101000a90046001600160a01b03166001600160a01b031663786df8ec6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561153e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115629190611ed0565b9050600061157184600a611f08565b600a61157f846103e8611f3d565b6115899190611ef1565b6115939087611f08565b61159d9190611e69565b905060006115ab8285611f3d565b905080156115bd576115bd888261164e565b505050505b50505b6115d6565b80156115d6576000600c555b505092915050565b6000600382111561163f57508060006115f8600283611f3d565b611603906001611e69565b90505b818110156116395790508060028161161e8186611f3d565b6116289190611e69565b6116329190611f3d565b9050611606565b50919050565b8115611649575060015b919050565b6001600160a01b0382166116745760405162461bcd60e51b81526004016104d69061254c565b80600260008282546116869190611e69565b90915550506001600160a01b038216600090815260208190526040812080548392906116b3908490611e69565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906116f6908590611c1f565b60405180910390a35050565b600081831061171157816104f2565b5090919050565b6001600160701b038083118015906117395750806001600160701b03168211155b6117555760405162461bcd60e51b81526004016104d69061258e565b600980546001600160701b03848116600160701b9081027fffffffff000000000000000000000000000000000000000000000000000000009093168288161792909217928390556040517f32dc813d3f262a05478ad1165d5701040e411d9a6e1684c8c2da1c8e6f3b8022936117d29381841693910416906125bf565b60405180910390a1505050565b6118628363a9059cbb60e01b84846040516024016117fe9291906125da565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611938565b505050565b6001600160a01b03821661188d5760405162461bcd60e51b81526004016104d690612640565b6001600160a01b038216600090815260208190526040902054818110156118c65760405162461bcd60e51b81526004016104d6906126a8565b6001600160a01b03831660009081526020819052604081208383039055600280548492906118f5908490611ef1565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906112d3908690611c1f565b600061198d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119c79092919063ffffffff16565b80519091501561186257808060200190518101906119ab91906126cb565b6118625760405162461bcd60e51b81526004016104d690612744565b60606119d684846000856119de565b949350505050565b606082471015611a005760405162461bcd60e51b81526004016104d6906127ac565b843b611a1e5760405162461bcd60e51b81526004016104d6906127ee565b600080866001600160a01b03168587604051611a3a9190612820565b60006040518083038185875af1925050503d8060008114611a77576040519150601f19603f3d011682016040523d82523d6000602084013e611a7c565b606091505b5091509150611a8c828286611a97565b979650505050505050565b60608315611aa65750816104f2565b825115611ab65782518084602001fd5b8160405162461bcd60e51b81526004016104d69190611b2e565b60005b83811015611aeb578181015183820152602001611ad3565b838111156113ef5750506000910152565b6000611b06825190565b808452602084019350611b1d818560208601611ad0565b601f01601f19169290920192915050565b602080825281016104f28184611afc565b6001600160701b0381165b82525050565b60408101611b5e8285611b3f565b6104f26020830184611b3f565b60006001600160a01b03821661047f565b611b8581611b6b565b8114611b9057600080fd5b50565b803561047f81611b7c565b80611b85565b803561047f81611b9e565b60008060408385031215611bc557611bc5600080fd5b6000611bd18585611b93565b9250506020611be285828601611ba4565b9150509250929050565b801515611b4a565b6020810161047f8284611bec565b611b4a81611b6b565b6020810161047f8284611c02565b80611b4a565b6020810161047f8284611c19565b600080600060608486031215611c4557611c45600080fd5b6000611c518686611b93565b9350506020611c6286828701611b93565b9250506040611c7386828701611ba4565b9150509250925092565b60ff8116611b4a565b6020810161047f8284611c7d565b600060208284031215611ca957611ca9600080fd5b60006119d68484611b93565b600080600060608486031215611ccd57611ccd600080fd5b6000611cd98686611ba4565b9350506020611cea86828701611ba4565b9250506040611c7386828701611b93565b60408101611d098285611c19565b6104f26020830184611c19565b60008060408385031215611d2c57611d2c600080fd5b6000611d388585611b93565b9250506020611be285828601611b93565b60008060008060808587031215611d6257611d62600080fd5b6000611d6e8787611b93565b9450506020611d7f87828801611b93565b9350506040611d9087828801611ba4565b9250506060611da187828801611ba4565b91505092959194509250565b634e487b7160e01b600052602260045260246000fd5b600281046001821680611dd757607f821691505b60208210810361163957611639611dad565b60288152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206181527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015290505b60400190565b6020808252810161047f81611de9565b634e487b7160e01b600052601160045260246000fd5b60008219821115611e7c57611e7c611e53565b500190565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815290505b60200190565b6020808252810161047f81611e81565b805161047f81611b9e565b600060208284031215611ee557611ee5600080fd5b60006119d68484611ec5565b600082821015611f0357611f03611e53565b500390565b6000816000190483118215151615611f2257611f22611e53565b500290565b634e487b7160e01b600052601260045260246000fd5b600082611f4c57611f4c611f27565b500490565b601d8152602081017f696e73756666696369656e74206c6971756964697479206d696e74656400000081529050611eaf565b6020808252810161047f81611f51565b6001600160701b03811690506001600160701b03821691506000816001600160701b030483118215151615611f2257611f22611e53565b805161047f81611b7c565b600060208284031215611fea57611fea600080fd5b60006119d68484611fca565b601b8152602081017f43616e206e6f74207377617020616674657220646561646c696e65000000000081529050611eaf565b6020808252810161047f81611ff6565b601c8152602081017f4f757470757420616d6f756e74206e65656420746f206265203e20300000000081529050611eaf565b6020808252810161047f81612038565b60148152602081017f4e6f7420656e6f756768206c697175696469747900000000000000000000000081529050611eaf565b6020808252810161047f8161207a565b600a8152602081017f494e56414c49445f544f0000000000000000000000000000000000000000000081529050611eaf565b6020808252810161047f816120bc565b60198152602081017f494e53554646494349454e545f494e5055545f414d4f554e540000000000000081529050611eaf565b6020808252810161047f816120fe565b60208082527f5468652072656d61696e696e6720782a79206973206c657373207468616e204b9101908152611eaf565b6020808252810161047f81612140565b6080810161218e8287611c19565b61219b6020830186611c19565b6121a86040830185611c19565b6121b56060830184611c19565b95945050505050565b601d8152602081017f496e73756666696369656e74206c6971756964697479206275726e656400000081529050611eaf565b6020808252810161047f816121be565b60258152602081017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781527f207a65726f00000000000000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f81612200565b602f8152602081017f63616e206f6e6c7920626520696e697469616c697a656420627920746865206681527f6163746f727920636f6e7472616374000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f81612268565b60108152602081017f66656552617465206f76657220312e300000000000000000000000000000000081529050611eaf565b6020808252810161047f816122d0565b60248152602081017f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481527f726573730000000000000000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f81612312565b60228152602081017f45524332303a20617070726f766520746f20746865207a65726f20616464726581527f737300000000000000000000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f8161237a565b60258152602081017f45524332303a207472616e736665722066726f6d20746865207a65726f20616481527f647265737300000000000000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f816123e2565b60238152602081017f45524332303a207472616e7366657220746f20746865207a65726f206164647281527f657373000000000000000000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f8161244a565b60268152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206281527f616c616e6365000000000000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f816124b2565b601f8152602081017f45524332303a206d696e7420746f20746865207a65726f20616464726573730081529050611eaf565b6020808252810161047f8161251a565b60108152602081017f55696e74313132204f564552464c4f570000000000000000000000000000000081529050611eaf565b6020808252810161047f8161255c565b600061047f6125b36001600160701b03841681565b90565b611b4a8161259e565b604081016125cd82856125b6565b6104f260208301846125b6565b60408101611d098285611c02565b60218152602081017f45524332303a206275726e2066726f6d20746865207a65726f2061646472657381527f730000000000000000000000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f816125e8565b60228152602081017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e81527f636500000000000000000000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f81612650565b801515611b85565b805161047f816126b8565b6000602082840312156126e0576126e0600080fd5b60006119d684846126c0565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f7420737563636565640000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f816126ec565b60268152602081017f416464726573733a20696e73756666696369656e742062616c616e636520666f81527f722063616c6c000000000000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f81612754565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529050611eaf565b6020808252810161047f816127bc565b6000612808825190565b612816818560208601611ad0565b9290920192915050565b61047f81836127fe56fea2646970667358221220363bb20e00cf3221d319c6b6518b826e7d4950c79c26ce37f526b272d5324ba964736f6c634300080d003360806040523480156200001157600080fd5b5060405162001303380380620013038339810160408190526200003491620002c4565b8351849084906200004d90600390602085019062000093565b5080516200006390600490602084019062000093565b5050600580546001600160a01b0319166001600160a01b03949094169390931790925560065550620003b1915050565b828054620000a19062000381565b90600052602060002090601f016020900481019282620000c5576000855562000110565b82601f10620000e057805160ff191683800117855562000110565b8280016001018555821562000110579182015b8281111562000110578251825591602001919060010190620000f3565b506200011e92915062000122565b5090565b5b808211156200011e576000815560010162000123565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681016001600160401b038111828210171562000177576200017762000139565b6040525050565b60006200018a60405190565b90506200019882826200014f565b919050565b60006001600160401b03821115620001b957620001b962000139565b601f19601f83011660200192915050565b60005b83811015620001e7578181015183820152602001620001cd565b83811115620001f7576000848401525b50505050565b6000620002146200020e846200019d565b6200017e565b905082815260208101848484011115620002315762000231600080fd5b6200023e848285620001ca565b509392505050565b600082601f8301126200025c576200025c600080fd5b81516200026e848260208601620001fd565b949350505050565b60006001600160a01b0382165b92915050565b620002948162000276565b8114620002a057600080fd5b50565b8051620002838162000289565b8062000294565b80516200028381620002b0565b60008060008060808587031215620002df57620002df600080fd5b84516001600160401b03811115620002fa57620002fa600080fd5b620003088782880162000246565b602087015190955090506001600160401b038111156200032b576200032b600080fd5b620003398782880162000246565b93505060406200034c87828801620002a3565b92505060606200035f87828801620002b7565b91505092959194509250565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200039657607f821691505b602082108103620003ab57620003ab6200036b565b50919050565b610f4280620003c16000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac146101da578063a457c2d7146101ed578063a9059cbb14610200578063dd62ed3e1461021357600080fd5b806340c10f191461019457806370a08231146101a957806395d89b41146101d257600080fd5b806318160ddd116100c857806318160ddd1461014d57806323b872dd1461015e578063313ce56714610171578063395093511461018157600080fd5b806306fdde03146100ef578063075461721461010d578063095ea7b31461012d575b600080fd5b6100f761024c565b604051610104919061089e565b60405180910390f35b600554610120906001600160a01b031681565b60405161010491906108cf565b61014061013b366004610910565b6102de565b6040516101049190610955565b6002545b6040516101049190610969565b61014061016c366004610977565b6102f5565b60065460405161010491906109d0565b61014061018f366004610910565b610369565b6101a76101a2366004610910565b6103a5565b005b6101516101b73660046109de565b6001600160a01b031660009081526020819052604090205490565b6100f7610416565b6101a76101e8366004610910565b610425565b6101406101fb366004610910565b61048a565b61014061020e366004610910565b6104e5565b610151610221366004610a07565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461025b90610a50565b80601f016020809104026020016040519081016040528092919081815260200182805461028790610a50565b80156102d45780601f106102a9576101008083540402835291602001916102d4565b820191906000526020600020905b8154815290600101906020018083116102b757829003601f168201915b5050505050905090565b60006102eb3384846104f2565b5060015b92915050565b60006103028484846105a6565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561034f5760405162461bcd60e51b815260040161034690610ad6565b60405180910390fd5b61035c85338584036104f2565b60019150505b9392505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102eb9185906103a0908690610afc565b6104f2565b6005546001600160a01b031633146103cf5760405162461bcd60e51b815260040161034690610b48565b6103d982826106bb565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885828260405161040a929190610b58565b60405180910390a15050565b60606004805461025b90610a50565b6005546001600160a01b0316331461044f5760405162461bcd60e51b815260040161034690610b48565b610459828261076f565b7fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5828260405161040a929190610b58565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104ce5760405162461bcd60e51b815260040161034690610bcb565b6104db33858584036104f2565b5060019392505050565b60006102eb3384846105a6565b6001600160a01b0383166105185760405162461bcd60e51b815260040161034690610c33565b6001600160a01b03821661053e5760405162461bcd60e51b815260040161034690610c9b565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610599908590610969565b60405180910390a3505050565b6001600160a01b0383166105cc5760405162461bcd60e51b815260040161034690610d03565b6001600160a01b0382166105f25760405162461bcd60e51b815260040161034690610d6b565b6001600160a01b0383166000908152602081905260409020548181101561062b5760405162461bcd60e51b815260040161034690610dd3565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610662908490610afc565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106ac9190610969565b60405180910390a35b50505050565b6001600160a01b0382166106e15760405162461bcd60e51b815260040161034690610e15565b80600260008282546106f39190610afc565b90915550506001600160a01b03821660009081526020819052604081208054839290610720908490610afc565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610763908590610969565b60405180910390a35050565b6001600160a01b0382166107955760405162461bcd60e51b815260040161034690610e7d565b6001600160a01b038216600090815260208190526040902054818110156107ce5760405162461bcd60e51b815260040161034690610ee5565b6001600160a01b03831660009081526020819052604081208383039055600280548492906107fd908490610ef5565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610599908690610969565b60005b8381101561085b578181015183820152602001610843565b838111156106b55750506000910152565b6000610876825190565b80845260208401935061088d818560208601610840565b601f01601f19169290920192915050565b60208082528101610362818461086c565b60006001600160a01b0382166102ef565b6108c9816108af565b82525050565b602081016102ef82846108c0565b6108e6816108af565b81146108f157600080fd5b50565b80356102ef816108dd565b806108e6565b80356102ef816108ff565b6000806040838503121561092657610926600080fd5b600061093285856108f4565b925050602061094385828601610905565b9150509250929050565b8015156108c9565b602081016102ef828461094d565b806108c9565b602081016102ef8284610963565b60008060006060848603121561098f5761098f600080fd5b600061099b86866108f4565b93505060206109ac868287016108f4565b92505060406109bd86828701610905565b9150509250925092565b60ff81166108c9565b602081016102ef82846109c7565b6000602082840312156109f3576109f3600080fd5b60006109ff84846108f4565b949350505050565b60008060408385031215610a1d57610a1d600080fd5b6000610a2985856108f4565b9250506020610943858286016108f4565b634e487b7160e01b600052602260045260246000fd5b600281046001821680610a6457607f821691505b602082108103610a7657610a76610a3a565b50919050565b60288152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206181527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015290505b60400190565b602080825281016102ef81610a7c565b634e487b7160e01b600052601160045260246000fd5b60008219821115610b0f57610b0f610ae6565b500190565b600b8152602081017f4f6e6c79206d696e746572000000000000000000000000000000000000000000815290505b60200190565b602080825281016102ef81610b14565b60408101610b6682856108c0565b6103626020830184610963565b60258152602081017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781527f207a65726f00000000000000000000000000000000000000000000000000000060208201529050610ad0565b602080825281016102ef81610b73565b60248152602081017f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481527f726573730000000000000000000000000000000000000000000000000000000060208201529050610ad0565b602080825281016102ef81610bdb565b60228152602081017f45524332303a20617070726f766520746f20746865207a65726f20616464726581527f737300000000000000000000000000000000000000000000000000000000000060208201529050610ad0565b602080825281016102ef81610c43565b60258152602081017f45524332303a207472616e736665722066726f6d20746865207a65726f20616481527f647265737300000000000000000000000000000000000000000000000000000060208201529050610ad0565b602080825281016102ef81610cab565b60238152602081017f45524332303a207472616e7366657220746f20746865207a65726f206164647281527f657373000000000000000000000000000000000000000000000000000000000060208201529050610ad0565b602080825281016102ef81610d13565b60268152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206281527f616c616e6365000000000000000000000000000000000000000000000000000060208201529050610ad0565b602080825281016102ef81610d7b565b601f8152602081017f45524332303a206d696e7420746f20746865207a65726f20616464726573730081529050610b42565b602080825281016102ef81610de3565b60218152602081017f45524332303a206275726e2066726f6d20746865207a65726f2061646472657381527f730000000000000000000000000000000000000000000000000000000000000060208201529050610ad0565b602080825281016102ef81610e25565b60228152602081017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e81527f636500000000000000000000000000000000000000000000000000000000000060208201529050610ad0565b602080825281016102ef81610e8d565b600082821015610f0757610f07610ae6565b50039056fea26469706673582212208555a3deee468bb0a29849b4a2309b6b2152b94e9ac2b659df0538643b9acca264736f6c634300080d0033a26469706673582212203d8eff1a1157395b787d0879113eda29e8f933bfa695ef102b8863e51bf174f764736f6c634300080d0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200016c5760003560e01c80638129fc1c11620000dd578063be1bd331116200008b578063e30145e0116200006e578063e30145e014620002d0578063f2f2fff514620002e4578063f2fde38b14620002ee57600080fd5b8063be1bd33114620002a5578063c79c4c6214620002b957600080fd5b80638da5cb5b11620000c05780638da5cb5b1462000265578063b30ebecd1462000277578063b4f69a2f146200028e57600080fd5b80638129fc1c146200024457806387f0061a146200024e57600080fd5b806357b84f8c116200013b578063634282af116200011e578063634282af1462000219578063715018a61462000230578063786df8ec146200023a57600080fd5b806357b84f8c14620001f657806361c8f99d146200020057600080fd5b80631e3dd18b14620001715780632a5c792a14620001a05780633a5f69f814620001b9578063490d735014620001d0575b600080fd5b620001886200018236600462000bc7565b62000305565b60405162000197919062000c17565b60405180910390f35b620001aa62000330565b60405162000197919062000c8c565b62000188620001ca36600462000cbe565b62000394565b620001e7620001e136600462000e3c565b62000538565b60405162000197919062000ea2565b620001e762000559565b620002176200021136600462000eb2565b620005a7565b005b620001886200022a36600462000bc7565b6200063f565b6200021762000650565b620001e7606b5481565b620002176200068b565b620001886200025f36600462000e3c565b62000713565b6033546001600160a01b031662000188565b620002176200028836600462000eb2565b620007fa565b620001886200029f36600462000ed7565b62000892565b606a5462000188906001600160a01b031681565b62000217620002ca36600462000bc7565b62000966565b60695462000188906001600160a01b031681565b620001e760685481565b62000217620002ff36600462000eb2565b620009d5565b606681815481106200031657600080fd5b6000918252602090912001546001600160a01b0316905081565b606060678054806020026020016040519081016040528092919081815260200182805480156200038a57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116200036b575b5050505050905090565b6069546000906001600160a01b03163314620003cd5760405162461bcd60e51b8152600401620003c49062000f43565b60405180910390fd5b600060405180602001620003e19062000b90565b6020820181038252601f19601f820116604052509050600086866040516020016200040e92919062000f84565b604051602081830303815290604052805190602001209050600062000434838362000a36565b6040517feb990c590000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063eb990c599062000484908b908b908b908b9060040162000fa8565b600060405180830381600087803b1580156200049f57600080fd5b505af1158015620004b4573d6000803e3d6000fd5b5050506001600160a01b03808a1660009081526065602090815260408083208c85168452909152812080549285166001600160a01b031993841681179091556066805460018101825592527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e9435490910180549092161790555092505050949350505050565b60008062000547848462000a50565b80516020909101209150505b92915050565b6040516200056a6020820162000b90565b601f1982820381018352601f9091011660408190526200058e919060200162001046565b6040516020818303038152906040528051906020012081565b6033546001600160a01b03163314620005d45760405162461bcd60e51b8152600401620003c49062001083565b6069546040517f3589df28c7a4e563855a6dad51377b5e4a78c2c46954792d4ebcc2b6f477af2d9162000615916001600160a01b0390911690849062001095565b60405180910390a1606980546001600160a01b0319166001600160a01b0392909216919091179055565b606781815481106200031657600080fd5b6033546001600160a01b031633146200067d5760405162461bcd60e51b8152600401620003c49062001083565b62000689600062000adb565b565b600054610100900460ff16620006a85760005460ff1615620006ac565b303b155b620006cb5760405162461bcd60e51b8152600401620003c4906200110e565b600054610100900460ff16158015620006ee576000805461ffff19166101011790555b620006f862000b2d565b6028606b55801562000710576000805461ff00191690555b50565b6069546000906001600160a01b03163314620007435760405162461bcd60e51b8152600401620003c49062000f43565b60008360405160200162000758919062001046565b60405160208183030381529060405280519060200120905060006200077e858562000a50565b905060006200078e828462000a36565b6067805460018101825560009182527f9787eeb91fe3101235e4a76063c7023ecb40f923f97916639c598592fa30d6ae0180546001600160a01b0319166001600160a01b0384161790556068805492935090620007eb8362001136565b90915550909695505050505050565b6033546001600160a01b03163314620008275760405162461bcd60e51b8152600401620003c49062001083565b606a546040517fbfabdf035dcaa5c8487ab344ae430927cd8bacc1ec3d6d600fb599344a276c079162000868916001600160a01b0390911690849062001095565b60405180910390a1606a80546001600160a01b0319166001600160a01b0392909216919091179055565b6069546040517f5cb3b14f000000000000000000000000000000000000000000000000000000008152600091829182916001600160a01b031690635cb3b14f90620008e290879060040162000c17565b602060405180830381865afa15801562000900573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000926919062001168565b6200093357838562000936565b84845b6001600160a01b039182166000908152606560209081526040808320938516835292905220541695945050505050565b6033546001600160a01b03163314620009935760405162461bcd60e51b8152600401620003c49062001083565b7f9bc521ec6408e4c9862a903b71cc867ff65b137b9ddec02734bd4a840817848f606b5482604051620009c89291906200118d565b60405180910390a1606b55565b6033546001600160a01b0316331462000a025760405162461bcd60e51b8152600401620003c49062001083565b6001600160a01b03811662000a2b5760405162461bcd60e51b8152600401620003c49062001205565b620007108162000adb565b6000818351602085016000f59050803b6200055357600080fd5b606060006040518060200162000a669062000b9e565b601f1982820381018352601f909101166040819052606954919250829162000aa391879182916001600160a01b039091169088906020016200124c565b60408051601f198184030181529082905262000ac3929160200162001286565b60405160208183030381529060405291505092915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1662000b575760405162461bcd60e51b8152600401620003c490620012f9565b62000689600054610100900460ff1662000b855760405162461bcd60e51b8152600401620003c490620012f9565b620006893362000adb565b612a13806200130c83390190565b6113038062003d1f83390190565b805b81146200071057600080fd5b8035620005538162000bac565b60006020828403121562000bde5762000bde600080fd5b600062000bec848462000bba565b949350505050565b60006001600160a01b03821662000553565b62000c118162000bf4565b82525050565b6020810162000553828462000c06565b62000c33828262000c06565b5060200190565b60200190565b600062000c4b825190565b808452602093840193830160005b8281101562000c8257815162000c70878262000c27565b96505060208201915060010162000c59565b5093949350505050565b6020808252810162000c9f818462000c40565b9392505050565b62000bae8162000bf4565b8035620005538162000ca6565b6000806000806080858703121562000cd95762000cd9600080fd5b600062000ce7878762000cb1565b945050602062000cfa8782880162000cb1565b935050604062000d0d8782880162000bba565b925050606062000d208782880162000bba565b91505092959194509250565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171562000d6b5762000d6b62000d2c565b6040525050565b600062000d7e60405190565b905062000d8c828262000d42565b919050565b600067ffffffffffffffff82111562000dae5762000dae62000d2c565b601f19601f83011660200192915050565b82818337506000910152565b600062000de262000ddc8462000d91565b62000d72565b90508281526020810184848401111562000dff5762000dff600080fd5b62000e0c84828562000dbf565b509392505050565b600082601f83011262000e2a5762000e2a600080fd5b813562000bec84826020860162000dcb565b6000806040838503121562000e545762000e54600080fd5b823567ffffffffffffffff81111562000e705762000e70600080fd5b62000e7e8582860162000e14565b925050602062000e918582860162000bba565b9150509250929050565b8062000c11565b6020810162000553828462000e9b565b60006020828403121562000ec95762000ec9600080fd5b600062000bec848462000cb1565b6000806040838503121562000eef5762000eef600080fd5b600062000efd858562000cb1565b925050602062000e918582860162000cb1565b60198152602081017f4f6e6c792063616c6c656420627920706f6c696379436f7265000000000000008152905062000c3a565b60208082528101620005538162000f10565b6000620005538260601b90565b6000620005538262000f55565b62000c1162000f7e8262000bf4565b62000f62565b62000f90818462000f6f565b60140162000f9f818362000f6f565b60140192915050565b6080810162000fb8828762000c06565b62000fc7602083018662000c06565b62000fd6604083018562000e9b565b62000fe5606083018462000e9b565b95945050505050565b60005b838110156200100b57818101518382015260200162000ff1565b838111156200101b576000848401525b50505050565b60006200102c825190565b6200103c81856020860162000fee565b9290920192915050565b62000553818362001021565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815262000c3a565b60208082528101620005538162001052565b60408101620010a5828562000c06565b62000c9f602083018462000c06565b602e8152602081017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181527f647920696e697469616c697a6564000000000000000000000000000000000000602082015290505b60400190565b602080825281016200055381620010b4565b634e487b7160e01b600052601160045260246000fd5b6000600182016200114b576200114b62001120565b5060010190565b80151562000bae565b8051620005538162001152565b6000602082840312156200117f576200117f600080fd5b600062000bec84846200115b565b604081016200119d828562000e9b565b62000c9f602083018462000e9b565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f64647265737300000000000000000000000000000000000000000000000000006020820152905062001108565b602080825281016200055381620011ac565b600062001222825190565b8084526020840193506200123b81856020860162000fee565b601f01601f19169290920192915050565b608080825281016200125f818762001217565b9050818103602083015262001275818662001217565b905062000fd6604083018562000c06565b62001292818462001021565b905062000c9f818362001021565b602b8152602081017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981527f6e697469616c697a696e670000000000000000000000000000000000000000006020820152905062001108565b602080825281016200055381620012a056fe60806040526009805460ff60e01b1916600160e01b1790553480156200002457600080fd5b506040518060400160405280600f81526020016e04e61756768747920506f6f6c204c5608c1b8152506040518060400160405280600381526020016204e4c560ec1b815250816003908051906020019062000081929190620000b7565b50805162000097906004906020840190620000b7565b5050600160055550600680546001600160a01b03191633179055620001a3565b828054620000c59062000173565b90600052602060002090601f016020900481019282620000e9576000855562000134565b82601f106200010457805160ff191683800117855562000134565b8280016001018555821562000134579182015b828111156200013457825182559160200191906001019062000117565b506200014292915062000146565b5090565b5b8082111562000142576000815560010162000147565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200018857607f821691505b6020821081036200019d576200019d6200015d565b50919050565b61286080620001b36000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c806370a08231116100ee578063a9059cbb11610097578063d21220a711610071578063d21220a714610375578063dd62ed3e14610388578063eb990c59146103c1578063fff6cae9146103d457600080fd5b8063a9059cbb14610346578063ba9a7a5614610359578063c45a01551461036257600080fd5b806395d89b41116100c857806395d89b4114610322578063978bbdb91461032a578063a457c2d71461033357600080fd5b806370a08231146102cf5780637464fc3d146102f857806389afcb441461030157600080fd5b806329dcb0cf116101505780636a5e26501161012a5780636a5e26501461027a5780636a627842146102a75780636d9a640a146102ba57600080fd5b806329dcb0cf1461024f578063313ce56714610258578063395093511461026757600080fd5b80630dfe1681116101815780630dfe16811461020b57806318160ddd1461022b57806323b872dd1461023c57600080fd5b806306fdde03146101a85780630902f1ac146101c6578063095ea7b3146101eb575b600080fd5b6101b06103dc565b6040516101bd9190611b2e565b60405180910390f35b6009546001600160701b0380821691600160701b9004166040516101bd929190611b50565b6101fe6101f9366004611baf565b61046e565b6040516101bd9190611bf4565b60075461021e906001600160a01b031681565b6040516101bd9190611c0b565b6002545b6040516101bd9190611c1f565b6101fe61024a366004611c2d565b610485565b61022f600a5481565b60126040516101bd9190611c86565b6101fe610275366004611baf565b6104f9565b6009546101fe907c0100000000000000000000000000000000000000000000000000000000900460ff1681565b61022f6102b5366004611c94565b610535565b6102cd6102c8366004611cb5565b610805565b005b61022f6102dd366004611c94565b6001600160a01b031660009081526020819052604090205490565b61022f600c5481565b61031461030f366004611c94565b610c8b565b6040516101bd929190611cfb565b6101b0610fff565b61022f600b5481565b6101fe610341366004611baf565b61100e565b6101fe610354366004611baf565b611069565b61022f6103e881565b60065461021e906001600160a01b031681565b60085461021e906001600160a01b031681565b61022f610396366004611d16565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102cd6103cf366004611d49565b611076565b6102cd611115565b6060600380546103eb90611dc3565b80601f016020809104026020016040519081016040528092919081815260200182805461041790611dc3565b80156104645780601f1061043957610100808354040283529160200191610464565b820191906000526020600020905b81548152906001019060200180831161044757829003601f168201915b5050505050905090565b600061047b33848461122c565b5060015b92915050565b60006104928484846112e0565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156104df5760405162461bcd60e51b81526004016104d690611e43565b60405180910390fd5b6104ec853385840361122c565b60019150505b9392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161047b918590610530908690611e69565b61122c565b60006002600554036105595760405162461bcd60e51b81526004016104d690611eb5565b600260055560008061057f6009546001600160701b0380821692600160701b9092041690565b6007546040516370a0823160e01b81529294509092506000916001600160a01b03909116906370a08231906105b8903090600401611c0b565b602060405180830381865afa1580156105d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f99190611ed0565b6008546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061062f903090600401611c0b565b602060405180830381865afa15801561064c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106709190611ed0565b905060006106876001600160701b03861684611ef1565b9050600061069e6001600160701b03861684611ef1565b905060006106ac87876113f5565b905060006106b960025490565b905080600003610702576103e86106d86106d38587611f08565b6115de565b6106e29190611ef1565b6006549099506106fd906001600160a01b03166103e861164e565b610749565b6107466001600160701b0389166107198387611f08565b6107239190611f3d565b6001600160701b0389166107378487611f08565b6107419190611f3d565b611702565b98505b600089116107695760405162461bcd60e51b81526004016104d690611f83565b6107738a8a61164e565b61077d8686611718565b81156107af576009546107a2906001600160701b03600160701b820481169116611f93565b6001600160701b0316600c555b336001600160a01b03167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f85856040516107ea929190611cfb565b60405180910390a25050600160055550949695505050505050565b600660009054906101000a90046001600160a01b03166001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa158015610858573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087c9190611fd5565b6001600160a01b0316336001600160a01b0316146108b657600a544211156108b65760405162461bcd60e51b81526004016104d690612028565b6002600554036108d85760405162461bcd60e51b81526004016104d690611eb5565b6002600555821515806108eb5750600082115b6109075760405162461bcd60e51b81526004016104d69061206a565b6000806109286009546001600160701b0380821692600160701b9092041690565b91509150816001600160701b03168510801561094c5750806001600160701b031684105b6109685760405162461bcd60e51b81526004016104d6906120ac565b60075460085460009182916001600160a01b039182169190811690871682148015906109a65750806001600160a01b0316876001600160a01b031614155b6109c25760405162461bcd60e51b81526004016104d6906120ee565b88156109dc576109dc6001600160a01b038316888b6117df565b87156109f6576109f66001600160a01b038216888a6117df565b6040516370a0823160e01b81526001600160a01b038316906370a0823190610a22903090600401611c0b565b602060405180830381865afa158015610a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a639190611ed0565b6040516370a0823160e01b81529094506001600160a01b038216906370a0823190610a92903090600401611c0b565b602060405180830381865afa158015610aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad39190611ed0565b92505050600087856001600160701b0316610aee9190611ef1565b8311610afb576000610b18565b610b0e886001600160701b038716611ef1565b610b189084611ef1565b90506000610b2f886001600160701b038716611ef1565b8311610b3c576000610b59565b610b4f886001600160701b038716611ef1565b610b599084611ef1565b90506000821180610b6a5750600081115b610b865760405162461bcd60e51b81526004016104d690612130565b6000600b5483610b969190611f08565b610ba2866103e8611f08565b610bac9190611ef1565b90506000600b5483610bbe9190611f08565b610bca866103e8611f08565b610bd49190611ef1565b9050610be08789611f93565b610bed90620f4240611f93565b6001600160701b0316610c008284611f08565b1015610c1e5760405162461bcd60e51b81526004016104d690612170565b5050610c2a8484611718565b866001600160a01b0316336001600160a01b03167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82284848d8d604051610c739493929190612180565b60405180910390a35050600160055550505050505050565b600080600260055403610cb05760405162461bcd60e51b81526004016104d690611eb5565b6002600555600080610cd66009546001600160701b0380821692600160701b9092041690565b6007546008546040516370a0823160e01b81529395509193506001600160a01b039081169291169060009083906370a0823190610d17903090600401611c0b565b602060405180830381865afa158015610d34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d589190611ed0565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610d889190611c0b565b602060405180830381865afa158015610da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc99190611ed0565b30600090815260208190526040812054919250610de688886113f5565b90506000610df360025490565b905080610e008685611f08565b610e0a9190611f3d565b9a5080610e178585611f08565b610e219190611f3d565b995060008b118015610e33575060008a115b610e4f5760405162461bcd60e51b81526004016104d6906121f0565b610e593084611867565b610e6d6001600160a01b0388168d8d6117df565b610e816001600160a01b0387168d8c6117df565b6040516370a0823160e01b81526001600160a01b038816906370a0823190610ead903090600401611c0b565b602060405180830381865afa158015610eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eee9190611ed0565b6040516370a0823160e01b81529095506001600160a01b038716906370a0823190610f1d903090600401611c0b565b602060405180830381865afa158015610f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5e9190611ed0565b9350610f6a8585611718565b8115610f9c57600954610f8f906001600160701b03600160701b820481169116611f93565b6001600160701b0316600c555b8b6001600160a01b0316336001600160a01b03167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968d8d604051610fe1929190611cfb565b60405180910390a35050505050505050506001600581905550915091565b6060600480546103eb90611dc3565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156110525760405162461bcd60e51b81526004016104d690612258565b61105f338585840361122c565b5060019392505050565b600061047b3384846112e0565b6006546001600160a01b031633146110a05760405162461bcd60e51b81526004016104d6906122c0565b6103e88111156110c25760405162461bcd60e51b81526004016104d690612302565b600780546001600160a01b039586167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556008805494909516931692909217909255600a91909155600b55565b6002600554036111375760405162461bcd60e51b81526004016104d690611eb5565b60026005556007546040516370a0823160e01b8152611225916001600160a01b0316906370a082319061116e903090600401611c0b565b602060405180830381865afa15801561118b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111af9190611ed0565b6008546040516370a0823160e01b81526001600160a01b03909116906370a08231906111df903090600401611c0b565b602060405180830381865afa1580156111fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112209190611ed0565b611718565b6001600555565b6001600160a01b0383166112525760405162461bcd60e51b81526004016104d69061236a565b6001600160a01b0382166112785760405162461bcd60e51b81526004016104d6906123d2565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906112d3908590611c1f565b60405180910390a3505050565b6001600160a01b0383166113065760405162461bcd60e51b81526004016104d69061243a565b6001600160a01b03821661132c5760405162461bcd60e51b81526004016104d6906124a2565b6001600160a01b038316600090815260208190526040902054818110156113655760405162461bcd60e51b81526004016104d69061250a565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061139c908490611e69565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516113e69190611c1f565b60405180910390a35b50505050565b600080600660009054906101000a90046001600160a01b03166001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa15801561144b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146f9190611fd5565b600c546001600160a01b0382161580159450919250906115ca5780156115c55760006114ac61149e8688611f93565b6001600160701b03166115de565b905060006114b9836115de565b9050808211156115c25760006114cf8284611ef1565b6002546114dc9190611f08565b6114e790600a611f08565b90506000600660009054906101000a90046001600160a01b03166001600160a01b031663786df8ec6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561153e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115629190611ed0565b9050600061157184600a611f08565b600a61157f846103e8611f3d565b6115899190611ef1565b6115939087611f08565b61159d9190611e69565b905060006115ab8285611f3d565b905080156115bd576115bd888261164e565b505050505b50505b6115d6565b80156115d6576000600c555b505092915050565b6000600382111561163f57508060006115f8600283611f3d565b611603906001611e69565b90505b818110156116395790508060028161161e8186611f3d565b6116289190611e69565b6116329190611f3d565b9050611606565b50919050565b8115611649575060015b919050565b6001600160a01b0382166116745760405162461bcd60e51b81526004016104d69061254c565b80600260008282546116869190611e69565b90915550506001600160a01b038216600090815260208190526040812080548392906116b3908490611e69565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906116f6908590611c1f565b60405180910390a35050565b600081831061171157816104f2565b5090919050565b6001600160701b038083118015906117395750806001600160701b03168211155b6117555760405162461bcd60e51b81526004016104d69061258e565b600980546001600160701b03848116600160701b9081027fffffffff000000000000000000000000000000000000000000000000000000009093168288161792909217928390556040517f32dc813d3f262a05478ad1165d5701040e411d9a6e1684c8c2da1c8e6f3b8022936117d29381841693910416906125bf565b60405180910390a1505050565b6118628363a9059cbb60e01b84846040516024016117fe9291906125da565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611938565b505050565b6001600160a01b03821661188d5760405162461bcd60e51b81526004016104d690612640565b6001600160a01b038216600090815260208190526040902054818110156118c65760405162461bcd60e51b81526004016104d6906126a8565b6001600160a01b03831660009081526020819052604081208383039055600280548492906118f5908490611ef1565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906112d3908690611c1f565b600061198d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119c79092919063ffffffff16565b80519091501561186257808060200190518101906119ab91906126cb565b6118625760405162461bcd60e51b81526004016104d690612744565b60606119d684846000856119de565b949350505050565b606082471015611a005760405162461bcd60e51b81526004016104d6906127ac565b843b611a1e5760405162461bcd60e51b81526004016104d6906127ee565b600080866001600160a01b03168587604051611a3a9190612820565b60006040518083038185875af1925050503d8060008114611a77576040519150601f19603f3d011682016040523d82523d6000602084013e611a7c565b606091505b5091509150611a8c828286611a97565b979650505050505050565b60608315611aa65750816104f2565b825115611ab65782518084602001fd5b8160405162461bcd60e51b81526004016104d69190611b2e565b60005b83811015611aeb578181015183820152602001611ad3565b838111156113ef5750506000910152565b6000611b06825190565b808452602084019350611b1d818560208601611ad0565b601f01601f19169290920192915050565b602080825281016104f28184611afc565b6001600160701b0381165b82525050565b60408101611b5e8285611b3f565b6104f26020830184611b3f565b60006001600160a01b03821661047f565b611b8581611b6b565b8114611b9057600080fd5b50565b803561047f81611b7c565b80611b85565b803561047f81611b9e565b60008060408385031215611bc557611bc5600080fd5b6000611bd18585611b93565b9250506020611be285828601611ba4565b9150509250929050565b801515611b4a565b6020810161047f8284611bec565b611b4a81611b6b565b6020810161047f8284611c02565b80611b4a565b6020810161047f8284611c19565b600080600060608486031215611c4557611c45600080fd5b6000611c518686611b93565b9350506020611c6286828701611b93565b9250506040611c7386828701611ba4565b9150509250925092565b60ff8116611b4a565b6020810161047f8284611c7d565b600060208284031215611ca957611ca9600080fd5b60006119d68484611b93565b600080600060608486031215611ccd57611ccd600080fd5b6000611cd98686611ba4565b9350506020611cea86828701611ba4565b9250506040611c7386828701611b93565b60408101611d098285611c19565b6104f26020830184611c19565b60008060408385031215611d2c57611d2c600080fd5b6000611d388585611b93565b9250506020611be285828601611b93565b60008060008060808587031215611d6257611d62600080fd5b6000611d6e8787611b93565b9450506020611d7f87828801611b93565b9350506040611d9087828801611ba4565b9250506060611da187828801611ba4565b91505092959194509250565b634e487b7160e01b600052602260045260246000fd5b600281046001821680611dd757607f821691505b60208210810361163957611639611dad565b60288152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206181527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015290505b60400190565b6020808252810161047f81611de9565b634e487b7160e01b600052601160045260246000fd5b60008219821115611e7c57611e7c611e53565b500190565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815290505b60200190565b6020808252810161047f81611e81565b805161047f81611b9e565b600060208284031215611ee557611ee5600080fd5b60006119d68484611ec5565b600082821015611f0357611f03611e53565b500390565b6000816000190483118215151615611f2257611f22611e53565b500290565b634e487b7160e01b600052601260045260246000fd5b600082611f4c57611f4c611f27565b500490565b601d8152602081017f696e73756666696369656e74206c6971756964697479206d696e74656400000081529050611eaf565b6020808252810161047f81611f51565b6001600160701b03811690506001600160701b03821691506000816001600160701b030483118215151615611f2257611f22611e53565b805161047f81611b7c565b600060208284031215611fea57611fea600080fd5b60006119d68484611fca565b601b8152602081017f43616e206e6f74207377617020616674657220646561646c696e65000000000081529050611eaf565b6020808252810161047f81611ff6565b601c8152602081017f4f757470757420616d6f756e74206e65656420746f206265203e20300000000081529050611eaf565b6020808252810161047f81612038565b60148152602081017f4e6f7420656e6f756768206c697175696469747900000000000000000000000081529050611eaf565b6020808252810161047f8161207a565b600a8152602081017f494e56414c49445f544f0000000000000000000000000000000000000000000081529050611eaf565b6020808252810161047f816120bc565b60198152602081017f494e53554646494349454e545f494e5055545f414d4f554e540000000000000081529050611eaf565b6020808252810161047f816120fe565b60208082527f5468652072656d61696e696e6720782a79206973206c657373207468616e204b9101908152611eaf565b6020808252810161047f81612140565b6080810161218e8287611c19565b61219b6020830186611c19565b6121a86040830185611c19565b6121b56060830184611c19565b95945050505050565b601d8152602081017f496e73756666696369656e74206c6971756964697479206275726e656400000081529050611eaf565b6020808252810161047f816121be565b60258152602081017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781527f207a65726f00000000000000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f81612200565b602f8152602081017f63616e206f6e6c7920626520696e697469616c697a656420627920746865206681527f6163746f727920636f6e7472616374000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f81612268565b60108152602081017f66656552617465206f76657220312e300000000000000000000000000000000081529050611eaf565b6020808252810161047f816122d0565b60248152602081017f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481527f726573730000000000000000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f81612312565b60228152602081017f45524332303a20617070726f766520746f20746865207a65726f20616464726581527f737300000000000000000000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f8161237a565b60258152602081017f45524332303a207472616e736665722066726f6d20746865207a65726f20616481527f647265737300000000000000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f816123e2565b60238152602081017f45524332303a207472616e7366657220746f20746865207a65726f206164647281527f657373000000000000000000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f8161244a565b60268152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206281527f616c616e6365000000000000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f816124b2565b601f8152602081017f45524332303a206d696e7420746f20746865207a65726f20616464726573730081529050611eaf565b6020808252810161047f8161251a565b60108152602081017f55696e74313132204f564552464c4f570000000000000000000000000000000081529050611eaf565b6020808252810161047f8161255c565b600061047f6125b36001600160701b03841681565b90565b611b4a8161259e565b604081016125cd82856125b6565b6104f260208301846125b6565b60408101611d098285611c02565b60218152602081017f45524332303a206275726e2066726f6d20746865207a65726f2061646472657381527f730000000000000000000000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f816125e8565b60228152602081017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e81527f636500000000000000000000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f81612650565b801515611b85565b805161047f816126b8565b6000602082840312156126e0576126e0600080fd5b60006119d684846126c0565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f7420737563636565640000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f816126ec565b60268152602081017f416464726573733a20696e73756666696369656e742062616c616e636520666f81527f722063616c6c000000000000000000000000000000000000000000000000000060208201529050611e3d565b6020808252810161047f81612754565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529050611eaf565b6020808252810161047f816127bc565b6000612808825190565b612816818560208601611ad0565b9290920192915050565b61047f81836127fe56fea2646970667358221220363bb20e00cf3221d319c6b6518b826e7d4950c79c26ce37f526b272d5324ba964736f6c634300080d003360806040523480156200001157600080fd5b5060405162001303380380620013038339810160408190526200003491620002c4565b8351849084906200004d90600390602085019062000093565b5080516200006390600490602084019062000093565b5050600580546001600160a01b0319166001600160a01b03949094169390931790925560065550620003b1915050565b828054620000a19062000381565b90600052602060002090601f016020900481019282620000c5576000855562000110565b82601f10620000e057805160ff191683800117855562000110565b8280016001018555821562000110579182015b8281111562000110578251825591602001919060010190620000f3565b506200011e92915062000122565b5090565b5b808211156200011e576000815560010162000123565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681016001600160401b038111828210171562000177576200017762000139565b6040525050565b60006200018a60405190565b90506200019882826200014f565b919050565b60006001600160401b03821115620001b957620001b962000139565b601f19601f83011660200192915050565b60005b83811015620001e7578181015183820152602001620001cd565b83811115620001f7576000848401525b50505050565b6000620002146200020e846200019d565b6200017e565b905082815260208101848484011115620002315762000231600080fd5b6200023e848285620001ca565b509392505050565b600082601f8301126200025c576200025c600080fd5b81516200026e848260208601620001fd565b949350505050565b60006001600160a01b0382165b92915050565b620002948162000276565b8114620002a057600080fd5b50565b8051620002838162000289565b8062000294565b80516200028381620002b0565b60008060008060808587031215620002df57620002df600080fd5b84516001600160401b03811115620002fa57620002fa600080fd5b620003088782880162000246565b602087015190955090506001600160401b038111156200032b576200032b600080fd5b620003398782880162000246565b93505060406200034c87828801620002a3565b92505060606200035f87828801620002b7565b91505092959194509250565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200039657607f821691505b602082108103620003ab57620003ab6200036b565b50919050565b610f4280620003c16000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac146101da578063a457c2d7146101ed578063a9059cbb14610200578063dd62ed3e1461021357600080fd5b806340c10f191461019457806370a08231146101a957806395d89b41146101d257600080fd5b806318160ddd116100c857806318160ddd1461014d57806323b872dd1461015e578063313ce56714610171578063395093511461018157600080fd5b806306fdde03146100ef578063075461721461010d578063095ea7b31461012d575b600080fd5b6100f761024c565b604051610104919061089e565b60405180910390f35b600554610120906001600160a01b031681565b60405161010491906108cf565b61014061013b366004610910565b6102de565b6040516101049190610955565b6002545b6040516101049190610969565b61014061016c366004610977565b6102f5565b60065460405161010491906109d0565b61014061018f366004610910565b610369565b6101a76101a2366004610910565b6103a5565b005b6101516101b73660046109de565b6001600160a01b031660009081526020819052604090205490565b6100f7610416565b6101a76101e8366004610910565b610425565b6101406101fb366004610910565b61048a565b61014061020e366004610910565b6104e5565b610151610221366004610a07565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461025b90610a50565b80601f016020809104026020016040519081016040528092919081815260200182805461028790610a50565b80156102d45780601f106102a9576101008083540402835291602001916102d4565b820191906000526020600020905b8154815290600101906020018083116102b757829003601f168201915b5050505050905090565b60006102eb3384846104f2565b5060015b92915050565b60006103028484846105a6565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561034f5760405162461bcd60e51b815260040161034690610ad6565b60405180910390fd5b61035c85338584036104f2565b60019150505b9392505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102eb9185906103a0908690610afc565b6104f2565b6005546001600160a01b031633146103cf5760405162461bcd60e51b815260040161034690610b48565b6103d982826106bb565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885828260405161040a929190610b58565b60405180910390a15050565b60606004805461025b90610a50565b6005546001600160a01b0316331461044f5760405162461bcd60e51b815260040161034690610b48565b610459828261076f565b7fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5828260405161040a929190610b58565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104ce5760405162461bcd60e51b815260040161034690610bcb565b6104db33858584036104f2565b5060019392505050565b60006102eb3384846105a6565b6001600160a01b0383166105185760405162461bcd60e51b815260040161034690610c33565b6001600160a01b03821661053e5760405162461bcd60e51b815260040161034690610c9b565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610599908590610969565b60405180910390a3505050565b6001600160a01b0383166105cc5760405162461bcd60e51b815260040161034690610d03565b6001600160a01b0382166105f25760405162461bcd60e51b815260040161034690610d6b565b6001600160a01b0383166000908152602081905260409020548181101561062b5760405162461bcd60e51b815260040161034690610dd3565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610662908490610afc565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106ac9190610969565b60405180910390a35b50505050565b6001600160a01b0382166106e15760405162461bcd60e51b815260040161034690610e15565b80600260008282546106f39190610afc565b90915550506001600160a01b03821660009081526020819052604081208054839290610720908490610afc565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610763908590610969565b60405180910390a35050565b6001600160a01b0382166107955760405162461bcd60e51b815260040161034690610e7d565b6001600160a01b038216600090815260208190526040902054818110156107ce5760405162461bcd60e51b815260040161034690610ee5565b6001600160a01b03831660009081526020819052604081208383039055600280548492906107fd908490610ef5565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610599908690610969565b60005b8381101561085b578181015183820152602001610843565b838111156106b55750506000910152565b6000610876825190565b80845260208401935061088d818560208601610840565b601f01601f19169290920192915050565b60208082528101610362818461086c565b60006001600160a01b0382166102ef565b6108c9816108af565b82525050565b602081016102ef82846108c0565b6108e6816108af565b81146108f157600080fd5b50565b80356102ef816108dd565b806108e6565b80356102ef816108ff565b6000806040838503121561092657610926600080fd5b600061093285856108f4565b925050602061094385828601610905565b9150509250929050565b8015156108c9565b602081016102ef828461094d565b806108c9565b602081016102ef8284610963565b60008060006060848603121561098f5761098f600080fd5b600061099b86866108f4565b93505060206109ac868287016108f4565b92505060406109bd86828701610905565b9150509250925092565b60ff81166108c9565b602081016102ef82846109c7565b6000602082840312156109f3576109f3600080fd5b60006109ff84846108f4565b949350505050565b60008060408385031215610a1d57610a1d600080fd5b6000610a2985856108f4565b9250506020610943858286016108f4565b634e487b7160e01b600052602260045260246000fd5b600281046001821680610a6457607f821691505b602082108103610a7657610a76610a3a565b50919050565b60288152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206181527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015290505b60400190565b602080825281016102ef81610a7c565b634e487b7160e01b600052601160045260246000fd5b60008219821115610b0f57610b0f610ae6565b500190565b600b8152602081017f4f6e6c79206d696e746572000000000000000000000000000000000000000000815290505b60200190565b602080825281016102ef81610b14565b60408101610b6682856108c0565b6103626020830184610963565b60258152602081017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781527f207a65726f00000000000000000000000000000000000000000000000000000060208201529050610ad0565b602080825281016102ef81610b73565b60248152602081017f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481527f726573730000000000000000000000000000000000000000000000000000000060208201529050610ad0565b602080825281016102ef81610bdb565b60228152602081017f45524332303a20617070726f766520746f20746865207a65726f20616464726581527f737300000000000000000000000000000000000000000000000000000000000060208201529050610ad0565b602080825281016102ef81610c43565b60258152602081017f45524332303a207472616e736665722066726f6d20746865207a65726f20616481527f647265737300000000000000000000000000000000000000000000000000000060208201529050610ad0565b602080825281016102ef81610cab565b60238152602081017f45524332303a207472616e7366657220746f20746865207a65726f206164647281527f657373000000000000000000000000000000000000000000000000000000000060208201529050610ad0565b602080825281016102ef81610d13565b60268152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206281527f616c616e6365000000000000000000000000000000000000000000000000000060208201529050610ad0565b602080825281016102ef81610d7b565b601f8152602081017f45524332303a206d696e7420746f20746865207a65726f20616464726573730081529050610b42565b602080825281016102ef81610de3565b60218152602081017f45524332303a206275726e2066726f6d20746865207a65726f2061646472657381527f730000000000000000000000000000000000000000000000000000000000000060208201529050610ad0565b602080825281016102ef81610e25565b60228152602081017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e81527f636500000000000000000000000000000000000000000000000000000000000060208201529050610ad0565b602080825281016102ef81610e8d565b600082821015610f0757610f07610ae6565b50039056fea26469706673582212208555a3deee468bb0a29849b4a2309b6b2152b94e9ac2b659df0538643b9acca264736f6c634300080d0033a26469706673582212203d8eff1a1157395b787d0879113eda29e8f933bfa695ef102b8863e51bf174f764736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deployPolicyToken(string,uint256)": {
        "params": {
          "_decimals": "Decimals of the policyToken ",
          "_policyTokenName": "Name of the policyToken"
        },
        "returns": {
          "_0": "tokenAddress PolicyToken address"
        }
      },
      "deployPool(address,address,uint256,uint256)": {
        "params": {
          "_deadline": "Deadline of the pool",
          "_feeRate": "Fee rate given to LP holders ",
          "_policyTokenAddress": "Address of policy token",
          "_stablecoin": "Address of the stable coin"
        },
        "returns": {
          "_0": "poolAddress Address of the pool"
        }
      },
      "getAllTokens()": {
        "returns": {
          "_0": "tokens All tokens"
        }
      },
      "getInitCodeHashForPolicyToken(string,uint256)": {
        "details": "For test/task convinience, pre-compute the address      Ethers.js:      Address = ethers.utils.getCreate2Address(factory address, salt, INIT_CODE_HASH)      salt = keccak256(abi.encodePacked(_policyTokenName))",
        "params": {
          "_decimals": "Token decimals of this policy token",
          "_tokenName": "Name of the policy token to be deployed"
        }
      },
      "getPairAddress(address,address)": {
        "params": {
          "_tokenAddress1": "Address of token1",
          "_tokenAddress2": "Address of toekn2"
        },
        "returns": {
          "_0": "Pool address of the two tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setIncomeMakerAddress(address)": {
        "details": "Only callable by the owner",
        "params": {
          "_incomeMaker": "New income maker address"
        }
      },
      "setIncomeMakerProportion(uint256)": {
        "details": "Only callable by the owner",
        "params": {
          "_proportion": "New proportion to income maker contract"
        }
      },
      "setPolicyCoreAddress(address)": {
        "details": "Only callable by the owner         < PolicyCore should be the minter of policyToken >         < This process is done inside constructor >",
        "params": {
          "_policyCore": "Address of policyCore contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Naughty Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployPolicyToken(string,uint256)": {
        "notice": "Deploy a new policy token.         Detail info is included inside the token name and handled inside policyCore.        "
      },
      "deployPool(address,address,uint256,uint256)": {
        "notice": "After deploy the policytoken and get the address,         we deploy the policyToken - stablecoin pool contract. "
      },
      "getAllTokens()": {
        "notice": "Get the all tokens that have been deployed"
      },
      "getInitCodeHashForPolicyToken(string,uint256)": {
        "notice": "Get the INIT_CODE_HASH for policy tokens with parameters"
      },
      "getPairAddress(address,address)": {
        "notice": "Get the pair address deployed by the factory         PolicyToken address first, and then stablecoin address         The order of the tokens will be sorted inside the function"
      },
      "setIncomeMakerAddress(address)": {
        "notice": "Set income maker address"
      },
      "setIncomeMakerProportion(uint256)": {
        "notice": "Set income maker proportion"
      },
      "setPolicyCoreAddress(address)": {
        "notice": "Remember to call this function to set the policyCore address"
      }
    },
    "notice": "Factory contract to deploy new price proteciton pools.         Each pool(product) will have a unique naughtyId         Each pool will have its pool token         PolicyToken - Stablecoin         Token 0 may change but Token 1 is always stablecoin.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 323,
        "contract": "contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 326,
        "contract": "contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1560,
        "contract": "contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 203,
        "contract": "contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 315,
        "contract": "contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 18961,
        "contract": "contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 18964,
        "contract": "contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 18967,
        "contract": "contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory",
        "label": "allTokens",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 18969,
        "contract": "contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory",
        "label": "_nextId",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 18971,
        "contract": "contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory",
        "label": "policyCore",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 18973,
        "contract": "contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory",
        "label": "incomeMaker",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 18975,
        "contract": "contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory",
        "label": "incomeMakerProportion",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}