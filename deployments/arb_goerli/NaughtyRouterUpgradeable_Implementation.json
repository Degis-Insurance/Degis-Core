{
  "address": "0xAD206051D4d40CBAD93451ce3F5A8DB0Fa714C82",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBuyerToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBuyerToken",
          "type": "address"
        }
      ],
      "name": "BuyerTokenChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPolicyCore",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPolicyCore",
          "type": "address"
        }
      ],
      "name": "PolicyCoreChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityWithUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyerToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buyerToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyCore",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyerToken",
          "type": "address"
        }
      ],
      "name": "setBuyerToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_naughtyFactory",
          "type": "address"
        }
      ],
      "name": "setNaughtyFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coreAddress",
          "type": "address"
        }
      ],
      "name": "setPolicyCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensforTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensforExactTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x64a21b510b74e4f7a1599b6fe96e4cca08191743dcfad3e5e0d4ef234bbeb58e",
  "receipt": {
    "to": null,
    "from": "0x32eB34d060c12aD0491d260c436d30e5fB13a8Cd",
    "contractAddress": "0xAD206051D4d40CBAD93451ce3F5A8DB0Fa714C82",
    "transactionIndex": 1,
    "gasUsed": "2351360",
    "logsBloom": "0x
    "blockHash": "0xc6a271abdba1c5c78a9ce5544a01797e18c9c5edc0827a16a099a432e544b185",
    "transactionHash": "0x64a21b510b74e4f7a1599b6fe96e4cca08191743dcfad3e5e0d4ef234bbeb58e",
    "logs": [],
    "blockNumber": 17232392,
    "cumulativeGasUsed": "2351360",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0908b805372ad3a5b867a88c8d84f329",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBuyerToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBuyerToken\",\"type\":\"address\"}],\"name\":\"BuyerTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPolicyCore\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPolicyCore\",\"type\":\"address\"}],\"name\":\"PolicyCoreChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityWithUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyerToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyerToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyCore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyerToken\",\"type\":\"address\"}],\"name\":\"setBuyerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_naughtyFactory\",\"type\":\"address\"}],\"name\":\"setNaughtyFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coreAddress\",\"type\":\"address\"}],\"name\":\"setPolicyCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensforTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensforExactTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"_amountADesired\":\"Amount of policyToken desired\",\"_amountAMin\":\"Minimum amoutn of policy token\",\"_amountBDesired\":\"Amount of stablecoin desired\",\"_amountBMin\":\"Minimum amount of stablecoin\",\"_deadline\":\"Transaction will revert after this deadline\",\"_to\":\"Address that receive the lp token, normally the user himself\",\"_tokenA\":\"Address of policyToken\",\"_tokenB\":\"Address of stablecoin\"},\"returns\":{\"amountA\":\"Amount of tokenA to be input\",\"amountB\":\"Amount of tokenB to be input\",\"liquidity\":\"LP token to be mint\"}},\"addLiquidityWithUSD(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"details\":\"Only difference with addLiquidity is that mintPolicyTokenForUser\",\"params\":{\"_amountADesired\":\"Amount of policyToken desired\",\"_amountAMin\":\"Minimum amount of policy token\",\"_amountBDesired\":\"Amount of stablecoin desired\",\"_amountBMin\":\"Minimum amount of stablecoin\",\"_deadline\":\"Transaction will revert after this deadline\",\"_to\":\"Address that receive the lp token, normally the user himself\",\"_tokenA\":\"Address of policyToken\",\"_tokenB\":\"Address of stablecoin\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"_amountAMin\":\"Minimum amount of tokenA given out\",\"_amountBMin\":\"Minimum amount of tokenB given out\",\"_deadline\":\"Deadline of this transaction\",\"_liquidity\":\"The lptoken amount to be removed\",\"_to\":\"User address\",\"_tokenA\":\"Address of policy token\",\"_tokenB\":\"Address of stablecoin\"},\"returns\":{\"amountA\":\"Amount of token0 given out\",\"amountB\":\"Amount of token1 given out\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBuyerToken(address)\":{\"params\":{\"_buyerToken\":\"Address of new buyer token\"}},\"setNaughtyFactory(address)\":{\"params\":{\"_naughtyFactory\":\"Address of new naughty factory\"}},\"setPolicyCore(address)\":{\"params\":{\"_coreAddress\":\"Address of new policyCore\"}},\"swapExactTokensforTokens(uint256,uint256,address,address,address,uint256)\":{\"params\":{\"_amountIn\":\"Fixed token input\",\"_amountOutMin\":\"Minimum token output\",\"_deadline\":\"Deadline for this specific swap\",\"_to\":\"User address\",\"_tokenIn\":\"Address of input token\",\"_tokenOut\":\"Address of output token\"},\"returns\":{\"amountOut\":\"Amounts to be really given out\"}},\"swapTokensforExactTokens(uint256,uint256,address,address,address,uint256)\":{\"params\":{\"_amountInMax\":\"Maximum token input\",\"_amountOut\":\"Fixed token output\",\"_deadline\":\"Deadline for this specific swap\",\"_to\":\"User address\",\"_tokenIn\":\"Address of input token\",\"_tokenOut\":\"Address of output token\"},\"returns\":{\"amountIn\":\"Amounts to be really put in\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"NaughtyRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Add liquidity function\"},\"addLiquidityWithUSD(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Add liquidity but only provide stablecoins\"},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Remove liquidity from the pool\"},\"setBuyerToken(address)\":{\"notice\":\"Set the address of buyer token\"},\"setNaughtyFactory(address)\":{\"notice\":\"Set the address of factory\"},\"setPolicyCore(address)\":{\"notice\":\"Set the address of policyCore\"},\"swapExactTokensforTokens(uint256,uint256,address,address,address,uint256)\":{\"notice\":\"Amount in is fixed\"},\"swapTokensforExactTokens(uint256,uint256,address,address,address,uint256)\":{\"notice\":\"Amount out is fixed\"}},\"notice\":\"Router for the pool, you can add/remove liquidity or swap A for B.         Swapping fee rate is 2% and all of them are given to LP.         Very similar logic with Uniswap V2.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/naughty-price/NaughtyRouter.sol\":\"NaughtyRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"contracts/naughty-price/NaughtyRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n    *******         **********     ***********     *****     ***********\\n    *      *        *              *                 *       *\\n    *        *      *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     **********     *       *****     *       ***********\\n    *         *     *              *         *       *                 *\\n    *         *     *              *         *       *                 *\\n    *        *      *              *         *       *                 *\\n    *      *        *              *         *       *                 *\\n    *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IBuyerToken} from \\\"../tokens/interfaces/IBuyerToken.sol\\\";\\nimport {INaughtyPair} from \\\"./interfaces/INaughtyPair.sol\\\";\\nimport {INaughtyFactory} from \\\"./interfaces/INaughtyFactory.sol\\\";\\nimport {IPolicyCore} from \\\"./interfaces/IPolicyCore.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {IERC20Decimals} from \\\"../utils/interfaces/IERC20Decimals.sol\\\";\\n\\n/**\\n * @title  NaughtyRouter\\n * @notice Router for the pool, you can add/remove liquidity or swap A for B.\\n *         Swapping fee rate is 2% and all of them are given to LP.\\n *         Very similar logic with Uniswap V2.\\n *\\n */\\ncontract NaughtyRouter is OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for INaughtyPair;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Some other contracts\\n    address public factory;\\n    address public policyCore;\\n    address public buyerToken;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event PolicyCoreChanged(address oldPolicyCore, address newPolicyCore);\\n\\n    event BuyerTokenChanged(address oldBuyerToken, address newBuyerToken);\\n\\n    event LiquidityAdded(\\n        address indexed pairAddress,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 liquidity\\n    );\\n\\n    event LiquidityRemoved(\\n        address indexed pairAddress,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 liquidity\\n    );\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function initialize(address _factory, address _buyerToken)\\n        public\\n        initializer\\n    {\\n        __Ownable_init();\\n\\n        factory = _factory;\\n        buyerToken = _buyerToken;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Transactions are available only before the deadline\\n     * @param _deadLine Deadline of the pool\\n     */\\n    modifier beforeDeadline(uint256 _deadLine) {\\n        if (msg.sender != INaughtyFactory(factory).incomeMaker()) {\\n            require(block.timestamp < _deadLine, \\\"expired transaction\\\");\\n        }\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Set the address of policyCore\\n     * @param _coreAddress Address of new policyCore\\n     */\\n    function setPolicyCore(address _coreAddress) external onlyOwner {\\n        emit PolicyCoreChanged(policyCore, _coreAddress);\\n        policyCore = _coreAddress;\\n    }\\n\\n    /**\\n     * @notice Set the address of buyer token\\n     * @param _buyerToken Address of new buyer token\\n     */\\n    function setBuyerToken(address _buyerToken) external onlyOwner {\\n        emit BuyerTokenChanged(buyerToken, _buyerToken);\\n        buyerToken = _buyerToken;\\n    }\\n\\n    /**\\n     * @notice Set the address of factory\\n     * @param _naughtyFactory Address of new naughty factory\\n     */\\n    function setNaughtyFactory(address _naughtyFactory) external onlyOwner {\\n        emit BuyerTokenChanged(factory, _naughtyFactory);\\n        factory = _naughtyFactory;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Helper Functions *********************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Add liquidity but only provide stablecoins\\n     * @dev Only difference with addLiquidity is that mintPolicyTokenForUser\\n     * @param _tokenA Address of policyToken\\n     * @param _tokenB Address of stablecoin\\n     * @param _amountADesired Amount of policyToken desired\\n     * @param _amountBDesired Amount of stablecoin desired\\n     * @param _amountAMin Minimum amount of policy token\\n     * @param _amountBMin Minimum amount of stablecoin\\n     * @param _to Address that receive the lp token, normally the user himself\\n     * @param _deadline Transaction will revert after this deadline\\n     */\\n    function addLiquidityWithUSD(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountADesired,\\n        uint256 _amountBDesired,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin,\\n        address _to,\\n        uint256 _deadline\\n    )\\n        external\\n        beforeDeadline(_deadline)\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        )\\n    {\\n        require(_checkStablecoin(_tokenB), \\\"Token B should be stablecoin\\\");\\n\\n        // Mint _amountADesired policy tokens for users\\n        _mintPolicyTokensForUser(\\n            _tokenA,\\n            _tokenB,\\n            _amountADesired,\\n            _msgSender()\\n        );\\n\\n        // Add liquidity\\n        {\\n            (amountA, amountB, liquidity) = addLiquidity(\\n                _tokenA,\\n                _tokenB,\\n                _amountADesired,\\n                _amountBDesired,\\n                _amountAMin,\\n                _amountBMin,\\n                _to,\\n                _deadline\\n            );\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Add liquidity function\\n     * @param _tokenA Address of policyToken\\n     * @param _tokenB Address of stablecoin\\n     * @param _amountADesired Amount of policyToken desired\\n     * @param _amountBDesired Amount of stablecoin desired\\n     * @param _amountAMin Minimum amoutn of policy token\\n     * @param _amountBMin Minimum amount of stablecoin\\n     * @param _to Address that receive the lp token, normally the user himself\\n     * @param _deadline Transaction will revert after this deadline\\n     * @return amountA Amount of tokenA to be input\\n     * @return amountB Amount of tokenB to be input\\n     * @return liquidity LP token to be mint\\n     */\\n    function addLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountADesired,\\n        uint256 _amountBDesired,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin,\\n        address _to,\\n        uint256 _deadline\\n    )\\n        public\\n        beforeDeadline(_deadline)\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        )\\n    {\\n        {\\n            (amountA, amountB) = _addLiquidity(\\n                _tokenA,\\n                _tokenB,\\n                _amountADesired,\\n                _amountBDesired,\\n                _amountAMin,\\n                _amountBMin\\n            );\\n        }\\n\\n        address pair = INaughtyFactory(factory).getPairAddress(\\n            _tokenA,\\n            _tokenB\\n        );\\n\\n        _transferHelper(_tokenA, _msgSender(), pair, amountA);\\n        _transferHelper(_tokenB, _msgSender(), pair, amountB);\\n\\n        liquidity = INaughtyPair(pair).mint(_to);\\n\\n        emit LiquidityAdded(pair, amountA, amountB, liquidity);\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool\\n     * @param _tokenA Address of policy token\\n     * @param _tokenB Address of stablecoin\\n     * @param _liquidity The lptoken amount to be removed\\n     * @param _amountAMin Minimum amount of tokenA given out\\n     * @param _amountBMin Minimum amount of tokenB given out\\n     * @param _to User address\\n     * @param _deadline Deadline of this transaction\\n     * @return amountA Amount of token0 given out\\n     * @return amountB Amount of token1 given out\\n     */\\n    function removeLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _liquidity,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin,\\n        address _to,\\n        uint256 _deadline\\n    )\\n        public\\n        beforeDeadline(_deadline)\\n        returns (uint256 amountA, uint256 amountB)\\n    {\\n        address pair = INaughtyFactory(factory).getPairAddress(\\n            _tokenA,\\n            _tokenB\\n        );\\n\\n        INaughtyPair(pair).safeTransferFrom(_msgSender(), pair, _liquidity); // send liquidity to pair\\n\\n        // Amount0: insurance token\\n        (amountA, amountB) = INaughtyPair(pair).burn(_to);\\n\\n        require(amountA >= _amountAMin, \\\"Insufficient insurance token amount\\\");\\n        require(amountB >= _amountBMin, \\\"Insufficient USDT token\\\");\\n\\n        emit LiquidityRemoved(pair, amountA, amountB, _liquidity);\\n    }\\n\\n    /**\\n     * @notice Amount out is fixed\\n     * @param _amountInMax Maximum token input\\n     * @param _amountOut Fixed token output\\n     * @param _tokenIn Address of input token\\n     * @param _tokenOut Address of output token\\n     * @param _to User address\\n     * @param _deadline Deadline for this specific swap\\n     * @return amountIn Amounts to be really put in\\n     */\\n    function swapTokensforExactTokens(\\n        uint256 _amountInMax,\\n        uint256 _amountOut,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _to,\\n        uint256 _deadline\\n    ) external beforeDeadline(_deadline) returns (uint256 amountIn) {\\n        address pair = INaughtyFactory(factory).getPairAddress(\\n            _tokenIn,\\n            _tokenOut\\n        );\\n        require(\\n            block.timestamp <= INaughtyPair(pair).deadline(),\\n            \\\"This pool has been frozen for swapping\\\"\\n        );\\n\\n        bool isBuying = _checkStablecoin(_tokenIn);\\n\\n        uint256 feeRate = INaughtyPair(pair).feeRate();\\n\\n        // Get how many tokens should be put in (the order depends on isBuying)\\n        amountIn = _getAmountIn(\\n            isBuying,\\n            _amountOut,\\n            _tokenIn,\\n            _tokenOut,\\n            feeRate\\n        );\\n\\n        require(amountIn <= _amountInMax, \\\"excessive input amount\\\");\\n\\n        _transferHelper(_tokenIn, _msgSender(), pair, amountIn);\\n\\n        _swap(pair, _tokenIn, amountIn, _amountOut, isBuying, _to);\\n    }\\n\\n    /**\\n     * @notice Amount in is fixed\\n     * @param _amountIn Fixed token input\\n     * @param _amountOutMin Minimum token output\\n     * @param _tokenIn Address of input token\\n     * @param _tokenOut Address of output token\\n     * @param _to User address\\n     * @param _deadline Deadline for this specific swap\\n     * @return amountOut Amounts to be really given out\\n     */\\n    function swapExactTokensforTokens(\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _to,\\n        uint256 _deadline\\n    ) external beforeDeadline(_deadline) returns (uint256 amountOut) {\\n        address pair = INaughtyFactory(factory).getPairAddress(\\n            _tokenIn,\\n            _tokenOut\\n        );\\n        require(\\n            block.timestamp <= INaughtyPair(pair).deadline(),\\n            \\\"This pool has been frozen for swapping\\\"\\n        );\\n\\n        // Check if the tokenIn is stablecoin\\n        bool isBuying = _checkStablecoin(_tokenIn);\\n\\n        uint256 feeRate = INaughtyPair(pair).feeRate();\\n\\n        // Get how many tokens should be given out (the order depends on isBuying)\\n        amountOut = _getAmountOut(\\n            isBuying,\\n            _amountIn,\\n            _tokenIn,\\n            _tokenOut,\\n            feeRate\\n        );\\n        require(amountOut >= _amountOutMin, \\\"excessive output amount\\\");\\n\\n        _transferHelper(_tokenIn, _msgSender(), pair, _amountIn);\\n\\n        _swap(pair, _tokenIn, _amountIn, amountOut, isBuying, _to);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Internal function to finish adding liquidity\\n     * @param _tokenA Address of tokenA\\n     * @param _tokenB Address of tokenB\\n     * @param _amountADesired Amount of tokenA to be added\\n     * @param _amountBDesired Amount of tokenB to be added\\n     * @param _amountAMin Minimum amount of tokenA\\n     * @param _amountBMin Minimum amount of tokenB\\n     * @return amountA Real amount of tokenA\\n     * @return amountB Real amount of tokenB\\n     */\\n    function _addLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountADesired,\\n        uint256 _amountBDesired,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin\\n    ) private view returns (uint256 amountA, uint256 amountB) {\\n        require(_checkStablecoin(_tokenB), \\\"Please put stablecoin as tokenB\\\");\\n\\n        (uint256 reserveA, uint256 reserveB) = _getReserves(_tokenA, _tokenB);\\n\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (_amountADesired, _amountBDesired);\\n        } else {\\n            uint256 amountBOptimal = _quote(\\n                _amountADesired,\\n                reserveA,\\n                reserveB\\n            );\\n            if (amountBOptimal <= _amountBDesired) {\\n                require(amountBOptimal >= _amountBMin, \\\"INSUFFICIENT_B_AMOUNT\\\");\\n                (amountA, amountB) = (_amountADesired, amountBOptimal);\\n            } else {\\n                uint256 amountAOptimal = _quote(\\n                    _amountBDesired,\\n                    reserveB,\\n                    reserveA\\n                );\\n                require(amountAOptimal <= _amountADesired, \\\"nonono\\\");\\n                require(amountAOptimal >= _amountAMin, \\\"INSUFFICIENT_A_AMOUNT\\\");\\n                (amountA, amountB) = (amountAOptimal, _amountBDesired);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Finish the erc20 transfer operation\\n     * @param _token ERC20 token address\\n     * @param _from Address to give out the token\\n     * @param _to Pair address to receive the token\\n     * @param _amount Transfer amount\\n     */\\n    function _transferHelper(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Finish swap process\\n     * @param _pair Address of the pair\\n     * @param _tokenIn Address of the input token\\n     * @param _amountIn Amount of tokens put in\\n     * @param _amountOut Amount of tokens get out\\n     * @param _isBuying Whether this is a purchase or a sell\\n     * @param _to Address of the user\\n     */\\n    function _swap(\\n        address _pair,\\n        address _tokenIn,\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        bool _isBuying,\\n        address _to\\n    ) internal {\\n        // Only give buyer tokens when this is a purchase\\n        if (_isBuying) {\\n            // Check the decimals\\n            uint256 decimals = IERC20Decimals(_tokenIn).decimals();\\n            uint256 buyerTokenAmount = _amountIn * 10**(18 - decimals);\\n            IBuyerToken(buyerToken).mintBuyerToken(\\n                _msgSender(),\\n                buyerTokenAmount\\n            );\\n        }\\n\\n        // If the user is buying policies => amount1Out = 0\\n        // One of these two variables will be 0\\n        uint256 amountAOut = _isBuying ? _amountOut : 0;\\n        uint256 amountBOut = _isBuying ? 0 : _amountOut;\\n\\n        INaughtyPair(_pair).swap(amountAOut, amountBOut, _to);\\n    }\\n\\n    /**\\n     * @notice Used when users only provide stablecoins and want to mint & add liquidity in one step\\n     * @dev Need have approval before (done by the user himself)\\n     * @param _policyTokenAddress Address of the policy token\\n     * @param _stablecoin Address of the stablecoin\\n     * @param _amount Amount to be used for minting policy tokens\\n     * @param _user The user's address\\n     */\\n    function _mintPolicyTokensForUser(\\n        address _policyTokenAddress,\\n        address _stablecoin,\\n        uint256 _amount,\\n        address _user\\n    ) internal {\\n        // Find the policy token name\\n        string memory policyTokenName = IPolicyCore(policyCore)\\n            .findNamebyAddress(_policyTokenAddress);\\n\\n        IPolicyCore(policyCore).delegateDeposit(\\n            policyTokenName,\\n            _stablecoin,\\n            _amount,\\n            _user\\n        );\\n    }\\n\\n    function _checkStablecoin(address _tokenAddress)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return IPolicyCore(policyCore).supportedStablecoin(_tokenAddress);\\n    }\\n\\n    /**\\n     * @notice Fetche the reserves for a pair\\n     * @dev You need to sort the token order by yourself!\\n     *      No matter your input order, the return value will always start with policy token reserve.\\n     */\\n    function _getReserves(address tokenA, address tokenB)\\n        internal\\n        view\\n        returns (uint112 reserveA, uint112 reserveB)\\n    {\\n        address pairAddress = INaughtyFactory(factory).getPairAddress(\\n            tokenA,\\n            tokenB\\n        );\\n\\n        // (Policy token reserve, stablecoin reserve)\\n        (reserveA, reserveB) = INaughtyPair(pairAddress).getReserves();\\n    }\\n\\n    /**\\n     * @notice Used when swap exact tokens for tokens (in is fixed)\\n     * @param isBuying Whether the user is buying policy tokens\\n     * @param _amountIn Amount of tokens put in\\n     * @param _tokenIn Address of the input token\\n     * @param _tokenOut Address of the output token\\n     */\\n    function _getAmountOut(\\n        bool isBuying,\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _feeRate\\n    ) internal view returns (uint256 amountOut) {\\n        (uint256 reserveA, uint256 reserveB) = _getReserves(\\n            _tokenIn,\\n            _tokenOut\\n        );\\n\\n        // If tokenIn is stablecoin (isBuying), then tokeIn should be tokenB\\n        // Get the right order\\n        (uint256 reserveIn, uint256 reserveOut) = isBuying\\n            ? (reserveB, reserveA)\\n            : (reserveA, reserveB);\\n\\n        require(_amountIn > 0, \\\"insufficient input amount\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"insufficient liquidity\\\");\\n\\n        uint256 amountInWithFee = _amountIn * (1000 - _feeRate);\\n        uint256 numerator = amountInWithFee * (reserveOut);\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n\\n        amountOut = numerator / denominator;\\n    }\\n\\n    /**\\n     * @notice Used when swap tokens for exact tokens (out is fixed)\\n     * @param isBuying Whether the user is buying policy tokens\\n     * @param _amountOut Amount of tokens given out\\n     * @param _tokenIn Address of the input token\\n     * @param _tokenOut Address of the output token\\n     */\\n    function _getAmountIn(\\n        bool isBuying,\\n        uint256 _amountOut,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _feeRate\\n    ) internal view returns (uint256 amountIn) {\\n        (uint256 reserveA, uint256 reserveB) = _getReserves(\\n            _tokenIn,\\n            _tokenOut\\n        );\\n        // If tokenIn is stablecoin (isBuying), then tokeIn should be tokenB\\n        // Get the right order\\n        (uint256 reserveIn, uint256 reserveOut) = isBuying\\n            ? (reserveB, reserveA)\\n            : (reserveA, reserveB);\\n\\n        require(_amountOut > 0, \\\"insufficient output amount\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"insufficient liquidity\\\");\\n\\n        uint256 numerator = reserveIn * (_amountOut) * 1000;\\n        uint256 denominator = (reserveOut - _amountOut) * (1000 - _feeRate);\\n\\n        amountIn = numerator / denominator + 1;\\n    }\\n\\n    /**\\n     * @notice Given some amount of an asset and pair reserves\\n     *         returns an equivalent amount of the other asset\\n     * @dev Used when add or remove liquidity\\n     * @param _amountA Amount of tokenA ( can be policytoken or stablecoin)\\n     * @param _reserveA Reserve of tokenA\\n     * @param _reserveB Reserve of tokenB\\n     */\\n    function _quote(\\n        uint256 _amountA,\\n        uint256 _reserveA,\\n        uint256 _reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(_amountA > 0, \\\"insufficient amount\\\");\\n        require(_reserveA > 0 && _reserveB > 0, \\\"insufficient liquidity\\\");\\n\\n        amountB = (_amountA * _reserveB) / _reserveA;\\n    }\\n}\\n\",\"keccak256\":\"0x37fc5389ce42aa15048a6a07f1730498d90df1b5cfac18804467c1ce9867c826\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/interfaces/INaughtyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface INaughtyFactory {\\n    function getPairAddress(address _tokenAddress1, address _tokenAddress2)\\n        external\\n        view\\n        returns (address);\\n\\n    function deployPolicyToken(\\n        string memory _policyTokenName,\\n        uint256 _decimals\\n    ) external returns (address);\\n\\n    function deployPool(\\n        address _policyTokenAddress,\\n        address _stablecoin,\\n        uint256 _deadline,\\n        uint256 _feeRate\\n    ) external returns (address);\\n\\n    function incomeMaker() external view returns (address);\\n\\n    function incomeMakerProportion() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x52954621ef71dc1217e56e802c04e93f21a8776a8fe6b886ca8b0a2b6e1ab720\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/interfaces/INaughtyPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface INaughtyPair is IERC20 {\\n    function initialize(\\n        address _token0,\\n        address _token1,\\n        uint256 _deadline,\\n        uint256 _feeRate\\n    ) external;\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function feeRate() external view returns (uint256);\\n\\n    function deadline() external view returns (uint256);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 _reserve0, uint112 _reserve1);\\n\\n    function swap(\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n\\n    function burn(address) external returns (uint256, uint256);\\n\\n    function mint(address) external returns (uint256);\\n\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0x9e8350da8ead9e167ad8274005d55b5c2dd8ba878947e0eda58da10f70a6b0aa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/interfaces/IPolicyCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface IPolicyCore {\\n    struct PolicyTokenInfo {\\n        address policyTokenAddress;\\n        bool isCall;\\n        uint256 nameDecimals; // decimals of the name generation\\n        uint256 tokenDecimals; // decimals of the policy token\\n        uint256 strikePrice;\\n        uint256 deadline;\\n        uint256 settleTimestamp;\\n    }\\n\\n    /**\\n     * @notice Find the address by its name\\n     */\\n    function findAddressbyName(string memory _policyTokenName)\\n        external\\n        view\\n        returns (address _policyTokenAddress);\\n\\n    /**\\n     * @notice Find the name by address\\n     */\\n    function findNamebyAddress(address _policyTokenAddress)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Check whether the stablecoin is supported\\n     */\\n    function supportedStablecoin(address _coinAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    function delegateDeposit(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function deployPool(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _poolDeadline,\\n        uint256 _feeRate\\n    ) external returns (address);\\n\\n    function getPolicyTokenInfo(string memory _policyTokenName)\\n        external\\n        view\\n        returns (PolicyTokenInfo memory);\\n\\n    function updateUserQuota(\\n        address _user,\\n        address _policyToken,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7fa671876d2a8a1bb994de6dcd680e81a972939bc99b2d47b064c93da3d4a149\",\"license\":\"GPL-3.0-or-later\"},\"contracts/tokens/interfaces/IBuyerToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBuyerToken is IERC20 {\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Functions ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Mint buyer tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be minted\\n     */\\n    function mintBuyerToken(address _account, uint256 _amount) external;\\n\\n    /**\\n     * @notice Burn buyer tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be burned\\n     */\\n    function burnBuyerToken(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x586fe87cb022359361b704e39ef899f38b4e3c624fe20f9d5c839e39b330bbff\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/interfaces/IERC20Decimals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.10;\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xacb791f2cbb5756d937bfa2ee24497f9ba50f866a7ddf4443914c893e05ca2d0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506129ae806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806393822b2111610097578063c45a015511610066578063c45a0155146101fc578063e30145e01461020f578063e8e3370014610222578063f2fde38b1461023557600080fd5b806393822b21146101a2578063a17a94e7146101b5578063a5d2a715146101c8578063baa2abde146101db57600080fd5b806337864999116100d35780633786499914610158578063485cc9551461016d578063715018a6146101805780638da5cb5b1461018857600080fd5b80630a7af5c6146100fa5780631a771f0a146101235780632d2cac2414610136575b600080fd5b61010d610108366004611aaf565b610248565b60405161011a9190611b41565b60405180910390f35b61010d610131366004611aaf565b6104c3565b610149610144366004611b4f565b610727565b60405161011a93929190611c02565b61016b610166366004611c2a565b610831565b005b61016b61017b366004611c4b565b6108c4565b61016b610970565b6033546001600160a01b03165b60405161011a9190611c91565b61016b6101b0366004611c2a565b6109a6565b61016b6101c3366004611c2a565b610a39565b606754610195906001600160a01b031681565b6101ee6101e9366004611c9f565b610acc565b60405161011a929190611d3e565b606554610195906001600160a01b031681565b606654610195906001600160a01b031681565b610149610230366004611b4f565b610d28565b61016b610243366004611c2a565b610f71565b600081606560009054906101000a90046001600160a01b03166001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa15801561029e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c29190611d64565b6001600160a01b0316336001600160a01b031614610302578042106103025760405162461bcd60e51b81526004016102f990611db9565b60405180910390fd5b60655460405163b4f69a2f60e01b81526000916001600160a01b03169063b4f69a2f90610335908a908a90600401611dc9565b602060405180830381865afa158015610352573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103769190611d64565b9050806001600160a01b03166329dcb0cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103da9190611def565b4211156103f95760405162461bcd60e51b81526004016102f990611e6a565b600061040488610fcd565b90506000826001600160a01b031663978bbdb96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610446573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046a9190611def565b9050610479828c8b8b8561105e565b94508985101561049b5760405162461bcd60e51b81526004016102f990611eac565b6104a78933858e611151565b6104b5838a8d88868c61116c565b505050509695505050505050565b600081606560009054906101000a90046001600160a01b03166001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa158015610519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053d9190611d64565b6001600160a01b0316336001600160a01b031614610574578042106105745760405162461bcd60e51b81526004016102f990611db9565b60655460405163b4f69a2f60e01b81526000916001600160a01b03169063b4f69a2f906105a7908a908a90600401611dc9565b602060405180830381865afa1580156105c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e89190611d64565b9050806001600160a01b03166329dcb0cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064c9190611def565b42111561066b5760405162461bcd60e51b81526004016102f990611e6a565b600061067688610fcd565b90506000826001600160a01b031663978bbdb96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc9190611def565b90506106eb828b8b8b85611328565b94508a85111561070d5760405162461bcd60e51b81526004016102f990611eee565b61071989338588611151565b6104b5838a878d868c61116c565b600080600083606560009054906101000a90046001600160a01b03166001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a49190611d64565b6001600160a01b0316336001600160a01b0316146107db578042106107db5760405162461bcd60e51b81526004016102f990611db9565b6107e48b610fcd565b6108005760405162461bcd60e51b81526004016102f990611f30565b61080c8c8c8c33611420565b61081c8c8c8c8c8c8c8c8c610d28565b919e909d50909b509950505050505050505050565b6033546001600160a01b0316331461085b5760405162461bcd60e51b81526004016102f990611f70565b6066546040517f24114c7899342052259d78291e404118dfd832aee2b6e937826762b2c8a6ca199161089a916001600160a01b03909116908490611dc9565b60405180910390a1606680546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff166108df5760005460ff16156108e3565b303b155b6108ff5760405162461bcd60e51b81526004016102f990611fd8565b600054610100900460ff16158015610921576000805461ffff19166101011790555b610929611538565b606580546001600160a01b038086166001600160a01b0319928316179092556067805492851692909116919091179055801561096b576000805461ff00191690555b505050565b6033546001600160a01b0316331461099a5760405162461bcd60e51b81526004016102f990611f70565b6109a46000611567565b565b6033546001600160a01b031633146109d05760405162461bcd60e51b81526004016102f990611f70565b6067546040517faca470531fb4335c09f6843f42d8a66afafe3a39b49e81f6773711f259b547f291610a0f916001600160a01b03909116908490611dc9565b60405180910390a1606780546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314610a635760405162461bcd60e51b81526004016102f990611f70565b6065546040517faca470531fb4335c09f6843f42d8a66afafe3a39b49e81f6773711f259b547f291610aa2916001600160a01b03909116908490611dc9565b60405180910390a1606580546001600160a01b0319166001600160a01b0392909216919091179055565b60008082606560009054906101000a90046001600160a01b03166001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b479190611d64565b6001600160a01b0316336001600160a01b031614610b7e57804210610b7e5760405162461bcd60e51b81526004016102f990611db9565b60655460405163b4f69a2f60e01b81526000916001600160a01b03169063b4f69a2f90610bb1908e908e90600401611dc9565b602060405180830381865afa158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf29190611d64565b9050610c096001600160a01b03821633838c6115b9565b6040517f89afcb440000000000000000000000000000000000000000000000000000000081526001600160a01b038216906389afcb4490610c4e908990600401611c91565b60408051808303816000875af1158015610c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190611fe8565b909450925087841015610cb55760405162461bcd60e51b81526004016102f990612073565b86831015610cd55760405162461bcd60e51b81526004016102f9906120b5565b806001600160a01b03167f1dc8bb69df2b8e91fbdcbfcf93d951b3f0000f085a95fe3f7946d6161439245d85858c604051610d1293929190611c02565b60405180910390a2505097509795505050505050565b600080600083606560009054906101000a90046001600160a01b03166001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da59190611d64565b6001600160a01b0316336001600160a01b031614610ddc57804210610ddc5760405162461bcd60e51b81526004016102f990611db9565b610dea8c8c8c8c8c8c61163e565b80945081955050506000606560009054906101000a90046001600160a01b03166001600160a01b031663b4f69a2f8e8e6040518363ffffffff1660e01b8152600401610e37929190611dc9565b602060405180830381865afa158015610e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e789190611d64565b9050610e868d338388611151565b610e928c338387611151565b6040517f6a6278420000000000000000000000000000000000000000000000000000000081526001600160a01b03821690636a62784290610ed7908a90600401611c91565b6020604051808303816000875af1158015610ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1a9190611def565b9250806001600160a01b03167f64b83944e79c3ce8d4c297411de637c3e102d064677aac0c163976ebdcd6f50e868686604051610f5993929190611c02565b60405180910390a25050985098509895505050505050565b6033546001600160a01b03163314610f9b5760405162461bcd60e51b81526004016102f990611f70565b6001600160a01b038116610fc15760405162461bcd60e51b81526004016102f99061211d565b610fca81611567565b50565b6066546040517f5cb3b14f0000000000000000000000000000000000000000000000000000000081526000916001600160a01b031690635cb3b14f90611017908590600401611c91565b602060405180830381865afa158015611034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110589190612140565b92915050565b600080600061106d868661175a565b6dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600080896110a05783836110a3565b82845b91509150600089116110c75760405162461bcd60e51b81526004016102f990612193565b6000821180156110d75750600081115b6110f35760405162461bcd60e51b81526004016102f9906121d5565b6000611101876103e86121fb565b61110b908b612212565b905060006111198383612212565b905060008261112a866103e8612212565b6111349190612231565b9050611140818361225f565b9d9c50505050505050505050505050565b6111666001600160a01b0385168484846115b9565b50505050565b811561127e576000856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d69190612287565b60ff16905060006111e88260126121fb565b6111f390600a6123b6565b6111fd9087612212565b6067546040517f2290e1060000000000000000000000000000000000000000000000000000000081529192506001600160a01b031690632290e1069061124990339085906004016123c5565b600060405180830381600087803b15801561126357600080fd5b505af1158015611277573d6000803e3d6000fd5b5050505050505b60008261128c57600061128e565b835b905060008361129d57846112a0565b60005b6040517f6d9a640a0000000000000000000000000000000000000000000000000000000081529091506001600160a01b03891690636d9a640a906112ec908590859088906004016123d3565b600060405180830381600087803b15801561130657600080fd5b505af115801561131a573d6000803e3d6000fd5b505050505050505050505050565b6000806000611337868661175a565b6dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000808961136a57838361136d565b82845b91509150600089116113915760405162461bcd60e51b81526004016102f99061242d565b6000821180156113a15750600081115b6113bd5760405162461bcd60e51b81526004016102f9906121d5565b60006113c98a84612212565b6113d5906103e8612212565b905060006113e5886103e86121fb565b6113ef8c856121fb565b6113f99190612212565b9050611405818361225f565b611410906001612231565b9c9b505050505050505050505050565b6066546040517f38081de20000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906338081de29061146a908890600401611c91565b600060405180830381865afa158015611487573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114af9190810190612558565b6066546040517ff15cac340000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063f15cac34906114ff9084908890889088906004016125c5565b600060405180830381600087803b15801561151957600080fd5b505af115801561152d573d6000803e3d6000fd5b505050505050505050565b600054610100900460ff1661155f5760405162461bcd60e51b81526004016102f990612660565b6109a4611841565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611166846323b872dd60e01b8585856040516024016115da93929190612670565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611871565b60008061164a87610fcd565b6116665760405162461bcd60e51b81526004016102f9906126bd565b6000806116738a8a61175a565b6dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508160001480156116a5575080155b156116b55787935086925061174d565b60006116c2898484611900565b90508781116116f657858110156116eb5760405162461bcd60e51b81526004016102f9906126ff565b88945092508261174b565b6000611703898486611900565b9050898111156117255760405162461bcd60e51b81526004016102f990612741565b878110156117455760405162461bcd60e51b81526004016102f990612783565b94508793505b505b5050965096945050505050565b60655460405163b4f69a2f60e01b8152600091829182916001600160a01b03169063b4f69a2f906117919088908890600401611dc9565b602060405180830381865afa1580156117ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d29190611d64565b9050806001600160a01b0316630902f1ac6040518163ffffffff1660e01b81526004016040805180830381865afa158015611811573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183591906127b4565b90969095509350505050565b600054610100900460ff166118685760405162461bcd60e51b81526004016102f990612660565b6109a433611567565b60006118c6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661196a9092919063ffffffff16565b80519091501561096b57808060200190518101906118e49190612140565b61096b5760405162461bcd60e51b81526004016102f99061283f565b60008084116119215760405162461bcd60e51b81526004016102f990612881565b6000831180156119315750600082115b61194d5760405162461bcd60e51b81526004016102f9906121d5565b826119588386612212565b611962919061225f565b949350505050565b60606119628484600085611980565b9392505050565b6060824710156119a25760405162461bcd60e51b81526004016102f9906128e9565b843b6119c05760405162461bcd60e51b81526004016102f99061292b565b600080866001600160a01b031685876040516119dc919061295d565b60006040518083038185875af1925050503d8060008114611a19576040519150601f19603f3d011682016040523d82523d6000602084013e611a1e565b606091505b5091509150611a2e828286611a39565b979650505050505050565b60608315611a48575081611979565b825115611a585782518084602001fd5b8160405162461bcd60e51b81526004016102f99190612967565b805b8114610fca57600080fd5b803561105881611a72565b60006001600160a01b038216611058565b611a7481611a8a565b803561105881611a9b565b60008060008060008060c08789031215611acb57611acb600080fd5b6000611ad78989611a7f565b9650506020611ae889828a01611a7f565b9550506040611af989828a01611aa4565b9450506060611b0a89828a01611aa4565b9350506080611b1b89828a01611aa4565b92505060a0611b2c89828a01611a7f565b9150509295509295509295565b805b82525050565b602081016110588284611b39565b600080600080600080600080610100898b031215611b6f57611b6f600080fd5b6000611b7b8b8b611aa4565b9850506020611b8c8b828c01611aa4565b9750506040611b9d8b828c01611a7f565b9650506060611bae8b828c01611a7f565b9550506080611bbf8b828c01611a7f565b94505060a0611bd08b828c01611a7f565b93505060c0611be18b828c01611aa4565b92505060e0611bf28b828c01611a7f565b9150509295985092959890939650565b60608101611c108286611b39565b611c1d6020830185611b39565b6119626040830184611b39565b600060208284031215611c3f57611c3f600080fd5b60006119628484611aa4565b60008060408385031215611c6157611c61600080fd5b6000611c6d8585611aa4565b9250506020611c7e85828601611aa4565b9150509250929050565b611b3b81611a8a565b602081016110588284611c88565b600080600080600080600060e0888a031215611cbd57611cbd600080fd5b6000611cc98a8a611aa4565b9750506020611cda8a828b01611aa4565b9650506040611ceb8a828b01611a7f565b9550506060611cfc8a828b01611a7f565b9450506080611d0d8a828b01611a7f565b93505060a0611d1e8a828b01611aa4565b92505060c0611d2f8a828b01611a7f565b91505092959891949750929550565b60408101611d4c8285611b39565b6119796020830184611b39565b805161105881611a9b565b600060208284031215611d7957611d79600080fd5b60006119628484611d59565b60138152602081017f65787069726564207472616e73616374696f6e00000000000000000000000000815290505b60200190565b6020808252810161105881611d85565b60408101611dd78285611c88565b6119796020830184611c88565b805161105881611a72565b600060208284031215611e0457611e04600080fd5b60006119628484611de4565b60268152602081017f5468697320706f6f6c20686173206265656e2066726f7a656e20666f7220737781527f617070696e670000000000000000000000000000000000000000000000000000602082015290505b60400190565b6020808252810161105881611e10565b60178152602081017f657863657373697665206f757470757420616d6f756e7400000000000000000081529050611db3565b6020808252810161105881611e7a565b60168152602081017f65786365737369766520696e70757420616d6f756e740000000000000000000081529050611db3565b6020808252810161105881611ebc565b601c8152602081017f546f6b656e20422073686f756c6420626520737461626c65636f696e0000000081529050611db3565b6020808252810161105881611efe565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152611db3565b6020808252810161105881611f40565b602e8152602081017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181527f647920696e697469616c697a656400000000000000000000000000000000000060208201529050611e64565b6020808252810161105881611f80565b60008060408385031215611ffe57611ffe600080fd5b600061200a8585611de4565b9250506020611c7e85828601611de4565b60238152602081017f496e73756666696369656e7420696e737572616e636520746f6b656e20616d6f81527f756e74000000000000000000000000000000000000000000000000000000000060208201529050611e64565b602080825281016110588161201b565b60178152602081017f496e73756666696369656e74205553445420746f6b656e00000000000000000081529050611db3565b6020808252810161105881612083565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529050611e64565b60208082528101611058816120c5565b801515611a74565b80516110588161212d565b60006020828403121561215557612155600080fd5b60006119628484612135565b60198152602081017f696e73756666696369656e7420696e70757420616d6f756e740000000000000081529050611db3565b6020808252810161105881612161565b60168152602081017f696e73756666696369656e74206c69717569646974790000000000000000000081529050611db3565b60208082528101611058816121a3565b634e487b7160e01b600052601160045260246000fd5b60008282101561220d5761220d6121e5565b500390565b600081600019048311821515161561222c5761222c6121e5565b500290565b60008219821115612244576122446121e5565b500190565b634e487b7160e01b600052601260045260246000fd5b60008261226e5761226e612249565b500490565b60ff8116611a74565b805161105881612273565b60006020828403121561229c5761229c600080fd5b6000611962848461227c565b80825b60018511156122e7578086048111156122c6576122c66121e5565b60018516156122d457908102905b80026122e08560011c90565b94506122ab565b94509492505050565b6000826122ff57506001611979565b8161230c57506000611979565b8160018114612322576002811461232c57612359565b6001915050611979565b60ff84111561233d5761233d6121e5565b8360020a915084821115612353576123536121e5565b50611979565b5060208310610133831016604e8410600b841016171561238c575081810a83811115612387576123876121e5565b611979565b61239984848460016122a8565b925090508184048111156123af576123af6121e5565b0292915050565b600061197960001984846122f0565b60408101611d4c8285611c88565b606081016123e18286611b39565b6123ee6020830185611b39565b6119626040830184611c88565b601a8152602081017f696e73756666696369656e74206f757470757420616d6f756e7400000000000081529050611db3565b60208082528101611058816123fb565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156124795761247961243d565b6040525050565b600061248b60405190565b90506124978282612453565b919050565b600067ffffffffffffffff8211156124b6576124b661243d565b601f19601f83011660200192915050565b60005b838110156124e25781810151838201526020016124ca565b838111156111665750506000910152565b60006125066125018461249c565b612480565b90508281526020810184848401111561252157612521600080fd5b61252c8482856124c7565b509392505050565b600082601f83011261254857612548600080fd5b81516119628482602086016124f3565b60006020828403121561256d5761256d600080fd5b815167ffffffffffffffff81111561258757612587600080fd5b61196284828501612534565b600061259d825190565b8084526020840193506125b48185602086016124c7565b601f01601f19169290920192915050565b608080825281016125d68187612593565b90506125e56020830186611c88565b6125f26040830185611b39565b6125ff6060830184611c88565b95945050505050565b602b8152602081017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981527f6e697469616c697a696e6700000000000000000000000000000000000000000060208201529050611e64565b6020808252810161105881612608565b6060810161267e8286611c88565b611c1d6020830185611c88565b601f8152602081017f506c656173652070757420737461626c65636f696e20617320746f6b656e420081529050611db3565b602080825281016110588161268b565b60158152602081017f494e53554646494349454e545f425f414d4f554e54000000000000000000000081529050611db3565b60208082528101611058816126cd565b60068152602081017f6e6f6e6f6e6f000000000000000000000000000000000000000000000000000081529050611db3565b602080825281016110588161270f565b60158152602081017f494e53554646494349454e545f415f414d4f554e54000000000000000000000081529050611db3565b6020808252810161105881612751565b6dffffffffffffffffffffffffffff8116611a74565b805161105881612793565b600080604083850312156127ca576127ca600080fd5b60006127d685856127a9565b9250506020611c7e858286016127a9565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f7420737563636565640000000000000000000000000000000000000000000060208201529050611e64565b60208082528101611058816127e7565b60138152602081017f696e73756666696369656e7420616d6f756e740000000000000000000000000081529050611db3565b602080825281016110588161284f565b60268152602081017f416464726573733a20696e73756666696369656e742062616c616e636520666f81527f722063616c6c000000000000000000000000000000000000000000000000000060208201529050611e64565b6020808252810161105881612891565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529050611db3565b60208082528101611058816128f9565b6000612945825190565b6129538185602086016124c7565b9290920192915050565b611058818361293b565b60208082528101611979818461259356fea2646970667358221220b66fa3699abe930401644ba504a383ae1d5d79faf6de1c461144ae9a06540a4e64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806393822b2111610097578063c45a015511610066578063c45a0155146101fc578063e30145e01461020f578063e8e3370014610222578063f2fde38b1461023557600080fd5b806393822b21146101a2578063a17a94e7146101b5578063a5d2a715146101c8578063baa2abde146101db57600080fd5b806337864999116100d35780633786499914610158578063485cc9551461016d578063715018a6146101805780638da5cb5b1461018857600080fd5b80630a7af5c6146100fa5780631a771f0a146101235780632d2cac2414610136575b600080fd5b61010d610108366004611aaf565b610248565b60405161011a9190611b41565b60405180910390f35b61010d610131366004611aaf565b6104c3565b610149610144366004611b4f565b610727565b60405161011a93929190611c02565b61016b610166366004611c2a565b610831565b005b61016b61017b366004611c4b565b6108c4565b61016b610970565b6033546001600160a01b03165b60405161011a9190611c91565b61016b6101b0366004611c2a565b6109a6565b61016b6101c3366004611c2a565b610a39565b606754610195906001600160a01b031681565b6101ee6101e9366004611c9f565b610acc565b60405161011a929190611d3e565b606554610195906001600160a01b031681565b606654610195906001600160a01b031681565b610149610230366004611b4f565b610d28565b61016b610243366004611c2a565b610f71565b600081606560009054906101000a90046001600160a01b03166001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa15801561029e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c29190611d64565b6001600160a01b0316336001600160a01b031614610302578042106103025760405162461bcd60e51b81526004016102f990611db9565b60405180910390fd5b60655460405163b4f69a2f60e01b81526000916001600160a01b03169063b4f69a2f90610335908a908a90600401611dc9565b602060405180830381865afa158015610352573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103769190611d64565b9050806001600160a01b03166329dcb0cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103da9190611def565b4211156103f95760405162461bcd60e51b81526004016102f990611e6a565b600061040488610fcd565b90506000826001600160a01b031663978bbdb96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610446573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046a9190611def565b9050610479828c8b8b8561105e565b94508985101561049b5760405162461bcd60e51b81526004016102f990611eac565b6104a78933858e611151565b6104b5838a8d88868c61116c565b505050509695505050505050565b600081606560009054906101000a90046001600160a01b03166001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa158015610519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053d9190611d64565b6001600160a01b0316336001600160a01b031614610574578042106105745760405162461bcd60e51b81526004016102f990611db9565b60655460405163b4f69a2f60e01b81526000916001600160a01b03169063b4f69a2f906105a7908a908a90600401611dc9565b602060405180830381865afa1580156105c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e89190611d64565b9050806001600160a01b03166329dcb0cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064c9190611def565b42111561066b5760405162461bcd60e51b81526004016102f990611e6a565b600061067688610fcd565b90506000826001600160a01b031663978bbdb96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc9190611def565b90506106eb828b8b8b85611328565b94508a85111561070d5760405162461bcd60e51b81526004016102f990611eee565b61071989338588611151565b6104b5838a878d868c61116c565b600080600083606560009054906101000a90046001600160a01b03166001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a49190611d64565b6001600160a01b0316336001600160a01b0316146107db578042106107db5760405162461bcd60e51b81526004016102f990611db9565b6107e48b610fcd565b6108005760405162461bcd60e51b81526004016102f990611f30565b61080c8c8c8c33611420565b61081c8c8c8c8c8c8c8c8c610d28565b919e909d50909b509950505050505050505050565b6033546001600160a01b0316331461085b5760405162461bcd60e51b81526004016102f990611f70565b6066546040517f24114c7899342052259d78291e404118dfd832aee2b6e937826762b2c8a6ca199161089a916001600160a01b03909116908490611dc9565b60405180910390a1606680546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff166108df5760005460ff16156108e3565b303b155b6108ff5760405162461bcd60e51b81526004016102f990611fd8565b600054610100900460ff16158015610921576000805461ffff19166101011790555b610929611538565b606580546001600160a01b038086166001600160a01b0319928316179092556067805492851692909116919091179055801561096b576000805461ff00191690555b505050565b6033546001600160a01b0316331461099a5760405162461bcd60e51b81526004016102f990611f70565b6109a46000611567565b565b6033546001600160a01b031633146109d05760405162461bcd60e51b81526004016102f990611f70565b6067546040517faca470531fb4335c09f6843f42d8a66afafe3a39b49e81f6773711f259b547f291610a0f916001600160a01b03909116908490611dc9565b60405180910390a1606780546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314610a635760405162461bcd60e51b81526004016102f990611f70565b6065546040517faca470531fb4335c09f6843f42d8a66afafe3a39b49e81f6773711f259b547f291610aa2916001600160a01b03909116908490611dc9565b60405180910390a1606580546001600160a01b0319166001600160a01b0392909216919091179055565b60008082606560009054906101000a90046001600160a01b03166001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b479190611d64565b6001600160a01b0316336001600160a01b031614610b7e57804210610b7e5760405162461bcd60e51b81526004016102f990611db9565b60655460405163b4f69a2f60e01b81526000916001600160a01b03169063b4f69a2f90610bb1908e908e90600401611dc9565b602060405180830381865afa158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf29190611d64565b9050610c096001600160a01b03821633838c6115b9565b6040517f89afcb440000000000000000000000000000000000000000000000000000000081526001600160a01b038216906389afcb4490610c4e908990600401611c91565b60408051808303816000875af1158015610c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190611fe8565b909450925087841015610cb55760405162461bcd60e51b81526004016102f990612073565b86831015610cd55760405162461bcd60e51b81526004016102f9906120b5565b806001600160a01b03167f1dc8bb69df2b8e91fbdcbfcf93d951b3f0000f085a95fe3f7946d6161439245d85858c604051610d1293929190611c02565b60405180910390a2505097509795505050505050565b600080600083606560009054906101000a90046001600160a01b03166001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da59190611d64565b6001600160a01b0316336001600160a01b031614610ddc57804210610ddc5760405162461bcd60e51b81526004016102f990611db9565b610dea8c8c8c8c8c8c61163e565b80945081955050506000606560009054906101000a90046001600160a01b03166001600160a01b031663b4f69a2f8e8e6040518363ffffffff1660e01b8152600401610e37929190611dc9565b602060405180830381865afa158015610e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e789190611d64565b9050610e868d338388611151565b610e928c338387611151565b6040517f6a6278420000000000000000000000000000000000000000000000000000000081526001600160a01b03821690636a62784290610ed7908a90600401611c91565b6020604051808303816000875af1158015610ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1a9190611def565b9250806001600160a01b03167f64b83944e79c3ce8d4c297411de637c3e102d064677aac0c163976ebdcd6f50e868686604051610f5993929190611c02565b60405180910390a25050985098509895505050505050565b6033546001600160a01b03163314610f9b5760405162461bcd60e51b81526004016102f990611f70565b6001600160a01b038116610fc15760405162461bcd60e51b81526004016102f99061211d565b610fca81611567565b50565b6066546040517f5cb3b14f0000000000000000000000000000000000000000000000000000000081526000916001600160a01b031690635cb3b14f90611017908590600401611c91565b602060405180830381865afa158015611034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110589190612140565b92915050565b600080600061106d868661175a565b6dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600080896110a05783836110a3565b82845b91509150600089116110c75760405162461bcd60e51b81526004016102f990612193565b6000821180156110d75750600081115b6110f35760405162461bcd60e51b81526004016102f9906121d5565b6000611101876103e86121fb565b61110b908b612212565b905060006111198383612212565b905060008261112a866103e8612212565b6111349190612231565b9050611140818361225f565b9d9c50505050505050505050505050565b6111666001600160a01b0385168484846115b9565b50505050565b811561127e576000856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d69190612287565b60ff16905060006111e88260126121fb565b6111f390600a6123b6565b6111fd9087612212565b6067546040517f2290e1060000000000000000000000000000000000000000000000000000000081529192506001600160a01b031690632290e1069061124990339085906004016123c5565b600060405180830381600087803b15801561126357600080fd5b505af1158015611277573d6000803e3d6000fd5b5050505050505b60008261128c57600061128e565b835b905060008361129d57846112a0565b60005b6040517f6d9a640a0000000000000000000000000000000000000000000000000000000081529091506001600160a01b03891690636d9a640a906112ec908590859088906004016123d3565b600060405180830381600087803b15801561130657600080fd5b505af115801561131a573d6000803e3d6000fd5b505050505050505050505050565b6000806000611337868661175a565b6dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000808961136a57838361136d565b82845b91509150600089116113915760405162461bcd60e51b81526004016102f99061242d565b6000821180156113a15750600081115b6113bd5760405162461bcd60e51b81526004016102f9906121d5565b60006113c98a84612212565b6113d5906103e8612212565b905060006113e5886103e86121fb565b6113ef8c856121fb565b6113f99190612212565b9050611405818361225f565b611410906001612231565b9c9b505050505050505050505050565b6066546040517f38081de20000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906338081de29061146a908890600401611c91565b600060405180830381865afa158015611487573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114af9190810190612558565b6066546040517ff15cac340000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063f15cac34906114ff9084908890889088906004016125c5565b600060405180830381600087803b15801561151957600080fd5b505af115801561152d573d6000803e3d6000fd5b505050505050505050565b600054610100900460ff1661155f5760405162461bcd60e51b81526004016102f990612660565b6109a4611841565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611166846323b872dd60e01b8585856040516024016115da93929190612670565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611871565b60008061164a87610fcd565b6116665760405162461bcd60e51b81526004016102f9906126bd565b6000806116738a8a61175a565b6dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508160001480156116a5575080155b156116b55787935086925061174d565b60006116c2898484611900565b90508781116116f657858110156116eb5760405162461bcd60e51b81526004016102f9906126ff565b88945092508261174b565b6000611703898486611900565b9050898111156117255760405162461bcd60e51b81526004016102f990612741565b878110156117455760405162461bcd60e51b81526004016102f990612783565b94508793505b505b5050965096945050505050565b60655460405163b4f69a2f60e01b8152600091829182916001600160a01b03169063b4f69a2f906117919088908890600401611dc9565b602060405180830381865afa1580156117ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d29190611d64565b9050806001600160a01b0316630902f1ac6040518163ffffffff1660e01b81526004016040805180830381865afa158015611811573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183591906127b4565b90969095509350505050565b600054610100900460ff166118685760405162461bcd60e51b81526004016102f990612660565b6109a433611567565b60006118c6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661196a9092919063ffffffff16565b80519091501561096b57808060200190518101906118e49190612140565b61096b5760405162461bcd60e51b81526004016102f99061283f565b60008084116119215760405162461bcd60e51b81526004016102f990612881565b6000831180156119315750600082115b61194d5760405162461bcd60e51b81526004016102f9906121d5565b826119588386612212565b611962919061225f565b949350505050565b60606119628484600085611980565b9392505050565b6060824710156119a25760405162461bcd60e51b81526004016102f9906128e9565b843b6119c05760405162461bcd60e51b81526004016102f99061292b565b600080866001600160a01b031685876040516119dc919061295d565b60006040518083038185875af1925050503d8060008114611a19576040519150601f19603f3d011682016040523d82523d6000602084013e611a1e565b606091505b5091509150611a2e828286611a39565b979650505050505050565b60608315611a48575081611979565b825115611a585782518084602001fd5b8160405162461bcd60e51b81526004016102f99190612967565b805b8114610fca57600080fd5b803561105881611a72565b60006001600160a01b038216611058565b611a7481611a8a565b803561105881611a9b565b60008060008060008060c08789031215611acb57611acb600080fd5b6000611ad78989611a7f565b9650506020611ae889828a01611a7f565b9550506040611af989828a01611aa4565b9450506060611b0a89828a01611aa4565b9350506080611b1b89828a01611aa4565b92505060a0611b2c89828a01611a7f565b9150509295509295509295565b805b82525050565b602081016110588284611b39565b600080600080600080600080610100898b031215611b6f57611b6f600080fd5b6000611b7b8b8b611aa4565b9850506020611b8c8b828c01611aa4565b9750506040611b9d8b828c01611a7f565b9650506060611bae8b828c01611a7f565b9550506080611bbf8b828c01611a7f565b94505060a0611bd08b828c01611a7f565b93505060c0611be18b828c01611aa4565b92505060e0611bf28b828c01611a7f565b9150509295985092959890939650565b60608101611c108286611b39565b611c1d6020830185611b39565b6119626040830184611b39565b600060208284031215611c3f57611c3f600080fd5b60006119628484611aa4565b60008060408385031215611c6157611c61600080fd5b6000611c6d8585611aa4565b9250506020611c7e85828601611aa4565b9150509250929050565b611b3b81611a8a565b602081016110588284611c88565b600080600080600080600060e0888a031215611cbd57611cbd600080fd5b6000611cc98a8a611aa4565b9750506020611cda8a828b01611aa4565b9650506040611ceb8a828b01611a7f565b9550506060611cfc8a828b01611a7f565b9450506080611d0d8a828b01611a7f565b93505060a0611d1e8a828b01611aa4565b92505060c0611d2f8a828b01611a7f565b91505092959891949750929550565b60408101611d4c8285611b39565b6119796020830184611b39565b805161105881611a9b565b600060208284031215611d7957611d79600080fd5b60006119628484611d59565b60138152602081017f65787069726564207472616e73616374696f6e00000000000000000000000000815290505b60200190565b6020808252810161105881611d85565b60408101611dd78285611c88565b6119796020830184611c88565b805161105881611a72565b600060208284031215611e0457611e04600080fd5b60006119628484611de4565b60268152602081017f5468697320706f6f6c20686173206265656e2066726f7a656e20666f7220737781527f617070696e670000000000000000000000000000000000000000000000000000602082015290505b60400190565b6020808252810161105881611e10565b60178152602081017f657863657373697665206f757470757420616d6f756e7400000000000000000081529050611db3565b6020808252810161105881611e7a565b60168152602081017f65786365737369766520696e70757420616d6f756e740000000000000000000081529050611db3565b6020808252810161105881611ebc565b601c8152602081017f546f6b656e20422073686f756c6420626520737461626c65636f696e0000000081529050611db3565b6020808252810161105881611efe565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152611db3565b6020808252810161105881611f40565b602e8152602081017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181527f647920696e697469616c697a656400000000000000000000000000000000000060208201529050611e64565b6020808252810161105881611f80565b60008060408385031215611ffe57611ffe600080fd5b600061200a8585611de4565b9250506020611c7e85828601611de4565b60238152602081017f496e73756666696369656e7420696e737572616e636520746f6b656e20616d6f81527f756e74000000000000000000000000000000000000000000000000000000000060208201529050611e64565b602080825281016110588161201b565b60178152602081017f496e73756666696369656e74205553445420746f6b656e00000000000000000081529050611db3565b6020808252810161105881612083565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529050611e64565b60208082528101611058816120c5565b801515611a74565b80516110588161212d565b60006020828403121561215557612155600080fd5b60006119628484612135565b60198152602081017f696e73756666696369656e7420696e70757420616d6f756e740000000000000081529050611db3565b6020808252810161105881612161565b60168152602081017f696e73756666696369656e74206c69717569646974790000000000000000000081529050611db3565b60208082528101611058816121a3565b634e487b7160e01b600052601160045260246000fd5b60008282101561220d5761220d6121e5565b500390565b600081600019048311821515161561222c5761222c6121e5565b500290565b60008219821115612244576122446121e5565b500190565b634e487b7160e01b600052601260045260246000fd5b60008261226e5761226e612249565b500490565b60ff8116611a74565b805161105881612273565b60006020828403121561229c5761229c600080fd5b6000611962848461227c565b80825b60018511156122e7578086048111156122c6576122c66121e5565b60018516156122d457908102905b80026122e08560011c90565b94506122ab565b94509492505050565b6000826122ff57506001611979565b8161230c57506000611979565b8160018114612322576002811461232c57612359565b6001915050611979565b60ff84111561233d5761233d6121e5565b8360020a915084821115612353576123536121e5565b50611979565b5060208310610133831016604e8410600b841016171561238c575081810a83811115612387576123876121e5565b611979565b61239984848460016122a8565b925090508184048111156123af576123af6121e5565b0292915050565b600061197960001984846122f0565b60408101611d4c8285611c88565b606081016123e18286611b39565b6123ee6020830185611b39565b6119626040830184611c88565b601a8152602081017f696e73756666696369656e74206f757470757420616d6f756e7400000000000081529050611db3565b60208082528101611058816123fb565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156124795761247961243d565b6040525050565b600061248b60405190565b90506124978282612453565b919050565b600067ffffffffffffffff8211156124b6576124b661243d565b601f19601f83011660200192915050565b60005b838110156124e25781810151838201526020016124ca565b838111156111665750506000910152565b60006125066125018461249c565b612480565b90508281526020810184848401111561252157612521600080fd5b61252c8482856124c7565b509392505050565b600082601f83011261254857612548600080fd5b81516119628482602086016124f3565b60006020828403121561256d5761256d600080fd5b815167ffffffffffffffff81111561258757612587600080fd5b61196284828501612534565b600061259d825190565b8084526020840193506125b48185602086016124c7565b601f01601f19169290920192915050565b608080825281016125d68187612593565b90506125e56020830186611c88565b6125f26040830185611b39565b6125ff6060830184611c88565b95945050505050565b602b8152602081017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981527f6e697469616c697a696e6700000000000000000000000000000000000000000060208201529050611e64565b6020808252810161105881612608565b6060810161267e8286611c88565b611c1d6020830185611c88565b601f8152602081017f506c656173652070757420737461626c65636f696e20617320746f6b656e420081529050611db3565b602080825281016110588161268b565b60158152602081017f494e53554646494349454e545f425f414d4f554e54000000000000000000000081529050611db3565b60208082528101611058816126cd565b60068152602081017f6e6f6e6f6e6f000000000000000000000000000000000000000000000000000081529050611db3565b602080825281016110588161270f565b60158152602081017f494e53554646494349454e545f415f414d4f554e54000000000000000000000081529050611db3565b6020808252810161105881612751565b6dffffffffffffffffffffffffffff8116611a74565b805161105881612793565b600080604083850312156127ca576127ca600080fd5b60006127d685856127a9565b9250506020611c7e858286016127a9565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f7420737563636565640000000000000000000000000000000000000000000060208201529050611e64565b60208082528101611058816127e7565b60138152602081017f696e73756666696369656e7420616d6f756e740000000000000000000000000081529050611db3565b602080825281016110588161284f565b60268152602081017f416464726573733a20696e73756666696369656e742062616c616e636520666f81527f722063616c6c000000000000000000000000000000000000000000000000000060208201529050611e64565b6020808252810161105881612891565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529050611db3565b60208082528101611058816128f9565b6000612945825190565b6129538185602086016124c7565b9290920192915050565b611058818361293b565b60208082528101611979818461259356fea2646970667358221220b66fa3699abe930401644ba504a383ae1d5d79faf6de1c461144ae9a06540a4e64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "params": {
          "_amountADesired": "Amount of policyToken desired",
          "_amountAMin": "Minimum amoutn of policy token",
          "_amountBDesired": "Amount of stablecoin desired",
          "_amountBMin": "Minimum amount of stablecoin",
          "_deadline": "Transaction will revert after this deadline",
          "_to": "Address that receive the lp token, normally the user himself",
          "_tokenA": "Address of policyToken",
          "_tokenB": "Address of stablecoin"
        },
        "returns": {
          "amountA": "Amount of tokenA to be input",
          "amountB": "Amount of tokenB to be input",
          "liquidity": "LP token to be mint"
        }
      },
      "addLiquidityWithUSD(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "details": "Only difference with addLiquidity is that mintPolicyTokenForUser",
        "params": {
          "_amountADesired": "Amount of policyToken desired",
          "_amountAMin": "Minimum amount of policy token",
          "_amountBDesired": "Amount of stablecoin desired",
          "_amountBMin": "Minimum amount of stablecoin",
          "_deadline": "Transaction will revert after this deadline",
          "_to": "Address that receive the lp token, normally the user himself",
          "_tokenA": "Address of policyToken",
          "_tokenB": "Address of stablecoin"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "params": {
          "_amountAMin": "Minimum amount of tokenA given out",
          "_amountBMin": "Minimum amount of tokenB given out",
          "_deadline": "Deadline of this transaction",
          "_liquidity": "The lptoken amount to be removed",
          "_to": "User address",
          "_tokenA": "Address of policy token",
          "_tokenB": "Address of stablecoin"
        },
        "returns": {
          "amountA": "Amount of token0 given out",
          "amountB": "Amount of token1 given out"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBuyerToken(address)": {
        "params": {
          "_buyerToken": "Address of new buyer token"
        }
      },
      "setNaughtyFactory(address)": {
        "params": {
          "_naughtyFactory": "Address of new naughty factory"
        }
      },
      "setPolicyCore(address)": {
        "params": {
          "_coreAddress": "Address of new policyCore"
        }
      },
      "swapExactTokensforTokens(uint256,uint256,address,address,address,uint256)": {
        "params": {
          "_amountIn": "Fixed token input",
          "_amountOutMin": "Minimum token output",
          "_deadline": "Deadline for this specific swap",
          "_to": "User address",
          "_tokenIn": "Address of input token",
          "_tokenOut": "Address of output token"
        },
        "returns": {
          "amountOut": "Amounts to be really given out"
        }
      },
      "swapTokensforExactTokens(uint256,uint256,address,address,address,uint256)": {
        "params": {
          "_amountInMax": "Maximum token input",
          "_amountOut": "Fixed token output",
          "_deadline": "Deadline for this specific swap",
          "_to": "User address",
          "_tokenIn": "Address of input token",
          "_tokenOut": "Address of output token"
        },
        "returns": {
          "amountIn": "Amounts to be really put in"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "NaughtyRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "notice": "Add liquidity function"
      },
      "addLiquidityWithUSD(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "notice": "Add liquidity but only provide stablecoins"
      },
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Remove liquidity from the pool"
      },
      "setBuyerToken(address)": {
        "notice": "Set the address of buyer token"
      },
      "setNaughtyFactory(address)": {
        "notice": "Set the address of factory"
      },
      "setPolicyCore(address)": {
        "notice": "Set the address of policyCore"
      },
      "swapExactTokensforTokens(uint256,uint256,address,address,address,uint256)": {
        "notice": "Amount in is fixed"
      },
      "swapTokensforExactTokens(uint256,uint256,address,address,address,uint256)": {
        "notice": "Amount out is fixed"
      }
    },
    "notice": "Router for the pool, you can add/remove liquidity or swap A for B.         Swapping fee rate is 2% and all of them are given to LP.         Very similar logic with Uniswap V2.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 323,
        "contract": "contracts/naughty-price/NaughtyRouter.sol:NaughtyRouter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 326,
        "contract": "contracts/naughty-price/NaughtyRouter.sol:NaughtyRouter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1560,
        "contract": "contracts/naughty-price/NaughtyRouter.sol:NaughtyRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 203,
        "contract": "contracts/naughty-price/NaughtyRouter.sol:NaughtyRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 315,
        "contract": "contracts/naughty-price/NaughtyRouter.sol:NaughtyRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 20248,
        "contract": "contracts/naughty-price/NaughtyRouter.sol:NaughtyRouter",
        "label": "factory",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 20250,
        "contract": "contracts/naughty-price/NaughtyRouter.sol:NaughtyRouter",
        "label": "policyCore",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 20252,
        "contract": "contracts/naughty-price/NaughtyRouter.sol:NaughtyRouter",
        "label": "buyerToken",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}