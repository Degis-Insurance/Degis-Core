{
  "address": "0x94Fc6027cCb4Be1A97d818Acbf6304a274e8b2b5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basicDegisPerSecond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bonusDegisPerSecond",
          "type": "uint256"
        }
      ],
      "name": "DegisRewardChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FarmingPoolStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FarmingPoolStopped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pendingReward",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basicDegisPerSecond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bonusDegisPerSecond",
          "type": "uint256"
        }
      ],
      "name": "NewPoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accDegisPerShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accDegisPerBonusShare",
          "type": "uint256"
        }
      ],
      "name": "PoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        }
      ],
      "name": "StartTimestampChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_nextPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_basicDegisPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bonusDegisPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "degis",
      "outputs": [
        {
          "internalType": "contract IDegisToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "extraClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "basicDegisPerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bonusDegisPerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accDegisPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accDegisPerBonusShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBonus",
              "type": "uint256"
            }
          ],
          "internalType": "struct FarmingPoolUpgradeable.PoolInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_degis",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isFarming",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingDegis",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolList",
      "outputs": [
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "basicDegisPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bonusDegisPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accDegisPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accDegisPerBonusShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBonus",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_basicDegisPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bonusDegisPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "setDegisReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setStartTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_veDEG",
          "type": "address"
        }
      ],
      "name": "setVeDEG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newVeDEGBalance",
          "type": "uint256"
        }
      ],
      "name": "updateBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bonus",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veDEG",
      "outputs": [
        {
          "internalType": "contract IVeDEG",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x352f7e8a07f2bc80ca0ca036a772e324af7e65dd0f37b376d74dfbdcfde8fbaa",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x94Fc6027cCb4Be1A97d818Acbf6304a274e8b2b5",
    "transactionIndex": 21,
    "gasUsed": "2817591",
    "logsBloom": "0x
    "blockHash": "0xa1bc67c6414c7a2d3ba348f6e6f6b70a066c84cc459fecf216d5022cf0747b65",
    "transactionHash": "0x352f7e8a07f2bc80ca0ca036a772e324af7e65dd0f37b376d74dfbdcfde8fbaa",
    "logs": [],
    "blockNumber": 13186791,
    "cumulativeGasUsed": "7521568",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d173db50e1168ac14c76eda97f15d3ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basicDegisPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusDegisPerSecond\",\"type\":\"uint256\"}],\"name\":\"DegisRewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FarmingPoolStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FarmingPoolStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basicDegisPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusDegisPerSecond\",\"type\":\"uint256\"}],\"name\":\"NewPoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accDegisPerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accDegisPerBonusShare\",\"type\":\"uint256\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"}],\"name\":\"StartTimestampChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nextPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_basicDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"degis\",\"outputs\":[{\"internalType\":\"contract IDegisToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"extraClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basicDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDegisPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDegisPerBonusShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"}],\"internalType\":\"struct FarmingPoolUpgradeable.PoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_degis\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isFarming\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingDegis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basicDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDegisPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDegisPerBonusShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basicDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusDegisPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setDegisReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"}],\"name\":\"setStartTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_veDEG\",\"type\":\"address\"}],\"name\":\"setVeDEG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newVeDEGBalance\",\"type\":\"uint256\"}],\"name\":\"updateBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veDEG\",\"outputs\":[{\"internalType\":\"contract IVeDEG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool id starts from 1 rather than 0         The degis reward is calculated by timestamp rather than block number         VeDEG will boost the farming speed by having a extra reward type         The extra reward is shared by those staking lptokens with veDEG balances         Every time the veDEG balance change, the reward will be updated\",\"kind\":\"dev\",\"methods\":{\"add(address,uint256,uint256,bool)\":{\"details\":\"Can only be called by the owner      The reward speed can be 0 and set later by setDegisReward function\",\"params\":{\"_basicDegisPerSecond\":\"Basic reward speed(per second) for this new pool\",\"_bonusDegisPerSecond\":\"Bonus reward speed(per second) for this new pool\",\"_lpToken\":\"LP token address\",\"_withUpdate\":\"Whether update all pools' status\"}},\"getPoolList()\":{\"returns\":{\"_0\":\"pooList Total pool list\"}},\"getUserBalance(uint256,address)\":{\"params\":{\"_poolId\":\"Id of the pool\",\"_user\":\"User address\"},\"returns\":{\"_0\":\"balance User's balance (lpToken)\"}},\"harvest(uint256,address)\":{\"params\":{\"_poolId\":\"Id of the farming pool\",\"_to\":\"Receiver of degis rewards\"}},\"massUpdatePools()\":{\"details\":\"Can be called by anyone      Only update those active pools\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingDegis(uint256,address)\":{\"params\":{\"_poolId\":\"PoolId of this farming pool\",\"_user\":\"User address\"},\"returns\":{\"_0\":\"pendingDegisAmount Amount of pending degis\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDegisReward(uint256,uint256,uint256,bool)\":{\"params\":{\"_basicDegisPerSecond\":\"New basic reward amount per second\",\"_bonusDegisPerSecond\":\"New bonus reward amount per second\",\"_poolId\":\"Id of the farming pool\",\"_withUpdate\":\"Whether update all pools\"}},\"setStartTimestamp(uint256)\":{\"params\":{\"_startTimestamp\":\"New start block timestamp\"}},\"stake(uint256,uint256)\":{\"details\":\"Can only stake to the pools that are still farming\",\"params\":{\"_amount\":\"Staking amount\",\"_poolId\":\"Id of the farming pool\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBonus(address,uint256)\":{\"details\":\"When veDEG has balance change      Only called by veDEG contract\",\"params\":{\"_newVeDEGBalance\":\"New veDEG balance\",\"_user\":\"User address\"}},\"updatePool(uint256)\":{\"params\":{\"_poolId\":\"Id of the farming pool\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of lp tokens to withdraw\",\"_poolId\":\"Id of the farming pool\"}}},\"title\":\"Farming Pool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add(address,uint256,uint256,bool)\":{\"notice\":\"Add a new lp into the pool\"},\"getPoolList()\":{\"notice\":\"Get the total pool list\"},\"getUserBalance(uint256,address)\":{\"notice\":\"Get a user's balance\"},\"harvest(uint256,address)\":{\"notice\":\"Harvest the degis reward and can be sent to another address\"},\"massUpdatePools()\":{\"notice\":\"Update all farming pools (except for those stopped ones)\"},\"pendingDegis(uint256,address)\":{\"notice\":\"Check the amount of pending degis reward\"},\"setDegisReward(uint256,uint256,uint256,bool)\":{\"notice\":\"Update the degisPerSecond for a specific pool (set to 0 to stop farming)\"},\"setStartTimestamp(uint256)\":{\"notice\":\"Set the start block timestamp\"},\"stake(uint256,uint256)\":{\"notice\":\"Stake LP token into the farming pool\"},\"updateBonus(address,uint256)\":{\"notice\":\"Update a user's bonus\"},\"updatePool(uint256)\":{\"notice\":\"Update the pool's reward status\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw lptoken from the pool\"}},\"notice\":\"This contract is for LPToken mining on Degis\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farming/FarmingPoolUpgradeable.sol\":\"FarmingPoolUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe7713f1b362f8b80e28d5a7e8b66c3f2236203fd86d01eca0a29a9e6a3f4d97f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"contracts/farming/FarmingPoolUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n    *******         **********     ***********     *****     ***********\\n    *      *        *              *                 *       *\\n    *        *      *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     **********     *       *****     *       ***********\\n    *         *     *              *         *       *                 *\\n    *         *     *              *         *       *                 *\\n    *        *      *              *         *       *                 *\\n    *      *        *              *         *       *                 *\\n    *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IDegisToken} from \\\"../tokens/interfaces/IDegisToken.sol\\\";\\nimport {Math} from \\\"../libraries/Math.sol\\\";\\nimport {IVeDEG} from \\\"../governance/interfaces/IVeDEG.sol\\\";\\n\\n/**\\n * @title  Farming Pool\\n * @notice This contract is for LPToken mining on Degis\\n * @dev    The pool id starts from 1 rather than 0\\n *         The degis reward is calculated by timestamp rather than block number\\n *\\n *         VeDEG will boost the farming speed by having a extra reward type\\n *         The extra reward is shared by those staking lptokens with veDEG balances\\n *         Every time the veDEG balance change, the reward will be updated\\n */\\ncontract FarmingPoolUpgradeable is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IDegisToken;\\n    using Math for uint256;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    string public constant name = \\\"Degis LP Farming Pool\\\";\\n\\n    // The reward token is degis\\n    IDegisToken public degis;\\n\\n    // The bonus reward depends on veDEG\\n    IVeDEG public veDEG;\\n\\n    // SCALE/Precision used for calculating rewards\\n    uint256 public constant SCALE = 1e12;\\n\\n    // PoolId starts from 1\\n    uint256 public _nextPoolId;\\n\\n    // Farming starts from a certain block timestamp\\n    // To keep the same with naughty price pools, we change from block numbers to timestamps\\n    uint256 public startTimestamp;\\n\\n    struct PoolInfo {\\n        address lpToken; // LPToken address\\n        uint256 basicDegisPerSecond; // Basic Reward speed\\n        uint256 bonusDegisPerSecond; // Bonus reward speed\\n        uint256 lastRewardTimestamp; // Last reward timestamp\\n        uint256 accDegisPerShare; // Accumulated degis per share (for those without veDEG boosting)\\n        uint256 accDegisPerBonusShare; // Accumulated degis per bonus share (for those with veDEG boosting)\\n        uint256 totalBonus; // Total bonus factors\\n    }\\n    PoolInfo[] public poolList;\\n\\n    // lptoken address => poolId\\n    mapping(address => uint256) public poolMapping;\\n\\n    // poolId => alreadyFarming\\n    mapping(uint256 => bool) public isFarming;\\n\\n    struct UserInfo {\\n        uint256 rewardDebt; // degis reward debt\\n        uint256 stakingBalance; // the amount of a user's staking in the pool\\n        uint256 bonus; // user bonus point (by veDEG balance)\\n    }\\n    // poolId => userAddress => userInfo\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    mapping(uint256 => mapping(address => uint256)) public extraClaimable;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event StartTimestampChanged(uint256 startTimestamp);\\n    event Stake(address staker, uint256 poolId, uint256 amount);\\n    event Withdraw(address staker, uint256 poolId, uint256 amount);\\n    event Harvest(\\n        address staker,\\n        address rewardReceiver,\\n        uint256 poolId,\\n        uint256 pendingReward\\n    );\\n    event NewPoolAdded(\\n        address lpToken,\\n        uint256 basicDegisPerSecond,\\n        uint256 bonusDegisPerSecond\\n    );\\n    event FarmingPoolStarted(uint256 poolId, uint256 timestamp);\\n    event FarmingPoolStopped(uint256 poolId, uint256 timestamp);\\n    event DegisRewardChanged(\\n        uint256 poolId,\\n        uint256 basicDegisPerSecond,\\n        uint256 bonusDegisPerSecond\\n    );\\n    event PoolUpdated(\\n        uint256 poolId,\\n        uint256 accDegisPerShare,\\n        uint256 accDegisPerBonusShare\\n    );\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function initialize(address _degis) public initializer {\\n        require(_degis != address(0), \\\"Zero address\\\");\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        degis = IDegisToken(_degis);\\n\\n        // Start from 1\\n        _nextPoolId = 1;\\n\\n        poolList.push(\\n            PoolInfo({\\n                lpToken: address(0),\\n                basicDegisPerSecond: 0,\\n                bonusDegisPerSecond: 0,\\n                lastRewardTimestamp: 0,\\n                accDegisPerShare: 0,\\n                accDegisPerBonusShare: 0,\\n                totalBonus: 0\\n            })\\n        );\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice The address can not be zero\\n     */\\n    modifier notZeroAddress(address _address) {\\n        require(_address != address(0), \\\"Zero address\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice The pool is still in farming\\n     */\\n    modifier stillFarming(uint256 _poolId) {\\n        require(isFarming[_poolId], \\\"Pool is not farming\\\");\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** View Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Check the amount of pending degis reward\\n     * @param _poolId PoolId of this farming pool\\n     * @param _user User address\\n     * @return pendingDegisAmount Amount of pending degis\\n     */\\n    function pendingDegis(uint256 _poolId, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo memory poolInfo = poolList[_poolId];\\n\\n        if (\\n            poolInfo.lastRewardTimestamp == 0 ||\\n            block.timestamp < poolInfo.lastRewardTimestamp ||\\n            block.timestamp < startTimestamp\\n        ) return 0;\\n\\n        UserInfo memory user = userInfo[_poolId][_user];\\n\\n        // Total lp token balance\\n        uint256 lp_balance = IERC20(poolInfo.lpToken).balanceOf(address(this));\\n\\n        // Accumulated shares to be calculated\\n        uint256 accDegisPerShare = poolInfo.accDegisPerShare;\\n        uint256 accDegisPerBonusShare = poolInfo.accDegisPerBonusShare;\\n\\n        if (lp_balance == 0) return 0;\\n        else {\\n            // If the pool is still farming, update the info\\n            if (isFarming[_poolId]) {\\n                // Deigs amount given to this pool\\n                uint256 timePassed = block.timestamp -\\n                    poolInfo.lastRewardTimestamp;\\n                uint256 basicReward = poolInfo.basicDegisPerSecond * timePassed;\\n                // Update accDegisPerShare\\n                // LPToken may have different decimals\\n                accDegisPerShare += (basicReward * SCALE) / lp_balance;\\n\\n                // If there is any bonus reward\\n                if (poolInfo.totalBonus > 0) {\\n                    uint256 bonusReward = poolInfo.bonusDegisPerSecond *\\n                        timePassed;\\n                    accDegisPerBonusShare +=\\n                        (bonusReward * SCALE) /\\n                        poolInfo.totalBonus;\\n                }\\n            }\\n\\n            // If the pool has stopped, not update the info\\n            uint256 pending = (user.stakingBalance *\\n                accDegisPerShare +\\n                user.bonus *\\n                accDegisPerBonusShare) /\\n                SCALE +\\n                extraClaimable[_poolId][_user] -\\n                user.rewardDebt;\\n\\n            return pending;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the total pool list\\n     * @return pooList Total pool list\\n     */\\n    function getPoolList() external view returns (PoolInfo[] memory) {\\n        return poolList;\\n    }\\n\\n    /**\\n     * @notice Get a user's balance\\n     * @param _poolId Id of the pool\\n     * @param _user User address\\n     * @return balance User's balance (lpToken)\\n     */\\n    function getUserBalance(uint256 _poolId, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return userInfo[_poolId][_user].stakingBalance;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Set Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setVeDEG(address _veDEG) external onlyOwner {\\n        veDEG = IVeDEG(_veDEG);\\n    }\\n\\n    /**\\n     * @notice Set the start block timestamp\\n     * @param _startTimestamp New start block timestamp\\n     */\\n    function setStartTimestamp(uint256 _startTimestamp)\\n        external\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        // Can only be set before any pool is added\\n        require(\\n            _nextPoolId == 1,\\n            \\\"Can not set start timestamp after adding a pool\\\"\\n        );\\n\\n        startTimestamp = _startTimestamp;\\n        emit StartTimestampChanged(_startTimestamp);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Main Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Add a new lp into the pool\\n     * @dev Can only be called by the owner\\n     *      The reward speed can be 0 and set later by setDegisReward function\\n     * @param _lpToken LP token address\\n     * @param _basicDegisPerSecond Basic reward speed(per second) for this new pool\\n     * @param _bonusDegisPerSecond Bonus reward speed(per second) for this new pool\\n     * @param _withUpdate Whether update all pools' status\\n     */\\n    function add(\\n        address _lpToken,\\n        uint256 _basicDegisPerSecond,\\n        uint256 _bonusDegisPerSecond,\\n        bool _withUpdate\\n    ) public notZeroAddress(_lpToken) onlyOwner whenNotPaused {\\n        // Check if already exists, if the poolId is 0, that means not in the pool\\n        require(!_alreadyInPool(_lpToken), \\\"Already in the pool\\\");\\n\\n        if (_bonusDegisPerSecond > 0)\\n            require(_basicDegisPerSecond > 0, \\\"Only bonus\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\\n            ? block.timestamp\\n            : startTimestamp;\\n\\n        // Push this new pool into the list\\n        poolList.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                basicDegisPerSecond: _basicDegisPerSecond,\\n                bonusDegisPerSecond: _bonusDegisPerSecond,\\n                lastRewardTimestamp: lastRewardTimestamp,\\n                accDegisPerShare: 0,\\n                accDegisPerBonusShare: 0,\\n                totalBonus: 0\\n            })\\n        );\\n\\n        // Store the poolId and set the farming status to true\\n        if (_basicDegisPerSecond > 0) isFarming[_nextPoolId] = true;\\n\\n        poolMapping[_lpToken] = _nextPoolId++;\\n\\n        emit NewPoolAdded(_lpToken, _basicDegisPerSecond, _bonusDegisPerSecond);\\n    }\\n\\n    /**\\n     * @notice Update the degisPerSecond for a specific pool (set to 0 to stop farming)\\n     * @param _poolId Id of the farming pool\\n     * @param _basicDegisPerSecond New basic reward amount per second\\n     * @param _bonusDegisPerSecond New bonus reward amount per second\\n     * @param _withUpdate Whether update all pools\\n     */\\n    function setDegisReward(\\n        uint256 _poolId,\\n        uint256 _basicDegisPerSecond,\\n        uint256 _bonusDegisPerSecond,\\n        bool _withUpdate\\n    ) public onlyOwner whenNotPaused {\\n        // Ensure there already exists this pool\\n        require(poolList[_poolId].lastRewardTimestamp != 0, \\\"Pool not exists\\\");\\n\\n        if (_bonusDegisPerSecond > 0)\\n            require(_basicDegisPerSecond > 0, \\\"Only bonus\\\");\\n\\n        if (_withUpdate) massUpdatePools();\\n        else updatePool(_poolId);\\n\\n        // Not farming now + reward > 0 => Restart\\n        if (isFarming[_poolId] == false && _basicDegisPerSecond > 0) {\\n            isFarming[_poolId] = true;\\n            emit FarmingPoolStarted(_poolId, block.timestamp);\\n        }\\n\\n        if (_basicDegisPerSecond == 0) {\\n            isFarming[_poolId] = false;\\n            emit FarmingPoolStopped(_poolId, block.timestamp);\\n        } else {\\n            poolList[_poolId].basicDegisPerSecond = _basicDegisPerSecond;\\n            poolList[_poolId].bonusDegisPerSecond = _bonusDegisPerSecond;\\n            emit DegisRewardChanged(\\n                _poolId,\\n                _basicDegisPerSecond,\\n                _bonusDegisPerSecond\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Stake LP token into the farming pool\\n     * @dev Can only stake to the pools that are still farming\\n     * @param _poolId Id of the farming pool\\n     * @param _amount Staking amount\\n     */\\n    function stake(uint256 _poolId, uint256 _amount)\\n        public\\n        nonReentrant\\n        whenNotPaused\\n        stillFarming(_poolId)\\n    {\\n        require(_amount > 0, \\\"Can not stake zero\\\");\\n\\n        PoolInfo storage pool = poolList[_poolId];\\n        UserInfo storage user = userInfo[_poolId][msg.sender];\\n\\n        // Must update first\\n        updatePool(_poolId);\\n\\n        // First distribute the reward if exists\\n        if (user.stakingBalance > 0) {\\n            uint256 pending = (user.stakingBalance *\\n                pool.accDegisPerShare +\\n                user.bonus *\\n                pool.accDegisPerBonusShare) /\\n                SCALE +\\n                extraClaimable[_poolId][msg.sender] -\\n                user.rewardDebt;\\n\\n            // Clear the extra record (has been distributed)\\n            extraClaimable[_poolId][msg.sender] = 0;\\n\\n            // Real reward amount by safe transfer\\n            uint256 reward = _safeDegisTransfer(msg.sender, pending);\\n            emit Harvest(msg.sender, msg.sender, _poolId, reward);\\n        }\\n\\n        // Actual deposit amount\\n        uint256 actualAmount = _safeLPTransfer(\\n            false,\\n            pool.lpToken,\\n            msg.sender,\\n            _amount\\n        );\\n\\n        user.stakingBalance += actualAmount;\\n\\n        if (address(veDEG) != address(0)) {\\n            // Update the user's bonus if veDEG boosting is on\\n            uint256 oldBonus = user.bonus;\\n            user.bonus = (user.stakingBalance * veDEG.balanceOf(msg.sender))\\n                .sqrt();\\n            // Update the pool's total bonus\\n            pool.totalBonus = pool.totalBonus + user.bonus - oldBonus;\\n        }\\n\\n        user.rewardDebt =\\n            (user.stakingBalance *\\n                pool.accDegisPerShare +\\n                user.bonus *\\n                pool.accDegisPerBonusShare) /\\n            SCALE;\\n\\n        emit Stake(msg.sender, _poolId, actualAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw lptoken from the pool\\n     * @param _poolId Id of the farming pool\\n     * @param _amount Amount of lp tokens to withdraw\\n     */\\n    function withdraw(uint256 _poolId, uint256 _amount)\\n        public\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(_amount > 0, \\\"Zero amount\\\");\\n\\n        PoolInfo storage pool = poolList[_poolId];\\n        UserInfo storage user = userInfo[_poolId][msg.sender];\\n\\n        require(user.stakingBalance >= _amount, \\\"Not enough stakingBalance\\\");\\n\\n        // Update if the pool is still farming\\n        // Users can withdraw even after the pool stopped\\n        if (isFarming[_poolId]) updatePool(_poolId);\\n\\n        uint256 pending = (user.stakingBalance *\\n            pool.accDegisPerShare +\\n            user.bonus *\\n            pool.accDegisPerBonusShare) /\\n            SCALE +\\n            extraClaimable[_poolId][msg.sender] -\\n            user.rewardDebt;\\n\\n        // Clear the extra record (has been distributed)\\n        extraClaimable[_poolId][msg.sender] = 0;\\n\\n        // Real reward amount by safe transfer\\n        uint256 reward = _safeDegisTransfer(msg.sender, pending);\\n        emit Harvest(msg.sender, msg.sender, _poolId, reward);\\n\\n        uint256 actualAmount = _safeLPTransfer(\\n            true,\\n            pool.lpToken,\\n            msg.sender,\\n            _amount\\n        );\\n\\n        user.stakingBalance -= actualAmount;\\n\\n        // Update the user's bonus when veDEG boosting is on\\n        if (address(veDEG) != address(0)) {\\n            uint256 oldBonus = user.bonus;\\n            user.bonus = (user.stakingBalance * veDEG.balanceOf(msg.sender))\\n                .sqrt();\\n            // Update the pool's total bonus\\n            pool.totalBonus = pool.totalBonus + user.bonus - oldBonus;\\n        }\\n\\n        user.rewardDebt =\\n            (user.stakingBalance *\\n                pool.accDegisPerShare +\\n                user.bonus *\\n                pool.accDegisPerBonusShare) /\\n            SCALE;\\n\\n        emit Withdraw(msg.sender, _poolId, actualAmount);\\n    }\\n\\n    /**\\n     * @notice Harvest the degis reward and can be sent to another address\\n     * @param _poolId Id of the farming pool\\n     * @param _to Receiver of degis rewards\\n     */\\n    function harvest(uint256 _poolId, address _to)\\n        public\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        // Only update the pool when it is still in farming\\n        if (isFarming[_poolId]) updatePool(_poolId);\\n\\n        PoolInfo memory pool = poolList[_poolId];\\n        UserInfo storage user = userInfo[_poolId][msg.sender];\\n\\n        uint256 pendingReward = (user.stakingBalance *\\n            pool.accDegisPerShare +\\n            user.bonus *\\n            pool.accDegisPerBonusShare) /\\n            SCALE +\\n            extraClaimable[_poolId][msg.sender] -\\n            user.rewardDebt;\\n\\n        require(pendingReward > 0, \\\"No pending reward\\\");\\n\\n        // Update the reward debt\\n        user.rewardDebt =\\n            (user.stakingBalance *\\n                pool.accDegisPerShare +\\n                user.bonus *\\n                pool.accDegisPerBonusShare) /\\n            SCALE;\\n\\n        // Transfer the reward\\n        uint256 reward = _safeDegisTransfer(_to, pendingReward);\\n\\n        emit Harvest(msg.sender, _to, _poolId, reward);\\n    }\\n\\n    /**\\n     * @notice Update the pool's reward status\\n     * @param _poolId Id of the farming pool\\n     */\\n    function updatePool(uint256 _poolId) public {\\n        PoolInfo storage pool = poolList[_poolId];\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));\\n\\n        // No LP deposited, then just update the lastRewardTimestamp\\n        if (lpSupply == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 timePassed = block.timestamp - pool.lastRewardTimestamp;\\n\\n        uint256 basicReward = timePassed * pool.basicDegisPerSecond;\\n        uint256 bonusReward = timePassed * pool.bonusDegisPerSecond;\\n\\n        pool.accDegisPerShare += (basicReward * SCALE) / lpSupply;\\n\\n        if (pool.totalBonus == 0) {\\n            pool.accDegisPerBonusShare = 0;\\n        } else {\\n            pool.accDegisPerBonusShare +=\\n                (bonusReward * SCALE) /\\n                pool.totalBonus;\\n        }\\n\\n        // Don't forget to set the farming pool as minter\\n        degis.mintDegis(address(this), basicReward + bonusReward);\\n\\n        pool.lastRewardTimestamp = block.timestamp;\\n\\n        emit PoolUpdated(\\n            _poolId,\\n            pool.accDegisPerShare,\\n            pool.accDegisPerBonusShare\\n        );\\n    }\\n\\n    /**\\n     * @notice Update all farming pools (except for those stopped ones)\\n     * @dev Can be called by anyone\\n     *      Only update those active pools\\n     */\\n    function massUpdatePools() public {\\n        uint256 length = poolList.length;\\n        for (uint256 poolId; poolId < length; poolId++) {\\n            if (isFarming[poolId] == false) continue;\\n            else updatePool(poolId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update a user's bonus\\n     * @dev When veDEG has balance change\\n     *      Only called by veDEG contract\\n     * @param _user User address\\n     * @param _newVeDEGBalance New veDEG balance\\n     */\\n    function updateBonus(address _user, uint256 _newVeDEGBalance) external {\\n        require(msg.sender == address(veDEG), \\\"Only veDEG contract\\\");\\n\\n        // loop over each pool : beware gas cost!\\n        uint256 length = poolList.length;\\n\\n        for (uint256 poolId; poolId < length; ++poolId) {\\n            // Skip if the pool is not farming\\n            if (!isFarming[poolId]) continue;\\n\\n            UserInfo storage user = userInfo[poolId][_user];\\n            // Skip if user doesn't have any deposit in the pool\\n            if (user.stakingBalance == 0) continue;\\n\\n            PoolInfo storage pool = poolList[poolId];\\n\\n            // first, update pool\\n            updatePool(poolId);\\n\\n            // Update the extra claimable amount\\n            uint256 pending = (user.stakingBalance *\\n                pool.accDegisPerShare +\\n                user.bonus *\\n                pool.accDegisPerBonusShare) /\\n                SCALE -\\n                user.rewardDebt;\\n            extraClaimable[poolId][_user] += pending;\\n\\n            // get oldFactor\\n            uint256 oldFactor = user.bonus; // get old factor\\n            // calculate newFactor\\n            uint256 newFactor = (_newVeDEGBalance * user.stakingBalance).sqrt();\\n            // update user factor\\n            user.bonus = newFactor;\\n            // update reward debt, take into account newFactor\\n            user.rewardDebt =\\n                (user.stakingBalance *\\n                    pool.accDegisPerShare +\\n                    newFactor *\\n                    pool.accDegisPerBonusShare) /\\n                SCALE;\\n\\n            // Update the pool's total bonus\\n            pool.totalBonus = pool.totalBonus + newFactor - oldFactor;\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ********************************** Internal Functions ********************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Check if a lptoken has been added into the pool before\\n     * @dev This can also be written as a modifier\\n     * @param _lpToken LP token address\\n     * @return _isInPool Wether this lp is already in pool\\n     */\\n    function _alreadyInPool(address _lpToken)\\n        internal\\n        view\\n        returns (bool _isInPool)\\n    {\\n        uint256 poolId = poolMapping[_lpToken];\\n\\n        _isInPool = (poolId != 0) ? true : false;\\n    }\\n\\n    /**\\n     * @notice Safe degis transfer (check if the pool has enough DEGIS token)\\n     * @param _to User's address\\n     * @param _amount Amount to transfer\\n     */\\n    function _safeDegisTransfer(address _to, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 poolDegisBalance = degis.balanceOf(address(this));\\n        require(poolDegisBalance > 0, \\\"No Degis token in the pool\\\");\\n\\n        if (_amount > poolDegisBalance) {\\n            degis.safeTransfer(_to, poolDegisBalance);\\n            return (poolDegisBalance);\\n        } else {\\n            degis.safeTransfer(_to, _amount);\\n            return _amount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Finish the transfer of LP Token\\n     * @dev The lp token may have loss during transfer\\n     * @param _out Whether the lp token is out\\n     * @param _lpToken LP token address\\n     * @param _user User address\\n     * @param _amount Amount of lp tokens\\n     */\\n    function _safeLPTransfer(\\n        bool _out,\\n        address _lpToken,\\n        address _user,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        uint256 poolBalanceBefore = IERC20(_lpToken).balanceOf(address(this));\\n\\n        if (_out) IERC20(_lpToken).safeTransfer(_user, _amount);\\n        else IERC20(_lpToken).safeTransferFrom(_user, address(this), _amount);\\n\\n        uint256 poolBalanceAfter = IERC20(_lpToken).balanceOf(address(this));\\n\\n        return\\n            _out\\n                ? poolBalanceBefore - poolBalanceAfter\\n                : poolBalanceAfter - poolBalanceBefore;\\n    }\\n}\\n\",\"keccak256\":\"0x8324b91c1eda12fbd6afc322afdec0de8830c971511f57327510e1ea073f04cc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/governance/interfaces/IVeDEG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IVeERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the VePtp\\n */\\ninterface IVeDEG is IVeERC20 {\\n    function isUser(address _addr) external view returns (bool);\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function claim() external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function getStakedPtp(address _addr) external view returns (uint256);\\n\\n    function getVotes(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd94b4bbc128ff5eb2b57c1987f6546a9ea89236da1b80394d6e6961137ac126d\",\"license\":\"MIT\"},\"contracts/governance/interfaces/IVeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IVeERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x331dcfe8459bcba4ac8a2208cc110e3daf481a3e599a797ab9b7272ef8577c9e\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nlibrary Math {\\n    uint256 internal constant WAD = 10**18;\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n}\\n\",\"keccak256\":\"0x14d3b9b1d0e6d4f619a02cba3d4485cfb8af4c3e99bed82151bdb9c0a16b7fda\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IDegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDegisToken is IERC20, IERC20Permit {\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Functions ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n    function CAP() external view returns (uint256);\\n\\n    /**\\n     * @notice Mint degis tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be minted\\n     */\\n    function mintDegis(address _account, uint256 _amount) external;\\n\\n    /**\\n     * @notice Burn degis tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be burned\\n     */\\n    function burnDegis(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x2675ac6dcc4488569e495c713897e2658573fdc21934ab92fd49ff57035265a8\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061320f806100206000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80638456cb591161010f578063cdfb6cf3116100a2578063e4a7631511610071578063e4a7631514610497578063e6fd48bc146104aa578063eced5526146104b3578063f2fde38b146104bf57600080fd5b8063cdfb6cf314610449578063d13f67bc1461045c578063d41dcbea1461046f578063d54465181461048457600080fd5b8063c44bef75116100de578063c44bef75146103e5578063c4d66de8146103f8578063c73d2bae1461040b578063cdcd29071461043657600080fd5b80638456cb59146103585780638da5cb5b1461036057806393f1a40b14610379578063a06ddcb3146103c257600080fd5b80633f4ba83a116101875780635c975abb116101565780635c975abb14610321578063630b5ba114610335578063715018a61461033d5780637b0472f01461034557600080fd5b80633f4ba83a146102e0578063441a3e70146102e85780634f3e7ba6146102fb57806351eb05a61461030e57600080fd5b806318fccc76116101c357806318fccc761461026757806329fd20071461027a5780632a48235b1461029a5780632c678a3e146102c057600080fd5b806306fdde03146101ea57806307a96cbf1461023c57806317fb77de14610251575b600080fd5b6102266040518060400160405280601581526020017f4465676973204c50204661726d696e6720506f6f6c000000000000000000000081525081565b604051610233919061262f565b60405180910390f35b61024f61024a366004612670565b6104d2565b005b61025a60cb5481565b6040516102339190612699565b61024f6102753660046126b8565b610534565b60c95461028d906001600160a01b031681565b6040516102339190612714565b6102ad6102a8366004612722565b610760565b604051610233979695949392919061274c565b61025a6102ce366004612670565b60ce6020526000908152604090205481565b61024f6107b9565b61024f6102f63660046127b4565b6107ed565b60ca5461028d906001600160a01b031681565b61024f61031c366004612722565b610b41565b60975460ff165b60405161023391906127ef565b61024f610d6d565b61024f610db5565b61024f6103533660046127b4565b610de9565b61024f611123565b6033546001600160a01b031660405161023391906127fd565b6103b36103873660046126b8565b60d060209081526000928352604080842090915290825290208054600182015460029092015490919083565b6040516102339392919061280b565b6103286103d0366004612722565b60cf6020526000908152604090205460ff1681565b61024f6103f3366004612722565b611155565b61024f610406366004612670565b611204565b61025a6104193660046126b8565b60d160209081526000928352604080842090915290825290205481565b61024f610444366004612846565b61144b565b61025a6104573660046126b8565b611685565b61025a61046a3660046126b8565b6116b2565b610477611965565b6040516102339190612986565b61024f610492366004612997565b611a0d565b61024f6104a53660046129b9565b611bed565b61025a60cc5481565b61025a64e8d4a5100081565b61024f6104cd366004612670565b611ed5565b6033546001600160a01b031633146105055760405162461bcd60e51b81526004016104fc90612a0e565b60405180910390fd5b60ca805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600260655414156105575760405162461bcd60e51b81526004016104fc90612a50565b600260655560975460ff161561057f5760405162461bcd60e51b81526004016104fc90612a92565b600082815260cf602052604090205460ff161561059f5761059f82610b41565b600060cd83815481106105b4576105b4612aa2565b600091825260208083206040805160e081018252600790940290910180546001600160a01b03168452600181015484840152600280820154858401526003820154606086015260048201546080860152600582015460a0860190815260069092015460c086015288865260d084528286203380885290855283872080548b895260d1875285892092895291909552928620549151908401549496509294939192909164e8d4a510009161066691612ace565b8660800151866001015461067a9190612ace565b6106849190612aed565b61068e9190612b1b565b6106989190612aed565b6106a29190612b2f565b9050600081116106c45760405162461bcd60e51b81526004016104fc90612b78565b64e8d4a510008360a0015183600201546106de9190612ace565b846080015184600101546106f29190612ace565b6106fc9190612aed565b6107069190612b1b565b825560006107148583611f31565b90507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e3386888460405161074b9493929190612b88565b60405180910390a15050600160655550505050565b60cd818154811061077057600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b039095169650929491939092919087565b6033546001600160a01b031633146107e35760405162461bcd60e51b81526004016104fc90612a0e565b6107eb61200f565b565b600260655414156108105760405162461bcd60e51b81526004016104fc90612a50565b600260655560975460ff16156108385760405162461bcd60e51b81526004016104fc90612a92565b600081116108585760405162461bcd60e51b81526004016104fc90612bf8565b600060cd838154811061086d5761086d612aa2565b6000918252602080832086845260d08252604080852033865290925292206001810154600790920290920192508311156108b95760405162461bcd60e51b81526004016104fc90612c3a565b600084815260cf602052604090205460ff16156108d9576108d984610b41565b8054600085815260d1602090815260408083203384529091528120546005850154600285015492939264e8d4a510009161091291612ace565b866004015486600101546109269190612ace565b6109309190612aed565b61093a9190612b1b565b6109449190612aed565b61094e9190612b2f565b600086815260d1602090815260408083203380855292528220829055919250906109789083611f31565b90507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e333388846040516109af9493929190612b88565b60405180910390a183546000906109d3906001906001600160a01b03163389612075565b9050808460010160008282546109e99190612b2f565b909155505060ca546001600160a01b031615610ab357600284015460ca546040516370a0823160e01b8152610a8b916001600160a01b0316906370a0823190610a369033906004016127fd565b602060405180830381865afa158015610a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a779190612c55565b8660010154610a869190612ace565b6121b8565b6002860181905560068701548291610aa291612aed565b610aac9190612b2f565b6006870155505b64e8d4a5100085600501548560020154610acd9190612ace565b86600401548660010154610ae19190612ace565b610aeb9190612aed565b610af59190612b1b565b84556040517ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56890610b2b9033908a908590612c76565b60405180910390a1505060016065555050505050565b600060cd8281548110610b5657610b56612aa2565b9060005260206000209060070201905080600301544211610b75575050565b80546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610ba59030906004016127fd565b602060405180830381865afa158015610bc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be69190612c55565b905080610bf857504260039091015550565b6000826003015442610c0a9190612b2f565b90506000836001015482610c1e9190612ace565b90506000846002015483610c329190612ace565b905083610c4464e8d4a5100084612ace565b610c4e9190612b1b565b856004016000828254610c619190612aed565b90915550506006850154610c7b5760006005860155610cb2565b6006850154610c8f64e8d4a5100083612ace565b610c999190612b1b565b856005016000828254610cac9190612aed565b90915550505b60c9546001600160a01b031663b476739830610cce8486612aed565b6040518363ffffffff1660e01b8152600401610ceb929190612c84565b600060405180830381600087803b158015610d0557600080fd5b505af1158015610d19573d6000803e3d6000fd5b50504260038801555050600485015460058601546040517f17b8644f386d1c7c7138ef98b3c8035622bbe94d7be9b26f71d2654a547c294392610d5d928a9261280b565b60405180910390a1505050505050565b60cd5460005b81811015610db157600081815260cf602052604090205460ff16610d9657610d9f565b610d9f81610b41565b80610da981612c9f565b915050610d73565b5050565b6033546001600160a01b03163314610ddf5760405162461bcd60e51b81526004016104fc90612a0e565b6107eb6000612228565b60026065541415610e0c5760405162461bcd60e51b81526004016104fc90612a50565b600260655560975460ff1615610e345760405162461bcd60e51b81526004016104fc90612a92565b600082815260cf6020526040902054829060ff16610e645760405162461bcd60e51b81526004016104fc90612cec565b60008211610e845760405162461bcd60e51b81526004016104fc90612d2e565b600060cd8481548110610e9957610e99612aa2565b6000918252602080832087845260d082526040808520338652909252922060079091029091019150610eca85610b41565b600181015415610fb5578054600086815260d1602090815260408083203384529091528120546005850154600285015492939264e8d4a5100091610f0d91612ace565b86600401548660010154610f219190612ace565b610f2b9190612aed565b610f359190612b1b565b610f3f9190612aed565b610f499190612b2f565b600087815260d160209081526040808320338085529252822082905591925090610f739083611f31565b90507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e33338984604051610faa9493929190612b88565b60405180910390a150505b8154600090610fd09082906001600160a01b03163388612075565b905080826001016000828254610fe69190612aed565b909155505060ca546001600160a01b0316156110ab57600282015460ca546040516370a0823160e01b8152611083916001600160a01b0316906370a08231906110339033906004016127fd565b602060405180830381865afa158015611050573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110749190612c55565b8460010154610a869190612ace565b600284018190556006850154829161109a91612aed565b6110a49190612b2f565b6006850155505b64e8d4a51000836005015483600201546110c59190612ace565b846004015484600101546110d99190612ace565b6110e39190612aed565b6110ed9190612b1b565b82556040517f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b69061074b90339089908590612c76565b6033546001600160a01b0316331461114d5760405162461bcd60e51b81526004016104fc90612a0e565b6107eb612287565b6033546001600160a01b0316331461117f5760405162461bcd60e51b81526004016104fc90612a0e565b60975460ff16156111a25760405162461bcd60e51b81526004016104fc90612a92565b60cb546001146111c45760405162461bcd60e51b81526004016104fc90612d98565b60cc8190556040517faf8fc8a4c9a55a9a29c3e99cd1797d43062c696f192896c79cbebd7da3286d82906111f9908390612699565b60405180910390a150565b600054610100900460ff1661121f5760005460ff1615611223565b303b155b61123f5760405162461bcd60e51b81526004016104fc90612e00565b600054610100900460ff16158015611261576000805461ffff19166101011790555b6001600160a01b0382166112875760405162461bcd60e51b81526004016104fc90612e42565b61128f6122df565b61129761230e565b61129f61233c565b60c980546001600160a01b0380851673ffffffffffffffffffffffffffffffffffffffff1992831617909255600160cb8190556040805160e081018252600080825260208201818152928201818152606083018281526080840183815260a0850184815260c0860185815260cd8054998a018155909552945160079097027f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e8101805498909a16979098169690961790975592517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2f86015591517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3085015593517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3184015590517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3283015591517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3382015590517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db34909101558015610db1576000805461ff00191690555050565b6033546001600160a01b031633146114755760405162461bcd60e51b81526004016104fc90612a0e565b60975460ff16156114985760405162461bcd60e51b81526004016104fc90612a92565b60cd84815481106114ab576114ab612aa2565b906000526020600020906007020160030154600014156114dd5760405162461bcd60e51b81526004016104fc90612e84565b811561150357600083116115035760405162461bcd60e51b81526004016104fc90612ec6565b801561151657611511610d6d565b61151f565b61151f84610b41565b600084815260cf602052604090205460ff1615801561153e5750600083115b1561159757600084815260cf602052604090819020805460ff19166001179055517f6140f1d5adcbca6c6b24c3b5e695335cd1a2071c7e03881172dc9eb0e488225c9061158e9086904290612ed6565b60405180910390a15b826115f157600084815260cf602052604090819020805460ff19169055517f4654f9b7bb3ba4d66e3a4e972e39db189ac7b4fdf5f2a95d57a4eb4d91a16d45906115e49086904290612ed6565b60405180910390a161167f565b8260cd858154811061160557611605612aa2565b9060005260206000209060070201600101819055508160cd858154811061162e5761162e612aa2565b9060005260206000209060070201600201819055507f12558fa101886c4fd9ad5e0b9932a6ffd3653b63380b1da3f024ddaf506c22eb8484846040516116769392919061280b565b60405180910390a15b50505050565b600082815260d0602090815260408083206001600160a01b03851684529091529020600101545b92915050565b60008060cd84815481106116c8576116c8612aa2565b60009182526020918290206040805160e081018252600790930290910180546001600160a01b0316835260018101549383019390935260028301549082015260038201546060820181905260048301546080830152600583015460a083015260069092015460c0820152915015806117435750806060015142105b8061174f575060cc5442105b1561175e5760009150506116ac565b600084815260d0602090815260408083206001600160a01b0380881685529083528184208251606081018452815481526001820154948101949094526002015483830152845191516370a0823160e01b81529293929116906370a08231906117ca9030906004016127fd565b602060405180830381865afa1580156117e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180b9190612c55565b608084015160a0850151919250908261182c576000955050505050506116ac565b600088815260cf602052604090205460ff16156118e05760008560600151426118559190612b2f565b905060008187602001516118699190612ace565b90508461187b64e8d4a5100083612ace565b6118859190612b1b565b61188f9085612aed565b60c0880151909450156118dd5760008288604001516118ae9190612ace565b60c08901519091506118c564e8d4a5100083612ace565b6118cf9190612b1b565b6118d99085612aed565b9350505b50505b8351600089815260d1602090815260408083206001600160a01b038c168452909152808220549087015191929164e8d4a510009061191f908690612ace565b86896020015161192f9190612ace565b6119399190612aed565b6119439190612b1b565b61194d9190612aed565b6119579190612b2f565b96506116ac95505050505050565b606060cd805480602002602001604051908101604052809291908181526020016000905b82821015611a045760008481526020908190206040805160e0810182526007860290920180546001600160a01b03168352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a08401526006015460c08301529083529092019101611989565b50505050905090565b60ca546001600160a01b03163314611a375760405162461bcd60e51b81526004016104fc90612f16565b60cd5460005b8181101561167f57600081815260cf602052604090205460ff16611a6057611bdd565b600081815260d0602090815260408083206001600160a01b038816845290915290206001810154611a915750611bdd565b600060cd8381548110611aa657611aa6612aa2565b90600052602060002090600702019050611abf83610b41565b6000826000015464e8d4a5100083600501548560020154611ae09190612ace565b84600401548660010154611af49190612ace565b611afe9190612aed565b611b089190612b1b565b611b129190612b2f565b600085815260d1602090815260408083206001600160a01b038c168452909152812080549293508392909190611b49908490612aed565b909155505060028301546001840154600090611b6990610a86908a612ace565b60028601819055600585015490915064e8d4a5100090611b899083612ace565b85600401548760010154611b9d9190612ace565b611ba79190612aed565b611bb19190612b1b565b855560068401548290611bc5908390612aed565b611bcf9190612b2f565b846006018190555050505050505b611be681612c9f565b9050611a3d565b836001600160a01b038116611c145760405162461bcd60e51b81526004016104fc90612e42565b6033546001600160a01b03163314611c3e5760405162461bcd60e51b81526004016104fc90612a0e565b60975460ff1615611c615760405162461bcd60e51b81526004016104fc90612a92565b611c6a8561236f565b15611c875760405162461bcd60e51b81526004016104fc90612f58565b8215611cad5760008411611cad5760405162461bcd60e51b81526004016104fc90612ec6565b8115611cbb57611cbb610d6d565b600060cc544211611cce5760cc54611cd0565b425b6040805160e0810182526001600160a01b038981168252602082018981529282018881526060830185815260006080850181815260a0860182815260c0870183815260cd8054600181018255945296517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e6007909402938401805473ffffffffffffffffffffffffffffffffffffffff1916919097161790955595517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2f82015591517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db30830155517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3182015592517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db32840155517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db33830155517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db349091015590508415611e715760cb54600090815260cf60205260409020805460ff191660011790555b60cb8054906000611e8183612c9f565b909155506001600160a01b038716600090815260ce60205260409081902091909155517f5f9d2cd19aa3f32e9e8cc45267a493f9956c1b955a220136161ff8ad595bc78290610d5d90889088908890612c76565b6033546001600160a01b03163314611eff5760405162461bcd60e51b81526004016104fc90612a0e565b6001600160a01b038116611f255760405162461bcd60e51b81526004016104fc90612fc0565b611f2e81612228565b50565b60c9546040516370a0823160e01b815260009182916001600160a01b03909116906370a0823190611f669030906004016127fd565b602060405180830381865afa158015611f83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa79190612c55565b905060008111611fc95760405162461bcd60e51b81526004016104fc90613002565b80831115611fef5760c954611fe8906001600160a01b0316858361239e565b90506116ac565b60c954612006906001600160a01b0316858561239e565b829150506116ac565b60975460ff166120315760405162461bcd60e51b81526004016104fc90613044565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161206b91906127fd565b60405180910390a1565b600080846001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016120a491906127fd565b602060405180830381865afa1580156120c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e59190612c55565b90508515612106576121016001600160a01b038616858561239e565b61211b565b61211b6001600160a01b038616853086612426565b6040516370a0823160e01b81526000906001600160a01b038716906370a082319061214a9030906004016127fd565b602060405180830381865afa158015612167573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218b9190612c55565b9050866121a15761219c8282612b2f565b6121ab565b6121ab8183612b2f565b925050505b949350505050565b6000600382111561221957508060006121d2600283612b1b565b6121dd906001612aed565b90505b81811015612213579050806002816121f88186612b1b565b6122029190612aed565b61220c9190612b1b565b90506121e0565b50919050565b8115612223575060015b919050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460ff16156122aa5760405162461bcd60e51b81526004016104fc90612a92565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861205e3390565b600054610100900460ff166123065760405162461bcd60e51b81526004016104fc906130ac565b6107eb612447565b600054610100900460ff166123355760405162461bcd60e51b81526004016104fc906130ac565b6001606555565b600054610100900460ff166123635760405162461bcd60e51b81526004016104fc906130ac565b6097805460ff19169055565b6001600160a01b038116600090815260ce602052604081205480612394576000612397565b60015b9392505050565b6124218363a9059cbb60e01b84846040516024016123bd929190612c84565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612477565b505050565b61167f846323b872dd60e01b8585856040516024016123bd939291906130bc565b600054610100900460ff1661246e5760405162461bcd60e51b81526004016104fc906130ac565b6107eb33612228565b60006124cc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125069092919063ffffffff16565b80519091501561242157808060200190518101906124ea91906130e2565b6124215760405162461bcd60e51b81526004016104fc9061315b565b60606121b0848460008585843b61252f5760405162461bcd60e51b81526004016104fc9061319d565b600080866001600160a01b0316858760405161254b91906131cf565b60006040518083038185875af1925050503d8060008114612588576040519150601f19603f3d011682016040523d82523d6000602084013e61258d565b606091505b50915091506121ab828286606083156125a7575081612397565b8251156125b75782518084602001fd5b8160405162461bcd60e51b81526004016104fc919061262f565b60005b838110156125ec5781810151838201526020016125d4565b8381111561167f5750506000910152565b6000612607825190565b80845260208401935061261e8185602086016125d1565b601f01601f19169290920192915050565b6020808252810161239781846125fd565b60006001600160a01b0382166116ac565b61265a81612640565b8114611f2e57600080fd5b80356116ac81612651565b60006020828403121561268557612685600080fd5b60006121b08484612665565b805b82525050565b602081016116ac8284612691565b8061265a565b80356116ac816126a7565b600080604083850312156126ce576126ce600080fd5b60006126da85856126ad565b92505060206126eb85828601612665565b9150509250929050565b60006116ac82612640565b60006116ac826126f5565b61269381612700565b602081016116ac828461270b565b60006020828403121561273757612737600080fd5b60006121b084846126ad565b61269381612640565b60e0810161275a828a612743565b6127676020830189612691565b6127746040830188612691565b6127816060830187612691565b61278e6080830186612691565b61279b60a0830185612691565b6127a860c0830184612691565b98975050505050505050565b600080604083850312156127ca576127ca600080fd5b60006127d685856126ad565b92505060206126eb858286016126ad565b801515612693565b602081016116ac82846127e7565b602081016116ac8284612743565b606081016128198286612691565b6128266020830185612691565b6121b06040830184612691565b80151561265a565b80356116ac81612833565b6000806000806080858703121561285f5761285f600080fd5b600061286b87876126ad565b945050602061287c878288016126ad565b935050604061288d878288016126ad565b925050606061289e8782880161283b565b91505092959194509250565b80516128b68382612743565b5060208101516128c96020840182612691565b5060408101516128dc6040840182612691565b5060608101516128ef6060840182612691565b5060808101516129026080840182612691565b5060a081015161291560a0840182612691565b5060c081015161242160c0840182612691565b61293282826128aa565b5060e00190565b60200190565b6000612949825190565b808452602093840193830160005b8281101561297c57815161296b8782612928565b965050602082019150600101612957565b5093949350505050565b60208082528101612397818461293f565b600080604083850312156129ad576129ad600080fd5b60006127d68585612665565b600080600080608085870312156129d2576129d2600080fd5b600061286b8787612665565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152612939565b602080825281016116ac816129de565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050612939565b602080825281016116ac81612a1e565b60108152602081017f5061757361626c653a207061757365640000000000000000000000000000000081529050612939565b602080825281016116ac81612a60565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612ae857612ae8612ab8565b500290565b60008219821115612b0057612b00612ab8565b500190565b634e487b7160e01b600052601260045260246000fd5b600082612b2a57612b2a612b05565b500490565b600082821015612b4157612b41612ab8565b500390565b60118152602081017f4e6f2070656e64696e672072657761726400000000000000000000000000000081529050612939565b602080825281016116ac81612b46565b60808101612b968287612743565b612ba36020830186612743565b612bb06040830185612691565b612bbd6060830184612691565b95945050505050565b600b8152602081017f5a65726f20616d6f756e7400000000000000000000000000000000000000000081529050612939565b602080825281016116ac81612bc6565b60198152602081017f4e6f7420656e6f756768207374616b696e6742616c616e63650000000000000081529050612939565b602080825281016116ac81612c08565b80516116ac816126a7565b600060208284031215612c6a57612c6a600080fd5b60006121b08484612c4a565b606081016128198286612743565b60408101612c928285612743565b6123976020830184612691565b6000600019821415612cb357612cb3612ab8565b5060010190565b60138152602081017f506f6f6c206973206e6f74206661726d696e670000000000000000000000000081529050612939565b602080825281016116ac81612cba565b60128152602081017f43616e206e6f74207374616b65207a65726f000000000000000000000000000081529050612939565b602080825281016116ac81612cfc565b602f8152602081017f43616e206e6f74207365742073746172742074696d657374616d70206166746581527f7220616464696e67206120706f6f6c0000000000000000000000000000000000602082015290505b60400190565b602080825281016116ac81612d3e565b602e8152602081017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181527f647920696e697469616c697a656400000000000000000000000000000000000060208201529050612d92565b602080825281016116ac81612da8565b600c8152602081017f5a65726f2061646472657373000000000000000000000000000000000000000081529050612939565b602080825281016116ac81612e10565b600f8152602081017f506f6f6c206e6f7420657869737473000000000000000000000000000000000081529050612939565b602080825281016116ac81612e52565b600a8152602081017f4f6e6c7920626f6e75730000000000000000000000000000000000000000000081529050612939565b602080825281016116ac81612e94565b60408101612c928285612691565b60138152602081017f4f6e6c7920766544454720636f6e74726163740000000000000000000000000081529050612939565b602080825281016116ac81612ee4565b60138152602081017f416c726561647920696e2074686520706f6f6c0000000000000000000000000081529050612939565b602080825281016116ac81612f26565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529050612d92565b602080825281016116ac81612f68565b601a8152602081017f4e6f20446567697320746f6b656e20696e2074686520706f6f6c00000000000081529050612939565b602080825281016116ac81612fd0565b60148152602081017f5061757361626c653a206e6f742070617573656400000000000000000000000081529050612939565b602080825281016116ac81613012565b602b8152602081017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981527f6e697469616c697a696e6700000000000000000000000000000000000000000060208201529050612d92565b602080825281016116ac81613054565b606081016130ca8286612743565b6128266020830185612743565b80516116ac81612833565b6000602082840312156130f7576130f7600080fd5b60006121b084846130d7565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f7420737563636565640000000000000000000000000000000000000000000060208201529050612d92565b602080825281016116ac81613103565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529050612939565b602080825281016116ac8161316b565b60006131b7825190565b6131c58185602086016125d1565b9290920192915050565b6116ac81836131ad56fea264697066735822122005d7178dd81a91779260102ec119dbc136d47d7ebf49bfa7e55643f476a1b76b64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80638456cb591161010f578063cdfb6cf3116100a2578063e4a7631511610071578063e4a7631514610497578063e6fd48bc146104aa578063eced5526146104b3578063f2fde38b146104bf57600080fd5b8063cdfb6cf314610449578063d13f67bc1461045c578063d41dcbea1461046f578063d54465181461048457600080fd5b8063c44bef75116100de578063c44bef75146103e5578063c4d66de8146103f8578063c73d2bae1461040b578063cdcd29071461043657600080fd5b80638456cb59146103585780638da5cb5b1461036057806393f1a40b14610379578063a06ddcb3146103c257600080fd5b80633f4ba83a116101875780635c975abb116101565780635c975abb14610321578063630b5ba114610335578063715018a61461033d5780637b0472f01461034557600080fd5b80633f4ba83a146102e0578063441a3e70146102e85780634f3e7ba6146102fb57806351eb05a61461030e57600080fd5b806318fccc76116101c357806318fccc761461026757806329fd20071461027a5780632a48235b1461029a5780632c678a3e146102c057600080fd5b806306fdde03146101ea57806307a96cbf1461023c57806317fb77de14610251575b600080fd5b6102266040518060400160405280601581526020017f4465676973204c50204661726d696e6720506f6f6c000000000000000000000081525081565b604051610233919061262f565b60405180910390f35b61024f61024a366004612670565b6104d2565b005b61025a60cb5481565b6040516102339190612699565b61024f6102753660046126b8565b610534565b60c95461028d906001600160a01b031681565b6040516102339190612714565b6102ad6102a8366004612722565b610760565b604051610233979695949392919061274c565b61025a6102ce366004612670565b60ce6020526000908152604090205481565b61024f6107b9565b61024f6102f63660046127b4565b6107ed565b60ca5461028d906001600160a01b031681565b61024f61031c366004612722565b610b41565b60975460ff165b60405161023391906127ef565b61024f610d6d565b61024f610db5565b61024f6103533660046127b4565b610de9565b61024f611123565b6033546001600160a01b031660405161023391906127fd565b6103b36103873660046126b8565b60d060209081526000928352604080842090915290825290208054600182015460029092015490919083565b6040516102339392919061280b565b6103286103d0366004612722565b60cf6020526000908152604090205460ff1681565b61024f6103f3366004612722565b611155565b61024f610406366004612670565b611204565b61025a6104193660046126b8565b60d160209081526000928352604080842090915290825290205481565b61024f610444366004612846565b61144b565b61025a6104573660046126b8565b611685565b61025a61046a3660046126b8565b6116b2565b610477611965565b6040516102339190612986565b61024f610492366004612997565b611a0d565b61024f6104a53660046129b9565b611bed565b61025a60cc5481565b61025a64e8d4a5100081565b61024f6104cd366004612670565b611ed5565b6033546001600160a01b031633146105055760405162461bcd60e51b81526004016104fc90612a0e565b60405180910390fd5b60ca805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600260655414156105575760405162461bcd60e51b81526004016104fc90612a50565b600260655560975460ff161561057f5760405162461bcd60e51b81526004016104fc90612a92565b600082815260cf602052604090205460ff161561059f5761059f82610b41565b600060cd83815481106105b4576105b4612aa2565b600091825260208083206040805160e081018252600790940290910180546001600160a01b03168452600181015484840152600280820154858401526003820154606086015260048201546080860152600582015460a0860190815260069092015460c086015288865260d084528286203380885290855283872080548b895260d1875285892092895291909552928620549151908401549496509294939192909164e8d4a510009161066691612ace565b8660800151866001015461067a9190612ace565b6106849190612aed565b61068e9190612b1b565b6106989190612aed565b6106a29190612b2f565b9050600081116106c45760405162461bcd60e51b81526004016104fc90612b78565b64e8d4a510008360a0015183600201546106de9190612ace565b846080015184600101546106f29190612ace565b6106fc9190612aed565b6107069190612b1b565b825560006107148583611f31565b90507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e3386888460405161074b9493929190612b88565b60405180910390a15050600160655550505050565b60cd818154811061077057600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b039095169650929491939092919087565b6033546001600160a01b031633146107e35760405162461bcd60e51b81526004016104fc90612a0e565b6107eb61200f565b565b600260655414156108105760405162461bcd60e51b81526004016104fc90612a50565b600260655560975460ff16156108385760405162461bcd60e51b81526004016104fc90612a92565b600081116108585760405162461bcd60e51b81526004016104fc90612bf8565b600060cd838154811061086d5761086d612aa2565b6000918252602080832086845260d08252604080852033865290925292206001810154600790920290920192508311156108b95760405162461bcd60e51b81526004016104fc90612c3a565b600084815260cf602052604090205460ff16156108d9576108d984610b41565b8054600085815260d1602090815260408083203384529091528120546005850154600285015492939264e8d4a510009161091291612ace565b866004015486600101546109269190612ace565b6109309190612aed565b61093a9190612b1b565b6109449190612aed565b61094e9190612b2f565b600086815260d1602090815260408083203380855292528220829055919250906109789083611f31565b90507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e333388846040516109af9493929190612b88565b60405180910390a183546000906109d3906001906001600160a01b03163389612075565b9050808460010160008282546109e99190612b2f565b909155505060ca546001600160a01b031615610ab357600284015460ca546040516370a0823160e01b8152610a8b916001600160a01b0316906370a0823190610a369033906004016127fd565b602060405180830381865afa158015610a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a779190612c55565b8660010154610a869190612ace565b6121b8565b6002860181905560068701548291610aa291612aed565b610aac9190612b2f565b6006870155505b64e8d4a5100085600501548560020154610acd9190612ace565b86600401548660010154610ae19190612ace565b610aeb9190612aed565b610af59190612b1b565b84556040517ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56890610b2b9033908a908590612c76565b60405180910390a1505060016065555050505050565b600060cd8281548110610b5657610b56612aa2565b9060005260206000209060070201905080600301544211610b75575050565b80546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610ba59030906004016127fd565b602060405180830381865afa158015610bc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be69190612c55565b905080610bf857504260039091015550565b6000826003015442610c0a9190612b2f565b90506000836001015482610c1e9190612ace565b90506000846002015483610c329190612ace565b905083610c4464e8d4a5100084612ace565b610c4e9190612b1b565b856004016000828254610c619190612aed565b90915550506006850154610c7b5760006005860155610cb2565b6006850154610c8f64e8d4a5100083612ace565b610c999190612b1b565b856005016000828254610cac9190612aed565b90915550505b60c9546001600160a01b031663b476739830610cce8486612aed565b6040518363ffffffff1660e01b8152600401610ceb929190612c84565b600060405180830381600087803b158015610d0557600080fd5b505af1158015610d19573d6000803e3d6000fd5b50504260038801555050600485015460058601546040517f17b8644f386d1c7c7138ef98b3c8035622bbe94d7be9b26f71d2654a547c294392610d5d928a9261280b565b60405180910390a1505050505050565b60cd5460005b81811015610db157600081815260cf602052604090205460ff16610d9657610d9f565b610d9f81610b41565b80610da981612c9f565b915050610d73565b5050565b6033546001600160a01b03163314610ddf5760405162461bcd60e51b81526004016104fc90612a0e565b6107eb6000612228565b60026065541415610e0c5760405162461bcd60e51b81526004016104fc90612a50565b600260655560975460ff1615610e345760405162461bcd60e51b81526004016104fc90612a92565b600082815260cf6020526040902054829060ff16610e645760405162461bcd60e51b81526004016104fc90612cec565b60008211610e845760405162461bcd60e51b81526004016104fc90612d2e565b600060cd8481548110610e9957610e99612aa2565b6000918252602080832087845260d082526040808520338652909252922060079091029091019150610eca85610b41565b600181015415610fb5578054600086815260d1602090815260408083203384529091528120546005850154600285015492939264e8d4a5100091610f0d91612ace565b86600401548660010154610f219190612ace565b610f2b9190612aed565b610f359190612b1b565b610f3f9190612aed565b610f499190612b2f565b600087815260d160209081526040808320338085529252822082905591925090610f739083611f31565b90507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e33338984604051610faa9493929190612b88565b60405180910390a150505b8154600090610fd09082906001600160a01b03163388612075565b905080826001016000828254610fe69190612aed565b909155505060ca546001600160a01b0316156110ab57600282015460ca546040516370a0823160e01b8152611083916001600160a01b0316906370a08231906110339033906004016127fd565b602060405180830381865afa158015611050573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110749190612c55565b8460010154610a869190612ace565b600284018190556006850154829161109a91612aed565b6110a49190612b2f565b6006850155505b64e8d4a51000836005015483600201546110c59190612ace565b846004015484600101546110d99190612ace565b6110e39190612aed565b6110ed9190612b1b565b82556040517f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b69061074b90339089908590612c76565b6033546001600160a01b0316331461114d5760405162461bcd60e51b81526004016104fc90612a0e565b6107eb612287565b6033546001600160a01b0316331461117f5760405162461bcd60e51b81526004016104fc90612a0e565b60975460ff16156111a25760405162461bcd60e51b81526004016104fc90612a92565b60cb546001146111c45760405162461bcd60e51b81526004016104fc90612d98565b60cc8190556040517faf8fc8a4c9a55a9a29c3e99cd1797d43062c696f192896c79cbebd7da3286d82906111f9908390612699565b60405180910390a150565b600054610100900460ff1661121f5760005460ff1615611223565b303b155b61123f5760405162461bcd60e51b81526004016104fc90612e00565b600054610100900460ff16158015611261576000805461ffff19166101011790555b6001600160a01b0382166112875760405162461bcd60e51b81526004016104fc90612e42565b61128f6122df565b61129761230e565b61129f61233c565b60c980546001600160a01b0380851673ffffffffffffffffffffffffffffffffffffffff1992831617909255600160cb8190556040805160e081018252600080825260208201818152928201818152606083018281526080840183815260a0850184815260c0860185815260cd8054998a018155909552945160079097027f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e8101805498909a16979098169690961790975592517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2f86015591517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3085015593517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3184015590517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3283015591517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3382015590517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db34909101558015610db1576000805461ff00191690555050565b6033546001600160a01b031633146114755760405162461bcd60e51b81526004016104fc90612a0e565b60975460ff16156114985760405162461bcd60e51b81526004016104fc90612a92565b60cd84815481106114ab576114ab612aa2565b906000526020600020906007020160030154600014156114dd5760405162461bcd60e51b81526004016104fc90612e84565b811561150357600083116115035760405162461bcd60e51b81526004016104fc90612ec6565b801561151657611511610d6d565b61151f565b61151f84610b41565b600084815260cf602052604090205460ff1615801561153e5750600083115b1561159757600084815260cf602052604090819020805460ff19166001179055517f6140f1d5adcbca6c6b24c3b5e695335cd1a2071c7e03881172dc9eb0e488225c9061158e9086904290612ed6565b60405180910390a15b826115f157600084815260cf602052604090819020805460ff19169055517f4654f9b7bb3ba4d66e3a4e972e39db189ac7b4fdf5f2a95d57a4eb4d91a16d45906115e49086904290612ed6565b60405180910390a161167f565b8260cd858154811061160557611605612aa2565b9060005260206000209060070201600101819055508160cd858154811061162e5761162e612aa2565b9060005260206000209060070201600201819055507f12558fa101886c4fd9ad5e0b9932a6ffd3653b63380b1da3f024ddaf506c22eb8484846040516116769392919061280b565b60405180910390a15b50505050565b600082815260d0602090815260408083206001600160a01b03851684529091529020600101545b92915050565b60008060cd84815481106116c8576116c8612aa2565b60009182526020918290206040805160e081018252600790930290910180546001600160a01b0316835260018101549383019390935260028301549082015260038201546060820181905260048301546080830152600583015460a083015260069092015460c0820152915015806117435750806060015142105b8061174f575060cc5442105b1561175e5760009150506116ac565b600084815260d0602090815260408083206001600160a01b0380881685529083528184208251606081018452815481526001820154948101949094526002015483830152845191516370a0823160e01b81529293929116906370a08231906117ca9030906004016127fd565b602060405180830381865afa1580156117e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180b9190612c55565b608084015160a0850151919250908261182c576000955050505050506116ac565b600088815260cf602052604090205460ff16156118e05760008560600151426118559190612b2f565b905060008187602001516118699190612ace565b90508461187b64e8d4a5100083612ace565b6118859190612b1b565b61188f9085612aed565b60c0880151909450156118dd5760008288604001516118ae9190612ace565b60c08901519091506118c564e8d4a5100083612ace565b6118cf9190612b1b565b6118d99085612aed565b9350505b50505b8351600089815260d1602090815260408083206001600160a01b038c168452909152808220549087015191929164e8d4a510009061191f908690612ace565b86896020015161192f9190612ace565b6119399190612aed565b6119439190612b1b565b61194d9190612aed565b6119579190612b2f565b96506116ac95505050505050565b606060cd805480602002602001604051908101604052809291908181526020016000905b82821015611a045760008481526020908190206040805160e0810182526007860290920180546001600160a01b03168352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a08401526006015460c08301529083529092019101611989565b50505050905090565b60ca546001600160a01b03163314611a375760405162461bcd60e51b81526004016104fc90612f16565b60cd5460005b8181101561167f57600081815260cf602052604090205460ff16611a6057611bdd565b600081815260d0602090815260408083206001600160a01b038816845290915290206001810154611a915750611bdd565b600060cd8381548110611aa657611aa6612aa2565b90600052602060002090600702019050611abf83610b41565b6000826000015464e8d4a5100083600501548560020154611ae09190612ace565b84600401548660010154611af49190612ace565b611afe9190612aed565b611b089190612b1b565b611b129190612b2f565b600085815260d1602090815260408083206001600160a01b038c168452909152812080549293508392909190611b49908490612aed565b909155505060028301546001840154600090611b6990610a86908a612ace565b60028601819055600585015490915064e8d4a5100090611b899083612ace565b85600401548760010154611b9d9190612ace565b611ba79190612aed565b611bb19190612b1b565b855560068401548290611bc5908390612aed565b611bcf9190612b2f565b846006018190555050505050505b611be681612c9f565b9050611a3d565b836001600160a01b038116611c145760405162461bcd60e51b81526004016104fc90612e42565b6033546001600160a01b03163314611c3e5760405162461bcd60e51b81526004016104fc90612a0e565b60975460ff1615611c615760405162461bcd60e51b81526004016104fc90612a92565b611c6a8561236f565b15611c875760405162461bcd60e51b81526004016104fc90612f58565b8215611cad5760008411611cad5760405162461bcd60e51b81526004016104fc90612ec6565b8115611cbb57611cbb610d6d565b600060cc544211611cce5760cc54611cd0565b425b6040805160e0810182526001600160a01b038981168252602082018981529282018881526060830185815260006080850181815260a0860182815260c0870183815260cd8054600181018255945296517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2e6007909402938401805473ffffffffffffffffffffffffffffffffffffffff1916919097161790955595517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db2f82015591517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db30830155517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db3182015592517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db32840155517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db33830155517f83978b4c69c48dd978ab43fe30f077615294f938fb7f936d9eb340e51ea7db349091015590508415611e715760cb54600090815260cf60205260409020805460ff191660011790555b60cb8054906000611e8183612c9f565b909155506001600160a01b038716600090815260ce60205260409081902091909155517f5f9d2cd19aa3f32e9e8cc45267a493f9956c1b955a220136161ff8ad595bc78290610d5d90889088908890612c76565b6033546001600160a01b03163314611eff5760405162461bcd60e51b81526004016104fc90612a0e565b6001600160a01b038116611f255760405162461bcd60e51b81526004016104fc90612fc0565b611f2e81612228565b50565b60c9546040516370a0823160e01b815260009182916001600160a01b03909116906370a0823190611f669030906004016127fd565b602060405180830381865afa158015611f83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa79190612c55565b905060008111611fc95760405162461bcd60e51b81526004016104fc90613002565b80831115611fef5760c954611fe8906001600160a01b0316858361239e565b90506116ac565b60c954612006906001600160a01b0316858561239e565b829150506116ac565b60975460ff166120315760405162461bcd60e51b81526004016104fc90613044565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161206b91906127fd565b60405180910390a1565b600080846001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016120a491906127fd565b602060405180830381865afa1580156120c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e59190612c55565b90508515612106576121016001600160a01b038616858561239e565b61211b565b61211b6001600160a01b038616853086612426565b6040516370a0823160e01b81526000906001600160a01b038716906370a082319061214a9030906004016127fd565b602060405180830381865afa158015612167573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218b9190612c55565b9050866121a15761219c8282612b2f565b6121ab565b6121ab8183612b2f565b925050505b949350505050565b6000600382111561221957508060006121d2600283612b1b565b6121dd906001612aed565b90505b81811015612213579050806002816121f88186612b1b565b6122029190612aed565b61220c9190612b1b565b90506121e0565b50919050565b8115612223575060015b919050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460ff16156122aa5760405162461bcd60e51b81526004016104fc90612a92565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861205e3390565b600054610100900460ff166123065760405162461bcd60e51b81526004016104fc906130ac565b6107eb612447565b600054610100900460ff166123355760405162461bcd60e51b81526004016104fc906130ac565b6001606555565b600054610100900460ff166123635760405162461bcd60e51b81526004016104fc906130ac565b6097805460ff19169055565b6001600160a01b038116600090815260ce602052604081205480612394576000612397565b60015b9392505050565b6124218363a9059cbb60e01b84846040516024016123bd929190612c84565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612477565b505050565b61167f846323b872dd60e01b8585856040516024016123bd939291906130bc565b600054610100900460ff1661246e5760405162461bcd60e51b81526004016104fc906130ac565b6107eb33612228565b60006124cc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125069092919063ffffffff16565b80519091501561242157808060200190518101906124ea91906130e2565b6124215760405162461bcd60e51b81526004016104fc9061315b565b60606121b0848460008585843b61252f5760405162461bcd60e51b81526004016104fc9061319d565b600080866001600160a01b0316858760405161254b91906131cf565b60006040518083038185875af1925050503d8060008114612588576040519150601f19603f3d011682016040523d82523d6000602084013e61258d565b606091505b50915091506121ab828286606083156125a7575081612397565b8251156125b75782518084602001fd5b8160405162461bcd60e51b81526004016104fc919061262f565b60005b838110156125ec5781810151838201526020016125d4565b8381111561167f5750506000910152565b6000612607825190565b80845260208401935061261e8185602086016125d1565b601f01601f19169290920192915050565b6020808252810161239781846125fd565b60006001600160a01b0382166116ac565b61265a81612640565b8114611f2e57600080fd5b80356116ac81612651565b60006020828403121561268557612685600080fd5b60006121b08484612665565b805b82525050565b602081016116ac8284612691565b8061265a565b80356116ac816126a7565b600080604083850312156126ce576126ce600080fd5b60006126da85856126ad565b92505060206126eb85828601612665565b9150509250929050565b60006116ac82612640565b60006116ac826126f5565b61269381612700565b602081016116ac828461270b565b60006020828403121561273757612737600080fd5b60006121b084846126ad565b61269381612640565b60e0810161275a828a612743565b6127676020830189612691565b6127746040830188612691565b6127816060830187612691565b61278e6080830186612691565b61279b60a0830185612691565b6127a860c0830184612691565b98975050505050505050565b600080604083850312156127ca576127ca600080fd5b60006127d685856126ad565b92505060206126eb858286016126ad565b801515612693565b602081016116ac82846127e7565b602081016116ac8284612743565b606081016128198286612691565b6128266020830185612691565b6121b06040830184612691565b80151561265a565b80356116ac81612833565b6000806000806080858703121561285f5761285f600080fd5b600061286b87876126ad565b945050602061287c878288016126ad565b935050604061288d878288016126ad565b925050606061289e8782880161283b565b91505092959194509250565b80516128b68382612743565b5060208101516128c96020840182612691565b5060408101516128dc6040840182612691565b5060608101516128ef6060840182612691565b5060808101516129026080840182612691565b5060a081015161291560a0840182612691565b5060c081015161242160c0840182612691565b61293282826128aa565b5060e00190565b60200190565b6000612949825190565b808452602093840193830160005b8281101561297c57815161296b8782612928565b965050602082019150600101612957565b5093949350505050565b60208082528101612397818461293f565b600080604083850312156129ad576129ad600080fd5b60006127d68585612665565b600080600080608085870312156129d2576129d2600080fd5b600061286b8787612665565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152612939565b602080825281016116ac816129de565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529050612939565b602080825281016116ac81612a1e565b60108152602081017f5061757361626c653a207061757365640000000000000000000000000000000081529050612939565b602080825281016116ac81612a60565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612ae857612ae8612ab8565b500290565b60008219821115612b0057612b00612ab8565b500190565b634e487b7160e01b600052601260045260246000fd5b600082612b2a57612b2a612b05565b500490565b600082821015612b4157612b41612ab8565b500390565b60118152602081017f4e6f2070656e64696e672072657761726400000000000000000000000000000081529050612939565b602080825281016116ac81612b46565b60808101612b968287612743565b612ba36020830186612743565b612bb06040830185612691565b612bbd6060830184612691565b95945050505050565b600b8152602081017f5a65726f20616d6f756e7400000000000000000000000000000000000000000081529050612939565b602080825281016116ac81612bc6565b60198152602081017f4e6f7420656e6f756768207374616b696e6742616c616e63650000000000000081529050612939565b602080825281016116ac81612c08565b80516116ac816126a7565b600060208284031215612c6a57612c6a600080fd5b60006121b08484612c4a565b606081016128198286612743565b60408101612c928285612743565b6123976020830184612691565b6000600019821415612cb357612cb3612ab8565b5060010190565b60138152602081017f506f6f6c206973206e6f74206661726d696e670000000000000000000000000081529050612939565b602080825281016116ac81612cba565b60128152602081017f43616e206e6f74207374616b65207a65726f000000000000000000000000000081529050612939565b602080825281016116ac81612cfc565b602f8152602081017f43616e206e6f74207365742073746172742074696d657374616d70206166746581527f7220616464696e67206120706f6f6c0000000000000000000000000000000000602082015290505b60400190565b602080825281016116ac81612d3e565b602e8152602081017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181527f647920696e697469616c697a656400000000000000000000000000000000000060208201529050612d92565b602080825281016116ac81612da8565b600c8152602081017f5a65726f2061646472657373000000000000000000000000000000000000000081529050612939565b602080825281016116ac81612e10565b600f8152602081017f506f6f6c206e6f7420657869737473000000000000000000000000000000000081529050612939565b602080825281016116ac81612e52565b600a8152602081017f4f6e6c7920626f6e75730000000000000000000000000000000000000000000081529050612939565b602080825281016116ac81612e94565b60408101612c928285612691565b60138152602081017f4f6e6c7920766544454720636f6e74726163740000000000000000000000000081529050612939565b602080825281016116ac81612ee4565b60138152602081017f416c726561647920696e2074686520706f6f6c0000000000000000000000000081529050612939565b602080825281016116ac81612f26565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529050612d92565b602080825281016116ac81612f68565b601a8152602081017f4e6f20446567697320746f6b656e20696e2074686520706f6f6c00000000000081529050612939565b602080825281016116ac81612fd0565b60148152602081017f5061757361626c653a206e6f742070617573656400000000000000000000000081529050612939565b602080825281016116ac81613012565b602b8152602081017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981527f6e697469616c697a696e6700000000000000000000000000000000000000000060208201529050612d92565b602080825281016116ac81613054565b606081016130ca8286612743565b6128266020830185612743565b80516116ac81612833565b6000602082840312156130f7576130f7600080fd5b60006121b084846130d7565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f7420737563636565640000000000000000000000000000000000000000000060208201529050612d92565b602080825281016116ac81613103565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529050612939565b602080825281016116ac8161316b565b60006131b7825190565b6131c58185602086016125d1565b9290920192915050565b6116ac81836131ad56fea264697066735822122005d7178dd81a91779260102ec119dbc136d47d7ebf49bfa7e55643f476a1b76b64736f6c634300080a0033",
  "devdoc": {
    "details": "The pool id starts from 1 rather than 0         The degis reward is calculated by timestamp rather than block number         VeDEG will boost the farming speed by having a extra reward type         The extra reward is shared by those staking lptokens with veDEG balances         Every time the veDEG balance change, the reward will be updated",
    "kind": "dev",
    "methods": {
      "add(address,uint256,uint256,bool)": {
        "details": "Can only be called by the owner      The reward speed can be 0 and set later by setDegisReward function",
        "params": {
          "_basicDegisPerSecond": "Basic reward speed(per second) for this new pool",
          "_bonusDegisPerSecond": "Bonus reward speed(per second) for this new pool",
          "_lpToken": "LP token address",
          "_withUpdate": "Whether update all pools' status"
        }
      },
      "getPoolList()": {
        "returns": {
          "_0": "pooList Total pool list"
        }
      },
      "getUserBalance(uint256,address)": {
        "params": {
          "_poolId": "Id of the pool",
          "_user": "User address"
        },
        "returns": {
          "_0": "balance User's balance (lpToken)"
        }
      },
      "harvest(uint256,address)": {
        "params": {
          "_poolId": "Id of the farming pool",
          "_to": "Receiver of degis rewards"
        }
      },
      "massUpdatePools()": {
        "details": "Can be called by anyone      Only update those active pools"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingDegis(uint256,address)": {
        "params": {
          "_poolId": "PoolId of this farming pool",
          "_user": "User address"
        },
        "returns": {
          "_0": "pendingDegisAmount Amount of pending degis"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDegisReward(uint256,uint256,uint256,bool)": {
        "params": {
          "_basicDegisPerSecond": "New basic reward amount per second",
          "_bonusDegisPerSecond": "New bonus reward amount per second",
          "_poolId": "Id of the farming pool",
          "_withUpdate": "Whether update all pools"
        }
      },
      "setStartTimestamp(uint256)": {
        "params": {
          "_startTimestamp": "New start block timestamp"
        }
      },
      "stake(uint256,uint256)": {
        "details": "Can only stake to the pools that are still farming",
        "params": {
          "_amount": "Staking amount",
          "_poolId": "Id of the farming pool"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBonus(address,uint256)": {
        "details": "When veDEG has balance change      Only called by veDEG contract",
        "params": {
          "_newVeDEGBalance": "New veDEG balance",
          "_user": "User address"
        }
      },
      "updatePool(uint256)": {
        "params": {
          "_poolId": "Id of the farming pool"
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "_amount": "Amount of lp tokens to withdraw",
          "_poolId": "Id of the farming pool"
        }
      }
    },
    "title": "Farming Pool",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add(address,uint256,uint256,bool)": {
        "notice": "Add a new lp into the pool"
      },
      "getPoolList()": {
        "notice": "Get the total pool list"
      },
      "getUserBalance(uint256,address)": {
        "notice": "Get a user's balance"
      },
      "harvest(uint256,address)": {
        "notice": "Harvest the degis reward and can be sent to another address"
      },
      "massUpdatePools()": {
        "notice": "Update all farming pools (except for those stopped ones)"
      },
      "pendingDegis(uint256,address)": {
        "notice": "Check the amount of pending degis reward"
      },
      "setDegisReward(uint256,uint256,uint256,bool)": {
        "notice": "Update the degisPerSecond for a specific pool (set to 0 to stop farming)"
      },
      "setStartTimestamp(uint256)": {
        "notice": "Set the start block timestamp"
      },
      "stake(uint256,uint256)": {
        "notice": "Stake LP token into the farming pool"
      },
      "updateBonus(address,uint256)": {
        "notice": "Update a user's bonus"
      },
      "updatePool(uint256)": {
        "notice": "Update the pool's reward status"
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw lptoken from the pool"
      }
    },
    "notice": "This contract is for LPToken mining on Degis",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2523,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2526,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3044,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2403,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 2515,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2715,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 2759,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2611,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 2700,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10745,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "degis",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IDegisToken)29274"
      },
      {
        "astId": 10748,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "veDEG",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IVeDEG)15069"
      },
      {
        "astId": 10753,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "_nextPoolId",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 10755,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "startTimestamp",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 10774,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "poolList",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_struct(PoolInfo)10770_storage)dyn_storage"
      },
      {
        "astId": 10778,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "poolMapping",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10782,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "isFarming",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 10796,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "userInfo",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)10789_storage))"
      },
      {
        "astId": 10802,
        "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "extraClaimable",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)10770_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)10770_storage",
        "encoding": "dynamic_array",
        "label": "struct FarmingPoolUpgradeable.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDegisToken)29274": {
        "encoding": "inplace",
        "label": "contract IDegisToken",
        "numberOfBytes": "20"
      },
      "t_contract(IVeDEG)15069": {
        "encoding": "inplace",
        "label": "contract IVeDEG",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)10789_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FarmingPoolUpgradeable.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)10789_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)10789_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct FarmingPoolUpgradeable.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)10789_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_struct(PoolInfo)10770_storage": {
        "encoding": "inplace",
        "label": "struct FarmingPoolUpgradeable.PoolInfo",
        "members": [
          {
            "astId": 10757,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10759,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "basicDegisPerSecond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10761,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "bonusDegisPerSecond",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10763,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10765,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "accDegisPerShare",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10767,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "accDegisPerBonusShare",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10769,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "totalBonus",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(UserInfo)10789_storage": {
        "encoding": "inplace",
        "label": "struct FarmingPoolUpgradeable.UserInfo",
        "members": [
          {
            "astId": 10784,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10786,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "stakingBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10788,
            "contract": "contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "bonus",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}