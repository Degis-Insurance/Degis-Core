{
  "address": "0x83E705DF963C4632fDc7b7D159a5A42533DEF30d",
  "abi": [
    {
      "inputs": [],
      "name": "PIV__AlreadyDistributed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PIV__ClaimedAll",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PIV__NoPendingRound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PIV__NotEnoughBuyerTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PIV__NotPassedInterval",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PIV__ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRewardPerRound",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRewardPerRound",
          "type": "uint256"
        }
      ],
      "name": "DegisRewardChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newInterval",
          "type": "uint256"
        }
      ],
      "name": "DistributionIntervalChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentRound",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userReward",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentRound",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "RoundSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentRound",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualAmount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_ROUND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "degisPerRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributionInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardPerRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerRound",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "getTotalUsersInRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserPendingRounds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "getUserShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "getUsersInRound",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyerToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_degisToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userPendingReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasDistributed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "degisPerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_degisPerRound",
          "type": "uint256"
        }
      ],
      "name": "setDegisPerRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newInterval",
          "type": "uint256"
        }
      ],
      "name": "setDistributionInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_threshold",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_reward",
          "type": "uint256[]"
        }
      ],
      "name": "setPiecewise",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settleCurrentRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userSharesInRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastRewardRoundIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x738fb994638157d376e62fd3cab1de7660d2d8d5e5a4918584484ba3ebe58340",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x83E705DF963C4632fDc7b7D159a5A42533DEF30d",
    "transactionIndex": 9,
    "gasUsed": "1817619",
    "logsBloom": "0x
    "blockHash": "0x3f73a3404be9f1c0c5dd4fe33585ebea6808a6db2925e47ac7ea5c730e94e07c",
    "transactionHash": "0x738fb994638157d376e62fd3cab1de7660d2d8d5e5a4918584484ba3ebe58340",
    "logs": [],
    "blockNumber": 14036515,
    "cumulativeGasUsed": "3617057",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "42aa8e0be881e810ab822b61f335cba8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"PIV__AlreadyDistributed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PIV__ClaimedAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PIV__NoPendingRound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PIV__NotEnoughBuyerTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PIV__NotPassedInterval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PIV__ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRewardPerRound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardPerRound\",\"type\":\"uint256\"}],\"name\":\"DegisRewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"DistributionIntervalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentRound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentRound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RoundSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentRound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ROUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"degisPerRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPerRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerRound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getTotalUsersInRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPendingRounds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getUserShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getUsersInRound\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_degisToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userPendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasDistributed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"degisPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_degisPerRound\",\"type\":\"uint256\"}],\"name\":\"setDegisPerRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newInterval\",\"type\":\"uint256\"}],\"name\":\"setDistributionInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_threshold\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_reward\",\"type\":\"uint256[]\"}],\"name\":\"setPiecewise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleCurrentRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userSharesInRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastRewardRoundIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRewardPerRound()\":{\"details\":\"Depends on the total shares in this round\",\"returns\":{\"rewardPerRound\":\"Degis reward per round\"}},\"getTotalUsersInRound(uint256)\":{\"params\":{\"_round\":\"Round number to check\"},\"returns\":{\"_0\":\"totalUsers Total amount of users in _round\"}},\"getUserPendingRounds(address)\":{\"params\":{\"_user\":\"User address to check\"},\"returns\":{\"_0\":\"pendingRounds User's pending rounds\"}},\"getUserShares(address,uint256)\":{\"params\":{\"_round\":\"Round number\",\"_user\":\"Address of the user\"},\"returns\":{\"_0\":\"userShares User's shares in the current round\"}},\"getUsersInRound(uint256)\":{\"params\":{\"_round\":\"Round number to check\"},\"returns\":{\"_0\":\"users All user addresses in this round\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingReward(address)\":{\"params\":{\"_user\":\"User address\"},\"returns\":{\"userPendingReward\":\"User's pending reward\"}},\"redeem(uint256)\":{\"params\":{\"_amount\":\"Amount to redeem\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDegisPerRound(uint256)\":{\"params\":{\"_degisPerRound\":\"Degis distribution per round\"}},\"setDistributionInterval(uint256)\":{\"params\":{\"_newInterval\":\"The new interval\"}},\"setPiecewise(uint256[],uint256[])\":{\"params\":{\"_reward\":\"The piecewise reward\",\"_threshold\":\"The threshold\"}},\"settleCurrentRound()\":{\"details\":\"Callable by any address, must pass the distribution interval\"},\"stake(uint256)\":{\"params\":{\"_amount\":\"Amount of buyer tokens to stake\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Purchase Incentive Vault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim()\":{\"notice\":\"User can claim his own reward\"},\"getRewardPerRound()\":{\"notice\":\"Get degis reward per round\"},\"getTotalUsersInRound(uint256)\":{\"notice\":\"Get the amount of users in _round, used for distribution\"},\"getUserPendingRounds(address)\":{\"notice\":\"Get user's pending rounds\"},\"getUserShares(address,uint256)\":{\"notice\":\"Get your shares in the current round\"},\"getUsersInRound(uint256)\":{\"notice\":\"Get the user addresses in _round\"},\"pendingReward(address)\":{\"notice\":\"Get a user's pending reward\"},\"redeem(uint256)\":{\"notice\":\"Redeem buyer token from the vault\"},\"setDegisPerRound(uint256)\":{\"notice\":\"Set degis distribution per round\"},\"setDistributionInterval(uint256)\":{\"notice\":\"Set a new distribution interval\"},\"setPiecewise(uint256[],uint256[])\":{\"notice\":\"Set the threshold and piecewise reward\"},\"settleCurrentRound()\":{\"notice\":\"Setttle the current round\"},\"stake(uint256)\":{\"notice\":\"Stake buyer tokens into this contract\"}},\"notice\":\"This is the purchase incentive vault for staking buyer tokens         Users first stake their buyer tokens and wait for distribution         About every 24 hours, the reward will be calculated to users' account         After disrtribution, reward will be updated              but it still need to be manually claimed.         Buyer tokens can only be used once         You can withdraw your buyer token within the same round (current round)         They can not be withdrawed if the round was settled\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farming/PurchaseIncentiveVault.sol\":\"PurchaseIncentiveVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe7713f1b362f8b80e28d5a7e8b66c3f2236203fd86d01eca0a29a9e6a3f4d97f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"contracts/farming/PurchaseIncentiveVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n    *******         **********     ***********     *****     ***********\\n    *      *        *              *                 *       *\\n    *        *      *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     **********     *       *****     *       ***********\\n    *         *     *              *         *       *                 *\\n    *         *     *              *         *       *                 *\\n    *        *      *              *         *       *                 *\\n    *      *        *              *         *       *                 *\\n    *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\npragma solidity ^0.8.10;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../tokens/interfaces/IDegisToken.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\n/**\\n * @title  Purchase Incentive Vault\\n * @notice This is the purchase incentive vault for staking buyer tokens\\n *         Users first stake their buyer tokens and wait for distribution\\n *         About every 24 hours, the reward will be calculated to users' account\\n *         After disrtribution, reward will be updated\\n *              but it still need to be manually claimed.\\n *\\n *         Buyer tokens can only be used once\\n *         You can withdraw your buyer token within the same round (current round)\\n *         They can not be withdrawed if the round was settled\\n */\\ncontract PurchaseIncentiveVault is\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    string public constant name = \\\"Degis Purchase Incentive Vault\\\";\\n\\n    // Buyer Token & Degis Token SCALE = 1e18\\n    uint256 public constant SCALE = 1e18;\\n\\n    // Other contracts\\n    IERC20 buyerToken;\\n    IDegisToken degis;\\n\\n    // Current round number\\n    uint256 public currentRound;\\n\\n    // Degis reward per round\\n    uint256 public degisPerRound;\\n\\n    // The interval will only limit the distribution (not the staking)\\n    uint256 public distributionInterval;\\n\\n    // Last distribution block\\n    uint256 public lastDistribution;\\n\\n    // Max round for one claim\\n    // When upgrade this parameter, redeploy the contract\\n    uint256 public constant MAX_ROUND = 50;\\n\\n    struct RoundInfo {\\n        uint256 shares;\\n        address[] users;\\n        bool hasDistributed;\\n        uint256 degisPerShare;\\n    }\\n    mapping(uint256 => RoundInfo) public rounds;\\n\\n    struct UserInfo {\\n        uint256 lastRewardRoundIndex;\\n        uint256[] pendingRounds;\\n    }\\n    mapping(address => UserInfo) public users;\\n\\n    // User address => Round number => User shares\\n    mapping(address => mapping(uint256 => uint256)) public userSharesInRound;\\n\\n    uint256[] threshold;\\n    uint256[] piecewise;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event DegisRewardChanged(\\n        uint256 oldRewardPerRound,\\n        uint256 newRewardPerRound\\n    );\\n    event DistributionIntervalChanged(uint256 oldInterval, uint256 newInterval);\\n    event Stake(\\n        address userAddress,\\n        uint256 currentRound,\\n        uint256 actualAmount\\n    );\\n    event Redeem(address userAddress, uint256 currentRound, uint256 amount);\\n    event RewardClaimed(address userAddress, uint256 userReward);\\n    event RoundSettled(uint256 currentRound, uint256 blockNumber);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Errors ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    error PIV__NotPassedInterval();\\n    error PIV__ZeroAmount();\\n    error PIV__NotEnoughBuyerTokens();\\n    error PIV__AlreadyDistributed();\\n    error PIV__NoPendingRound();\\n    error PIV__ClaimedAll();\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function initialize(address _buyerToken, address _degisToken)\\n        public\\n        initializer\\n    {\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        // Initialize two tokens\\n        buyerToken = IERC20(_buyerToken);\\n        degis = IDegisToken(_degisToken);\\n\\n        // Initialize the last distribution time\\n        lastDistribution = block.timestamp;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Check if admins can distribute now\\n     * @dev Should pass the distribution interval\\n     */\\n    modifier hasPassedInterval() {\\n        if (block.timestamp - lastDistribution <= distributionInterval)\\n            revert PIV__NotPassedInterval();\\n\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get the amount of users in _round, used for distribution\\n     * @param _round Round number to check\\n     * @return totalUsers Total amount of users in _round\\n     */\\n    function getTotalUsersInRound(uint256 _round)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return rounds[_round].users.length;\\n    }\\n\\n    /**\\n     * @notice Get the user addresses in _round\\n     * @param _round Round number to check\\n     * @return users All user addresses in this round\\n     */\\n    function getUsersInRound(uint256 _round)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return rounds[_round].users;\\n    }\\n\\n    /**\\n     * @notice Get user's pending rounds\\n     * @param _user User address to check\\n     * @return pendingRounds User's pending rounds\\n     */\\n    function getUserPendingRounds(address _user)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return users[_user].pendingRounds;\\n    }\\n\\n    /**\\n     * @notice Get your shares in the current round\\n     * @param _user Address of the user\\n     * @param _round Round number\\n     * @return userShares User's shares in the current round\\n     */\\n    function getUserShares(address _user, uint256 _round)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return userSharesInRound[_user][_round];\\n    }\\n\\n    /**\\n     * @notice Get a user's pending reward\\n     * @param _user User address\\n     * @return userPendingReward User's pending reward\\n     */\\n    function pendingReward(address _user)\\n        external\\n        view\\n        returns (uint256 userPendingReward)\\n    {\\n        UserInfo memory user = users[_user];\\n\\n        // Total rounds that need to be distributed\\n        uint256 length = user.pendingRounds.length - user.lastRewardRoundIndex;\\n\\n        // Start from last reward round index\\n        uint256 startIndex = user.lastRewardRoundIndex;\\n\\n        for (uint256 i = startIndex; i < startIndex + length; i++) {\\n            uint256 round = user.pendingRounds[i];\\n\\n            userPendingReward +=\\n                (rounds[round].degisPerShare *\\n                    userSharesInRound[_user][round]) /\\n                SCALE;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get degis reward per round\\n     * @dev Depends on the total shares in this round\\n     * @return rewardPerRound Degis reward per round\\n     */\\n    function getRewardPerRound() public view returns (uint256 rewardPerRound) {\\n        uint256 buyerBalance = rounds[currentRound].shares;\\n\\n        uint256[] memory thresholdM = threshold;\\n\\n        // If no piecewise is set, use the default degisPerRound\\n        if (thresholdM.length == 0) rewardPerRound = degisPerRound;\\n        else {\\n            for (uint256 i = thresholdM.length - 1; i >= 0; ) {\\n                if (buyerBalance >= thresholdM[i]) {\\n                    rewardPerRound = piecewise[i];\\n                    break;\\n                }\\n                unchecked {\\n                    --i;\\n                }\\n            }\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function pause() external onlyOwner {\\n        super._pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        super._unpause();\\n    }\\n\\n    /**\\n     * @notice Set degis distribution per round\\n     * @param _degisPerRound Degis distribution per round\\n     */\\n    function setDegisPerRound(uint256 _degisPerRound) external onlyOwner {\\n        emit DegisRewardChanged(degisPerRound, _degisPerRound);\\n        degisPerRound = _degisPerRound;\\n    }\\n\\n    /**\\n     * @notice Set a new distribution interval\\n     * @param _newInterval The new interval\\n     */\\n    function setDistributionInterval(uint256 _newInterval) external onlyOwner {\\n        emit DistributionIntervalChanged(distributionInterval, _newInterval);\\n        distributionInterval = _newInterval;\\n    }\\n\\n    /**\\n     * @notice Set the threshold and piecewise reward\\n     * @param _threshold The threshold\\n     * @param _reward The piecewise reward\\n     */\\n    function setPiecewise(\\n        uint256[] calldata _threshold,\\n        uint256[] calldata _reward\\n    ) external onlyOwner {\\n        threshold = _threshold;\\n        piecewise = _reward;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Stake buyer tokens into this contract\\n     * @param _amount Amount of buyer tokens to stake\\n     */\\n    function stake(uint256 _amount) external nonReentrant whenNotPaused {\\n        if (_amount == 0) revert PIV__ZeroAmount();\\n\\n        // Save gas\\n        uint256 round = currentRound;\\n\\n        // User info of msg.sender\\n        UserInfo storage user = users[msg.sender];\\n\\n        // If the user has not staked in this round, record this new user to the users array\\n        if (userSharesInRound[msg.sender][round] == 0) {\\n            rounds[round].users.push(msg.sender);\\n        }\\n\\n        userSharesInRound[msg.sender][round] += _amount;\\n\\n        uint256 length = user.pendingRounds.length;\\n        // Only add the round if it's not in the array\\n        // Condition 1: length == 0 => no pending rounds => add this round\\n        // Condition 2: length != 0 && last pending round is not the current round => add this round\\n        if (\\n            length == 0 ||\\n            (length != 0 && user.pendingRounds[length - 1] != round)\\n        ) user.pendingRounds.push(round);\\n\\n        // Update the total shares\\n        rounds[round].shares += _amount;\\n\\n        // Finish the token transfer (need approval)\\n        buyerToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit Stake(msg.sender, round, _amount);\\n    }\\n\\n    /**\\n     * @notice Redeem buyer token from the vault\\n     * @param _amount Amount to redeem\\n     */\\n    function redeem(uint256 _amount) external nonReentrant whenNotPaused {\\n        if (_amount == 0) revert PIV__ZeroAmount();\\n\\n        uint256 round = currentRound;\\n\\n        uint256 userBalance = userSharesInRound[msg.sender][round];\\n        if (userBalance < _amount) revert PIV__NotEnoughBuyerTokens();\\n\\n        userSharesInRound[msg.sender][round] -= _amount;\\n\\n        // If redeem all buyer tokens, remove this round from the user's pending rounds\\n        if (userSharesInRound[msg.sender][round] == 0) {\\n            users[msg.sender].pendingRounds.pop();\\n        }\\n\\n        rounds[round].shares -= _amount;\\n\\n        // Finish the buyer token transfer\\n        buyerToken.safeTransfer(msg.sender, _amount);\\n\\n        emit Redeem(msg.sender, round, _amount);\\n    }\\n\\n    /**\\n     * @notice Setttle the current round\\n     * @dev Callable by any address, must pass the distribution interval\\n     */\\n    function settleCurrentRound() external hasPassedInterval whenNotPaused {\\n        RoundInfo storage info = rounds[currentRound];\\n        if (info.hasDistributed) revert PIV__AlreadyDistributed();\\n\\n        uint256 totalShares = info.shares;\\n        uint256 totalReward = getRewardPerRound();\\n\\n        // If no one staked, no reward\\n        if (totalShares == 0) info.degisPerShare = 0;\\n        else info.degisPerShare = (totalReward * SCALE) / totalShares;\\n\\n        info.hasDistributed = true;\\n\\n        emit RoundSettled(currentRound, block.timestamp);\\n\\n        // Update current round, ++ save little gas\\n        ++currentRound;\\n\\n        // Update last distribution time\\n        lastDistribution = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice User can claim his own reward\\n     */\\n    function claim() external nonReentrant whenNotPaused {\\n        UserInfo memory user = users[msg.sender];\\n\\n        if (user.pendingRounds.length == 0) revert PIV__NoPendingRound();\\n\\n        uint256 roundsToClaim = user.pendingRounds.length -\\n            user.lastRewardRoundIndex;\\n\\n        if (roundsToClaim == 0) revert PIV__ClaimedAll();\\n\\n        if (user.pendingRounds[user.pendingRounds.length - 1] == currentRound) {\\n            roundsToClaim -= 1;\\n        }\\n\\n        uint256 startIndex = user.lastRewardRoundIndex;\\n\\n        // MAX_ROUND to claim each time\\n        if (roundsToClaim > MAX_ROUND) {\\n            roundsToClaim = MAX_ROUND;\\n            users[msg.sender].lastRewardRoundIndex += MAX_ROUND;\\n        } else users[msg.sender].lastRewardRoundIndex += roundsToClaim;\\n\\n        uint256 userPendingReward;\\n        \\n\\n        for (uint256 i = startIndex; i < startIndex + roundsToClaim;) {\\n            uint256 round = user.pendingRounds[i];\\n\\n            userPendingReward +=\\n                (rounds[round].degisPerShare *\\n                    userSharesInRound[msg.sender][round]) /\\n                SCALE;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Mint reward to user\\n        degis.mintDegis(msg.sender, userPendingReward);\\n    }\\n}\\n\",\"keccak256\":\"0x30d59e796171d74c106ab2c4ea82a901117ab56d18485dfb778387d3ebebc9c5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/tokens/interfaces/IDegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDegisToken is IERC20, IERC20Permit {\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Functions ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n    function CAP() external view returns (uint256);\\n\\n    /**\\n     * @notice Mint degis tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be minted\\n     */\\n    function mintDegis(address _account, uint256 _amount) external;\\n\\n    /**\\n     * @notice Burn degis tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be burned\\n     */\\n    function burnDegis(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x2675ac6dcc4488569e495c713897e2658573fdc21934ab92fd49ff57035265a8\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611ffc806100206000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063a694fc3a11610104578063ca1fe809116100a2578063eced552611610071578063eced55261461041c578063ef618eb51461042b578063f2fde38b1461044b578063f40f0f521461045e57600080fd5b8063ca1fe809146103db578063db006a75146103e3578063ddd9d045146103f6578063e6848ead1461040957600080fd5b8063b4ac62c5116100de578063b4ac62c514610397578063c42d5efb1461039f578063c708c5f4146103bf578063c966fbf8146103c857600080fd5b8063a694fc3a1461035b578063a717639c1461036e578063a87430ba1461037757600080fd5b80635c975abb1161017c5780638456cb591161014b5780638456cb59146102f05780638a19c8bc146102f85780638c65c81f146103015780638da5cb5b1461034257600080fd5b80635c975abb146102b957806371201a0e146102cc578063715018a6146102d55780637a16a49e146102dd57600080fd5b80633f4ba83a116101b85780633f4ba83a1461028c578063482d1adb14610296578063485cc9551461029e5780634e71d92d146102b157600080fd5b806306fdde03146101df5780631aeee41d146102315780632f01790114610261575b600080fd5b61021b6040518060400160405280601e81526020017f446567697320507572636861736520496e63656e74697665205661756c74000081525081565b60405161022891906117e3565b60405180910390f35b61025461023f36600461180c565b600090815260cf602052604090206001015490565b6040516102289190611835565b61025461026f366004611868565b60d160209081526000928352604080842090915290825290205481565b610294610471565b005b6102546104ae565b6102946102ac3660046118a5565b61058d565b61029461065a565b60655460ff1660405161022891906118e0565b61025460cd5481565b610294610963565b6102946102eb36600461180c565b610997565b610294610a01565b61025460cb5481565b61033361030f36600461180c565b60cf60205260009081526040902080546002820154600390920154909160ff169083565b604051610228939291906118ee565b6033546001600160a01b0316604051610228919061191f565b61029461036936600461180c565b610a33565b61025460ce5481565b61025461038536600461192d565b60d06020526000908152604090205481565b610254603281565b6103b26103ad36600461192d565b610c1b565b60405161022891906119ac565b61025460cc5481565b6102946103d6366004611a0f565b610c8a565b610294610cd4565b6102946103f136600461180c565b610e36565b610254610404366004611868565b610ffc565b61029461041736600461180c565b611027565b610254670de0b6b3a764000081565b61043e61043936600461180c565b611091565b6040516102289190611acf565b61029461045936600461192d565b6110ff565b61025461046c36600461192d565b61115b565b6033546001600160a01b031633146104a45760405162461bcd60e51b815260040161049b90611b10565b60405180910390fd5b6104ac6112a4565b565b60cb54600090815260cf602090815260408083205460d2805483518186028101860190945280845291938593929083018282801561050b57602002820191906000526020600020905b8154815260200190600101908083116104f7575b505050505090508051600014156105265760cc549250505090565b6000600182516105369190611b36565b90505b81818151811061054b5761054b611b4d565b6020026020010151831061057e5760d3818154811061056c5761056c611b4d565b90600052602060002001549350610587565b60001901610539565b50505090565b600054610100900460ff166105a85760005460ff16156105ac565b303b155b6105c85760405162461bcd60e51b815260040161049b90611bbd565b600054610100900460ff161580156105ea576000805461ffff19166101011790555b6105f261130a565b6105fa611339565b610602611368565b60c980546001600160a01b0380861673ffffffffffffffffffffffffffffffffffffffff199283161790925560ca8054928516929091169190911790554260ce558015610655576000805461ff00191690555b505050565b6002609754141561067d5760405162461bcd60e51b815260040161049b90611bff565b600260975560655460ff16156106a55760405162461bcd60e51b815260040161049b90611c41565b33600090815260d0602090815260408083208151808301835281548152600182018054845181870281018701909552808552919492938584019390929083018282801561071157602002820191906000526020600020905b8154815260200190600101908083116106fd575b50505050508152505090508060200151516000141561075c576040517f72f62ba900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805160208201515160009161077091611b36565b9050806107a9576040517fd4b9bf3a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cb54602083015180516107bf90600190611b36565b815181106107cf576107cf611b4d565b602002602001015114156107eb576107e8600182611b36565b90505b815160328211156108245733600090815260d060205260408120805460329450849290610819908490611c51565b909155506108499050565b33600090815260d0602052604081208054849290610843908490611c51565b90915550505b6000815b6108578484611c51565b8110156108da5760008560200151828151811061087657610876611b4d565b60209081029190910181015133600090815260d18352604080822083835284528082205460cf909452902060030154909250670de0b6b3a7640000916108bb91611c69565b6108c59190611c9e565b6108cf9084611c51565b92505060010161084d565b5060ca546040517fb47673980000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063b4767398906109269033908590600401611cb2565b600060405180830381600087803b15801561094057600080fd5b505af1158015610954573d6000803e3d6000fd5b50506001609755505050505050565b6033546001600160a01b0316331461098d5760405162461bcd60e51b815260040161049b90611b10565b6104ac6000611397565b6033546001600160a01b031633146109c15760405162461bcd60e51b815260040161049b90611b10565b7f0bcbec4c9da357687b1300891e9be5627182572bb49e955ea7d37afcd927598460cd54826040516109f4929190611ccd565b60405180910390a160cd55565b6033546001600160a01b03163314610a2b5760405162461bcd60e51b815260040161049b90611b10565b6104ac6113f6565b60026097541415610a565760405162461bcd60e51b815260040161049b90611bff565b600260975560655460ff1615610a7e5760405162461bcd60e51b815260040161049b90611c41565b80610a9c57604051631a4a5ecf60e01b815260040160405180910390fd5b60cb5433600090815260d06020908152604080832060d1835281842085855290925290912054610b0557600082815260cf6020908152604082206001908101805491820181558352912001805473ffffffffffffffffffffffffffffffffffffffff1916331790555b33600090815260d16020908152604080832085845290915281208054859290610b2f908490611c51565b90915550506001810154801580610b7b57508015801590610b7b57508282600101600183610b5d9190611b36565b81548110610b6d57610b6d611b4d565b906000526020600020015414155b15610b9a57600180830180549182018155600090815260209020018390555b600083815260cf602052604081208054869290610bb8908490611c51565b909155505060c954610bd5906001600160a01b031633308761144e565b7f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b6338486604051610c0893929190611cdb565b60405180910390a1505060016097555050565b6001600160a01b038116600090815260d06020908152604091829020600101805483518184028101840190945280845260609392830182828015610c7e57602002820191906000526020600020905b815481526020019060010190808311610c6a575b50505050509050919050565b6033546001600160a01b03163314610cb45760405162461bcd60e51b815260040161049b90611b10565b610cc060d28585611725565b50610ccd60d38383611725565b5050505050565b60cd5460ce54610ce49042611b36565b11610d1b576040517f15d7f40300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60655460ff1615610d3e5760405162461bcd60e51b815260040161049b90611c41565b60cb54600090815260cf60205260409020600281015460ff1615610d8e576040517fadf8d84100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80546000610d9a6104ae565b905081610dad5760006003840155610dd0565b81610dc0670de0b6b3a764000083611c69565b610dca9190611c9e565b60038401555b60028301805460ff1916600117905560cb546040517f84ea2725ed7015ebac8f69258b09c394b1f22b1031d4393a1580b3935058d7dc91610e12914290611ccd565b60405180910390a160cb60008154610e2990611cf6565b90915550504260ce555050565b60026097541415610e595760405162461bcd60e51b815260040161049b90611bff565b600260975560655460ff1615610e815760405162461bcd60e51b815260040161049b90611c41565b80610e9f57604051631a4a5ecf60e01b815260040160405180910390fd5b60cb5433600090815260d16020908152604080832084845290915290205482811015610ef7576040517f57464c4300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260d16020908152604080832085845290915281208054859290610f21908490611b36565b909155505033600090815260d160209081526040808320858452909152902054610f7d5733600090815260d060205260409020600101805480610f6657610f66611d11565b600190038181906000526020600020016000905590555b600082815260cf602052604081208054859290610f9b908490611b36565b909155505060c954610fb7906001600160a01b031633856114d9565b7fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929338385604051610fea93929190611cdb565b60405180910390a15050600160975550565b6001600160a01b038216600090815260d1602090815260408083208484529091529020545b92915050565b6033546001600160a01b031633146110515760405162461bcd60e51b815260040161049b90611b10565b7f08c48647d7747ed2d79428c4b86c76dfe48af099e796d87b7b311925e76d2c4060cc5482604051611084929190611ccd565b60405180910390a160cc55565b600081815260cf6020908152604091829020600101805483518184028101840190945280845260609392830182828015610c7e57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116110d65750505050509050919050565b6033546001600160a01b031633146111295760405162461bcd60e51b815260040161049b90611b10565b6001600160a01b03811661114f5760405162461bcd60e51b815260040161049b90611d7f565b61115881611397565b50565b6001600160a01b038116600090815260d06020908152604080832081518083018352815481526001820180548451818702810187019095528085528695929485840193909291908301828280156111d157602002820191906000526020600020905b8154815260200190600101908083116111bd575b5050505050815250509050600081600001518260200151516111f39190611b36565b8251909150805b6112048383611c51565b81101561129b5760008460200151828151811061122357611223611b4d565b6020908102919091018101516001600160a01b038916600090815260d18352604080822083835284528082205460cf909452902060030154909250670de0b6b3a76400009161127191611c69565b61127b9190611c9e565b6112859087611c51565b955050808061129390611cf6565b9150506111fa565b50505050919050565b60655460ff166112c65760405162461bcd60e51b815260040161049b90611dc1565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051611300919061191f565b60405180910390a1565b600054610100900460ff166113315760405162461bcd60e51b815260040161049b90611e29565b6104ac6114f8565b600054610100900460ff166113605760405162461bcd60e51b815260040161049b90611e29565b6104ac611528565b600054610100900460ff1661138f5760405162461bcd60e51b815260040161049b90611e29565b6104ac61155b565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff16156114195760405162461bcd60e51b815260040161049b90611c41565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112f33390565b6114d3846323b872dd60e01b85858560405160240161146f93929190611e39565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611589565b50505050565b6106558363a9059cbb60e01b848460405160240161146f929190611cb2565b600054610100900460ff1661151f5760405162461bcd60e51b815260040161049b90611e29565b6104ac33611397565b600054610100900460ff1661154f5760405162461bcd60e51b815260040161049b90611e29565b6065805460ff19169055565b600054610100900460ff166115825760405162461bcd60e51b815260040161049b90611e29565b6001609755565b60006115de826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116189092919063ffffffff16565b80519091501561065557808060200190518101906115fc9190611e67565b6106555760405162461bcd60e51b815260040161049b90611ee0565b60606116278484600085611631565b90505b9392505050565b6060824710156116535760405162461bcd60e51b815260040161049b90611f48565b843b6116715760405162461bcd60e51b815260040161049b90611f8a565b600080866001600160a01b0316858760405161168d9190611fbc565b60006040518083038185875af1925050503d80600081146116ca576040519150601f19603f3d011682016040523d82523d6000602084013e6116cf565b606091505b50915091506116df8282866116ec565b925050505b949350505050565b606083156116fb57508161162a565b82511561170b5782518084602001fd5b8160405162461bcd60e51b815260040161049b91906117e3565b828054828255906000526020600020908101928215611760579160200282015b82811115611760578235825591602001919060010190611745565b5061176c929150611770565b5090565b5b8082111561176c5760008155600101611771565b60005b838110156117a0578181015183820152602001611788565b838111156114d35750506000910152565b60006117bb825190565b8084526020840193506117d2818560208601611785565b601f01601f19169290920192915050565b6020808252810161162a81846117b1565b805b811461115857600080fd5b8035611021816117f4565b60006020828403121561182157611821600080fd5b60006116e48484611801565b805b82525050565b60208101611021828461182d565b60006001600160a01b038216611021565b6117f681611843565b803561102181611854565b6000806040838503121561187e5761187e600080fd5b600061188a858561185d565b925050602061189b85828601611801565b9150509250929050565b600080604083850312156118bb576118bb600080fd5b60006118c7858561185d565b925050602061189b8582860161185d565b80151561182f565b6020810161102182846118d8565b606081016118fc828661182d565b61190960208301856118d8565b6116e4604083018461182d565b61182f81611843565b602081016110218284611916565b60006020828403121561194257611942600080fd5b60006116e4848461185d565b611958828261182d565b5060200190565b60200190565b600061196f825190565b808452602093840193830160005b828110156119a2578151611991878261194e565b96505060208201915060010161197d565b5093949350505050565b6020808252810161162a8184611965565b60008083601f8401126119d2576119d2600080fd5b50813567ffffffffffffffff8111156119ed576119ed600080fd5b602083019150836020820283011115611a0857611a08600080fd5b9250929050565b60008060008060408587031215611a2857611a28600080fd5b843567ffffffffffffffff811115611a4257611a42600080fd5b611a4e878288016119bd565b9450945050602085013567ffffffffffffffff811115611a7057611a70600080fd5b611a7c878288016119bd565b95989497509550505050565b6119588282611916565b6000611a9c825190565b808452602093840193830160005b828110156119a2578151611abe8782611a88565b965050602082019150600101611aaa565b6020808252810161162a8184611a92565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815261195f565b6020808252810161102181611ae0565b634e487b7160e01b600052601160045260246000fd5b600082821015611b4857611b48611b20565b500390565b634e487b7160e01b600052603260045260246000fd5b602e8152602081017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181527f647920696e697469616c697a6564000000000000000000000000000000000000602082015290505b60400190565b6020808252810161102181611b63565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c008152905061195f565b6020808252810161102181611bcd565b60108152602081017f5061757361626c653a20706175736564000000000000000000000000000000008152905061195f565b6020808252810161102181611c0f565b60008219821115611c6457611c64611b20565b500190565b6000816000190483118215151615611c8357611c83611b20565b500290565b634e487b7160e01b600052601260045260246000fd5b600082611cad57611cad611c88565b500490565b60408101611cc08285611916565b61162a602083018461182d565b60408101611cc0828561182d565b60608101611ce98286611916565b611909602083018561182d565b6000600019821415611d0a57611d0a611b20565b5060010190565b634e487b7160e01b600052603160045260246000fd5b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529050611bb7565b6020808252810161102181611d27565b60148152602081017f5061757361626c653a206e6f74207061757365640000000000000000000000008152905061195f565b6020808252810161102181611d8f565b602b8152602081017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981527f6e697469616c697a696e6700000000000000000000000000000000000000000060208201529050611bb7565b6020808252810161102181611dd1565b60608101611e478286611916565b6119096020830185611916565b8015156117f6565b805161102181611e54565b600060208284031215611e7c57611e7c600080fd5b60006116e48484611e5c565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f7420737563636565640000000000000000000000000000000000000000000060208201529050611bb7565b6020808252810161102181611e88565b60268152602081017f416464726573733a20696e73756666696369656e742062616c616e636520666f81527f722063616c6c000000000000000000000000000000000000000000000000000060208201529050611bb7565b6020808252810161102181611ef0565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000008152905061195f565b6020808252810161102181611f58565b6000611fa4825190565b611fb2818560208601611785565b9290920192915050565b6110218183611f9a56fea26469706673582212204c8b32a7be5100761c0472f56f5051b21f4eb9c5f333f7b453d086c65991173c64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c8063a694fc3a11610104578063ca1fe809116100a2578063eced552611610071578063eced55261461041c578063ef618eb51461042b578063f2fde38b1461044b578063f40f0f521461045e57600080fd5b8063ca1fe809146103db578063db006a75146103e3578063ddd9d045146103f6578063e6848ead1461040957600080fd5b8063b4ac62c5116100de578063b4ac62c514610397578063c42d5efb1461039f578063c708c5f4146103bf578063c966fbf8146103c857600080fd5b8063a694fc3a1461035b578063a717639c1461036e578063a87430ba1461037757600080fd5b80635c975abb1161017c5780638456cb591161014b5780638456cb59146102f05780638a19c8bc146102f85780638c65c81f146103015780638da5cb5b1461034257600080fd5b80635c975abb146102b957806371201a0e146102cc578063715018a6146102d55780637a16a49e146102dd57600080fd5b80633f4ba83a116101b85780633f4ba83a1461028c578063482d1adb14610296578063485cc9551461029e5780634e71d92d146102b157600080fd5b806306fdde03146101df5780631aeee41d146102315780632f01790114610261575b600080fd5b61021b6040518060400160405280601e81526020017f446567697320507572636861736520496e63656e74697665205661756c74000081525081565b60405161022891906117e3565b60405180910390f35b61025461023f36600461180c565b600090815260cf602052604090206001015490565b6040516102289190611835565b61025461026f366004611868565b60d160209081526000928352604080842090915290825290205481565b610294610471565b005b6102546104ae565b6102946102ac3660046118a5565b61058d565b61029461065a565b60655460ff1660405161022891906118e0565b61025460cd5481565b610294610963565b6102946102eb36600461180c565b610997565b610294610a01565b61025460cb5481565b61033361030f36600461180c565b60cf60205260009081526040902080546002820154600390920154909160ff169083565b604051610228939291906118ee565b6033546001600160a01b0316604051610228919061191f565b61029461036936600461180c565b610a33565b61025460ce5481565b61025461038536600461192d565b60d06020526000908152604090205481565b610254603281565b6103b26103ad36600461192d565b610c1b565b60405161022891906119ac565b61025460cc5481565b6102946103d6366004611a0f565b610c8a565b610294610cd4565b6102946103f136600461180c565b610e36565b610254610404366004611868565b610ffc565b61029461041736600461180c565b611027565b610254670de0b6b3a764000081565b61043e61043936600461180c565b611091565b6040516102289190611acf565b61029461045936600461192d565b6110ff565b61025461046c36600461192d565b61115b565b6033546001600160a01b031633146104a45760405162461bcd60e51b815260040161049b90611b10565b60405180910390fd5b6104ac6112a4565b565b60cb54600090815260cf602090815260408083205460d2805483518186028101860190945280845291938593929083018282801561050b57602002820191906000526020600020905b8154815260200190600101908083116104f7575b505050505090508051600014156105265760cc549250505090565b6000600182516105369190611b36565b90505b81818151811061054b5761054b611b4d565b6020026020010151831061057e5760d3818154811061056c5761056c611b4d565b90600052602060002001549350610587565b60001901610539565b50505090565b600054610100900460ff166105a85760005460ff16156105ac565b303b155b6105c85760405162461bcd60e51b815260040161049b90611bbd565b600054610100900460ff161580156105ea576000805461ffff19166101011790555b6105f261130a565b6105fa611339565b610602611368565b60c980546001600160a01b0380861673ffffffffffffffffffffffffffffffffffffffff199283161790925560ca8054928516929091169190911790554260ce558015610655576000805461ff00191690555b505050565b6002609754141561067d5760405162461bcd60e51b815260040161049b90611bff565b600260975560655460ff16156106a55760405162461bcd60e51b815260040161049b90611c41565b33600090815260d0602090815260408083208151808301835281548152600182018054845181870281018701909552808552919492938584019390929083018282801561071157602002820191906000526020600020905b8154815260200190600101908083116106fd575b50505050508152505090508060200151516000141561075c576040517f72f62ba900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805160208201515160009161077091611b36565b9050806107a9576040517fd4b9bf3a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cb54602083015180516107bf90600190611b36565b815181106107cf576107cf611b4d565b602002602001015114156107eb576107e8600182611b36565b90505b815160328211156108245733600090815260d060205260408120805460329450849290610819908490611c51565b909155506108499050565b33600090815260d0602052604081208054849290610843908490611c51565b90915550505b6000815b6108578484611c51565b8110156108da5760008560200151828151811061087657610876611b4d565b60209081029190910181015133600090815260d18352604080822083835284528082205460cf909452902060030154909250670de0b6b3a7640000916108bb91611c69565b6108c59190611c9e565b6108cf9084611c51565b92505060010161084d565b5060ca546040517fb47673980000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063b4767398906109269033908590600401611cb2565b600060405180830381600087803b15801561094057600080fd5b505af1158015610954573d6000803e3d6000fd5b50506001609755505050505050565b6033546001600160a01b0316331461098d5760405162461bcd60e51b815260040161049b90611b10565b6104ac6000611397565b6033546001600160a01b031633146109c15760405162461bcd60e51b815260040161049b90611b10565b7f0bcbec4c9da357687b1300891e9be5627182572bb49e955ea7d37afcd927598460cd54826040516109f4929190611ccd565b60405180910390a160cd55565b6033546001600160a01b03163314610a2b5760405162461bcd60e51b815260040161049b90611b10565b6104ac6113f6565b60026097541415610a565760405162461bcd60e51b815260040161049b90611bff565b600260975560655460ff1615610a7e5760405162461bcd60e51b815260040161049b90611c41565b80610a9c57604051631a4a5ecf60e01b815260040160405180910390fd5b60cb5433600090815260d06020908152604080832060d1835281842085855290925290912054610b0557600082815260cf6020908152604082206001908101805491820181558352912001805473ffffffffffffffffffffffffffffffffffffffff1916331790555b33600090815260d16020908152604080832085845290915281208054859290610b2f908490611c51565b90915550506001810154801580610b7b57508015801590610b7b57508282600101600183610b5d9190611b36565b81548110610b6d57610b6d611b4d565b906000526020600020015414155b15610b9a57600180830180549182018155600090815260209020018390555b600083815260cf602052604081208054869290610bb8908490611c51565b909155505060c954610bd5906001600160a01b031633308761144e565b7f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b6338486604051610c0893929190611cdb565b60405180910390a1505060016097555050565b6001600160a01b038116600090815260d06020908152604091829020600101805483518184028101840190945280845260609392830182828015610c7e57602002820191906000526020600020905b815481526020019060010190808311610c6a575b50505050509050919050565b6033546001600160a01b03163314610cb45760405162461bcd60e51b815260040161049b90611b10565b610cc060d28585611725565b50610ccd60d38383611725565b5050505050565b60cd5460ce54610ce49042611b36565b11610d1b576040517f15d7f40300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60655460ff1615610d3e5760405162461bcd60e51b815260040161049b90611c41565b60cb54600090815260cf60205260409020600281015460ff1615610d8e576040517fadf8d84100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80546000610d9a6104ae565b905081610dad5760006003840155610dd0565b81610dc0670de0b6b3a764000083611c69565b610dca9190611c9e565b60038401555b60028301805460ff1916600117905560cb546040517f84ea2725ed7015ebac8f69258b09c394b1f22b1031d4393a1580b3935058d7dc91610e12914290611ccd565b60405180910390a160cb60008154610e2990611cf6565b90915550504260ce555050565b60026097541415610e595760405162461bcd60e51b815260040161049b90611bff565b600260975560655460ff1615610e815760405162461bcd60e51b815260040161049b90611c41565b80610e9f57604051631a4a5ecf60e01b815260040160405180910390fd5b60cb5433600090815260d16020908152604080832084845290915290205482811015610ef7576040517f57464c4300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260d16020908152604080832085845290915281208054859290610f21908490611b36565b909155505033600090815260d160209081526040808320858452909152902054610f7d5733600090815260d060205260409020600101805480610f6657610f66611d11565b600190038181906000526020600020016000905590555b600082815260cf602052604081208054859290610f9b908490611b36565b909155505060c954610fb7906001600160a01b031633856114d9565b7fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929338385604051610fea93929190611cdb565b60405180910390a15050600160975550565b6001600160a01b038216600090815260d1602090815260408083208484529091529020545b92915050565b6033546001600160a01b031633146110515760405162461bcd60e51b815260040161049b90611b10565b7f08c48647d7747ed2d79428c4b86c76dfe48af099e796d87b7b311925e76d2c4060cc5482604051611084929190611ccd565b60405180910390a160cc55565b600081815260cf6020908152604091829020600101805483518184028101840190945280845260609392830182828015610c7e57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116110d65750505050509050919050565b6033546001600160a01b031633146111295760405162461bcd60e51b815260040161049b90611b10565b6001600160a01b03811661114f5760405162461bcd60e51b815260040161049b90611d7f565b61115881611397565b50565b6001600160a01b038116600090815260d06020908152604080832081518083018352815481526001820180548451818702810187019095528085528695929485840193909291908301828280156111d157602002820191906000526020600020905b8154815260200190600101908083116111bd575b5050505050815250509050600081600001518260200151516111f39190611b36565b8251909150805b6112048383611c51565b81101561129b5760008460200151828151811061122357611223611b4d565b6020908102919091018101516001600160a01b038916600090815260d18352604080822083835284528082205460cf909452902060030154909250670de0b6b3a76400009161127191611c69565b61127b9190611c9e565b6112859087611c51565b955050808061129390611cf6565b9150506111fa565b50505050919050565b60655460ff166112c65760405162461bcd60e51b815260040161049b90611dc1565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051611300919061191f565b60405180910390a1565b600054610100900460ff166113315760405162461bcd60e51b815260040161049b90611e29565b6104ac6114f8565b600054610100900460ff166113605760405162461bcd60e51b815260040161049b90611e29565b6104ac611528565b600054610100900460ff1661138f5760405162461bcd60e51b815260040161049b90611e29565b6104ac61155b565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff16156114195760405162461bcd60e51b815260040161049b90611c41565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112f33390565b6114d3846323b872dd60e01b85858560405160240161146f93929190611e39565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611589565b50505050565b6106558363a9059cbb60e01b848460405160240161146f929190611cb2565b600054610100900460ff1661151f5760405162461bcd60e51b815260040161049b90611e29565b6104ac33611397565b600054610100900460ff1661154f5760405162461bcd60e51b815260040161049b90611e29565b6065805460ff19169055565b600054610100900460ff166115825760405162461bcd60e51b815260040161049b90611e29565b6001609755565b60006115de826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116189092919063ffffffff16565b80519091501561065557808060200190518101906115fc9190611e67565b6106555760405162461bcd60e51b815260040161049b90611ee0565b60606116278484600085611631565b90505b9392505050565b6060824710156116535760405162461bcd60e51b815260040161049b90611f48565b843b6116715760405162461bcd60e51b815260040161049b90611f8a565b600080866001600160a01b0316858760405161168d9190611fbc565b60006040518083038185875af1925050503d80600081146116ca576040519150601f19603f3d011682016040523d82523d6000602084013e6116cf565b606091505b50915091506116df8282866116ec565b925050505b949350505050565b606083156116fb57508161162a565b82511561170b5782518084602001fd5b8160405162461bcd60e51b815260040161049b91906117e3565b828054828255906000526020600020908101928215611760579160200282015b82811115611760578235825591602001919060010190611745565b5061176c929150611770565b5090565b5b8082111561176c5760008155600101611771565b60005b838110156117a0578181015183820152602001611788565b838111156114d35750506000910152565b60006117bb825190565b8084526020840193506117d2818560208601611785565b601f01601f19169290920192915050565b6020808252810161162a81846117b1565b805b811461115857600080fd5b8035611021816117f4565b60006020828403121561182157611821600080fd5b60006116e48484611801565b805b82525050565b60208101611021828461182d565b60006001600160a01b038216611021565b6117f681611843565b803561102181611854565b6000806040838503121561187e5761187e600080fd5b600061188a858561185d565b925050602061189b85828601611801565b9150509250929050565b600080604083850312156118bb576118bb600080fd5b60006118c7858561185d565b925050602061189b8582860161185d565b80151561182f565b6020810161102182846118d8565b606081016118fc828661182d565b61190960208301856118d8565b6116e4604083018461182d565b61182f81611843565b602081016110218284611916565b60006020828403121561194257611942600080fd5b60006116e4848461185d565b611958828261182d565b5060200190565b60200190565b600061196f825190565b808452602093840193830160005b828110156119a2578151611991878261194e565b96505060208201915060010161197d565b5093949350505050565b6020808252810161162a8184611965565b60008083601f8401126119d2576119d2600080fd5b50813567ffffffffffffffff8111156119ed576119ed600080fd5b602083019150836020820283011115611a0857611a08600080fd5b9250929050565b60008060008060408587031215611a2857611a28600080fd5b843567ffffffffffffffff811115611a4257611a42600080fd5b611a4e878288016119bd565b9450945050602085013567ffffffffffffffff811115611a7057611a70600080fd5b611a7c878288016119bd565b95989497509550505050565b6119588282611916565b6000611a9c825190565b808452602093840193830160005b828110156119a2578151611abe8782611a88565b965050602082019150600101611aaa565b6020808252810161162a8184611a92565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815261195f565b6020808252810161102181611ae0565b634e487b7160e01b600052601160045260246000fd5b600082821015611b4857611b48611b20565b500390565b634e487b7160e01b600052603260045260246000fd5b602e8152602081017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181527f647920696e697469616c697a6564000000000000000000000000000000000000602082015290505b60400190565b6020808252810161102181611b63565b601f8152602081017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c008152905061195f565b6020808252810161102181611bcd565b60108152602081017f5061757361626c653a20706175736564000000000000000000000000000000008152905061195f565b6020808252810161102181611c0f565b60008219821115611c6457611c64611b20565b500190565b6000816000190483118215151615611c8357611c83611b20565b500290565b634e487b7160e01b600052601260045260246000fd5b600082611cad57611cad611c88565b500490565b60408101611cc08285611916565b61162a602083018461182d565b60408101611cc0828561182d565b60608101611ce98286611916565b611909602083018561182d565b6000600019821415611d0a57611d0a611b20565b5060010190565b634e487b7160e01b600052603160045260246000fd5b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529050611bb7565b6020808252810161102181611d27565b60148152602081017f5061757361626c653a206e6f74207061757365640000000000000000000000008152905061195f565b6020808252810161102181611d8f565b602b8152602081017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981527f6e697469616c697a696e6700000000000000000000000000000000000000000060208201529050611bb7565b6020808252810161102181611dd1565b60608101611e478286611916565b6119096020830185611916565b8015156117f6565b805161102181611e54565b600060208284031215611e7c57611e7c600080fd5b60006116e48484611e5c565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f7420737563636565640000000000000000000000000000000000000000000060208201529050611bb7565b6020808252810161102181611e88565b60268152602081017f416464726573733a20696e73756666696369656e742062616c616e636520666f81527f722063616c6c000000000000000000000000000000000000000000000000000060208201529050611bb7565b6020808252810161102181611ef0565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000008152905061195f565b6020808252810161102181611f58565b6000611fa4825190565b611fb2818560208601611785565b9290920192915050565b6110218183611f9a56fea26469706673582212204c8b32a7be5100761c0472f56f5051b21f4eb9c5f333f7b453d086c65991173c64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRewardPerRound()": {
        "details": "Depends on the total shares in this round",
        "returns": {
          "rewardPerRound": "Degis reward per round"
        }
      },
      "getTotalUsersInRound(uint256)": {
        "params": {
          "_round": "Round number to check"
        },
        "returns": {
          "_0": "totalUsers Total amount of users in _round"
        }
      },
      "getUserPendingRounds(address)": {
        "params": {
          "_user": "User address to check"
        },
        "returns": {
          "_0": "pendingRounds User's pending rounds"
        }
      },
      "getUserShares(address,uint256)": {
        "params": {
          "_round": "Round number",
          "_user": "Address of the user"
        },
        "returns": {
          "_0": "userShares User's shares in the current round"
        }
      },
      "getUsersInRound(uint256)": {
        "params": {
          "_round": "Round number to check"
        },
        "returns": {
          "_0": "users All user addresses in this round"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingReward(address)": {
        "params": {
          "_user": "User address"
        },
        "returns": {
          "userPendingReward": "User's pending reward"
        }
      },
      "redeem(uint256)": {
        "params": {
          "_amount": "Amount to redeem"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDegisPerRound(uint256)": {
        "params": {
          "_degisPerRound": "Degis distribution per round"
        }
      },
      "setDistributionInterval(uint256)": {
        "params": {
          "_newInterval": "The new interval"
        }
      },
      "setPiecewise(uint256[],uint256[])": {
        "params": {
          "_reward": "The piecewise reward",
          "_threshold": "The threshold"
        }
      },
      "settleCurrentRound()": {
        "details": "Callable by any address, must pass the distribution interval"
      },
      "stake(uint256)": {
        "params": {
          "_amount": "Amount of buyer tokens to stake"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Purchase Incentive Vault",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim()": {
        "notice": "User can claim his own reward"
      },
      "getRewardPerRound()": {
        "notice": "Get degis reward per round"
      },
      "getTotalUsersInRound(uint256)": {
        "notice": "Get the amount of users in _round, used for distribution"
      },
      "getUserPendingRounds(address)": {
        "notice": "Get user's pending rounds"
      },
      "getUserShares(address,uint256)": {
        "notice": "Get your shares in the current round"
      },
      "getUsersInRound(uint256)": {
        "notice": "Get the user addresses in _round"
      },
      "pendingReward(address)": {
        "notice": "Get a user's pending reward"
      },
      "redeem(uint256)": {
        "notice": "Redeem buyer token from the vault"
      },
      "setDegisPerRound(uint256)": {
        "notice": "Set degis distribution per round"
      },
      "setDistributionInterval(uint256)": {
        "notice": "Set a new distribution interval"
      },
      "setPiecewise(uint256[],uint256[])": {
        "notice": "Set the threshold and piecewise reward"
      },
      "settleCurrentRound()": {
        "notice": "Setttle the current round"
      },
      "stake(uint256)": {
        "notice": "Stake buyer tokens into this contract"
      }
    },
    "notice": "This is the purchase incentive vault for staking buyer tokens         Users first stake their buyer tokens and wait for distribution         About every 24 hours, the reward will be calculated to users' account         After disrtribution, reward will be updated              but it still need to be manually claimed.         Buyer tokens can only be used once         You can withdraw your buyer token within the same round (current round)         They can not be withdrawed if the round was settled",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2523,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2526,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3044,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2403,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 2515,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2611,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 2700,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2715,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 2759,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13244,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "buyerToken",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IERC20)4752"
      },
      {
        "astId": 13247,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "degis",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IDegisToken)34784"
      },
      {
        "astId": 13249,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "currentRound",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 13251,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "degisPerRound",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 13253,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "distributionInterval",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 13255,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "lastDistribution",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 13273,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "rounds",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_uint256,t_struct(RoundInfo)13268_storage)"
      },
      {
        "astId": 13284,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "users",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_address,t_struct(UserInfo)13279_storage)"
      },
      {
        "astId": 13290,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "userSharesInRound",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 13293,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "threshold",
        "offset": 0,
        "slot": "210",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 13296,
        "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
        "label": "piecewise",
        "offset": 0,
        "slot": "211",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDegisToken)34784": {
        "encoding": "inplace",
        "label": "contract IDegisToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)4752": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserInfo)13279_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PurchaseIncentiveVault.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)13279_storage"
      },
      "t_mapping(t_uint256,t_struct(RoundInfo)13268_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PurchaseIncentiveVault.RoundInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoundInfo)13268_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoundInfo)13268_storage": {
        "encoding": "inplace",
        "label": "struct PurchaseIncentiveVault.RoundInfo",
        "members": [
          {
            "astId": 13260,
            "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13263,
            "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
            "label": "users",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 13265,
            "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
            "label": "hasDistributed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 13267,
            "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
            "label": "degisPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserInfo)13279_storage": {
        "encoding": "inplace",
        "label": "struct PurchaseIncentiveVault.UserInfo",
        "members": [
          {
            "astId": 13275,
            "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
            "label": "lastRewardRoundIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13278,
            "contract": "contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault",
            "label": "pendingRounds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}