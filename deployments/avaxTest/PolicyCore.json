{
  "address": "0xB865cbB10E4ccC13fbD25b3Ca382D542e6762D51",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceGetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "policyTokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DelegateDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "policyTokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newEmergencyPool",
          "type": "address"
        }
      ],
      "name": "EmergencyPoolChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isHappened",
          "type": "bool"
        }
      ],
      "name": "FinalResultSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLotteryAddress",
          "type": "address"
        }
      ],
      "name": "LotteryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRouter",
          "type": "address"
        }
      ],
      "name": "NaughtyRouterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newStablecoin",
          "type": "address"
        }
      ],
      "name": "NewStablecoinAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenDecimals",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "settleTimestamp",
          "type": "uint256"
        }
      ],
      "name": "PolicyTokenDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "policyTokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stopIndex",
          "type": "uint256"
        }
      ],
      "name": "PolicyTokensSettledForUsers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "policyTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        }
      ],
      "name": "PoolDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "policyTokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "policyTokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RedeemAfterSettlement",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isCall",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_round",
          "type": "string"
        }
      ],
      "name": "_generateName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStablecoin",
          "type": "address"
        }
      ],
      "name": "addStablecoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allDepositors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPolicyTokens",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        }
      ],
      "name": "collectIncome",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "delegateDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isCall",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_nameDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_round",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_settleTimestamp",
          "type": "uint256"
        }
      ],
      "name": "deployPolicyToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeRate",
          "type": "uint256"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract INaughtyFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        }
      ],
      "name": "findAddressbyName",
      "outputs": [
        {
          "internalType": "address",
          "name": "policyTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyTokenAddress",
          "type": "address"
        }
      ],
      "name": "findNamebyAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "policyTokenName",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "policyTokenAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isCall",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "nameDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strikePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "settleTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct PolicyCore.PolicyTokenInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        }
      ],
      "name": "getPolicyTokenInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "policyTokenAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isCall",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "nameDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strikePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "settleTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct PolicyCore.PolicyTokenInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_policyTokenAddress",
          "type": "address"
        }
      ],
      "name": "getUserQuota",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_quota",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lottery",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "naughtyRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingIncomeToEmergency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingIncomeToLottery",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "policyTokenAddressToName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "policyTokenInfoMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "policyTokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isCall",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "nameDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "settleTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceGetter",
      "outputs": [
        {
          "internalType": "contract IPriceGetter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        }
      ],
      "name": "redeemAfterSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_emergencyPool",
          "type": "address"
        }
      ],
      "name": "setEmergencyPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lotteryAddress",
          "type": "address"
        }
      ],
      "name": "setLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setNaughtyRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stopIndex",
          "type": "uint256"
        }
      ],
      "name": "settleAllPolicyTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_policyTokenName",
          "type": "string"
        }
      ],
      "name": "settleFinalResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "settleResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isHappened",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "alreadySettled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "currentDistributionIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedStablecoin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whichStablecoin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0baea44d8f829fb27bbdfa6eb5c41388c038ed5bee92af371df99782c67ef29c",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0xB865cbB10E4ccC13fbD25b3Ca382D542e6762D51",
    "transactionIndex": 5,
    "gasUsed": "3997370",
    "logsBloom": "0x
    "blockHash": "0xcb09457985a928ccfe97298c0a82b2188ab54880fad02e92759797acb366e11b",
    "transactionHash": "0x0baea44d8f829fb27bbdfa6eb5c41388c038ed5bee92af371df99782c67ef29c",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 12433350,
        "transactionHash": "0x0baea44d8f829fb27bbdfa6eb5c41388c038ed5bee92af371df99782c67ef29c",
        "address": "0xB865cbB10E4ccC13fbD25b3Ca382D542e6762D51",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001be1a151ba3d24f594ee971dc9b843f23b5ba80e"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0xcb09457985a928ccfe97298c0a82b2188ab54880fad02e92759797acb366e11b"
      }
    ],
    "blockNumber": 12433350,
    "cumulativeGasUsed": "4894931",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1a04CDfac69c2516734Ea062689672fD9c6b7f03",
    "0xed96d137d45563924897e5872f00fbccd9bfaa89",
    "0xfe7765ca25246F524d5f7aE1d4c3e7024BDfD462"
  ],
  "numDeployments": 1,
  "solcInputHash": "64edb72108e49c67231df32415749bc9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceGetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"policyTokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DelegateDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"policyTokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newEmergencyPool\",\"type\":\"address\"}],\"name\":\"EmergencyPoolChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isHappened\",\"type\":\"bool\"}],\"name\":\"FinalResultSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLotteryAddress\",\"type\":\"address\"}],\"name\":\"LotteryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"NaughtyRouterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newStablecoin\",\"type\":\"address\"}],\"name\":\"NewStablecoinAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settleTimestamp\",\"type\":\"uint256\"}],\"name\":\"PolicyTokenDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"policyTokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stopIndex\",\"type\":\"uint256\"}],\"name\":\"PolicyTokensSettledForUsers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"policyTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"}],\"name\":\"PoolDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"policyTokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"policyTokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemAfterSettlement\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isCall\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_round\",\"type\":\"string\"}],\"name\":\"_generateName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStablecoin\",\"type\":\"address\"}],\"name\":\"addStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDepositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPolicyTokens\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"}],\"name\":\"collectIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"delegateDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isCall\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_nameDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_round\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_settleTimestamp\",\"type\":\"uint256\"}],\"name\":\"deployPolicyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract INaughtyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"}],\"name\":\"findAddressbyName\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"policyTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyTokenAddress\",\"type\":\"address\"}],\"name\":\"findNamebyAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"policyTokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"policyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nameDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settleTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct PolicyCore.PolicyTokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"}],\"name\":\"getPolicyTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"policyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nameDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settleTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct PolicyCore.PolicyTokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_policyTokenAddress\",\"type\":\"address\"}],\"name\":\"getUserQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_quota\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lottery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"naughtyRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingIncomeToEmergency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingIncomeToLottery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"policyTokenAddressToName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"policyTokenInfoMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"policyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nameDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settleTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceGetter\",\"outputs\":[{\"internalType\":\"contract IPriceGetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"}],\"name\":\"redeemAfterSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_emergencyPool\",\"type\":\"address\"}],\"name\":\"setEmergencyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotteryAddress\",\"type\":\"address\"}],\"name\":\"setLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setNaughtyRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stopIndex\",\"type\":\"uint256\"}],\"name\":\"settleAllPolicyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_policyTokenName\",\"type\":\"string\"}],\"name\":\"settleFinalResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"settleResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isHappened\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"alreadySettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currentDistributionIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedStablecoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whichStablecoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Most of the functions to be called from outside will use the name of policyToken         rather than the address (easy to read).         Other variables or functions still use address to index.         The rule of policyToken naming is:              Original Token Name(with decimals) + Strike Price + Lower or Higher + Date         E.g.  AVAX_30.0_L_2101, BTC_30000.0_L_2102, ETH_8000.0_H_2109         (the original name need to be the same as in the chainlink oracle)         There are three decimals for a policy token:              1. Name decimals: Only for generating the name of policyToken              2. Token decimals: The decimals of the policyToken                 (should be the same as the paired stablecoin)              3. Price decimals: Always 18. The oracle result will be transferred for settlement\",\"kind\":\"dev\",\"methods\":{\"_generateName(string,uint256,uint256,bool,string)\":{\"params\":{\"_decimals\":\"Decimals of the name generation (0,1=>1)\",\"_isCall\":\"The policy's payoff is triggered when higher(true) or lower(false)\",\"_round\":\"Round of the policy (e.g. 2112, 2201)\",\"_strikePrice\":\"Strike price of the policy (18 decimals)\",\"_tokenName\":\"Name of the stike token (BTC, ETH, AVAX...)\"}},\"addStablecoin(address)\":{\"params\":{\"_newStablecoin\":\"Address of the new stablecoin\"}},\"claim(string,address,uint256)\":{\"details\":\"It is done after result settlement and only if the result is true\",\"params\":{\"_amount\":\"Amount of stablecoin\",\"_policyTokenName\":\"Name of the policy token\",\"_stablecoin\":\"Address of the stable coin\"}},\"collectIncome(address)\":{\"details\":\"Can be done by anyone, only when there is some income to be distributed\",\"params\":{\"_stablecoin\":\"Address of stablecoin\"}},\"constructor\":{\"params\":{\"_factory\":\"Address of naughty factory\",\"_priceGetter\":\"Address of the oracle contract\",\"_usdt\":\"USDT.e is the first stablecoin supported in the pool\"}},\"delegateDeposit(string,address,uint256,address)\":{\"details\":\"Only called by the router contract\",\"params\":{\"_amount\":\"Amount of stablecoin\",\"_policyTokenName\":\"Name of the policy token\",\"_stablecoin\":\"Address of the sable coin\",\"_user\":\"Address to receive the policy tokens\"}},\"deployPolicyToken(string,address,bool,uint256,uint256,uint256,string,uint256,uint256)\":{\"details\":\"Only the owner can deploy new policy token      The name form is like \\\"AVAX_50_L_202101\\\" and is built inside the contract.\",\"params\":{\"_deadline\":\"Deadline of this policy token (deposit / redeem / swap)\",\"_isCall\":\"The policy is for higher or lower than the strike price (call / put)\",\"_nameDecimals\":\"Decimals of this token's name (0~18)\",\"_settleTimestamp\":\"Can settle after this timestamp (for oracle)\",\"_stablecoin\":\"Address of the stablecoin (Just for check decimals here)\",\"_strikePrice\":\"Strike price of the policy (have already been transferred with 1e18)\",\"_tokenDecimals\":\"Decimals of this token's value (0~18) (same as paired stablecoin)\",\"_tokenName\":\"Name of the original token (e.g. AVAX, BTC, ETH...)\"}},\"deployPool(string,address,uint256,uint256)\":{\"params\":{\"_feeRate\":\"Fee rate given to LP holders\",\"_policyTokenName\":\"Name of the policy token\",\"_poolDeadline\":\"Swapping deadline of the pool (normally the same as the token's deadline)\",\"_stablecoin\":\"Address of the stable coin\"},\"returns\":{\"_0\":\"poolAddress The address of the pool just deployed\"}},\"deposit(string,address,uint256)\":{\"params\":{\"_amount\":\"Amount of stablecoin\",\"_policyTokenName\":\"Name of the policy token\",\"_stablecoin\":\"Address of the stable coin\"}},\"findAddressbyName(string)\":{\"params\":{\"_policyTokenName\":\"Name of the policy token (e.g. \\\"AVAX_30_L_2103\\\")\"},\"returns\":{\"policyTokenAddress\":\"Address of the policy token\"}},\"findNamebyAddress(address)\":{\"params\":{\"_policyTokenAddress\":\"Address of the policy token\"},\"returns\":{\"policyTokenName\":\"Name of the policy token\"}},\"getAllTokens()\":{\"returns\":{\"_0\":\"tokensInfo Token information list\"}},\"getPolicyTokenInfo(string)\":{\"params\":{\"_policyTokenName\":\"Name of the policy token (e.g. \\\"AVAX30L202103\\\")\"},\"returns\":{\"_0\":\"policyTokenInfo PolicyToken detail information\"}},\"getUserQuota(address,address)\":{\"params\":{\"_policyTokenAddress\":\"Address of the policy token\",\"_user\":\"Address of the user to be checked\"},\"returns\":{\"_quota\":\"User's quota result\"}},\"redeem(string,address,uint256)\":{\"details\":\"Redeem happens before the deadline and is different from claim/settle\",\"params\":{\"_amount\":\"Amount to redeem\",\"_policyTokenName\":\"Name of the policy token\",\"_stablecoin\":\"Address of the stablecoin\"}},\"redeemAfterSettlement(string,address)\":{\"params\":{\"_policyTokenName\":\"Name of the policy token\",\"_stablecoin\":\"Address of the stablecoin\"}},\"renounceOwnership()\":{\"details\":\"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.\"},\"setEmergencyPool(address)\":{\"params\":{\"_emergencyPool\":\"Address of the new emergencyPool\"}},\"setLottery(address)\":{\"params\":{\"_lotteryAddress\":\"Address of the new lottery\"}},\"setNaughtyRouter(address)\":{\"params\":{\"_router\":\"Address of the new naughty router\"}},\"settleAllPolicyTokens(string,address,uint256,uint256)\":{\"details\":\"Take care of the gas cost and can use the _startIndex and _stopIndex to control the size\",\"params\":{\"_policyTokenName\":\"Name of policy token\",\"_stablecoin\":\"Address of stablecoin\",\"_startIndex\":\"Settlement start index\",\"_stopIndex\":\"Settlement stop index\"}},\"settleFinalResult(string)\":{\"params\":{\"_policyTokenName\":\"Name of the policy token\"}},\"transferOwnership(address)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"newOwner\":\"Address of the new owner\"}}},\"title\":\"PolicyCore\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_generateName(string,uint256,uint256,bool,string)\":{\"notice\":\"Generate the policy token name\"},\"addStablecoin(address)\":{\"notice\":\"Add a newly supported stablecoin\"},\"claim(string,address,uint256)\":{\"notice\":\"Claim a payoff based on policy tokens\"},\"collectIncome(address)\":{\"notice\":\"Collect the income\"},\"constructor\":{\"notice\":\"Constructor, for some addresses\"},\"delegateDeposit(string,address,uint256,address)\":{\"notice\":\"Delegate deposit (deposit and mint for other addresses)\"},\"deployPolicyToken(string,address,bool,uint256,uint256,uint256,string,uint256,uint256)\":{\"notice\":\"Deploy a new policy token and return the token address\"},\"deployPool(string,address,uint256,uint256)\":{\"notice\":\"Deploy a new pair (pool)\"},\"deposit(string,address,uint256)\":{\"notice\":\"Deposit stablecoins and get policy tokens\"},\"findAddressbyName(string)\":{\"notice\":\"Find the token address by its name\"},\"findNamebyAddress(address)\":{\"notice\":\"Find the token name by its address\"},\"getAllTokens()\":{\"notice\":\"Get the information about all the tokens\"},\"getPolicyTokenInfo(string)\":{\"notice\":\"Find the token information by its name\"},\"getUserQuota(address,address)\":{\"notice\":\"Get a user's quota for a certain policy token\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"redeem(string,address,uint256)\":{\"notice\":\"Burn policy tokens and redeem USDT\"},\"redeemAfterSettlement(string,address)\":{\"notice\":\"Redeem policy tokens and get stablecoins by the user himeself\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner.\"},\"setEmergencyPool(address)\":{\"notice\":\"Change the address of emergency pool\"},\"setLottery(address)\":{\"notice\":\"Change the address of lottery\"},\"setNaughtyRouter(address)\":{\"notice\":\"Change the address of naughty router\"},\"settleAllPolicyTokens(string,address,uint256,uint256)\":{\"notice\":\"Settle the policies when then insurance event do not happen         Funds are automatically distributed back to the depositors\"},\"settleFinalResult(string)\":{\"notice\":\"Get the final price from the PriceGetter contract\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).\"}},\"notice\":\"Core logic of Naughty Price Product         Preset:              (Done in the naughtyFactory contract)              1. Deploy policyToken contract              2. Deploy policyToken-Stablecoin pool contract         User Interaction:              1. Deposit Stablecoin and mint PolicyTokens              2. Redeem their Stablecoin and burn the PolicyTokens (before settlement)              3. Claim for payout with PolicyTokens (after settlement)         PolicyTokens are minted with the ratio 1:1 to Stablecoin         The PolicyTokens are traded in the pool with CFMM (xy=k)         When the event happens, a PolicyToken can be burned for claiming 1 Stablecoin.         When the event does not happen, the PolicyToken depositors can         redeem their 1 deposited Stablecoin\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/naughty-price/PolicyCore.sol\":\"PolicyCore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"contracts/libraries/SafePRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\\n/**\\n * @notice This prb-math version is 2.4.1\\n *         https://github.com/hifi-finance/prb-math\\n */\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary SafePRBMath {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x799b387c20d61596a81203947bc13264e8bfc1b8f0854a28a7704a0ec2b785ef\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/StringsUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUtils {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @notice Bytes to string (not human-readable form)\\n     * @param _bytes Input bytes\\n     * @return stringBytes String form of the bytes\\n     */\\n    function byToString(bytes32 _bytes) internal pure returns (string memory) {\\n        return uintToHexString(uint256(_bytes), 32);\\n    }\\n\\n    /**\\n     * @notice Transfer address to string (not change the content)\\n     * @param _addr Input address\\n     * @return stringAddress String form of the address\\n     */\\n    function addressToString(address _addr)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return uintToHexString(uint256(uint160(_addr)), 20);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function uintToString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function uintToHexString(uint256 value)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return uintToHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function uintToHexString(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xa2c517877ea89e548f3e0e73e43902bdd73e938c19169258407fd5e19615a4c9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/PolicyCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n    *******         **********     ***********     *****     ***********\\n    *      *        *              *                 *       *\\n    *        *      *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     **********     *       *****     *       ***********\\n    *         *     *              *         *       *                 *\\n    *         *     *              *         *       *                 *\\n    *        *      *              *         *       *                 *\\n    *      *        *              *         *       *                 *\\n    *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.10;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../libraries/StringsUtils.sol\\\";\\nimport \\\"../libraries/SafePRBMath.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"../utils/interfaces/IERC20Decimals.sol\\\";\\nimport \\\"./interfaces/IPriceGetter.sol\\\";\\nimport \\\"./interfaces/INaughtyFactory.sol\\\";\\nimport \\\"./interfaces/INPPolicyToken.sol\\\";\\n\\n/**\\n * @title  PolicyCore\\n * @notice Core logic of Naughty Price Product\\n *         Preset:\\n *              (Done in the naughtyFactory contract)\\n *              1. Deploy policyToken contract\\n *              2. Deploy policyToken-Stablecoin pool contract\\n *         User Interaction:\\n *              1. Deposit Stablecoin and mint PolicyTokens\\n *              2. Redeem their Stablecoin and burn the PolicyTokens (before settlement)\\n *              3. Claim for payout with PolicyTokens (after settlement)\\n *         PolicyTokens are minted with the ratio 1:1 to Stablecoin\\n *         The PolicyTokens are traded in the pool with CFMM (xy=k)\\n *         When the event happens, a PolicyToken can be burned for claiming 1 Stablecoin.\\n *         When the event does not happen, the PolicyToken depositors can\\n *         redeem their 1 deposited Stablecoin\\n * @dev    Most of the functions to be called from outside will use the name of policyToken\\n *         rather than the address (easy to read).\\n *         Other variables or functions still use address to index.\\n *         The rule of policyToken naming is:\\n *              Original Token Name(with decimals) + Strike Price + Lower or Higher + Date\\n *         E.g.  AVAX_30.0_L_2101, BTC_30000.0_L_2102, ETH_8000.0_H_2109\\n *         (the original name need to be the same as in the chainlink oracle)\\n *         There are three decimals for a policy token:\\n *              1. Name decimals: Only for generating the name of policyToken\\n *              2. Token decimals: The decimals of the policyToken\\n *                 (should be the same as the paired stablecoin)\\n *              3. Price decimals: Always 18. The oracle result will be transferred for settlement\\n */\\n\\ncontract PolicyCore is Ownable {\\n    using StringsUtils for uint256;\\n    using SafePRBMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Factory contract, responsible for deploying new contracts\\n    INaughtyFactory public factory;\\n\\n    // Oracle contract, responsible for getting the final price\\n    IPriceGetter public priceGetter;\\n\\n    // Lottery address\\n    address public lottery;\\n\\n    // Emergency pool contract address\\n    address public emergencyPool;\\n\\n    // Naughty Router contract address\\n    address public naughtyRouter;\\n\\n    struct PolicyTokenInfo {\\n        address policyTokenAddress;\\n        bool isCall;\\n        uint256 nameDecimals; // decimals of the name generation\\n        uint256 tokenDecimals; // decimals of the policy token\\n        uint256 strikePrice;\\n        uint256 deadline;\\n        uint256 settleTimestamp;\\n    }\\n    // Policy toke name => Policy token information\\n    mapping(string => PolicyTokenInfo) public policyTokenInfoMapping;\\n\\n    mapping(address => string) public policyTokenAddressToName;\\n\\n    // Policy token name list\\n    string[] public allPolicyTokens;\\n\\n    // Stablecoin address => Supported or not\\n    mapping(address => bool) public supportedStablecoin;\\n\\n    // Policy token address => Stablecoin address\\n    mapping(address => address) public whichStablecoin;\\n\\n    // PolicyToken => Strike Token (e.g. AVAX30L202101 address => AVAX address)\\n    mapping(address => string) policyTokenToOriginal;\\n\\n    // User Address => Token Address => User Quota Amount\\n    mapping(address => mapping(address => uint256)) userQuota;\\n\\n    // Policy token address => All the depositors for this round\\n    // (store all the depositors in an array)\\n    mapping(address => address[]) public allDepositors;\\n\\n    struct SettlementInfo {\\n        uint256 price;\\n        bool isHappened;\\n        bool alreadySettled;\\n        uint256 currentDistributionIndex;\\n    }\\n    // Policy token address => Settlement result information\\n    mapping(address => SettlementInfo) public settleResult;\\n\\n    mapping(address => uint256) public pendingIncomeToLottery;\\n    mapping(address => uint256) public pendingIncomeToEmergency;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Events ******************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event LotteryChanged(address newLotteryAddress);\\n    event EmergencyPoolChanged(address newEmergencyPool);\\n    event NaughtyRouterChanged(address newRouter);\\n    event PolicyTokenDeployed(\\n        string tokenName,\\n        address tokenAddress,\\n        uint256 tokenDecimals,\\n        uint256 deadline,\\n        uint256 settleTimestamp\\n    );\\n    event PoolDeployed(\\n        address poolAddress,\\n        address policyTokenAddress,\\n        address stablecoin\\n    );\\n    event Deposit(\\n        address userAddress,\\n        string policyTokenName,\\n        address stablecoin,\\n        uint256 amount\\n    );\\n    event DelegateDeposit(\\n        address payerAddress,\\n        address userAddress,\\n        string policyTokenName,\\n        address stablecoin,\\n        uint256 amount\\n    );\\n    event Redeem(\\n        address userAddress,\\n        string policyTokenName,\\n        address stablecoin,\\n        uint256 amount\\n    );\\n    event RedeemAfterSettlement(\\n        address userAddress,\\n        string policyTokenName,\\n        address stablecoin,\\n        uint256 amount\\n    );\\n    event FinalResultSettled(\\n        string _policyTokenName,\\n        uint256 price,\\n        bool isHappened\\n    );\\n    event NewStablecoinAdded(address _newStablecoin);\\n    event PolicyTokensSettledForUsers(\\n        string policyTokenName,\\n        address stablecoin,\\n        uint256 startIndex,\\n        uint256 stopIndex\\n    );\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Constructor, for some addresses\\n     * @param _usdt USDT.e is the first stablecoin supported in the pool\\n     * @param _factory Address of naughty factory\\n     * @param _priceGetter Address of the oracle contract\\n     */\\n    constructor(\\n        address _usdt,\\n        address _factory,\\n        address _priceGetter\\n    ) Ownable(msg.sender) {\\n        // Add the first stablecoin supported\\n        supportedStablecoin[_usdt] = true;\\n\\n        // Initialize the interfaces\\n        factory = INaughtyFactory(_factory);\\n        priceGetter = IPriceGetter(_priceGetter);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Check if this stablecoin is supported\\n     * @param _stablecoin Stablecoin address\\n     */\\n    modifier validStablecoin(address _stablecoin) {\\n        require(\\n            supportedStablecoin[_stablecoin] == true,\\n            \\\"Do not support this stablecoin currently\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Check whether the policy token is paired with this stablecoin\\n     * @param _policyTokenName Policy token name\\n     * @param _stablecoin Stablecoin address\\n     */\\n    modifier validPolicyTokenWithStablecoin(\\n        string memory _policyTokenName,\\n        address _stablecoin\\n    ) {\\n        address policyTokenAddress = findAddressbyName(_policyTokenName);\\n        require(\\n            whichStablecoin[policyTokenAddress] == _stablecoin,\\n            \\\"Invalid policytoken with stablecoin\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Check if the policy token has been deployed, used when deploying pools\\n     * @param _policyTokenName Name of the policy token inside the pair\\n     */\\n    modifier deployedPolicy(string memory _policyTokenName) {\\n        require(\\n            policyTokenInfoMapping[_policyTokenName].policyTokenAddress !=\\n                address(0),\\n            \\\"This policy token has not been deployed, please deploy it first\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Deposit/Redeem/Swap only before deadline\\n     * @dev Each pool will also have this deadline\\n     *      That needs to be set inside naughtyFactory\\n     * @param _policyTokenName Name of the policy token\\n     */\\n    modifier beforeDeadline(string memory _policyTokenName) {\\n        uint256 deadline = policyTokenInfoMapping[_policyTokenName].deadline;\\n        require(\\n            block.timestamp <= deadline,\\n            \\\"Can not deposit/redeem, has passed the deadline\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Can only settle the result after the \\\"_settleTimestamp\\\"\\n     * @param _policyTokenName Name of the policy token\\n     */\\n    modifier afterSettlement(string memory _policyTokenName) {\\n        uint256 settleTimestamp = policyTokenInfoMapping[_policyTokenName]\\n            .settleTimestamp;\\n        require(\\n            block.timestamp >= settleTimestamp,\\n            \\\"Can not settle/claim, have not reached settleTimestamp\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Avoid multiple settlements\\n     * @param _policyTokenName Name of the policy token\\n     */\\n    modifier notAlreadySettled(string memory _policyTokenName) {\\n        address policyTokenAddress = findAddressbyName(_policyTokenName);\\n        require(\\n            settleResult[policyTokenAddress].alreadySettled == false,\\n            \\\"This policy has already been settled\\\"\\n        );\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Find the token address by its name\\n     * @param _policyTokenName Name of the policy token (e.g. \\\"AVAX_30_L_2103\\\")\\n     * @return policyTokenAddress Address of the policy token\\n     */\\n    function findAddressbyName(string memory _policyTokenName)\\n        public\\n        view\\n        returns (address policyTokenAddress)\\n    {\\n        policyTokenAddress = policyTokenInfoMapping[_policyTokenName]\\n            .policyTokenAddress;\\n\\n        require(policyTokenAddress != address(0), \\\"Policy token not found\\\");\\n    }\\n\\n    /**\\n     * @notice Find the token name by its address\\n     * @param _policyTokenAddress Address of the policy token\\n     * @return policyTokenName Name of the policy token\\n     */\\n    function findNamebyAddress(address _policyTokenAddress)\\n        public\\n        view\\n        returns (string memory policyTokenName)\\n    {\\n        policyTokenName = policyTokenAddressToName[_policyTokenAddress];\\n\\n        require(bytes(policyTokenName).length > 0, \\\"Policy name not found\\\");\\n    }\\n\\n    /**\\n     * @notice Find the token information by its name\\n     * @param _policyTokenName Name of the policy token (e.g. \\\"AVAX30L202103\\\")\\n     * @return policyTokenInfo PolicyToken detail information\\n     */\\n    function getPolicyTokenInfo(string memory _policyTokenName)\\n        public\\n        view\\n        returns (PolicyTokenInfo memory)\\n    {\\n        return policyTokenInfoMapping[_policyTokenName];\\n    }\\n\\n    /**\\n     * @notice Get a user's quota for a certain policy token\\n     * @param _user Address of the user to be checked\\n     * @param _policyTokenAddress Address of the policy token\\n     * @return _quota User's quota result\\n     */\\n    function getUserQuota(address _user, address _policyTokenAddress)\\n        external\\n        view\\n        returns (uint256 _quota)\\n    {\\n        _quota = userQuota[_user][_policyTokenAddress];\\n    }\\n\\n    /**\\n     * @notice Get the information about all the tokens\\n     * @return tokensInfo Token information list\\n     */\\n    function getAllTokens() external view returns (PolicyTokenInfo[] memory) {\\n        uint256 length = allPolicyTokens.length;\\n        PolicyTokenInfo[] memory tokensInfo = new PolicyTokenInfo[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            tokensInfo[i] = policyTokenInfoMapping[allPolicyTokens[i]];\\n        }\\n\\n        return tokensInfo;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Add a newly supported stablecoin\\n     * @param _newStablecoin Address of the new stablecoin\\n     */\\n    function addStablecoin(address _newStablecoin) external onlyOwner {\\n        supportedStablecoin[_newStablecoin] = true;\\n        emit NewStablecoinAdded(_newStablecoin);\\n    }\\n\\n    /**\\n     * @notice Change the address of lottery\\n     * @param _lotteryAddress Address of the new lottery\\n     */\\n    function setLottery(address _lotteryAddress) external onlyOwner {\\n        lottery = _lotteryAddress;\\n        emit LotteryChanged(_lotteryAddress);\\n    }\\n\\n    /**\\n     * @notice Change the address of emergency pool\\n     * @param _emergencyPool Address of the new emergencyPool\\n     */\\n    function setEmergencyPool(address _emergencyPool) external onlyOwner {\\n        emergencyPool = _emergencyPool;\\n        emit EmergencyPoolChanged(_emergencyPool);\\n    }\\n\\n    /**\\n     * @notice Change the address of naughty router\\n     * @param _router Address of the new naughty router\\n     */\\n    function setNaughtyRouter(address _router) external onlyOwner {\\n        naughtyRouter = _router;\\n        emit NaughtyRouterChanged(_router);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Deploy a new policy token and return the token address\\n     * @dev Only the owner can deploy new policy token\\n     *      The name form is like \\\"AVAX_50_L_202101\\\" and is built inside the contract.\\n     * @param _tokenName Name of the original token (e.g. AVAX, BTC, ETH...)\\n     * @param _stablecoin Address of the stablecoin (Just for check decimals here)\\n     * @param _isCall The policy is for higher or lower than the strike price (call / put)\\n     * @param _nameDecimals Decimals of this token's name (0~18)\\n     * @param _tokenDecimals Decimals of this token's value (0~18) (same as paired stablecoin)\\n     * @param _strikePrice Strike price of the policy (have already been transferred with 1e18)\\n     * @param _deadline Deadline of this policy token (deposit / redeem / swap)\\n     * @param _settleTimestamp Can settle after this timestamp (for oracle)\\n     */\\n    function deployPolicyToken(\\n        string memory _tokenName,\\n        address _stablecoin,\\n        bool _isCall,\\n        uint256 _nameDecimals,\\n        uint256 _tokenDecimals,\\n        uint256 _strikePrice,\\n        string memory _round,\\n        uint256 _deadline,\\n        uint256 _settleTimestamp\\n    ) external onlyOwner {\\n        require(\\n            _nameDecimals <= 18 && _tokenDecimals <= 18,\\n            \\\"Too many decimals\\\"\\n        );\\n        require(\\n            IERC20Decimals(_stablecoin).decimals() == _tokenDecimals,\\n            \\\"Decimals not paired\\\"\\n        );\\n\\n        require(_deadline > block.timestamp, \\\"Wrong deadline\\\");\\n        require(_settleTimestamp >= _deadline, \\\"Wrong settleTimestamp\\\");\\n\\n        string memory policyTokenName = _generateName(\\n            _tokenName,\\n            _nameDecimals,\\n            _strikePrice,\\n            _isCall,\\n            _round\\n        );\\n        // Deploy a new policy token by the factory contract\\n        address policyTokenAddress = factory.deployPolicyToken(\\n            policyTokenName,\\n            _tokenDecimals\\n        );\\n\\n        // Store the policyToken information in the mapping\\n        policyTokenInfoMapping[policyTokenName] = PolicyTokenInfo(\\n            policyTokenAddress,\\n            _isCall,\\n            _nameDecimals,\\n            _tokenDecimals,\\n            _strikePrice,\\n            _deadline,\\n            _settleTimestamp\\n        );\\n\\n        // Keep the record from policy token to original token\\n        policyTokenToOriginal[policyTokenAddress] = _tokenName;\\n\\n        // Record the address to name mapping\\n        policyTokenAddressToName[policyTokenAddress] = policyTokenName;\\n\\n        // Push the policytokenName into the list\\n        allPolicyTokens.push(policyTokenName);\\n\\n        emit PolicyTokenDeployed(\\n            policyTokenName,\\n            policyTokenAddress,\\n            _tokenDecimals,\\n            _deadline,\\n            _settleTimestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Deploy a new pair (pool)\\n     * @param _policyTokenName Name of the policy token\\n     * @param _stablecoin Address of the stable coin\\n     * @param _poolDeadline Swapping deadline of the pool (normally the same as the token's deadline)\\n     * @param _feeRate Fee rate given to LP holders\\n     * @return poolAddress The address of the pool just deployed\\n     */\\n    function deployPool(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _poolDeadline,\\n        uint256 _feeRate\\n    )\\n        external\\n        onlyOwner\\n        validStablecoin(_stablecoin)\\n        deployedPolicy(_policyTokenName)\\n        returns (address)\\n    {\\n        require(_poolDeadline > block.timestamp, \\\"Wrong deadline\\\");\\n        require(\\n            _poolDeadline == policyTokenInfoMapping[_policyTokenName].deadline,\\n            \\\"Policy token and pool deadline not the same\\\"\\n        );\\n\\n        address policyTokenAddress = findAddressbyName(_policyTokenName);\\n\\n        // Deploy a new pool (policyToken <=> stablecoin)\\n        address poolAddress = factory.deployPool(\\n            policyTokenAddress,\\n            _stablecoin,\\n            _poolDeadline,\\n            _feeRate\\n        );\\n\\n        // Record the mapping\\n        whichStablecoin[policyTokenAddress] = _stablecoin;\\n\\n        emit PoolDeployed(poolAddress, policyTokenAddress, _stablecoin);\\n\\n        return poolAddress;\\n    }\\n\\n    /**\\n     * @notice Deposit stablecoins and get policy tokens\\n     * @param _policyTokenName Name of the policy token\\n     * @param _stablecoin Address of the stable coin\\n     * @param _amount Amount of stablecoin\\n     */\\n    function deposit(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _amount\\n    )\\n        public\\n        beforeDeadline(_policyTokenName)\\n        validPolicyTokenWithStablecoin(_policyTokenName, _stablecoin)\\n    {\\n        _deposit(_policyTokenName, _stablecoin, _amount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Delegate deposit (deposit and mint for other addresses)\\n     * @dev Only called by the router contract\\n     * @param _policyTokenName Name of the policy token\\n     * @param _stablecoin Address of the sable coin\\n     * @param _amount Amount of stablecoin\\n     * @param _user Address to receive the policy tokens\\n     */\\n    function delegateDeposit(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _amount,\\n        address _user\\n    )\\n        external\\n        beforeDeadline(_policyTokenName)\\n        validPolicyTokenWithStablecoin(_policyTokenName, _stablecoin)\\n    {\\n        require(\\n            msg.sender == naughtyRouter,\\n            \\\"Only the router contract can delegate\\\"\\n        );\\n\\n        _deposit(_policyTokenName, _stablecoin, _amount, _user);\\n\\n        emit DelegateDeposit(\\n            msg.sender,\\n            _user,\\n            _policyTokenName,\\n            _stablecoin,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Burn policy tokens and redeem USDT\\n     * @dev Redeem happens before the deadline and is different from claim/settle\\n     * @param _policyTokenName Name of the policy token\\n     * @param _stablecoin Address of the stablecoin\\n     * @param _amount Amount to redeem\\n     */\\n    function redeem(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _amount\\n    )\\n        public\\n        beforeDeadline(_policyTokenName)\\n        validPolicyTokenWithStablecoin(_policyTokenName, _stablecoin)\\n    {\\n        address policyTokenAddress = findAddressbyName(_policyTokenName);\\n\\n        // Check if the user has enough quota (quota is only for those who mint policy tokens)\\n        require(\\n            userQuota[msg.sender][policyTokenAddress] >= _amount,\\n            \\\"User's quota not sufficient\\\"\\n        );\\n\\n        userQuota[msg.sender][policyTokenAddress] -= _amount;\\n\\n        if (userQuota[msg.sender][policyTokenAddress] == 0)\\n            delete userQuota[msg.sender][policyTokenAddress];\\n\\n        IERC20(_stablecoin).safeTransfer(msg.sender, _amount);\\n\\n        INPPolicyToken policyToken = INPPolicyToken(policyTokenAddress);\\n        policyToken.burn(msg.sender, _amount);\\n\\n        emit Redeem(msg.sender, _policyTokenName, _stablecoin, _amount);\\n    }\\n\\n    /**\\n     * @notice Redeem policy tokens and get stablecoins by the user himeself\\n     * @param _policyTokenName Name of the policy token\\n     * @param _stablecoin Address of the stablecoin\\n     */\\n    function redeemAfterSettlement(\\n        string memory _policyTokenName,\\n        address _stablecoin\\n    )\\n        public\\n        afterSettlement(_policyTokenName)\\n        validPolicyTokenWithStablecoin(_policyTokenName, _stablecoin)\\n    {\\n        address policyTokenAddress = findAddressbyName(_policyTokenName);\\n\\n        // Copy to memory (will not change the result)\\n        SettlementInfo memory result = settleResult[policyTokenAddress];\\n\\n        // Must have got the final price\\n        require(\\n            result.price != 0 && result.alreadySettled,\\n            \\\"Have not got the oracle result\\\"\\n        );\\n\\n        // The event must be \\\"not happend\\\"\\n        require(\\n            result.isHappened == false,\\n            \\\"Only call this function when the event does not happen\\\"\\n        );\\n\\n        // User must have quota because this is for depositors when event not happens\\n        require(\\n            userQuota[msg.sender][policyTokenAddress] > 0,\\n            \\\"No quota, you did not deposit and mint policy tokens before\\\"\\n        );\\n\\n        // Charge 1% Fee when redeem / claim\\n        uint256 amount = userQuota[msg.sender][policyTokenAddress];\\n        uint256 amountWithFee = (amount * 990) / 1000;\\n        uint256 amountToCollect = amount - amountWithFee;\\n\\n        pendingIncomeToLottery[_stablecoin] += (amountToCollect * 8) / 10;\\n        pendingIncomeToEmergency[_stablecoin] +=\\n            amountToCollect -\\n            (amountToCollect * 8) /\\n            10;\\n\\n        // Send back stablecoins directly\\n        IERC20(_stablecoin).safeTransfer(msg.sender, amountWithFee);\\n\\n        // Delete the userQuota storage\\n        delete userQuota[msg.sender][policyTokenAddress];\\n\\n        emit RedeemAfterSettlement(\\n            msg.sender,\\n            _policyTokenName,\\n            _stablecoin,\\n            amountWithFee\\n        );\\n    }\\n\\n    /**\\n     * @notice Claim a payoff based on policy tokens\\n     * @dev It is done after result settlement and only if the result is true\\n     * @param _policyTokenName Name of the policy token\\n     * @param _stablecoin Address of the stable coin\\n     * @param _amount Amount of stablecoin\\n     */\\n    function claim(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _amount\\n    )\\n        public\\n        afterSettlement(_policyTokenName)\\n        validPolicyTokenWithStablecoin(_policyTokenName, _stablecoin)\\n    {\\n        address policyTokenAddress = findAddressbyName(_policyTokenName);\\n\\n        // Copy to memory (will not change the result)\\n        SettlementInfo memory result = settleResult[policyTokenAddress];\\n\\n        // Check if we have already settle the final price\\n        require(\\n            result.price != 0 && result.alreadySettled,\\n            \\\"Have not got the oracle result\\\"\\n        );\\n\\n        // Check if the event happens\\n        require(\\n            result.isHappened,\\n            \\\"The result does not happen, you can not claim\\\"\\n        );\\n\\n        // Charge 1% fee\\n        uint256 amountWithFee = (_amount * 990) / 1000;\\n        uint256 amountToCollect = _amount - amountWithFee;\\n\\n        // Update pending income record\\n        pendingIncomeToLottery[_stablecoin] += (amountToCollect * 8) / 10;\\n        pendingIncomeToEmergency[_stablecoin] +=\\n            amountToCollect -\\n            (amountToCollect * 8) /\\n            10;\\n\\n        IERC20(_stablecoin).safeTransfer(msg.sender, amountWithFee);\\n\\n        // Users must have enough policy tokens to claim\\n        INPPolicyToken policyToken = INPPolicyToken(policyTokenAddress);\\n\\n        // Burn the policy tokens\\n        policyToken.burn(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Get the final price from the PriceGetter contract\\n     * @param _policyTokenName Name of the policy token\\n     */\\n    function settleFinalResult(string memory _policyTokenName)\\n        public\\n        afterSettlement(_policyTokenName)\\n        notAlreadySettled(_policyTokenName)\\n    {\\n        address policyTokenAddress = findAddressbyName(_policyTokenName);\\n\\n        SettlementInfo storage result = settleResult[policyTokenAddress];\\n\\n        // Get the strike token name\\n        string memory originalTokenName = policyTokenToOriginal[\\n            policyTokenAddress\\n        ];\\n\\n        // Get the final price from oracle\\n        uint256 price = IPriceGetter(priceGetter).getLatestPrice(\\n            originalTokenName\\n        );\\n\\n        result.alreadySettled = true;\\n        result.price = price;\\n\\n        PolicyTokenInfo memory policyTokenInfo = policyTokenInfoMapping[\\n            _policyTokenName\\n        ];\\n\\n        // Get the final result\\n        bool situationT1 = (price >= policyTokenInfo.strikePrice) &&\\n            policyTokenInfo.isCall;\\n        bool situationT2 = (price <= policyTokenInfo.strikePrice) &&\\n            !policyTokenInfo.isCall;\\n\\n        bool isHappened = (situationT1 || situationT2) ? true : false;\\n\\n        result.isHappened = isHappened;\\n\\n        emit FinalResultSettled(_policyTokenName, price, isHappened);\\n    }\\n\\n    /**\\n     * @notice Settle the policies when then insurance event do not happen\\n     *         Funds are automatically distributed back to the depositors\\n     * @dev    Take care of the gas cost and can use the _startIndex and _stopIndex to control the size\\n     * @param _policyTokenName Name of policy token\\n     * @param _stablecoin Address of stablecoin\\n     * @param _startIndex Settlement start index\\n     * @param _stopIndex Settlement stop index\\n     */\\n    function settleAllPolicyTokens(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _startIndex,\\n        uint256 _stopIndex\\n    ) public onlyOwner {\\n        address policyTokenAddress = findAddressbyName(_policyTokenName);\\n\\n        // Copy to memory (will not change the result)\\n        SettlementInfo memory result = settleResult[policyTokenAddress];\\n\\n        // Must have got the final price\\n        require(\\n            result.price != 0 && result.alreadySettled == true,\\n            \\\"Have not got the oracle result\\\"\\n        );\\n\\n        // The event must be \\\"not happend\\\"\\n        require(\\n            result.isHappened == false,\\n            \\\"Only call this function when the event does not happen\\\"\\n        );\\n\\n        // Store the amount to collect to lottery and emergency pool\\n        uint256 amountToCollect = 0;\\n\\n        // Length of all depositors for this policy token\\n        uint256 length = allDepositors[policyTokenAddress].length;\\n\\n        require(\\n            result.currentDistributionIndex <= length,\\n            \\\"Have distributed all\\\"\\n        );\\n\\n        // Settle the policies in [_startIndex, _stopIndex)\\n        if (_startIndex == 0 && _stopIndex == 0) {\\n            amountToCollect += _settlePolicy(\\n                policyTokenAddress,\\n                _stablecoin,\\n                0,\\n                length\\n            );\\n\\n            // Update the distribution index for this policy token\\n            settleResult[policyTokenAddress].currentDistributionIndex = length;\\n\\n            // Update pending income record\\n            pendingIncomeToLottery[_stablecoin] += (amountToCollect * 8) / 10;\\n            pendingIncomeToEmergency[_stablecoin] +=\\n                amountToCollect -\\n                (amountToCollect * 8) /\\n                10;\\n\\n            emit PolicyTokensSettledForUsers(\\n                _policyTokenName,\\n                _stablecoin,\\n                0,\\n                length\\n            );\\n        } else {\\n            require(\\n                result.currentDistributionIndex == _startIndex,\\n                \\\"You need to start from the last distribution point\\\"\\n            );\\n            require(_stopIndex < length, \\\"Invalid stop index\\\");\\n\\n            amountToCollect += _settlePolicy(\\n                policyTokenAddress,\\n                _stablecoin,\\n                _startIndex,\\n                _stopIndex\\n            );\\n\\n            // Update the distribution index for this policy token\\n            settleResult[policyTokenAddress]\\n                .currentDistributionIndex = _stopIndex;\\n\\n            // Update pending income record\\n            pendingIncomeToLottery[_stablecoin] += (amountToCollect * 8) / 10;\\n            pendingIncomeToEmergency[_stablecoin] +=\\n                amountToCollect -\\n                (amountToCollect * 8) /\\n                10;\\n\\n            emit PolicyTokensSettledForUsers(\\n                _policyTokenName,\\n                _stablecoin,\\n                _startIndex,\\n                _stopIndex\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Collect the income\\n     * @dev Can be done by anyone, only when there is some income to be distributed\\n     * @param _stablecoin Address of stablecoin\\n     */\\n    function collectIncome(address _stablecoin) public {\\n        require(\\n            lottery != address(0) && emergencyPool != address(0),\\n            \\\"Please set the lottery & emergencyPool address\\\"\\n        );\\n\\n        uint256 amountToLottery = pendingIncomeToLottery[_stablecoin];\\n        uint256 amountToEmergency = pendingIncomeToEmergency[_stablecoin];\\n        require(\\n            amountToLottery > 0 && amountToEmergency > 0,\\n            \\\"No pending income\\\"\\n        );\\n\\n        IERC20(_stablecoin).safeTransfer(lottery, amountToLottery);\\n        IERC20(_stablecoin).safeTransfer(emergencyPool, amountToEmergency);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Finish Deposit\\n     * @param _policyTokenName Name of the policy token\\n     * @param _stablecoin Address of the sable coin\\n     * @param _amount Amount of stablecoin\\n     * @param _user Address to receive the policy tokens\\n     */\\n    function _deposit(\\n        string memory _policyTokenName,\\n        address _stablecoin,\\n        uint256 _amount,\\n        address _user\\n    ) internal {\\n        address policyTokenAddress = findAddressbyName(_policyTokenName);\\n\\n        // If this is the first deposit, store the user address\\n        if (userQuota[_user][policyTokenAddress] == 0) {\\n            allDepositors[policyTokenAddress].push(_user);\\n        }\\n\\n        // Update the user quota\\n        userQuota[_user][policyTokenAddress] += _amount;\\n\\n        // Transfer stablecoins to this contract\\n        IERC20(_stablecoin).safeTransferFrom(_user, address(this), _amount);\\n\\n        INPPolicyToken policyToken = INPPolicyToken(policyTokenAddress);\\n        // Mint new policy tokens\\n        // Amount need to be transferred\\n        policyToken.mint(_user, _amount);\\n\\n        emit Deposit(_user, _policyTokenName, _stablecoin, _amount);\\n    }\\n\\n    /**\\n     * @notice Settle the policy when the event does not happen\\n     * @param _policyTokenAddress Address of policy token\\n     * @param _stablecoin Address of stable coin\\n     * @param _start Start index\\n     * @param _stop Stop index\\n     */\\n    function _settlePolicy(\\n        address _policyTokenAddress,\\n        address _stablecoin,\\n        uint256 _start,\\n        uint256 _stop\\n    ) internal returns (uint256 amountRemaining) {\\n        for (uint256 i = _start; i < _stop; i++) {\\n            address user = allDepositors[_policyTokenAddress][i];\\n            uint256 amount = userQuota[user][_policyTokenAddress];\\n            uint256 amountWithFee = (amount * 990) / 1000;\\n\\n            if (amountWithFee > 0) {\\n                IERC20(_stablecoin).safeTransfer(user, amountWithFee);\\n                delete userQuota[user][_policyTokenAddress];\\n\\n                // Accumulate the remaining part that will be collected later\\n                amountRemaining += amount - amountWithFee;\\n            } else continue;\\n        }\\n    }\\n\\n    /**\\n     * @notice Generate the policy token name\\n     * @param _tokenName Name of the stike token (BTC, ETH, AVAX...)\\n     * @param _decimals Decimals of the name generation (0,1=>1)\\n     * @param _strikePrice Strike price of the policy (18 decimals)\\n     * @param _isCall The policy's payoff is triggered when higher(true) or lower(false)\\n     * @param _round Round of the policy (e.g. 2112, 2201)\\n     */\\n    function _generateName(\\n        string memory _tokenName,\\n        uint256 _decimals,\\n        uint256 _strikePrice,\\n        bool _isCall,\\n        string memory _round\\n    ) public pure returns (string memory) {\\n        // The direction is \\\"H\\\"(Call) or \\\"L\\\"(Put)\\n        string memory direction = _isCall ? \\\"H\\\" : \\\"L\\\";\\n\\n        // Integer part of the strike price (12e18 => 12)\\n        uint256 intPart = _strikePrice / 1e18;\\n        require(intPart > 0, \\\"Invalid int part\\\");\\n\\n        // Decimal part of the strike price (1234e16 => 34)\\n        // Can not start with 0 (e.g. 1204e16 => 0 this is incorrect, will revert in next step)\\n        uint256 decimalPart = _strikePrice.frac() / (10**(18 - _decimals));\\n        if (_decimals >= 2)\\n            require(decimalPart > 10**(_decimals - 1), \\\"Invalid decimal part\\\");\\n\\n        // Combine the string\\n        string memory name = string(\\n            abi.encodePacked(\\n                _tokenName,\\n                \\\"_\\\",\\n                intPart.uintToString(),\\n                \\\".\\\",\\n                decimalPart.uintToString(),\\n                \\\"_\\\",\\n                direction,\\n                \\\"_\\\",\\n                _round\\n            )\\n        );\\n        return name;\\n    }\\n}\\n\",\"keccak256\":\"0xeef24924920b4f56bb3d341d5b2956503c1bc1a867840a700df56db1e729dfe1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/interfaces/INPPolicyToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface INPPolicyToken is IERC20 {\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x33e7a46799f18b1c4750e596ba8cbd47d1d506dac87a5d258da50ee4b133ca36\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/interfaces/INaughtyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface INaughtyFactory {\\n    function getPairAddress(address _tokenAddress1, address _tokenAddress2)\\n        external\\n        view\\n        returns (address);\\n\\n    function deployPolicyToken(\\n        string memory _policyTokenName,\\n        uint256 _decimals\\n    ) external returns (address);\\n\\n    function deployPool(\\n        address _policyTokenAddress,\\n        address _stablecoin,\\n        uint256 _deadline,\\n        uint256 _feeRate\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xf19c1c299eae5695a0dacb609f4d71235f6a7f7b255dce4ede566a6b9018c81f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/naughty-price/interfaces/IPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface IPriceGetter {\\n    function getPriceFeedAddress(string memory _tokenName)\\n        external\\n        view\\n        returns (address);\\n\\n    function setPriceFeed(string memory _tokenName, address _feedAddress)\\n        external;\\n\\n    function getLatestPrice(string memory _tokenName)\\n        external\\n        returns (uint256 _price);\\n}\\n\",\"keccak256\":\"0xd59b115c1d588248cf2606a5a133bcb0e323f14557de9b1bea597fb3d3c3264d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x6fe5115c43db85920e7325c78060272343284628b8367ea986dab63747553dde\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev The owner can be set during deployment, not default to be msg.sender\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address _initialOwner) {\\n        _transferOwnership(_initialOwner);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. It will not be possible to call\\n     *         `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * @dev    Renouncing ownership will leave the contract without an owner,\\n     *         thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Can only be called by the current owner.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * @dev    Internal function without access restriction.\\n     * @param  newOwner Address of the new owner\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x01872fb0c7277e79dbf69d60aad3ac917dfc22349ce6377d8e388287e4f31e88\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/interfaces/IERC20Decimals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x7eba93ff7d047810dcdd0d8372d0c7bb38533e1f1a5fa1b22e9d36f89682f77e\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62cbabae4910e168e99b9c2c3e3b5c9c7ad5e7abd961dcc63b7ea3d83d8ea87e\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102775760003560e01c80637336c38d11610160578063ceed1b90116100d8578063eb9132dd1161008c578063f15cac3411610071578063f15cac341461064d578063f298083b14610660578063f2fde38b1461067357600080fd5b8063eb9132dd14610627578063f10cffbd1461063a57600080fd5b8063da142807116100bd578063da142807146105bb578063e383f7d2146105f4578063e62512371461061457600080fd5b8063ceed1b9014610588578063d9e85c841461059b57600080fd5b8063ba13a5721161012f578063be3f34a111610114578063be3f34a114610542578063c45a015514610555578063c49df4bf1461057557600080fd5b8063ba13a5721461051c578063bb9febaf1461052f57600080fd5b80637336c38d146104d25780638da5cb5b146104e5578063a59b3645146104f6578063a815a2211461050957600080fd5b80632a48ac9a116101f35780634e75ce89116101c25780635e49b5de116101a75780635e49b5de1461048e5780635eb1877e146104a1578063715018a6146104ca57600080fd5b80634e75ce891461044b5780635cb3b14f1461045e57600080fd5b80632a48ac9a1461039f5780632a5c792a146103b257806338081de2146103c757806339f67738146103da57600080fd5b80630dc726471161024a57806318dd152f1161022f57806318dd152f1461032d5780631d7ad9d8146103405780631ee08fa11461035357600080fd5b80630dc72647146102ed5780631306c0a51461030d57600080fd5b8063038440971461027c5780630418945a1461029157806307962845146102a457806308d89d5f146102da575b600080fd5b61028f61028a366004612dc5565b610686565b005b61028f61029f366004612e32565b6109b5565b6102c46102b2366004612e32565b600f6020526000908152604090205481565b6040516102d19190612e5b565b60405180910390f35b61028f6102e8366004612e7a565b610a4c565b6103006102fb366004612ee4565b610cd4565b6040516102d19190612f63565b61032061031b366004612f74565b610d80565b6040516102d19190612fba565b61030061033b366004612e32565b610db8565b61028f61034e366004612e32565b610dd1565b61038f610361366004612e32565b600e60205260009081526040902080546001820154600290920154909160ff80821692610100909204169084565b6040516102d19493929190612fd0565b61028f6103ad366004612e7a565b610e55565b6103ba610efe565b6040516102d191906130e1565b6103006103d5366004612e32565b61107b565b6104386103e8366004612dc5565b80516020818301810180516006825292820191909301209152805460018201546002830154600384015460048501546005909501546001600160a01b03851695600160a01b90950460ff16949087565b6040516102d197969594939291906130f2565b610320610459366004612dc5565b611148565b61048161046c366004612e32565b60096020526000908152604090205460ff1681565b6040516102d1919061315a565b61028f61049c36600461317b565b611192565b6103206104af366004612e32565b600a602052600090815260409020546001600160a01b031681565b61028f611510565b61028f6104e0366004612e7a565b611555565b6000546001600160a01b0316610320565b600454610320906001600160a01b031681565b61028f610517366004612e32565b61177d565b600354610320906001600160a01b031681565b61032061053d366004613277565b611801565b61028f610550366004612e32565b611a4a565b600154610568906001600160a01b031681565b6040516102d19190613337565b61028f610583366004613345565b611b13565b600254610568906001600160a01b031681565b6105ae6105a9366004612dc5565b611dfe565b6040516102d19190613392565b6102c46105c93660046133a0565b6001600160a01b039182166000908152600c6020908152604080832093909416825291909152205490565b6102c4610602366004612e32565b60106020526000908152604090205481565b600554610320906001600160a01b031681565b61028f610635366004613277565b611ecc565b6103006106483660046133c2565b61226b565b61028f61065b36600461346f565b6123d3565b61028f61066e366004612e32565b6124e6565b61028f610681366004612e32565b61256a565b8060006006826040516106999190613503565b9081526020016040518091039020600501549050804210156106d65760405162461bcd60e51b81526004016106cd90613567565b60405180910390fd5b8260006106e282611148565b6001600160a01b0381166000908152600e6020526040902060010154909150610100900460ff16156107265760405162461bcd60e51b81526004016106cd906135cf565b600061073186611148565b6001600160a01b0381166000908152600e60209081526040808320600b909252822080549394509092610763906135f5565b80601f016020809104026020016040519081016040528092919081815260200182805461078f906135f5565b80156107dc5780601f106107b1576101008083540402835291602001916107dc565b820191906000526020600020905b8154815290600101906020018083116107bf57829003601f168201915b50506002546040517ff66a1b710000000000000000000000000000000000000000000000000000000081529495506000946001600160a01b03909116935063f66a1b71925061083091508590600401612f63565b6020604051808303816000875af115801561084f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610873919061362d565b60018401805461ff00191661010017905580845560405190915060009060069061089e908c90613503565b908152604080516020928190038301812060e08201835280546001600160a01b0381168352600160a01b900460ff1615159382019390935260018301549181019190915260028201546060820152600382015460808201819052600483015460a083015260059092015460c082015291506000908310801590610922575081602001515b905060008260800151841115801561093c57508260200151155b9050600082806109495750815b610954576000610957565b60015b60018801805460ff19168215151790556040519091507f4f7bb4bf5b5d9e711ae7506fc1acd843eea9f216861a09c312fefb7e05095a369061099e908f908890859061364e565b60405180910390a150505050505050505050505050565b336109c86000546001600160a01b031690565b6001600160a01b0316146109ee5760405162461bcd60e51b81526004016106cd906136ab565b6001600160a01b03811660009081526009602052604090819020805460ff19166001179055517f86b377b6d485043d4a8b2b0c26051f82529ea2d7c23b1188598416473c12309390610a41908390612fba565b60405180910390a150565b826000600682604051610a5f9190613503565b908152602001604051809103902060050154905080421015610a935760405162461bcd60e51b81526004016106cd90613567565b84846000610aa083611148565b6001600160a01b038181166000908152600a6020526040902054919250838116911614610adf5760405162461bcd60e51b81526004016106cd90613713565b6000610aea89611148565b6001600160a01b0381166000908152600e602090815260409182902082516080810184528154808252600183015460ff80821615159584019590955261010090049093161515938101939093526002015460608301529192509015801590610b53575080604001515b610b6f5760405162461bcd60e51b81526004016106cd90613755565b8060200151610b905760405162461bcd60e51b81526004016106cd906137bd565b60006103e8610ba18a6103de6137e3565b610bab9190613818565b90506000610bb9828b61382c565b9050600a610bc88260086137e3565b610bd29190613818565b6001600160a01b038c166000908152600f602052604081208054909190610bfa908490613843565b90915550600a9050610c0d8260086137e3565b610c179190613818565b610c21908261382c565b6001600160a01b038c1660009081526010602052604081208054909190610c49908490613843565b90915550610c6390506001600160a01b038c1633846125d5565b604051632770a7eb60e21b815284906001600160a01b03821690639dc29fac90610c939033908f9060040161385b565b600060405180830381600087803b158015610cad57600080fd5b505af1158015610cc1573d6000803e3d6000fd5b5050505050505050505050505050505050565b60088181548110610ce457600080fd5b906000526020600020016000915090508054610cff906135f5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2b906135f5565b8015610d785780601f10610d4d57610100808354040283529160200191610d78565b820191906000526020600020905b815481529060010190602001808311610d5b57829003601f168201915b505050505081565b600d6020528160005260406000208181548110610d9c57600080fd5b6000918252602090912001546001600160a01b03169150829050565b60076020526000908152604090208054610cff906135f5565b33610de46000546001600160a01b031690565b6001600160a01b031614610e0a5760405162461bcd60e51b81526004016106cd906136ab565b600480546001600160a01b0319166001600160a01b0383161790556040517f6fc32d8d0721139a274b6368b7febce03d80adce9dc0fad439ebb101b22a309490610a41908390612fba565b826000600682604051610e689190613503565b908152602001604051809103902060040154905080421115610e9c5760405162461bcd60e51b81526004016106cd906138ce565b84846000610ea983611148565b6001600160a01b038181166000908152600a6020526040902054919250838116911614610ee85760405162461bcd60e51b81526004016106cd90613713565b610ef488888833612658565b5050505050505050565b60085460609060008167ffffffffffffffff811115610f1f57610f1f612ccf565b604051908082528060200260200182016040528015610f9b57816020015b610f886040518060e0016040528060006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081525090565b815260200190600190039081610f3d5790505b50905060005b8281101561107457600660088281548110610fbe57610fbe6138de565b90600052602060002001604051610fd59190613962565b90815260408051918290036020908101832060e08401835280546001600160a01b038116855260ff600160a01b909104161515918401919091526001810154918301919091526002810154606083015260038101546080830152600481015460a08301526005015460c08201528251839083908110611056576110566138de565b6020026020010181905250808061106c9061396c565b915050610fa1565b5092915050565b6001600160a01b03811660009081526007602052604090208054606091906110a2906135f5565b80601f01602080910402602001604051908101604052809291908181526020018280546110ce906135f5565b801561111b5780601f106110f05761010080835404028352916020019161111b565b820191906000526020600020905b8154815290600101906020018083116110fe57829003601f168201915b5050505050905060008151116111435760405162461bcd60e51b81526004016106cd906139b9565b919050565b600060068260405161115a9190613503565b908152604051908190036020019020546001600160a01b03169050806111435760405162461bcd60e51b81526004016106cd906139fb565b336111a56000546001600160a01b031690565b6001600160a01b0316146111cb5760405162461bcd60e51b81526004016106cd906136ab565b601286111580156111dd575060128511155b6111f95760405162461bcd60e51b81526004016106cd90613a3d565b84886001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611238573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125c9190613a61565b60ff161461127c5760405162461bcd60e51b81526004016106cd90613ab4565b42821161129b5760405162461bcd60e51b81526004016106cd90613af6565b818110156112bb5760405162461bcd60e51b81526004016106cd90613b38565b60006112ca8a88878b8861226b565b6001546040517f87f0061a0000000000000000000000000000000000000000000000000000000081529192506000916001600160a01b03909116906387f0061a9061131b9085908b90600401613b48565b6020604051808303816000875af115801561133a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135e9190613b73565b90506040518060e00160405280826001600160a01b031681526020018a15158152602001898152602001888152602001878152602001858152602001848152506006836040516113ae9190613503565b9081526040805191829003602090810190922083518154858501511515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009091166001600160a01b0392831617178255848301516001830155606085015160028301556080850151600383015560a0850151600483015560c0909401516005909101559183166000908152600b8252919091208c51611455928e0190612c36565b506001600160a01b0381166000908152600760209081526040909120835161147f92850190612c36565b506008805460018101825560009190915282516114c3917ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301906020850190612c36565b507f5c781be7034983eed256e8250b1df5111e452c6dd41a3e415bdeda1cac92348882828987876040516114fb959493929190613b94565b60405180910390a15050505050505050505050565b336115236000546001600160a01b031690565b6001600160a01b0316146115495760405162461bcd60e51b81526004016106cd906136ab565b61155360006127e1565b565b8260006006826040516115689190613503565b90815260200160405180910390206004015490508042111561159c5760405162461bcd60e51b81526004016106cd906138ce565b848460006115a983611148565b6001600160a01b038181166000908152600a60205260409020549192508381169116146115e85760405162461bcd60e51b81526004016106cd90613713565b60006115f389611148565b336000908152600c602090815260408083206001600160a01b03851684529091529020549091508711156116395760405162461bcd60e51b81526004016106cd90613c17565b336000908152600c602090815260408083206001600160a01b03851684529091528120805489929061166c90849061382c565b9091555050336000908152600c602090815260408083206001600160a01b03851684529091529020546116be57336000908152600c602090815260408083206001600160a01b03851684529091528120555b6116d26001600160a01b03891633896125d5565b604051632770a7eb60e21b815281906001600160a01b03821690639dc29fac906117029033908c9060040161385b565b600060405180830381600087803b15801561171c57600080fd5b505af1158015611730573d6000803e3d6000fd5b505050507fae452465b27fa0406f99c961c3bbf8215e6dabe24c0da5dd5981206d9038500a338b8b8b6040516117699493929190613c27565b60405180910390a150505050505050505050565b336117906000546001600160a01b031690565b6001600160a01b0316146117b65760405162461bcd60e51b81526004016106cd906136ab565b600580546001600160a01b0319166001600160a01b0383161790556040517f82b306b4712e26cb08bc1bd049ca46818dea8d7bacdd8988f7557fd887a49e0f90610a41908390612fba565b6000336118166000546001600160a01b031690565b6001600160a01b03161461183c5760405162461bcd60e51b81526004016106cd906136ab565b6001600160a01b038416600090815260096020526040902054849060ff16151560011461187b5760405162461bcd60e51b81526004016106cd90613cae565b8560006001600160a01b03166006826040516118979190613503565b908152604051908190036020019020546001600160a01b031614156118ce5760405162461bcd60e51b81526004016106cd90613d16565b4285116118ed5760405162461bcd60e51b81526004016106cd90613af6565b6006876040516118fd9190613503565b908152602001604051809103902060040154851461192d5760405162461bcd60e51b81526004016106cd90613d7e565b600061193888611148565b6001546040517f3a5f69f80000000000000000000000000000000000000000000000000000000081529192506000916001600160a01b0390911690633a5f69f89061198d9085908c908c908c90600401613d8e565b6020604051808303816000875af11580156119ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d09190613b73565b6001600160a01b038381166000908152600a60205260409081902080546001600160a01b031916928c1692909217909155519091507f04c12766244f2559dd215eecd69f70fdfce0e2c2260b5d52cb8b63738622eaa490611a3690839085908c90613db6565b60405180910390a198975050505050505050565b6003546001600160a01b031615801590611a6e57506004546001600160a01b031615155b611a8a5760405162461bcd60e51b81526004016106cd90613e36565b6001600160a01b0381166000908152600f60209081526040808320546010909252909120548115801590611abe5750600081115b611ada5760405162461bcd60e51b81526004016106cd90613e78565b600354611af4906001600160a01b038581169116846125d5565b600454611b0e906001600160a01b038581169116836125d5565b505050565b816000600682604051611b269190613503565b908152602001604051809103902060050154905080421015611b5a5760405162461bcd60e51b81526004016106cd90613567565b83836000611b6783611148565b6001600160a01b038181166000908152600a6020526040902054919250838116911614611ba65760405162461bcd60e51b81526004016106cd90613713565b6000611bb188611148565b6001600160a01b0381166000908152600e602090815260409182902082516080810184528154808252600183015460ff80821615159584019590955261010090049093161515938101939093526002015460608301529192509015801590611c1a575080604001515b611c365760405162461bcd60e51b81526004016106cd90613755565b602081015115611c585760405162461bcd60e51b81526004016106cd90613ee0565b336000908152600c602090815260408083206001600160a01b0386168452909152902054611c985760405162461bcd60e51b81526004016106cd90613f48565b336000908152600c602090815260408083206001600160a01b0386168452909152812054906103e8611ccc836103de6137e3565b611cd69190613818565b90506000611ce4828461382c565b9050600a611cf38260086137e3565b611cfd9190613818565b6001600160a01b038c166000908152600f602052604081208054909190611d25908490613843565b90915550600a9050611d388260086137e3565b611d429190613818565b611d4c908261382c565b6001600160a01b038c1660009081526010602052604081208054909190611d74908490613843565b90915550611d8e90506001600160a01b038c1633846125d5565b336000818152600c602090815260408083206001600160a01b038a16845290915280822091909155517f03562b7020b16271daf63f8af4dfad66194d3a83359909327c31983326b1287f91611de8918f908f908790613c27565b60405180910390a1505050505050505050505050565b611e496040518060e0016040528060006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081525090565b600682604051611e599190613503565b90815260408051918290036020908101832060e08401835280546001600160a01b038116855260ff600160a01b909104161515918401919091526001810154918301919091526002810154606083015260038101546080830152600481015460a08301526005015460c082015292915050565b33611edf6000546001600160a01b031690565b6001600160a01b031614611f055760405162461bcd60e51b81526004016106cd906136ab565b6000611f1085611148565b6001600160a01b0381166000908152600e602090815260409182902082516080810184528154808252600183015460ff80821615159584019590955261010090049093161515938101939093526002015460608301529192509015801590611f7e5750604081015115156001145b611f9a5760405162461bcd60e51b81526004016106cd90613755565b602081015115611fbc5760405162461bcd60e51b81526004016106cd90613ee0565b6001600160a01b0382166000908152600d60205260408120546060830151811015611ff95760405162461bcd60e51b81526004016106cd90613f8a565b85158015612005575084155b15612118576120178488600084612831565b6120219083613843565b6001600160a01b0385166000908152600e602052604090206002018290559150600a61204e8360086137e3565b6120589190613818565b6001600160a01b0388166000908152600f602052604081208054909190612080908490613843565b90915550600a90506120938360086137e3565b61209d9190613818565b6120a7908361382c565b6001600160a01b038816600090815260106020526040812080549091906120cf908490613843565b90915550506040517fb882f84541d4c34087dd3a3971b96ad170bc52a7907def174bb86f986bce6e2c9061210b908a908a906000908690613faf565b60405180910390a1610ef4565b8583606001511461213b5760405162461bcd60e51b81526004016106cd90614034565b80851061215a5760405162461bcd60e51b81526004016106cd90614076565b61216684888888612831565b6121709083613843565b6001600160a01b0385166000908152600e602052604090206002018690559150600a61219d8360086137e3565b6121a79190613818565b6001600160a01b0388166000908152600f6020526040812080549091906121cf908490613843565b90915550600a90506121e28360086137e3565b6121ec9190613818565b6121f6908361382c565b6001600160a01b0388166000908152601060205260408120805490919061221e908490613843565b90915550506040517fb882f84541d4c34087dd3a3971b96ad170bc52a7907def174bb86f986bce6e2c90612259908a908a908a908a90614086565b60405180910390a15050505050505050565b60606000836122af576040518060400160405280600181526020017f4c000000000000000000000000000000000000000000000000000000000000008152506122e6565b6040518060400160405280600181526020017f48000000000000000000000000000000000000000000000000000000000000008152505b905060006122fc670de0b6b3a764000087613818565b90506000811161231e5760405162461bcd60e51b81526004016106cd906140d8565b600061232b88601261382c565b61233690600a6141f6565b61234a90670de0b6b3a76400008906613818565b9050600288106123885761235f60018961382c565b61236a90600a6141f6565b81116123885760405162461bcd60e51b81526004016106cd90614237565b6000896123948461293b565b61239d8461293b565b86896040516020016123b3959493929190614299565b60408051601f198184030181529190529450505050505b95945050505050565b8360006006826040516123e69190613503565b90815260200160405180910390206004015490508042111561241a5760405162461bcd60e51b81526004016106cd906138ce565b8585600061242783611148565b6001600160a01b038181166000908152600a60205260409020549192508381169116146124665760405162461bcd60e51b81526004016106cd90613713565b6005546001600160a01b031633146124905760405162461bcd60e51b81526004016106cd90614357565b61249c89898989612658565b7f99f877ebe25ff1544a89db7db58d9d0b180af2288344cf1792272a4a07fd7c9933878b8b8b6040516124d3959493929190614367565b60405180910390a1505050505050505050565b336124f96000546001600160a01b031690565b6001600160a01b03161461251f5760405162461bcd60e51b81526004016106cd906136ab565b600380546001600160a01b0319166001600160a01b0383161790556040517f925ca4fe13c96d03d284548722ea2b894a5c446495703091e537b85dc54a2a0790610a41908390612fba565b3361257d6000546001600160a01b031690565b6001600160a01b0316146125a35760405162461bcd60e51b81526004016106cd906136ab565b6001600160a01b0381166125c95760405162461bcd60e51b81526004016106cd906143fb565b6125d2816127e1565b50565b611b0e8363a9059cbb60e01b84846040516024016125f492919061385b565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612a75565b600061266385611148565b6001600160a01b038084166000908152600c60209081526040808320938516835292905220549091506126cf576001600160a01b038181166000908152600d602090815260408220805460018101825590835291200180546001600160a01b0319169184169190911790555b6001600160a01b038083166000908152600c6020908152604080832093851683529290529081208054859290612706908490613843565b9091555061272190506001600160a01b038516833086612b04565b6040517f40c10f1900000000000000000000000000000000000000000000000000000000815281906001600160a01b038216906340c10f199061276a908690889060040161385b565b600060405180830381600087803b15801561278457600080fd5b505af1158015612798573d6000803e3d6000fd5b505050507faad69ef0c77f7c04ba3390022ae56a77ba8686b6cd9530eff3a0a8c38d33e5ad838787876040516127d19493929190613c27565b60405180910390a1505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000825b82811015612932576001600160a01b0386166000908152600d60205260408120805483908110612867576128676138de565b60009182526020808320909101546001600160a01b03908116808452600c83526040808520928c16855291909252822054909250906103e86128ab836103de6137e3565b6128b59190613818565b90508015612914576128d16001600160a01b03891684836125d5565b6001600160a01b038084166000908152600c60209081526040808320938d16835292905290812055612903818361382c565b61290d9086613843565b945061291c565b505050612920565b5050505b8061292a8161396c565b915050612835565b50949350505050565b60608161297b57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156129a5578061298f8161396c565b915061299e9050600a83613818565b915061297f565b60008167ffffffffffffffff8111156129c0576129c0612ccf565b6040519080825280601f01601f1916602001820160405280156129ea576020820181803683370190505b5090505b8415612a6d576129ff60018361382c565b9150612a0c600a8661440b565b612a17906030613843565b60f81b818381518110612a2c57612a2c6138de565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612a66600a86613818565b94506129ee565b949350505050565b6000612aca826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612b2b9092919063ffffffff16565b805190915015611b0e5780806020019051810190612ae8919061442a565b611b0e5760405162461bcd60e51b81526004016106cd906144a3565b612b25846323b872dd60e01b8585856040516024016125f4939291906144b3565b50505050565b6060612b3a8484600085612b44565b90505b9392505050565b606082471015612b665760405162461bcd60e51b81526004016106cd90614533565b843b612b845760405162461bcd60e51b81526004016106cd90614575565b600080866001600160a01b03168587604051612ba09190613503565b60006040518083038185875af1925050503d8060008114612bdd576040519150601f19603f3d011682016040523d82523d6000602084013e612be2565b606091505b5091509150612bf2828286612bfd565b979650505050505050565b60608315612c0c575081612b3d565b825115612c1c5782518084602001fd5b8160405162461bcd60e51b81526004016106cd9190612f63565b828054612c42906135f5565b90600052602060002090601f016020900481019282612c645760008555612caa565b82601f10612c7d57805160ff1916838001178555612caa565b82800160010185558215612caa579182015b82811115612caa578251825591602001919060010190612c8f565b50612cb6929150612cba565b5090565b5b80821115612cb65760008155600101612cbb565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715612d0b57612d0b612ccf565b6040525050565b6000612d1d60405190565b90506111438282612ce5565b600067ffffffffffffffff821115612d4357612d43612ccf565b601f19601f83011660200192915050565b82818337506000910152565b6000612d73612d6e84612d29565b612d12565b905082815260208101848484011115612d8e57612d8e600080fd5b612d99848285612d54565b509392505050565b600082601f830112612db557612db5600080fd5b8135612a6d848260208601612d60565b600060208284031215612dda57612dda600080fd5b813567ffffffffffffffff811115612df457612df4600080fd5b612a6d84828501612da1565b60006001600160a01b0382165b92915050565b612e1c81612e00565b81146125d257600080fd5b8035612e0d81612e13565b600060208284031215612e4757612e47600080fd5b6000612a6d8484612e27565b805b82525050565b60208101612e0d8284612e53565b80612e1c565b8035612e0d81612e69565b600080600060608486031215612e9257612e92600080fd5b833567ffffffffffffffff811115612eac57612eac600080fd5b612eb886828701612da1565b9350506020612ec986828701612e27565b9250506040612eda86828701612e6f565b9150509250925092565b600060208284031215612ef957612ef9600080fd5b6000612a6d8484612e6f565b60005b83811015612f20578181015183820152602001612f08565b83811115612b255750506000910152565b6000612f3b825190565b808452602084019350612f52818560208601612f05565b601f01601f19169290920192915050565b60208082528101612b3d8184612f31565b60008060408385031215612f8a57612f8a600080fd5b6000612f968585612e27565b9250506020612fa785828601612e6f565b9150509250929050565b612e5581612e00565b60208101612e0d8284612fb1565b801515612e55565b60808101612fde8287612e53565b612feb6020830186612fc8565b612ff86040830185612fc8565b6123ca6060830184612e53565b80516130118382612fb1565b5060208101516130246020840182612fc8565b5060408101516130376040840182612e53565b50606081015161304a6060840182612e53565b50608081015161305d6080840182612e53565b5060a081015161307060a0840182612e53565b5060c0810151611b0e60c0840182612e53565b61308d8282613005565b5060e00190565b60200190565b60006130a4825190565b808452602093840193830160005b828110156130d75781516130c68782613083565b9650506020820191506001016130b2565b5093949350505050565b60208082528101612b3d818461309a565b60e08101613100828a612fb1565b61310d6020830189612fc8565b61311a6040830188612e53565b6131276060830187612e53565b6131346080830186612e53565b61314160a0830185612e53565b61314e60c0830184612e53565b98975050505050505050565b60208101612e0d8284612fc8565b801515612e1c565b8035612e0d81613168565b60008060008060008060008060006101208a8c03121561319d5761319d600080fd5b893567ffffffffffffffff8111156131b7576131b7600080fd5b6131c38c828d01612da1565b99505060206131d48c828d01612e27565b98505060406131e58c828d01613170565b97505060606131f68c828d01612e6f565b96505060806132078c828d01612e6f565b95505060a06132188c828d01612e6f565b94505060c08a013567ffffffffffffffff81111561323857613238600080fd5b6132448c828d01612da1565b93505060e06132558c828d01612e6f565b9250506101006132678c828d01612e6f565b9150509295985092959850929598565b6000806000806080858703121561329057613290600080fd5b843567ffffffffffffffff8111156132aa576132aa600080fd5b6132b687828801612da1565b94505060206132c787828801612e27565b93505060406132d887828801612e6f565b92505060606132e987828801612e6f565b91505092959194509250565b6000612e0d6001600160a01b03831661330c565b90565b6001600160a01b031690565b6000612e0d826132f5565b6000612e0d82613318565b612e5581613323565b60208101612e0d828461332e565b6000806040838503121561335b5761335b600080fd5b823567ffffffffffffffff81111561337557613375600080fd5b61338185828601612da1565b9250506020612fa785828601612e27565b60e08101612e0d8284613005565b600080604083850312156133b6576133b6600080fd5b60006133818585612e27565b600080600080600060a086880312156133dd576133dd600080fd5b853567ffffffffffffffff8111156133f7576133f7600080fd5b61340388828901612da1565b955050602061341488828901612e6f565b945050604061342588828901612e6f565b935050606061343688828901613170565b925050608086013567ffffffffffffffff81111561345657613456600080fd5b61346288828901612da1565b9150509295509295909350565b6000806000806080858703121561348857613488600080fd5b843567ffffffffffffffff8111156134a2576134a2600080fd5b6134ae87828801612da1565b94505060206134bf87828801612e27565b93505060406134d087828801612e6f565b92505060606132e987828801612e27565b60006134eb825190565b6134f9818560208601612f05565b9290920192915050565b612e0d81836134e1565b60368152602081017f43616e206e6f7420736574746c652f636c61696d2c2068617665206e6f74207281527f65616368656420736574746c6554696d657374616d7000000000000000000000602082015290505b60400190565b60208082528101612e0d8161350d565b60248152602081017f5468697320706f6c6963792068617320616c7265616479206265656e2073657481527f746c65640000000000000000000000000000000000000000000000000000000060208201529050613561565b60208082528101612e0d81613577565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061360957607f821691505b6020821081141561361c5761361c6135df565b50919050565b8051612e0d81612e69565b60006020828403121561364257613642600080fd5b6000612a6d8484613622565b6060808252810161365f8186612f31565b905061366e6020830185612e53565b612a6d6040830184612fc8565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152613094565b60208082528101612e0d8161367b565b60238152602081017f496e76616c696420706f6c696379746f6b656e207769746820737461626c656381527f6f696e000000000000000000000000000000000000000000000000000000000060208201529050613561565b60208082528101612e0d816136bb565b601e8152602081017f48617665206e6f7420676f7420746865206f7261636c6520726573756c74000081529050613094565b60208082528101612e0d81613723565b602d8152602081017f54686520726573756c7420646f6573206e6f742068617070656e2c20796f752081527f63616e206e6f7420636c61696d0000000000000000000000000000000000000060208201529050613561565b60208082528101612e0d81613765565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156137fd576137fd6137cd565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261382757613827613802565b500490565b60008282101561383e5761383e6137cd565b500390565b60008219821115613856576138566137cd565b500190565b604081016138698285612fb1565b612b3d6020830184612e53565b602f8152602081017f43616e206e6f74206465706f7369742f72656465656d2c20686173207061737381527f65642074686520646561646c696e65000000000000000000000000000000000060208201529050613561565b60208082528101612e0d81613876565b634e487b7160e01b600052603260045260246000fd5b60008154613901816135f5565b600182168015613918576001811461392957613959565b60ff19831686528186019350613959565b60008581526020902060005b8381101561395157815488820152600190910190602001613935565b505081860193505b50505092915050565b612e0d81836138f4565b6000600019821415613980576139806137cd565b5060010190565b60158152602081017f506f6c696379206e616d65206e6f7420666f756e64000000000000000000000081529050613094565b60208082528101612e0d81613987565b60168152602081017f506f6c69637920746f6b656e206e6f7420666f756e640000000000000000000081529050613094565b60208082528101612e0d816139c9565b60118152602081017f546f6f206d616e7920646563696d616c7300000000000000000000000000000081529050613094565b60208082528101612e0d81613a0b565b60ff8116612e1c565b8051612e0d81613a4d565b600060208284031215613a7657613a76600080fd5b6000612a6d8484613a56565b60138152602081017f446563696d616c73206e6f74207061697265640000000000000000000000000081529050613094565b60208082528101612e0d81613a82565b600e8152602081017f57726f6e6720646561646c696e6500000000000000000000000000000000000081529050613094565b60208082528101612e0d81613ac4565b60158152602081017f57726f6e6720736574746c6554696d657374616d70000000000000000000000081529050613094565b60208082528101612e0d81613b06565b60408082528101613b598185612f31565b9050612b3d6020830184612e53565b8051612e0d81612e13565b600060208284031215613b8857613b88600080fd5b6000612a6d8484613b68565b60a08082528101613ba58188612f31565b9050613bb46020830187612fb1565b613bc16040830186612e53565b613bce6060830185612e53565b613bdb6080830184612e53565b9695505050505050565b601b8152602081017f5573657227732071756f7461206e6f742073756666696369656e74000000000081529050613094565b60208082528101612e0d81613be5565b60808101613c358287612fb1565b8181036020830152613c478186612f31565b9050612ff86040830185612fb1565b60288152602081017f446f206e6f7420737570706f7274207468697320737461626c65636f696e206381527f757272656e746c7900000000000000000000000000000000000000000000000060208201529050613561565b60208082528101612e0d81613c56565b603f8152602081017f5468697320706f6c69637920746f6b656e20686173206e6f74206265656e206481527f65706c6f7965642c20706c65617365206465706c6f792069742066697273740060208201529050613561565b60208082528101612e0d81613cbe565b602b8152602081017f506f6c69637920746f6b656e20616e6420706f6f6c20646561646c696e65206e81527f6f74207468652073616d6500000000000000000000000000000000000000000060208201529050613561565b60208082528101612e0d81613d26565b60808101613d9c8287612fb1565b613da96020830186612fb1565b612ff86040830185612e53565b60608101613dc48286612fb1565b613dd16020830185612fb1565b612a6d6040830184612fb1565b602e8152602081017f506c656173652073657420746865206c6f7474657279202620656d657267656e81527f6379506f6f6c206164647265737300000000000000000000000000000000000060208201529050613561565b60208082528101612e0d81613dde565b60118152602081017f4e6f2070656e64696e6720696e636f6d6500000000000000000000000000000081529050613094565b60208082528101612e0d81613e46565b60368152602081017f4f6e6c792063616c6c20746869732066756e6374696f6e207768656e2074686581527f206576656e7420646f6573206e6f742068617070656e0000000000000000000060208201529050613561565b60208082528101612e0d81613e88565b603b8152602081017f4e6f2071756f74612c20796f7520646964206e6f74206465706f73697420616e81527f64206d696e7420706f6c69637920746f6b656e73206265666f7265000000000060208201529050613561565b60208082528101612e0d81613ef0565b60148152602081017f4861766520646973747269627574656420616c6c00000000000000000000000081529050613094565b60208082528101612e0d81613f58565b6000612e0d6133098381565b612e5581613f9a565b60808082528101613fc08187612f31565b9050613fcf6020830186612fb1565b612ff86040830185613fa6565b60328152602081017f596f75206e65656420746f2073746172742066726f6d20746865206c6173742081527f646973747269627574696f6e20706f696e74000000000000000000000000000060208201529050613561565b60208082528101612e0d81613fdc565b60128152602081017f496e76616c69642073746f7020696e646578000000000000000000000000000081529050613094565b60208082528101612e0d81614044565b608080825281016140978187612f31565b9050613da96020830186612fb1565b60108152602081017f496e76616c696420696e7420706172740000000000000000000000000000000081529050613094565b60208082528101612e0d816140a6565b80825b600185111561412757808604811115614106576141066137cd565b600185161561411457908102905b80026141208560011c90565b94506140eb565b94509492505050565b60008261413f57506001612b3d565b8161414c57506000612b3d565b8160018114614162576002811461416c57614199565b6001915050612b3d565b60ff84111561417d5761417d6137cd565b8360020a915084821115614193576141936137cd565b50612b3d565b5060208310610133831016604e8410600b84101617156141cc575081810a838111156141c7576141c76137cd565b612b3d565b6141d984848460016140e8565b925090508184048111156141ef576141ef6137cd565b0292915050565b6000612b3d6000198484614130565b60148152602081017f496e76616c696420646563696d616c207061727400000000000000000000000081529050613094565b60208082528101612e0d81614205565b7f5f0000000000000000000000000000000000000000000000000000000000000081525b60010190565b7f2e00000000000000000000000000000000000000000000000000000000000000815261426b565b6142a381876134e1565b90506142ae81614247565b90506142ba81866134e1565b90506142c581614271565b90506142d181856134e1565b90506142dc81614247565b90506142e881846134e1565b90506142f381614247565b9050613bdb81836134e1565b60258152602081017f4f6e6c792074686520726f7574657220636f6e74726163742063616e2064656c81527f656761746500000000000000000000000000000000000000000000000000000060208201529050613561565b60208082528101612e0d816142ff565b60a081016143758288612fb1565b6143826020830187612fb1565b81810360408301526143948186612f31565b9050613bce6060830185612fb1565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529050613561565b60208082528101612e0d816143a3565b60008261441a5761441a613802565b500690565b8051612e0d81613168565b60006020828403121561443f5761443f600080fd5b6000612a6d848461441f565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f7420737563636565640000000000000000000000000000000000000000000060208201529050613561565b60208082528101612e0d8161444b565b606081016144c18286612fb1565b6144ce6020830185612fb1565b612a6d6040830184612e53565b60268152602081017f416464726573733a20696e73756666696369656e742062616c616e636520666f81527f722063616c6c000000000000000000000000000000000000000000000000000060208201529050613561565b60208082528101612e0d816144db565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529050613094565b60208082528101612e0d8161454356fea26469706673582212200b73bc75917946fc6e1f9497e4a7bd60f65a67672f8cb298a3b138008ef3770464736f6c634300080a0033",
  "devdoc": {
    "details": "Most of the functions to be called from outside will use the name of policyToken         rather than the address (easy to read).         Other variables or functions still use address to index.         The rule of policyToken naming is:              Original Token Name(with decimals) + Strike Price + Lower or Higher + Date         E.g.  AVAX_30.0_L_2101, BTC_30000.0_L_2102, ETH_8000.0_H_2109         (the original name need to be the same as in the chainlink oracle)         There are three decimals for a policy token:              1. Name decimals: Only for generating the name of policyToken              2. Token decimals: The decimals of the policyToken                 (should be the same as the paired stablecoin)              3. Price decimals: Always 18. The oracle result will be transferred for settlement",
    "kind": "dev",
    "methods": {
      "_generateName(string,uint256,uint256,bool,string)": {
        "params": {
          "_decimals": "Decimals of the name generation (0,1=>1)",
          "_isCall": "The policy's payoff is triggered when higher(true) or lower(false)",
          "_round": "Round of the policy (e.g. 2112, 2201)",
          "_strikePrice": "Strike price of the policy (18 decimals)",
          "_tokenName": "Name of the stike token (BTC, ETH, AVAX...)"
        }
      },
      "addStablecoin(address)": {
        "params": {
          "_newStablecoin": "Address of the new stablecoin"
        }
      },
      "claim(string,address,uint256)": {
        "details": "It is done after result settlement and only if the result is true",
        "params": {
          "_amount": "Amount of stablecoin",
          "_policyTokenName": "Name of the policy token",
          "_stablecoin": "Address of the stable coin"
        }
      },
      "collectIncome(address)": {
        "details": "Can be done by anyone, only when there is some income to be distributed",
        "params": {
          "_stablecoin": "Address of stablecoin"
        }
      },
      "constructor": {
        "params": {
          "_factory": "Address of naughty factory",
          "_priceGetter": "Address of the oracle contract",
          "_usdt": "USDT.e is the first stablecoin supported in the pool"
        }
      },
      "delegateDeposit(string,address,uint256,address)": {
        "details": "Only called by the router contract",
        "params": {
          "_amount": "Amount of stablecoin",
          "_policyTokenName": "Name of the policy token",
          "_stablecoin": "Address of the sable coin",
          "_user": "Address to receive the policy tokens"
        }
      },
      "deployPolicyToken(string,address,bool,uint256,uint256,uint256,string,uint256,uint256)": {
        "details": "Only the owner can deploy new policy token      The name form is like \"AVAX_50_L_202101\" and is built inside the contract.",
        "params": {
          "_deadline": "Deadline of this policy token (deposit / redeem / swap)",
          "_isCall": "The policy is for higher or lower than the strike price (call / put)",
          "_nameDecimals": "Decimals of this token's name (0~18)",
          "_settleTimestamp": "Can settle after this timestamp (for oracle)",
          "_stablecoin": "Address of the stablecoin (Just for check decimals here)",
          "_strikePrice": "Strike price of the policy (have already been transferred with 1e18)",
          "_tokenDecimals": "Decimals of this token's value (0~18) (same as paired stablecoin)",
          "_tokenName": "Name of the original token (e.g. AVAX, BTC, ETH...)"
        }
      },
      "deployPool(string,address,uint256,uint256)": {
        "params": {
          "_feeRate": "Fee rate given to LP holders",
          "_policyTokenName": "Name of the policy token",
          "_poolDeadline": "Swapping deadline of the pool (normally the same as the token's deadline)",
          "_stablecoin": "Address of the stable coin"
        },
        "returns": {
          "_0": "poolAddress The address of the pool just deployed"
        }
      },
      "deposit(string,address,uint256)": {
        "params": {
          "_amount": "Amount of stablecoin",
          "_policyTokenName": "Name of the policy token",
          "_stablecoin": "Address of the stable coin"
        }
      },
      "findAddressbyName(string)": {
        "params": {
          "_policyTokenName": "Name of the policy token (e.g. \"AVAX_30_L_2103\")"
        },
        "returns": {
          "policyTokenAddress": "Address of the policy token"
        }
      },
      "findNamebyAddress(address)": {
        "params": {
          "_policyTokenAddress": "Address of the policy token"
        },
        "returns": {
          "policyTokenName": "Name of the policy token"
        }
      },
      "getAllTokens()": {
        "returns": {
          "_0": "tokensInfo Token information list"
        }
      },
      "getPolicyTokenInfo(string)": {
        "params": {
          "_policyTokenName": "Name of the policy token (e.g. \"AVAX30L202103\")"
        },
        "returns": {
          "_0": "policyTokenInfo PolicyToken detail information"
        }
      },
      "getUserQuota(address,address)": {
        "params": {
          "_policyTokenAddress": "Address of the policy token",
          "_user": "Address of the user to be checked"
        },
        "returns": {
          "_quota": "User's quota result"
        }
      },
      "redeem(string,address,uint256)": {
        "details": "Redeem happens before the deadline and is different from claim/settle",
        "params": {
          "_amount": "Amount to redeem",
          "_policyTokenName": "Name of the policy token",
          "_stablecoin": "Address of the stablecoin"
        }
      },
      "redeemAfterSettlement(string,address)": {
        "params": {
          "_policyTokenName": "Name of the policy token",
          "_stablecoin": "Address of the stablecoin"
        }
      },
      "renounceOwnership()": {
        "details": "Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner."
      },
      "setEmergencyPool(address)": {
        "params": {
          "_emergencyPool": "Address of the new emergencyPool"
        }
      },
      "setLottery(address)": {
        "params": {
          "_lotteryAddress": "Address of the new lottery"
        }
      },
      "setNaughtyRouter(address)": {
        "params": {
          "_router": "Address of the new naughty router"
        }
      },
      "settleAllPolicyTokens(string,address,uint256,uint256)": {
        "details": "Take care of the gas cost and can use the _startIndex and _stopIndex to control the size",
        "params": {
          "_policyTokenName": "Name of policy token",
          "_stablecoin": "Address of stablecoin",
          "_startIndex": "Settlement start index",
          "_stopIndex": "Settlement stop index"
        }
      },
      "settleFinalResult(string)": {
        "params": {
          "_policyTokenName": "Name of the policy token"
        }
      },
      "transferOwnership(address)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "newOwner": "Address of the new owner"
        }
      }
    },
    "title": "PolicyCore",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_generateName(string,uint256,uint256,bool,string)": {
        "notice": "Generate the policy token name"
      },
      "addStablecoin(address)": {
        "notice": "Add a newly supported stablecoin"
      },
      "claim(string,address,uint256)": {
        "notice": "Claim a payoff based on policy tokens"
      },
      "collectIncome(address)": {
        "notice": "Collect the income"
      },
      "constructor": {
        "notice": "Constructor, for some addresses"
      },
      "delegateDeposit(string,address,uint256,address)": {
        "notice": "Delegate deposit (deposit and mint for other addresses)"
      },
      "deployPolicyToken(string,address,bool,uint256,uint256,uint256,string,uint256,uint256)": {
        "notice": "Deploy a new policy token and return the token address"
      },
      "deployPool(string,address,uint256,uint256)": {
        "notice": "Deploy a new pair (pool)"
      },
      "deposit(string,address,uint256)": {
        "notice": "Deposit stablecoins and get policy tokens"
      },
      "findAddressbyName(string)": {
        "notice": "Find the token address by its name"
      },
      "findNamebyAddress(address)": {
        "notice": "Find the token name by its address"
      },
      "getAllTokens()": {
        "notice": "Get the information about all the tokens"
      },
      "getPolicyTokenInfo(string)": {
        "notice": "Find the token information by its name"
      },
      "getUserQuota(address,address)": {
        "notice": "Get a user's quota for a certain policy token"
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "redeem(string,address,uint256)": {
        "notice": "Burn policy tokens and redeem USDT"
      },
      "redeemAfterSettlement(string,address)": {
        "notice": "Redeem policy tokens and get stablecoins by the user himeself"
      },
      "renounceOwnership()": {
        "notice": "Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."
      },
      "setEmergencyPool(address)": {
        "notice": "Change the address of emergency pool"
      },
      "setLottery(address)": {
        "notice": "Change the address of lottery"
      },
      "setNaughtyRouter(address)": {
        "notice": "Change the address of naughty router"
      },
      "settleAllPolicyTokens(string,address,uint256,uint256)": {
        "notice": "Settle the policies when then insurance event do not happen         Funds are automatically distributed back to the depositors"
      },
      "settleFinalResult(string)": {
        "notice": "Get the final price from the PriceGetter contract"
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`)."
      }
    },
    "notice": "Core logic of Naughty Price Product         Preset:              (Done in the naughtyFactory contract)              1. Deploy policyToken contract              2. Deploy policyToken-Stablecoin pool contract         User Interaction:              1. Deposit Stablecoin and mint PolicyTokens              2. Redeem their Stablecoin and burn the PolicyTokens (before settlement)              3. Claim for payout with PolicyTokens (after settlement)         PolicyTokens are minted with the ratio 1:1 to Stablecoin         The PolicyTokens are traded in the pool with CFMM (xy=k)         When the event happens, a PolicyToken can be burned for claiming 1 Stablecoin.         When the event does not happen, the PolicyToken depositors can         redeem their 1 deposited Stablecoin",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26357,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21965,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "factory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(INaughtyFactory)23958"
      },
      {
        "astId": 21968,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "priceGetter",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPriceGetter)24202"
      },
      {
        "astId": 21970,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "lottery",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 21972,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "emergencyPool",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 21974,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "naughtyRouter",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 21994,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "policyTokenInfoMapping",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_struct(PolicyTokenInfo)21989_storage)"
      },
      {
        "astId": 21998,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "policyTokenAddressToName",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 22001,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "allPolicyTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 22005,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "supportedStablecoin",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 22009,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "whichStablecoin",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 22013,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "policyTokenToOriginal",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 22019,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "userQuota",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 22024,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "allDepositors",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 22038,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "settleResult",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_struct(SettlementInfo)22033_storage)"
      },
      {
        "astId": 22042,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "pendingIncomeToLottery",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22046,
        "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
        "label": "pendingIncomeToEmergency",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INaughtyFactory)23958": {
        "encoding": "inplace",
        "label": "contract INaughtyFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceGetter)24202": {
        "encoding": "inplace",
        "label": "contract IPriceGetter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_struct(SettlementInfo)22033_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PolicyCore.SettlementInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SettlementInfo)22033_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_struct(PolicyTokenInfo)21989_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct PolicyCore.PolicyTokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PolicyTokenInfo)21989_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PolicyTokenInfo)21989_storage": {
        "encoding": "inplace",
        "label": "struct PolicyCore.PolicyTokenInfo",
        "members": [
          {
            "astId": 21976,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "policyTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 21978,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "isCall",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 21980,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "nameDecimals",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21982,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "tokenDecimals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 21984,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "strikePrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21986,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "deadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 21988,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "settleTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(SettlementInfo)22033_storage": {
        "encoding": "inplace",
        "label": "struct PolicyCore.SettlementInfo",
        "members": [
          {
            "astId": 22026,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 22028,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "isHappened",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 22030,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "alreadySettled",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 22032,
            "contract": "contracts/naughty-price/PolicyCore.sol:PolicyCore",
            "label": "currentDistributionIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}