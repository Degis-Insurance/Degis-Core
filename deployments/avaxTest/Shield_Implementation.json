{
  "address": "0xE988d16A775c2Fc34496399b25e1aD0413E60075",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        }
      ],
      "name": "AddStablecoin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CURVE_SWAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CURVE_YUSD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAIe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PLATYPUS_SWAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PTP_MAIN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDCe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDTe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "YUSD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "addCurvePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        }
      ],
      "name": "addSupportedStablecoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "approveStablecoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "curvePoolTokenIndex",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isDeposit",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "setTokenToPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedStablecoin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenToPoolForDeposit",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenToPoolForWithdraw",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd6ed08f98ab33be8b3eb85179f562199fd56d961f43201e0ffa22e9f4fc24722",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0xE988d16A775c2Fc34496399b25e1aD0413E60075",
    "transactionIndex": 3,
    "gasUsed": "2679704",
    "logsBloom": "0x
    "blockHash": "0x47acd750e4528c676ee91481ea6565bcfd8186dd08b2ee7f53e2d883a3bee086",
    "transactionHash": "0xd6ed08f98ab33be8b3eb85179f562199fd56d961f43201e0ffa22e9f4fc24722",
    "logs": [],
    "blockNumber": 21227963,
    "cumulativeGasUsed": "3070706",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "30f96956c79214fbbc3bf09484aea819",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"}],\"name\":\"AddStablecoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CURVE_SWAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURVE_YUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAIe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLATYPUS_SWAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PTP_MAIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDCe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"addCurvePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"}],\"name\":\"addSupportedStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"approveStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"curvePoolTokenIndex\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isDeposit\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setTokenToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedStablecoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToPoolForDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToPoolForWithdraw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eric Lee (ylikp.ust@gmail.com)\",\"details\":\"Users can swap other stablecoins to Shield (actually backed by USDC only)         Shield can be used in NaughtyPrice and future products         When users want to withdraw, their shield tokens will be burned         and USDC will be sent back to them (if no sepecific choice)             other stablecoins will be sent back to them (if have sepecific choice)         Currently, the swap is done inside Platypus & Curve         The stablecoin and its swapping pool should be supported         When deposit, the toToken is USDC, which pool to use depends on tokenToPoolForDeposit(token)         When withdraw, the fromToken is USDC, which pool to use depends on tokenToPoolForWithdraw(token)\",\"kind\":\"dev\",\"methods\":{\"addCurvePool(address,address[])\":{\"params\":{\"_pool\":\"Curve pool address\",\"_tokens\":\"Tokens inside this pool\"}},\"addSupportedStablecoin(address)\":{\"details\":\"Set a new supported token address      Only callable by the owner\",\"params\":{\"_stablecoin\":\"Stablecoin address\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"approveStablecoin(address,address)\":{\"params\":{\"_contract\":\"Contract address to give allowance\",\"_token\":\"Stablecoin address\"}},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256,address,uint256,uint256)\":{\"params\":{\"_amount\":\"Input stablecoin amount\",\"_minAmount\":\"Minimum amount output (if need swap)\",\"_stablecoin\":\"Stablecoin address\",\"_type\":\"Swap type (1 for PTP, 2 for Curve)\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256,address,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of shield to burn\",\"_minAmount\":\"Minimum amount of stablecoin to withdraw (if need swap)\",\"_stablecoin\":\"Stablecoin address\",\"_type\":\"Swap type (use PTP/Curve, which pool)\"}}},\"title\":\"Shield Token (Derived Stablecoin on Degis)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCurvePool(address,address[])\":{\"notice\":\"Add new curve pool\"},\"addSupportedStablecoin(address)\":{\"notice\":\"Add new supported stablecoin\"},\"approveStablecoin(address,address)\":{\"notice\":\"Approve a stablecoin for swapping         Call once for each stablecoin\"},\"decimals()\":{\"notice\":\"Shield has 6 decimals\"},\"deposit(uint256,address,uint256,uint256)\":{\"notice\":\"Deposit tokens and mint Shield         If the input is USDC, no swap needed, otherwise, swap to USDC\"},\"withdraw(uint256,address,uint256,uint256)\":{\"notice\":\"Withdraw stablecoins and burn shield\"},\"withdrawAll()\":{\"notice\":\"Withdraw all of a user's balance         This function only return USDC back\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/Shield.sol\":\"Shield\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"contracts/tokens/Shield.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport { ERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nimport { ICurvePool } from \\\"./interfaces/ICurvePool.sol\\\";\\r\\nimport { IPlatypusPool } from \\\"./interfaces/IPlatypusPool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title  Shield Token (Derived Stablecoin on Degis)\\r\\n * @author Eric Lee (ylikp.ust@gmail.com)\\r\\n * @dev    Users can swap other stablecoins to Shield (actually backed by USDC only)\\r\\n *         Shield can be used in NaughtyPrice and future products\\r\\n *\\r\\n *         When users want to withdraw, their shield tokens will be burned\\r\\n *         and USDC will be sent back to them (if no sepecific choice)\\r\\n *             other stablecoins will be sent back to them (if have sepecific choice)\\r\\n *\\r\\n *         Currently, the swap is done inside Platypus & Curve\\r\\n *\\r\\n *         The stablecoin and its swapping pool should be supported\\r\\n *\\r\\n *         When deposit, the toToken is USDC, which pool to use depends on tokenToPoolForDeposit(token)\\r\\n *         When withdraw, the fromToken is USDC, which pool to use depends on tokenToPoolForWithdraw(token)\\r\\n */\\r\\ncontract Shield is ERC20Upgradeable, OwnableUpgradeable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************* Constants **************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    // USDC address (base token)\\r\\n    address public constant USDC = 0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E;\\r\\n\\r\\n    // Other stablecoin addresses\\r\\n    address public constant USDCe = 0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664;\\r\\n    address public constant USDT = 0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7;\\r\\n    address public constant USDTe = 0xc7198437980c041c805A1EDcbA50c1Ce5db95118;\\r\\n    address public constant DAIe = 0xd586E7F844cEa2F87f50152665BCbc2C279D8d70;\\r\\n    address public constant YUSD = 0x111111111111ed1D73f860F57b2798b683f2d325;\\r\\n\\r\\n    uint256 public constant PLATYPUS_SWAP = 1;\\r\\n    uint256 public constant CURVE_SWAP = 2;\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************* Variables **************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    // PTP Main Pool: USDC + USDT + USDC.e + USDT.e + DAI.e\\r\\n    address public constant PTP_MAIN =\\r\\n        0x66357dCaCe80431aee0A7507e2E361B7e2402370;\\r\\n\\r\\n    // Curve YUSD pool: YUSD + USDT + USDC\\r\\n    address public constant CURVE_YUSD =\\r\\n        0x1da20Ac34187b2d9c74F729B85acB225D3341b25;\\r\\n\\r\\n    // Stablecoin => whether supported\\r\\n    mapping(address => bool) public supportedStablecoin;\\r\\n\\r\\n    // All supporting swap pools\\r\\n    mapping(string => address) public pools;\\r\\n\\r\\n    // User staked USDC balance\\r\\n    mapping(address => uint256) public userBalance;\\r\\n\\r\\n    // Token address => swap pool address\\r\\n    // If fromToken is x, then use mapping(x) to swap\\r\\n    mapping(address => address) public tokenToPoolForDeposit;\\r\\n    // If toToken is x, then use mapping(x) to swap\\r\\n    mapping(address => address) public tokenToPoolForWithdraw;\\r\\n\\r\\n    // Curve pool address => Token address => Token index\\r\\n    mapping(address => mapping(address => int128)) public curvePoolTokenIndex;\\r\\n\\r\\n    // ------------------------------------------------------------------------- --------------- //\\r\\n    // *************************************** Events ***************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    event AddStablecoin(address stablecoin);\\r\\n    event Deposit(\\r\\n        address indexed user,\\r\\n        address indexed stablecoin,\\r\\n        uint256 inAmount,\\r\\n        uint256 outAmount\\r\\n    );\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************* Constructor ************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    function initialize() public initializer {\\r\\n        __ERC20_init(\\\"Shield Token\\\", \\\"SHD\\\");\\r\\n        __Ownable_init();\\r\\n\\r\\n        // USDT.e\\r\\n        supportedStablecoin[USDTe] = true;\\r\\n        // USDT\\r\\n        supportedStablecoin[USDT] = true;\\r\\n        // USDC.e\\r\\n        supportedStablecoin[USDCe] = true;\\r\\n        // USDC\\r\\n        supportedStablecoin[USDC] = true;\\r\\n        // DAI.e\\r\\n        supportedStablecoin[DAIe] = true;\\r\\n        // YUSD\\r\\n        supportedStablecoin[YUSD] = true;\\r\\n\\r\\n        IERC20(USDC).approve(PTP_MAIN, type(uint256).max);\\r\\n        IERC20(USDT).approve(PTP_MAIN, type(uint256).max);\\r\\n        IERC20(USDTe).approve(PTP_MAIN, type(uint256).max);\\r\\n        IERC20(USDCe).approve(PTP_MAIN, type(uint256).max);\\r\\n        IERC20(DAIe).approve(PTP_MAIN, type(uint256).max);\\r\\n\\r\\n        IERC20(YUSD).approve(CURVE_YUSD, type(uint256).max);\\r\\n        IERC20(USDC).approve(CURVE_YUSD, type(uint256).max);\\r\\n\\r\\n        // YUSD pool indexes\\r\\n        curvePoolTokenIndex[CURVE_YUSD][YUSD] = 0;\\r\\n        curvePoolTokenIndex[CURVE_YUSD][USDC] = 1;\\r\\n        curvePoolTokenIndex[CURVE_YUSD][USDT] = 2;\\r\\n\\r\\n        // Token to pool\\r\\n        tokenToPoolForDeposit[YUSD] = CURVE_YUSD;\\r\\n        tokenToPoolForWithdraw[YUSD] = CURVE_YUSD;\\r\\n\\r\\n        tokenToPoolForDeposit[USDT] = PTP_MAIN;\\r\\n        tokenToPoolForWithdraw[USDT] = PTP_MAIN;\\r\\n\\r\\n        tokenToPoolForDeposit[USDTe] = PTP_MAIN;\\r\\n        tokenToPoolForWithdraw[USDTe] = PTP_MAIN;\\r\\n\\r\\n        tokenToPoolForDeposit[USDCe] = PTP_MAIN;\\r\\n        tokenToPoolForWithdraw[USDCe] = PTP_MAIN;\\r\\n\\r\\n        tokenToPoolForDeposit[DAIe] = PTP_MAIN;\\r\\n        tokenToPoolForWithdraw[DAIe] = PTP_MAIN;\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************ Set Functions ************************************* //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Add new supported stablecoin\\r\\n     *\\r\\n     * @dev Set a new supported token address\\r\\n     *      Only callable by the owner\\r\\n     *\\r\\n     * @param _stablecoin Stablecoin address\\r\\n     */\\r\\n    function addSupportedStablecoin(address _stablecoin) external onlyOwner {\\r\\n        supportedStablecoin[_stablecoin] = true;\\r\\n\\r\\n        emit AddStablecoin(_stablecoin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add new curve pool\\r\\n     *\\r\\n     * @param _pool   Curve pool address\\r\\n     * @param _tokens Tokens inside this pool\\r\\n     */\\r\\n    function addCurvePool(address _pool, address[] calldata _tokens)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        uint256 length = _tokens.length;\\r\\n        for (uint256 i; i < length; ) {\\r\\n            curvePoolTokenIndex[_pool][_tokens[i]] = int128(int256(i));\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setTokenToPool(\\r\\n        bool _isDeposit,\\r\\n        address _token,\\r\\n        address _pool\\r\\n    ) external onlyOwner {\\r\\n        if (_isDeposit) {\\r\\n            tokenToPoolForDeposit[_token] = _pool;\\r\\n        } else {\\r\\n            tokenToPoolForWithdraw[_token] = _pool;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Approve a stablecoin for swapping\\r\\n     *         Call once for each stablecoin\\r\\n     *\\r\\n     * @param _token    Stablecoin address\\r\\n     * @param _contract Contract address to give allowance\\r\\n     */\\r\\n    function approveStablecoin(address _token, address _contract) external {\\r\\n        IERC20(_token).approve(_contract, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************ Main Functions ************************************ //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit tokens and mint Shield\\r\\n     *         If the input is USDC, no swap needed, otherwise, swap to USDC\\r\\n     *\\r\\n     * @param _type       Swap type (1 for PTP, 2 for Curve)\\r\\n     * @param _stablecoin Stablecoin address\\r\\n     * @param _amount     Input stablecoin amount\\r\\n     * @param _minAmount  Minimum amount output (if need swap)\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 _type,\\r\\n        address _stablecoin,\\r\\n        uint256 _amount,\\r\\n        uint256 _minAmount\\r\\n    ) external {\\r\\n        require(supportedStablecoin[_stablecoin], \\\"Stablecoin not supported\\\");\\r\\n\\r\\n        // Transfer stablecoin to this contract\\r\\n        IERC20(_stablecoin).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n\\r\\n        // Actual shield amount\\r\\n        uint256 outAmount;\\r\\n\\r\\n        if (_stablecoin != USDC) {\\r\\n            // Swap stablecoin to USDC and directly goes to this contract\\r\\n            if (_type == PLATYPUS_SWAP) {\\r\\n                outAmount = _ptpSwap(\\r\\n                    tokenToPoolForDeposit[_stablecoin],\\r\\n                    _stablecoin,\\r\\n                    USDC,\\r\\n                    _amount,\\r\\n                    _minAmount,\\r\\n                    address(this)\\r\\n                );\\r\\n            }\\r\\n            // Curve YUSD swap\\r\\n            else if (_type == CURVE_SWAP) {\\r\\n                outAmount = _curveSwap(\\r\\n                    tokenToPoolForDeposit[_stablecoin],\\r\\n                    _stablecoin,\\r\\n                    USDC,\\r\\n                    _amount,\\r\\n                    _minAmount\\r\\n                );\\r\\n            } else revert(\\\"No swap pair\\\");\\r\\n        } else {\\r\\n            outAmount = _amount;\\r\\n        }\\r\\n\\r\\n        // Record user balance\\r\\n        // userBalance[msg.sender] += outAmount;\\r\\n\\r\\n        // Mint shield\\r\\n        _mint(msg.sender, outAmount);\\r\\n\\r\\n        emit Deposit(msg.sender, _stablecoin, _amount, outAmount);\\r\\n    }\\r\\n\\r\\n    function recover() external {\\r\\n        uint256 balance = IERC20(USDC).balanceOf(address(this));\\r\\n\\r\\n        IERC20(USDC).safeTransfer(msg.sender, balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw stablecoins and burn shield\\r\\n     *\\r\\n     * @param _type       Swap type (use PTP/Curve, which pool)\\r\\n     * @param _stablecoin Stablecoin address\\r\\n     * @param _amount     Amount of shield to burn\\r\\n     * @param _minAmount  Minimum amount of stablecoin to withdraw (if need swap)\\r\\n     */\\r\\n    function withdraw(\\r\\n        uint256 _type,\\r\\n        address _stablecoin,\\r\\n        uint256 _amount,\\r\\n        uint256 _minAmount\\r\\n    ) external {\\r\\n        require(supportedStablecoin[_stablecoin], \\\"Stablecoin not supported\\\");\\r\\n\\r\\n        require(userBalance[msg.sender] >= _amount, \\\"Insufficient balance\\\");\\r\\n\\r\\n        uint256 actualAmount;\\r\\n\\r\\n        if (_stablecoin == USDC) withdraw(_stablecoin, _amount, _amount);\\r\\n        else {\\r\\n            if (_type == PLATYPUS_SWAP) {\\r\\n                // Swap USDC to stablecoin and directly\\r\\n                actualAmount = _ptpSwap(\\r\\n                    tokenToPoolForWithdraw[_stablecoin],\\r\\n                    USDC,\\r\\n                    _stablecoin,\\r\\n                    _amount,\\r\\n                    _minAmount,\\r\\n                    address(this)\\r\\n                );\\r\\n            } else if (_type == CURVE_SWAP) {\\r\\n                actualAmount = _curveSwap(\\r\\n                    tokenToPoolForWithdraw[_stablecoin],\\r\\n                    USDC,\\r\\n                    _stablecoin,\\r\\n                    _amount,\\r\\n                    _minAmount\\r\\n                );\\r\\n            }\\r\\n\\r\\n            // Actual amount may have different decimals\\r\\n            withdraw(_stablecoin, actualAmount, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw stablecoin and burn shield\\r\\n     *\\r\\n     * @param _stablecoin       Stablecoin address\\r\\n     * @param _stablecoinAmount Stablecoin amount to be transferred back\\r\\n     * @param _shieldAmount     Shield amount to be burned\\r\\n     */\\r\\n    function withdraw(\\r\\n        address _stablecoin,\\r\\n        uint256 _stablecoinAmount,\\r\\n        uint256 _shieldAmount\\r\\n    ) internal {\\r\\n        // Transfer stablecoin back\\r\\n        uint256 realAmount = _safeTokenTransfer(_stablecoin, _stablecoinAmount);\\r\\n\\r\\n        // Burn shield token\\r\\n        _burn(msg.sender, _shieldAmount);\\r\\n\\r\\n        emit Withdraw(msg.sender, realAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw all of a user's balance\\r\\n     *         This function only return USDC back\\r\\n     */\\r\\n    function withdrawAll() external {\\r\\n        withdraw(USDC, userBalance[msg.sender], userBalance[msg.sender]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Shield has 6 decimals\\r\\n     */\\r\\n    function decimals() public pure override returns (uint8) {\\r\\n        return 6;\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // *********************************** Internal Functions ********************************* //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Swap stablecoins in Platypus\\r\\n     *\\r\\n     * @param _pool        Platypus pool address\\r\\n     * @param _fromToken   From token address\\r\\n     * @param _toToken     To token address\\r\\n     * @param _fromAmount  Amount of from token\\r\\n     * @param _minToAmount Minimun output amount\\r\\n     * @param _to          Address that will receive the output token\\r\\n     */\\r\\n    function _ptpSwap(\\r\\n        address _pool,\\r\\n        address _fromToken,\\r\\n        address _toToken,\\r\\n        uint256 _fromAmount,\\r\\n        uint256 _minToAmount,\\r\\n        address _to\\r\\n    ) internal returns (uint256 actualAmount) {\\r\\n        (actualAmount, ) = IPlatypusPool(_pool).swap(\\r\\n            _fromToken,\\r\\n            _toToken,\\r\\n            _fromAmount,\\r\\n            _minToAmount,\\r\\n            _to,\\r\\n            block.timestamp + 10\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap stablecoins in Curve\\r\\n     *\\r\\n     * @param _pool         Curve pool address\\r\\n     * @param _fromToken    From token address\\r\\n     * @param _toToken      To token address\\r\\n     * @param _amountIn     Amount of from token\\r\\n     * @param _minAmountOut Minimum output amount\\r\\n     *\\r\\n     * @return actualAmountOut Actual output amount after swap\\r\\n     */\\r\\n    function _curveSwap(\\r\\n        address _pool,\\r\\n        address _fromToken,\\r\\n        address _toToken,\\r\\n        uint256 _amountIn,\\r\\n        uint256 _minAmountOut\\r\\n    ) internal returns (uint256 actualAmountOut) {\\r\\n        int128 indexFromToken = curvePoolTokenIndex[_pool][_fromToken];\\r\\n        int128 indexToToken = curvePoolTokenIndex[_pool][_toToken];\\r\\n\\r\\n        actualAmountOut = ICurvePool(_pool).exchange(\\r\\n            indexFromToken,\\r\\n            indexToToken,\\r\\n            _amountIn,\\r\\n            _minAmountOut\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Safe token transfer\\r\\n     *\\r\\n     * @param _token  Token address to be transferred\\r\\n     * @param _amount Amount of token to be transferred\\r\\n     *\\r\\n     * @return realAmount Real amount that has been transferred\\r\\n     */\\r\\n    function _safeTokenTransfer(address _token, uint256 _amount)\\r\\n        internal\\r\\n        returns (uint256 realAmount)\\r\\n    {\\r\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n        if (balance > _amount) {\\r\\n            realAmount = _amount;\\r\\n        } else {\\r\\n            realAmount = balance;\\r\\n        }\\r\\n        IERC20(_token).safeTransfer(msg.sender, realAmount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x732a937525568b560be4623e6df0db67a11596865c8503fca8cfc921d5a7dec1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/tokens/interfaces/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface ICurvePool {\\r\\n    // Get the token address inside a curve stableswap pool\\r\\n    function coins(uint256 _index) external view returns (address);\\r\\n\\r\\n    // Get coin amount for the curve pool\\r\\n    function N_COINS() external view returns (int128);\\r\\n\\r\\n    // Do the exchange\\r\\n    function exchange(\\r\\n        int128 _indexForInToken,\\r\\n        int128 _indexForOutToken,\\r\\n        uint256 _amountIn,\\r\\n        uint256 _minAmountOut\\r\\n    ) external returns (uint256 actualAmount);\\r\\n}\\r\\n\",\"keccak256\":\"0x8c0a02b95c46e7604d3df925e508e81c91e5a51d43e9958bf7223b7ab14162e3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/tokens/interfaces/IPlatypusPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IPlatypusPool {\\r\\n    function swap(\\r\\n        address _fromToken,\\r\\n        address _toToken,\\r\\n        uint256 _amountIn,\\r\\n        uint256 _minAmountOut,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) external returns (uint256 actualAmount, uint256 haircut);\\r\\n}\\r\\n\",\"keccak256\":\"0xc8a72ea54893d591aea5134d0abe708b7896a836f181ae693d26f7676ef49aaf\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612f9c806100206000396000f3fe608060405234801561001057600080fd5b50600436106102ad5760003560e01c8063890f43741161017b578063a457c2d7116100d8578063ce7460241161008c578063dd62ed3e11610071578063dd62ed3e1461061c578063e2aa855914610655578063f2fde38b1461066857600080fd5b8063ce746024146105eb578063d754bfd5146105f357600080fd5b8063b5add05a116100bd578063b5add05a146105a2578063b70b23a3146105b5578063c54e44eb146105d057600080fd5b8063a457c2d71461057c578063a9059cbb1461058f57600080fd5b80638ffbfd9a1161012f5780639d6f17a8116101145780639d6f17a81461051a5780639df3fe241461054e578063a4366be21461056957600080fd5b80638ffbfd9a146104f757806395d89b411461051257600080fd5b806389ae81201161016057806389ae8120146104b05780638a4d786b146104cb5780638da5cb5b146104e657600080fd5b8063890f43741461048257806389a302711461049557600080fd5b80633e7c0e8b116102295780636f0372af116101dd578063715018a6116101c2578063715018a61461046a5780638129fc1c14610472578063853828b61461047a57600080fd5b80636f0372af1461042e57806370a082311461044157600080fd5b8063584400271161020e57806358440027146103b55780635cb3b14f146103f05780636190cefb1461041357600080fd5b80633e7c0e8b146103a5578063561414bb146103ad57600080fd5b806318160ddd116102805780632453286711610265578063245328671461036e578063313ce56714610383578063395093511461039257600080fd5b806318160ddd1461035357806323b872dd1461035b57600080fd5b80630103c92b146102b257806306fdde03146102e8578063095ea7b3146102fd5780631727e6421461031d575b600080fd5b6102d26102c03660046121a8565b60996020526000908152604090205481565b6040516102df91906121d1565b60405180910390f35b6102f061067b565b6040516102df919061223d565b61031061030b36600461225f565b61070d565b6040516102df91906122a4565b61034661032b3660046121a8565b609a602052600090815260409020546001600160a01b031681565b6040516102df91906122bb565b6035546102d2565b6103106103693660046122c9565b610727565b61038161037c3660046121a8565b61074d565b005b60066040516102df9190612322565b6103106103a036600461225f565b6107de565b6102d2600181565b6102d2600281565b6103e36103c3366004612330565b609c602090815260009283526040808420909152908252902054600f0b81565b6040516102df919061236d565b6103106103fe3660046121a8565b60976020526000908152604090205460ff1681565b61034673111111111111ed1d73f860f57b2798b683f2d32581565b61038161043c36600461237b565b61081d565b6102d261044f3660046121a8565b6001600160a01b031660009081526033602052604090205490565b610381610999565b6103816109cf565b61038161126c565b6103816104903660046123f2565b61129c565b61034673b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e81565b610346731da20ac34187b2d9c74f729b85acb225d3341b2581565b61034673a7d7079b0fead91f3e65f86e8915cb59c1a4c66481565b6065546001600160a01b0316610346565b6103467366357dcace80431aee0a7507e2e361b7e240237081565b6102f0611349565b610346610528366004612533565b80516020818301810180516098825292820191909301209152546001600160a01b031681565b61034673d586e7f844cea2f87f50152665bcbc2c279d8d7081565b6103816105773660046125c0565b611358565b61031061058a36600461225f565b611427565b61031061059d36600461225f565b611486565b6103816105b0366004612330565b611494565b61034673c7198437980c041c805a1edcba50c1ce5db9511881565b610346739702230a8ea53601f5cd2dc00fdbc13d4df4a8c781565b610381611507565b6103466106013660046121a8565b609b602052600090815260409020546001600160a01b031681565b6102d261062a366004612330565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b61038161066336600461237b565b6115bc565b6103816106763660046121a8565b611703565b60606036805461068a90612632565b80601f01602080910402602001604051908101604052809291908181526020018280546106b690612632565b80156107035780601f106106d857610100808354040283529160200191610703565b820191906000526020600020905b8154815290600101906020018083116106e657829003601f168201915b5050505050905090565b60003361071b81858561175c565b60019150505b92915050565b600033610735858285611810565b610740858585611872565b60019150505b9392505050565b6065546001600160a01b031633146107805760405162461bcd60e51b815260040161077790612690565b60405180910390fd5b6001600160a01b03811660009081526097602052604090819020805460ff19166001179055517f05df81582f58ed21700c8e232f443af6b7255b04e4a2f3aa130391b926f656e4906107d39083906122bb565b60405180910390a150565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919061071b90829086906108189087906126b6565b61175c565b6001600160a01b03831660009081526097602052604090205460ff166108555760405162461bcd60e51b815260040161077790612700565b61086a6001600160a01b038416333085611985565b60006001600160a01b03841673b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e1461093857600185036108dc576001600160a01b038085166000908152609a60205260409020546108d591168573b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e868630611a0a565b905061093b565b60028503610920576001600160a01b038085166000908152609a60205260409020546108d591168573b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e8686611a9a565b60405162461bcd60e51b815260040161077790612742565b50815b6109453382611b65565b836001600160a01b0316336001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7858460405161098a929190612752565b60405180910390a35050505050565b6065546001600160a01b031633146109c35760405162461bcd60e51b815260040161077790612690565b6109cd6000611c1a565b565b600054610100900460ff166109ea5760005460ff16156109ee565b303b155b610a0a5760405162461bcd60e51b8152600401610777906127c7565b600054610100900460ff16158015610a2c576000805461ffff19166101011790555b610aa06040518060400160405280600c81526020017f536869656c6420546f6b656e00000000000000000000000000000000000000008152506040518060400160405280600381526020017f5348440000000000000000000000000000000000000000000000000000000000815250611c79565b610aa8611caa565b60976020527f7548b632efee72df22594bfd49708315d9850b8d32c2b2dc843b2c21368cfccc8054600160ff1991821681179092557f69e43f24f536fd3d84c8bd37ce68b71464fab1c98015d9bdf125ad046cb14da780548216831790557f91d25400d13b5f4a102fdf4d72274fe271a68710a12419af39642877ebd3de8480548216831790557fb744f339a70c7ed26a36bf7be73dfbd530f22e2cd092833028db0829e2399d6180548216831790557fbf5e33d1e23d27b431f50a41a2b3c6addcaa9043fb2180af99dc5897e84eeb3a805482168317905573111111111111ed1d73f860f57b2798b683f2d3256000527f3382a9b3c632d4939bce307c08e7910babe4d0c8a4cd7d593e480cd04f5e27208054909116909117905560405163095ea7b360e01b815273b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e9063095ea7b390610c13907366357dcace80431aee0a7507e2e361b7e240237090600019906004016127d7565b6020604051808303816000875af1158015610c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5691906127f0565b5060405163095ea7b360e01b8152739702230a8ea53601f5cd2dc00fdbc13d4df4a8c79063095ea7b390610ca6907366357dcace80431aee0a7507e2e361b7e240237090600019906004016127d7565b6020604051808303816000875af1158015610cc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce991906127f0565b5060405163095ea7b360e01b815273c7198437980c041c805a1edcba50c1ce5db951189063095ea7b390610d39907366357dcace80431aee0a7507e2e361b7e240237090600019906004016127d7565b6020604051808303816000875af1158015610d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7c91906127f0565b5060405163095ea7b360e01b815273a7d7079b0fead91f3e65f86e8915cb59c1a4c6649063095ea7b390610dcc907366357dcace80431aee0a7507e2e361b7e240237090600019906004016127d7565b6020604051808303816000875af1158015610deb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0f91906127f0565b5060405163095ea7b360e01b815273d586e7f844cea2f87f50152665bcbc2c279d8d709063095ea7b390610e5f907366357dcace80431aee0a7507e2e361b7e240237090600019906004016127d7565b6020604051808303816000875af1158015610e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea291906127f0565b5060405163095ea7b360e01b815273111111111111ed1d73f860f57b2798b683f2d3259063095ea7b390610ef290731da20ac34187b2d9c74f729b85acb225d3341b2590600019906004016127d7565b6020604051808303816000875af1158015610f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3591906127f0565b5060405163095ea7b360e01b815273b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e9063095ea7b390610f8590731da20ac34187b2d9c74f729b85acb225d3341b2590600019906004016127d7565b6020604051808303816000875af1158015610fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc891906127f0565b507f496b32369fa163b4b9877c2a5a29c3daab0353cec19b4116f036a31e9e195a2180546fffffffffffffffffffffffffffffffff199081169091557f077c466b1c31ad3be690f109f3c4a23bfadf4998004f0fe0a379b126527321af8054821660011790557f6ea5f9585fb3f5995c7c2e60d44db58d7a24acfa1dc1c16d49fb44f36f5113ff805490911660021790557faf6f47f207b81b1c9ff286d1ec2df0d48e30169885791772048c7bb19a616e9b805473ffffffffffffffffffffffffffffffffffffffff19908116731da20ac34187b2d9c74f729b85acb225d3341b259081179092557fb9ab9cf077c8b6b7d5048e321f6b7c68d0cc7fe26e8ea7698fd1fc12d31c0797805482169092179091557f34581a2a0d1f4afc7bedf346da9d0252d6bd3318265137e794dab7cac558313b805482167366357dcace80431aee0a7507e2e361b7e24023709081179091557fe29d5606005c1d071e9e2caf78389209381a399359f530be7bfe69afccadd5e580548316821790557f391265a8976e0e46e3a04a21395ddc41f5ae28fedef5461bb7a48d398c392d0880548316821790557f54275788cad4b9cd2553a09823c88a12b3f8085683bb54f5c8078c0f5af472de80548316821790557fe78e98982f85277723d21ef70bdf667c3885220521cbf091656d5b0f48f649cf80548316821790557fbcbcee02cd308f322f1c61bf7089af652d1d371868f5ab2b55be5de31398e0c2805483168217905573d586e7f844cea2f87f50152665bcbc2c279d8d706000527f2feb349778d25e6c2d4f8973bf457403c9edf3d0ea3bc58461c487d781cefe978054831682179055609b6020527f01cae0cc2f94c1ea47bd85c8ee2e0b16a2d63e983a171f2cf09e3a7740204b5080549092161790558015611269576000805461ff00191690555b50565b336000908152609960205260409020546109cd9073b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e9080611cd9565b6065546001600160a01b031633146112c65760405162461bcd60e51b815260040161077790612690565b8215611308576001600160a01b039182166000908152609a60205260409020805473ffffffffffffffffffffffffffffffffffffffff19169190921617905550565b6001600160a01b038281166000908152609b60205260409020805473ffffffffffffffffffffffffffffffffffffffff19169183169190911790555b505050565b60606037805461068a90612632565b6065546001600160a01b031633146113825760405162461bcd60e51b815260040161077790612690565b8060005b81811015611420576001600160a01b0385166000908152609c6020526040812082918686848181106113ba576113ba612811565b90506020020160208101906113cf91906121a8565b6001600160a01b03168152602081019190915260400160002080546fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff92909216919091179055600101611386565b5050505050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091908381101561146e5760405162461bcd60e51b81526004016107779061287f565b61147b828686840361175c565b506001949350505050565b60003361071b818585611872565b60405163095ea7b360e01b81526001600160a01b0383169063095ea7b3906114c4908490600019906004016127d7565b6020604051808303816000875af11580156114e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134491906127f0565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e906370a082319061155a9030906004016122bb565b602060405180830381865afa158015611577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159b919061289a565b905061126973b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e3383611d38565b6001600160a01b03831660009081526097602052604090205460ff166115f45760405162461bcd60e51b815260040161077790612700565b336000908152609960205260409020548211156116235760405162461bcd60e51b8152600401610777906128ed565b60007fffffffffffffffffffffffff4681061078cb38e6fb27ffd074943992263b75926001600160a01b0385160161166557611660848485611cd9565b611420565b600185036116b1576001600160a01b038085166000908152609b60205260409020546116aa911673b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e86868630611a0a565b90506116f8565b600285036116f8576001600160a01b038085166000908152609b60205260409020546116f5911673b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e868686611a9a565b90505b611420848285611cd9565b6065546001600160a01b0316331461172d5760405162461bcd60e51b815260040161077790612690565b6001600160a01b0381166117535760405162461bcd60e51b815260040161077790612955565b61126981611c1a565b6001600160a01b0383166117825760405162461bcd60e51b8152600401610777906129bd565b6001600160a01b0382166117a85760405162461bcd60e51b815260040161077790612a25565b6001600160a01b0380841660008181526034602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906118039085906121d1565b60405180910390a3505050565b6001600160a01b03838116600090815260346020908152604080832093861683529290522054600019811461186c578181101561185f5760405162461bcd60e51b815260040161077790612a67565b61186c848484840361175c565b50505050565b6001600160a01b0383166118985760405162461bcd60e51b815260040161077790612acf565b6001600160a01b0382166118be5760405162461bcd60e51b815260040161077790612b37565b6001600160a01b038316600090815260336020526040902054818110156118f75760405162461bcd60e51b815260040161077790612b9f565b6001600160a01b0380851660009081526033602052604080822085850390559185168152908120805484929061192e9084906126b6565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161197891906121d1565b60405180910390a361186c565b61186c846323b872dd60e01b8585856040516024016119a693929190612baf565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611d57565b60006001600160a01b038716639908fc8b8787878787611a2b42600a6126b6565b6040518763ffffffff1660e01b8152600401611a4c96959493929190612bd7565b60408051808303816000875af1158015611a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8e9190612c26565b50979650505050505050565b6001600160a01b038581166000818152609c6020908152604080832089861684529091528082205493871682528082205490517f3df021240000000000000000000000000000000000000000000000000000000081529193600f90810b9391900b91633df0212490611b1690859085908a908a90600401612c59565b6020604051808303816000875af1158015611b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b59919061289a565b98975050505050505050565b6001600160a01b038216611b8b5760405162461bcd60e51b815260040161077790612cc9565b8060356000828254611b9d91906126b6565b90915550506001600160a01b03821660009081526033602052604081208054839290611bca9084906126b6565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611c0d9085906121d1565b60405180910390a35b5050565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611ca05760405162461bcd60e51b815260040161077790612d31565b611c168282611de6565b600054610100900460ff16611cd15760405162461bcd60e51b815260040161077790612d31565b6109cd611e34565b6000611ce58484611e64565b9050611cf13383611f05565b336001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436482604051611d2a91906121d1565b60405180910390a250505050565b6113448363a9059cbb60e01b84846040516024016119a69291906127d7565b6000611dac826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611fd69092919063ffffffff16565b8051909150156113445780806020019051810190611dca91906127f0565b6113445760405162461bcd60e51b815260040161077790612d99565b600054610100900460ff16611e0d5760405162461bcd60e51b815260040161077790612d31565b8151611e209060369060208501906120df565b5080516113449060379060208401906120df565b600054610100900460ff16611e5b5760405162461bcd60e51b815260040161077790612d31565b6109cd33611c1a565b600080836001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611e9391906122bb565b602060405180830381865afa158015611eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed4919061289a565b905082811115611ee657829150611eea565b8091505b611efe6001600160a01b0385163384611d38565b5092915050565b6001600160a01b038216611f2b5760405162461bcd60e51b815260040161077790612e01565b6001600160a01b03821660009081526033602052604090205481811015611f645760405162461bcd60e51b815260040161077790612e69565b6001600160a01b0383166000908152603360205260408120838303905560358054849290611f93908490612e79565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906118039086906121d1565b6060611fe58484600085611fed565b949350505050565b60608247101561200f5760405162461bcd60e51b815260040161077790612ee8565b843b61202d5760405162461bcd60e51b815260040161077790612f2a565b600080866001600160a01b031685876040516120499190612f5c565b60006040518083038185875af1925050503d8060008114612086576040519150601f19603f3d011682016040523d82523d6000602084013e61208b565b606091505b509150915061209b8282866120a6565b979650505050505050565b606083156120b5575081610746565b8251156120c55782518084602001fd5b8160405162461bcd60e51b8152600401610777919061223d565b8280546120eb90612632565b90600052602060002090601f01602090048101928261210d5760008555612153565b82601f1061212657805160ff1916838001178555612153565b82800160010185558215612153579182015b82811115612153578251825591602001919060010190612138565b5061215f929150612163565b5090565b5b8082111561215f5760008155600101612164565b60006001600160a01b038216610721565b61219281612178565b811461126957600080fd5b803561072181612189565b6000602082840312156121bd576121bd600080fd5b6000611fe5848461219d565b805b82525050565b6020810161072182846121c9565b60005b838110156121fa5781810151838201526020016121e2565b8381111561186c5750506000910152565b6000612215825190565b80845260208401935061222c8185602086016121df565b601f01601f19169290920192915050565b60208082528101610746818461220b565b80612192565b80356107218161224e565b6000806040838503121561227557612275600080fd5b6000612281858561219d565b925050602061229285828601612254565b9150509250929050565b8015156121cb565b60208101610721828461229c565b6121cb81612178565b6020810161072182846122b2565b6000806000606084860312156122e1576122e1600080fd5b60006122ed868661219d565b93505060206122fe8682870161219d565b925050604061230f86828701612254565b9150509250925092565b60ff81166121cb565b602081016107218284612319565b6000806040838503121561234657612346600080fd5b6000612352858561219d565b92505060206122928582860161219d565b6121cb81600f0b90565b602081016107218284612363565b6000806000806080858703121561239457612394600080fd5b60006123a08787612254565b94505060206123b18782880161219d565b93505060406123c287828801612254565b92505060606123d387828801612254565b91505092959194509250565b801515612192565b8035610721816123df565b60008060006060848603121561240a5761240a600080fd5b600061241686866123e7565b93505060206124278682870161219d565b925050604061230f8682870161219d565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561247457612474612438565b6040525050565b600061248660405190565b9050612492828261244e565b919050565b600067ffffffffffffffff8211156124b1576124b1612438565b601f19601f83011660200192915050565b82818337506000910152565b60006124e16124dc84612497565b61247b565b9050828152602081018484840111156124fc576124fc600080fd5b6125078482856124c2565b509392505050565b600082601f83011261252357612523600080fd5b8135611fe58482602086016124ce565b60006020828403121561254857612548600080fd5b813567ffffffffffffffff81111561256257612562600080fd5b611fe58482850161250f565b60008083601f84011261258357612583600080fd5b50813567ffffffffffffffff81111561259e5761259e600080fd5b6020830191508360208202830111156125b9576125b9600080fd5b9250929050565b6000806000604084860312156125d8576125d8600080fd5b60006125e4868661219d565b935050602084013567ffffffffffffffff81111561260457612604600080fd5b6126108682870161256e565b92509250509250925092565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061264657607f821691505b6020821081036126585761265861261c565b50919050565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b602080825281016107218161265e565b634e487b7160e01b600052601160045260246000fd5b600082198211156126c9576126c96126a0565b500190565b60188152602081017f537461626c65636f696e206e6f7420737570706f7274656400000000000000008152905061268a565b60208082528101610721816126ce565b600c8152602081017f4e6f2073776170207061697200000000000000000000000000000000000000008152905061268a565b6020808252810161072181612710565b6040810161276082856121c9565b61074660208301846121c9565b602e8152602081017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181527f647920696e697469616c697a6564000000000000000000000000000000000000602082015290505b60400190565b602080825281016107218161276d565b6040810161276082856122b2565b8051610721816123df565b60006020828403121561280557612805600080fd5b6000611fe584846127e5565b634e487b7160e01b600052603260045260246000fd5b60258152602081017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781527f207a65726f000000000000000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612827565b80516107218161224e565b6000602082840312156128af576128af600080fd5b6000611fe5848461288f565b60148152602081017f496e73756666696369656e742062616c616e63650000000000000000000000008152905061268a565b60208082528101610721816128bb565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015290506127c1565b60208082528101610721816128fd565b60248152602081017f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481527f7265737300000000000000000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612965565b60228152602081017f45524332303a20617070726f766520746f20746865207a65726f20616464726581527f7373000000000000000000000000000000000000000000000000000000000000602082015290506127c1565b60208082528101610721816129cd565b601d8152602081017f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000008152905061268a565b6020808252810161072181612a35565b60258152602081017f45524332303a207472616e736665722066726f6d20746865207a65726f20616481527f6472657373000000000000000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612a77565b60238152602081017f45524332303a207472616e7366657220746f20746865207a65726f206164647281527f6573730000000000000000000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612adf565b60268152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206281527f616c616e63650000000000000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612b47565b60608101612bbd82866122b2565b612bca60208301856122b2565b611fe560408301846121c9565b60c08101612be582896122b2565b612bf260208301886122b2565b612bff60408301876121c9565b612c0c60608301866121c9565b612c1960808301856122b2565b61209b60a08301846121c9565b60008060408385031215612c3c57612c3c600080fd5b6000612c48858561288f565b92505060206122928582860161288f565b60808101612c678287612363565b612c746020830186612363565b612c8160408301856121c9565b612c8e60608301846121c9565b95945050505050565b601f8152602081017f45524332303a206d696e7420746f20746865207a65726f2061646472657373008152905061268a565b6020808252810161072181612c97565b602b8152602081017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612cd9565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f74207375636365656400000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612d41565b60218152602081017f45524332303a206275726e2066726f6d20746865207a65726f2061646472657381527f7300000000000000000000000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612da9565b60228152602081017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e81527f6365000000000000000000000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612e11565b600082821015612e8b57612e8b6126a0565b500390565b60268152602081017f416464726573733a20696e73756666696369656e742062616c616e636520666f81527f722063616c6c0000000000000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612e90565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000008152905061268a565b6020808252810161072181612ef8565b6000612f44825190565b612f528185602086016121df565b9290920192915050565b6107218183612f3a56fea264697066735822122074ee0680a823d083561d7416310c3286de08d8b68f176de3428016a287b9051a64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102ad5760003560e01c8063890f43741161017b578063a457c2d7116100d8578063ce7460241161008c578063dd62ed3e11610071578063dd62ed3e1461061c578063e2aa855914610655578063f2fde38b1461066857600080fd5b8063ce746024146105eb578063d754bfd5146105f357600080fd5b8063b5add05a116100bd578063b5add05a146105a2578063b70b23a3146105b5578063c54e44eb146105d057600080fd5b8063a457c2d71461057c578063a9059cbb1461058f57600080fd5b80638ffbfd9a1161012f5780639d6f17a8116101145780639d6f17a81461051a5780639df3fe241461054e578063a4366be21461056957600080fd5b80638ffbfd9a146104f757806395d89b411461051257600080fd5b806389ae81201161016057806389ae8120146104b05780638a4d786b146104cb5780638da5cb5b146104e657600080fd5b8063890f43741461048257806389a302711461049557600080fd5b80633e7c0e8b116102295780636f0372af116101dd578063715018a6116101c2578063715018a61461046a5780638129fc1c14610472578063853828b61461047a57600080fd5b80636f0372af1461042e57806370a082311461044157600080fd5b8063584400271161020e57806358440027146103b55780635cb3b14f146103f05780636190cefb1461041357600080fd5b80633e7c0e8b146103a5578063561414bb146103ad57600080fd5b806318160ddd116102805780632453286711610265578063245328671461036e578063313ce56714610383578063395093511461039257600080fd5b806318160ddd1461035357806323b872dd1461035b57600080fd5b80630103c92b146102b257806306fdde03146102e8578063095ea7b3146102fd5780631727e6421461031d575b600080fd5b6102d26102c03660046121a8565b60996020526000908152604090205481565b6040516102df91906121d1565b60405180910390f35b6102f061067b565b6040516102df919061223d565b61031061030b36600461225f565b61070d565b6040516102df91906122a4565b61034661032b3660046121a8565b609a602052600090815260409020546001600160a01b031681565b6040516102df91906122bb565b6035546102d2565b6103106103693660046122c9565b610727565b61038161037c3660046121a8565b61074d565b005b60066040516102df9190612322565b6103106103a036600461225f565b6107de565b6102d2600181565b6102d2600281565b6103e36103c3366004612330565b609c602090815260009283526040808420909152908252902054600f0b81565b6040516102df919061236d565b6103106103fe3660046121a8565b60976020526000908152604090205460ff1681565b61034673111111111111ed1d73f860f57b2798b683f2d32581565b61038161043c36600461237b565b61081d565b6102d261044f3660046121a8565b6001600160a01b031660009081526033602052604090205490565b610381610999565b6103816109cf565b61038161126c565b6103816104903660046123f2565b61129c565b61034673b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e81565b610346731da20ac34187b2d9c74f729b85acb225d3341b2581565b61034673a7d7079b0fead91f3e65f86e8915cb59c1a4c66481565b6065546001600160a01b0316610346565b6103467366357dcace80431aee0a7507e2e361b7e240237081565b6102f0611349565b610346610528366004612533565b80516020818301810180516098825292820191909301209152546001600160a01b031681565b61034673d586e7f844cea2f87f50152665bcbc2c279d8d7081565b6103816105773660046125c0565b611358565b61031061058a36600461225f565b611427565b61031061059d36600461225f565b611486565b6103816105b0366004612330565b611494565b61034673c7198437980c041c805a1edcba50c1ce5db9511881565b610346739702230a8ea53601f5cd2dc00fdbc13d4df4a8c781565b610381611507565b6103466106013660046121a8565b609b602052600090815260409020546001600160a01b031681565b6102d261062a366004612330565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b61038161066336600461237b565b6115bc565b6103816106763660046121a8565b611703565b60606036805461068a90612632565b80601f01602080910402602001604051908101604052809291908181526020018280546106b690612632565b80156107035780601f106106d857610100808354040283529160200191610703565b820191906000526020600020905b8154815290600101906020018083116106e657829003601f168201915b5050505050905090565b60003361071b81858561175c565b60019150505b92915050565b600033610735858285611810565b610740858585611872565b60019150505b9392505050565b6065546001600160a01b031633146107805760405162461bcd60e51b815260040161077790612690565b60405180910390fd5b6001600160a01b03811660009081526097602052604090819020805460ff19166001179055517f05df81582f58ed21700c8e232f443af6b7255b04e4a2f3aa130391b926f656e4906107d39083906122bb565b60405180910390a150565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919061071b90829086906108189087906126b6565b61175c565b6001600160a01b03831660009081526097602052604090205460ff166108555760405162461bcd60e51b815260040161077790612700565b61086a6001600160a01b038416333085611985565b60006001600160a01b03841673b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e1461093857600185036108dc576001600160a01b038085166000908152609a60205260409020546108d591168573b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e868630611a0a565b905061093b565b60028503610920576001600160a01b038085166000908152609a60205260409020546108d591168573b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e8686611a9a565b60405162461bcd60e51b815260040161077790612742565b50815b6109453382611b65565b836001600160a01b0316336001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7858460405161098a929190612752565b60405180910390a35050505050565b6065546001600160a01b031633146109c35760405162461bcd60e51b815260040161077790612690565b6109cd6000611c1a565b565b600054610100900460ff166109ea5760005460ff16156109ee565b303b155b610a0a5760405162461bcd60e51b8152600401610777906127c7565b600054610100900460ff16158015610a2c576000805461ffff19166101011790555b610aa06040518060400160405280600c81526020017f536869656c6420546f6b656e00000000000000000000000000000000000000008152506040518060400160405280600381526020017f5348440000000000000000000000000000000000000000000000000000000000815250611c79565b610aa8611caa565b60976020527f7548b632efee72df22594bfd49708315d9850b8d32c2b2dc843b2c21368cfccc8054600160ff1991821681179092557f69e43f24f536fd3d84c8bd37ce68b71464fab1c98015d9bdf125ad046cb14da780548216831790557f91d25400d13b5f4a102fdf4d72274fe271a68710a12419af39642877ebd3de8480548216831790557fb744f339a70c7ed26a36bf7be73dfbd530f22e2cd092833028db0829e2399d6180548216831790557fbf5e33d1e23d27b431f50a41a2b3c6addcaa9043fb2180af99dc5897e84eeb3a805482168317905573111111111111ed1d73f860f57b2798b683f2d3256000527f3382a9b3c632d4939bce307c08e7910babe4d0c8a4cd7d593e480cd04f5e27208054909116909117905560405163095ea7b360e01b815273b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e9063095ea7b390610c13907366357dcace80431aee0a7507e2e361b7e240237090600019906004016127d7565b6020604051808303816000875af1158015610c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5691906127f0565b5060405163095ea7b360e01b8152739702230a8ea53601f5cd2dc00fdbc13d4df4a8c79063095ea7b390610ca6907366357dcace80431aee0a7507e2e361b7e240237090600019906004016127d7565b6020604051808303816000875af1158015610cc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce991906127f0565b5060405163095ea7b360e01b815273c7198437980c041c805a1edcba50c1ce5db951189063095ea7b390610d39907366357dcace80431aee0a7507e2e361b7e240237090600019906004016127d7565b6020604051808303816000875af1158015610d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7c91906127f0565b5060405163095ea7b360e01b815273a7d7079b0fead91f3e65f86e8915cb59c1a4c6649063095ea7b390610dcc907366357dcace80431aee0a7507e2e361b7e240237090600019906004016127d7565b6020604051808303816000875af1158015610deb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0f91906127f0565b5060405163095ea7b360e01b815273d586e7f844cea2f87f50152665bcbc2c279d8d709063095ea7b390610e5f907366357dcace80431aee0a7507e2e361b7e240237090600019906004016127d7565b6020604051808303816000875af1158015610e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea291906127f0565b5060405163095ea7b360e01b815273111111111111ed1d73f860f57b2798b683f2d3259063095ea7b390610ef290731da20ac34187b2d9c74f729b85acb225d3341b2590600019906004016127d7565b6020604051808303816000875af1158015610f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3591906127f0565b5060405163095ea7b360e01b815273b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e9063095ea7b390610f8590731da20ac34187b2d9c74f729b85acb225d3341b2590600019906004016127d7565b6020604051808303816000875af1158015610fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc891906127f0565b507f496b32369fa163b4b9877c2a5a29c3daab0353cec19b4116f036a31e9e195a2180546fffffffffffffffffffffffffffffffff199081169091557f077c466b1c31ad3be690f109f3c4a23bfadf4998004f0fe0a379b126527321af8054821660011790557f6ea5f9585fb3f5995c7c2e60d44db58d7a24acfa1dc1c16d49fb44f36f5113ff805490911660021790557faf6f47f207b81b1c9ff286d1ec2df0d48e30169885791772048c7bb19a616e9b805473ffffffffffffffffffffffffffffffffffffffff19908116731da20ac34187b2d9c74f729b85acb225d3341b259081179092557fb9ab9cf077c8b6b7d5048e321f6b7c68d0cc7fe26e8ea7698fd1fc12d31c0797805482169092179091557f34581a2a0d1f4afc7bedf346da9d0252d6bd3318265137e794dab7cac558313b805482167366357dcace80431aee0a7507e2e361b7e24023709081179091557fe29d5606005c1d071e9e2caf78389209381a399359f530be7bfe69afccadd5e580548316821790557f391265a8976e0e46e3a04a21395ddc41f5ae28fedef5461bb7a48d398c392d0880548316821790557f54275788cad4b9cd2553a09823c88a12b3f8085683bb54f5c8078c0f5af472de80548316821790557fe78e98982f85277723d21ef70bdf667c3885220521cbf091656d5b0f48f649cf80548316821790557fbcbcee02cd308f322f1c61bf7089af652d1d371868f5ab2b55be5de31398e0c2805483168217905573d586e7f844cea2f87f50152665bcbc2c279d8d706000527f2feb349778d25e6c2d4f8973bf457403c9edf3d0ea3bc58461c487d781cefe978054831682179055609b6020527f01cae0cc2f94c1ea47bd85c8ee2e0b16a2d63e983a171f2cf09e3a7740204b5080549092161790558015611269576000805461ff00191690555b50565b336000908152609960205260409020546109cd9073b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e9080611cd9565b6065546001600160a01b031633146112c65760405162461bcd60e51b815260040161077790612690565b8215611308576001600160a01b039182166000908152609a60205260409020805473ffffffffffffffffffffffffffffffffffffffff19169190921617905550565b6001600160a01b038281166000908152609b60205260409020805473ffffffffffffffffffffffffffffffffffffffff19169183169190911790555b505050565b60606037805461068a90612632565b6065546001600160a01b031633146113825760405162461bcd60e51b815260040161077790612690565b8060005b81811015611420576001600160a01b0385166000908152609c6020526040812082918686848181106113ba576113ba612811565b90506020020160208101906113cf91906121a8565b6001600160a01b03168152602081019190915260400160002080546fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff92909216919091179055600101611386565b5050505050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091908381101561146e5760405162461bcd60e51b81526004016107779061287f565b61147b828686840361175c565b506001949350505050565b60003361071b818585611872565b60405163095ea7b360e01b81526001600160a01b0383169063095ea7b3906114c4908490600019906004016127d7565b6020604051808303816000875af11580156114e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134491906127f0565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e906370a082319061155a9030906004016122bb565b602060405180830381865afa158015611577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159b919061289a565b905061126973b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e3383611d38565b6001600160a01b03831660009081526097602052604090205460ff166115f45760405162461bcd60e51b815260040161077790612700565b336000908152609960205260409020548211156116235760405162461bcd60e51b8152600401610777906128ed565b60007fffffffffffffffffffffffff4681061078cb38e6fb27ffd074943992263b75926001600160a01b0385160161166557611660848485611cd9565b611420565b600185036116b1576001600160a01b038085166000908152609b60205260409020546116aa911673b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e86868630611a0a565b90506116f8565b600285036116f8576001600160a01b038085166000908152609b60205260409020546116f5911673b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e868686611a9a565b90505b611420848285611cd9565b6065546001600160a01b0316331461172d5760405162461bcd60e51b815260040161077790612690565b6001600160a01b0381166117535760405162461bcd60e51b815260040161077790612955565b61126981611c1a565b6001600160a01b0383166117825760405162461bcd60e51b8152600401610777906129bd565b6001600160a01b0382166117a85760405162461bcd60e51b815260040161077790612a25565b6001600160a01b0380841660008181526034602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906118039085906121d1565b60405180910390a3505050565b6001600160a01b03838116600090815260346020908152604080832093861683529290522054600019811461186c578181101561185f5760405162461bcd60e51b815260040161077790612a67565b61186c848484840361175c565b50505050565b6001600160a01b0383166118985760405162461bcd60e51b815260040161077790612acf565b6001600160a01b0382166118be5760405162461bcd60e51b815260040161077790612b37565b6001600160a01b038316600090815260336020526040902054818110156118f75760405162461bcd60e51b815260040161077790612b9f565b6001600160a01b0380851660009081526033602052604080822085850390559185168152908120805484929061192e9084906126b6565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161197891906121d1565b60405180910390a361186c565b61186c846323b872dd60e01b8585856040516024016119a693929190612baf565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611d57565b60006001600160a01b038716639908fc8b8787878787611a2b42600a6126b6565b6040518763ffffffff1660e01b8152600401611a4c96959493929190612bd7565b60408051808303816000875af1158015611a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8e9190612c26565b50979650505050505050565b6001600160a01b038581166000818152609c6020908152604080832089861684529091528082205493871682528082205490517f3df021240000000000000000000000000000000000000000000000000000000081529193600f90810b9391900b91633df0212490611b1690859085908a908a90600401612c59565b6020604051808303816000875af1158015611b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b59919061289a565b98975050505050505050565b6001600160a01b038216611b8b5760405162461bcd60e51b815260040161077790612cc9565b8060356000828254611b9d91906126b6565b90915550506001600160a01b03821660009081526033602052604081208054839290611bca9084906126b6565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611c0d9085906121d1565b60405180910390a35b5050565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611ca05760405162461bcd60e51b815260040161077790612d31565b611c168282611de6565b600054610100900460ff16611cd15760405162461bcd60e51b815260040161077790612d31565b6109cd611e34565b6000611ce58484611e64565b9050611cf13383611f05565b336001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436482604051611d2a91906121d1565b60405180910390a250505050565b6113448363a9059cbb60e01b84846040516024016119a69291906127d7565b6000611dac826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611fd69092919063ffffffff16565b8051909150156113445780806020019051810190611dca91906127f0565b6113445760405162461bcd60e51b815260040161077790612d99565b600054610100900460ff16611e0d5760405162461bcd60e51b815260040161077790612d31565b8151611e209060369060208501906120df565b5080516113449060379060208401906120df565b600054610100900460ff16611e5b5760405162461bcd60e51b815260040161077790612d31565b6109cd33611c1a565b600080836001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611e9391906122bb565b602060405180830381865afa158015611eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed4919061289a565b905082811115611ee657829150611eea565b8091505b611efe6001600160a01b0385163384611d38565b5092915050565b6001600160a01b038216611f2b5760405162461bcd60e51b815260040161077790612e01565b6001600160a01b03821660009081526033602052604090205481811015611f645760405162461bcd60e51b815260040161077790612e69565b6001600160a01b0383166000908152603360205260408120838303905560358054849290611f93908490612e79565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906118039086906121d1565b6060611fe58484600085611fed565b949350505050565b60608247101561200f5760405162461bcd60e51b815260040161077790612ee8565b843b61202d5760405162461bcd60e51b815260040161077790612f2a565b600080866001600160a01b031685876040516120499190612f5c565b60006040518083038185875af1925050503d8060008114612086576040519150601f19603f3d011682016040523d82523d6000602084013e61208b565b606091505b509150915061209b8282866120a6565b979650505050505050565b606083156120b5575081610746565b8251156120c55782518084602001fd5b8160405162461bcd60e51b8152600401610777919061223d565b8280546120eb90612632565b90600052602060002090601f01602090048101928261210d5760008555612153565b82601f1061212657805160ff1916838001178555612153565b82800160010185558215612153579182015b82811115612153578251825591602001919060010190612138565b5061215f929150612163565b5090565b5b8082111561215f5760008155600101612164565b60006001600160a01b038216610721565b61219281612178565b811461126957600080fd5b803561072181612189565b6000602082840312156121bd576121bd600080fd5b6000611fe5848461219d565b805b82525050565b6020810161072182846121c9565b60005b838110156121fa5781810151838201526020016121e2565b8381111561186c5750506000910152565b6000612215825190565b80845260208401935061222c8185602086016121df565b601f01601f19169290920192915050565b60208082528101610746818461220b565b80612192565b80356107218161224e565b6000806040838503121561227557612275600080fd5b6000612281858561219d565b925050602061229285828601612254565b9150509250929050565b8015156121cb565b60208101610721828461229c565b6121cb81612178565b6020810161072182846122b2565b6000806000606084860312156122e1576122e1600080fd5b60006122ed868661219d565b93505060206122fe8682870161219d565b925050604061230f86828701612254565b9150509250925092565b60ff81166121cb565b602081016107218284612319565b6000806040838503121561234657612346600080fd5b6000612352858561219d565b92505060206122928582860161219d565b6121cb81600f0b90565b602081016107218284612363565b6000806000806080858703121561239457612394600080fd5b60006123a08787612254565b94505060206123b18782880161219d565b93505060406123c287828801612254565b92505060606123d387828801612254565b91505092959194509250565b801515612192565b8035610721816123df565b60008060006060848603121561240a5761240a600080fd5b600061241686866123e7565b93505060206124278682870161219d565b925050604061230f8682870161219d565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561247457612474612438565b6040525050565b600061248660405190565b9050612492828261244e565b919050565b600067ffffffffffffffff8211156124b1576124b1612438565b601f19601f83011660200192915050565b82818337506000910152565b60006124e16124dc84612497565b61247b565b9050828152602081018484840111156124fc576124fc600080fd5b6125078482856124c2565b509392505050565b600082601f83011261252357612523600080fd5b8135611fe58482602086016124ce565b60006020828403121561254857612548600080fd5b813567ffffffffffffffff81111561256257612562600080fd5b611fe58482850161250f565b60008083601f84011261258357612583600080fd5b50813567ffffffffffffffff81111561259e5761259e600080fd5b6020830191508360208202830111156125b9576125b9600080fd5b9250929050565b6000806000604084860312156125d8576125d8600080fd5b60006125e4868661219d565b935050602084013567ffffffffffffffff81111561260457612604600080fd5b6126108682870161256e565b92509250509250925092565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061264657607f821691505b6020821081036126585761265861261c565b50919050565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b602080825281016107218161265e565b634e487b7160e01b600052601160045260246000fd5b600082198211156126c9576126c96126a0565b500190565b60188152602081017f537461626c65636f696e206e6f7420737570706f7274656400000000000000008152905061268a565b60208082528101610721816126ce565b600c8152602081017f4e6f2073776170207061697200000000000000000000000000000000000000008152905061268a565b6020808252810161072181612710565b6040810161276082856121c9565b61074660208301846121c9565b602e8152602081017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181527f647920696e697469616c697a6564000000000000000000000000000000000000602082015290505b60400190565b602080825281016107218161276d565b6040810161276082856122b2565b8051610721816123df565b60006020828403121561280557612805600080fd5b6000611fe584846127e5565b634e487b7160e01b600052603260045260246000fd5b60258152602081017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781527f207a65726f000000000000000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612827565b80516107218161224e565b6000602082840312156128af576128af600080fd5b6000611fe5848461288f565b60148152602081017f496e73756666696369656e742062616c616e63650000000000000000000000008152905061268a565b60208082528101610721816128bb565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015290506127c1565b60208082528101610721816128fd565b60248152602081017f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481527f7265737300000000000000000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612965565b60228152602081017f45524332303a20617070726f766520746f20746865207a65726f20616464726581527f7373000000000000000000000000000000000000000000000000000000000000602082015290506127c1565b60208082528101610721816129cd565b601d8152602081017f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000008152905061268a565b6020808252810161072181612a35565b60258152602081017f45524332303a207472616e736665722066726f6d20746865207a65726f20616481527f6472657373000000000000000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612a77565b60238152602081017f45524332303a207472616e7366657220746f20746865207a65726f206164647281527f6573730000000000000000000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612adf565b60268152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206281527f616c616e63650000000000000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612b47565b60608101612bbd82866122b2565b612bca60208301856122b2565b611fe560408301846121c9565b60c08101612be582896122b2565b612bf260208301886122b2565b612bff60408301876121c9565b612c0c60608301866121c9565b612c1960808301856122b2565b61209b60a08301846121c9565b60008060408385031215612c3c57612c3c600080fd5b6000612c48858561288f565b92505060206122928582860161288f565b60808101612c678287612363565b612c746020830186612363565b612c8160408301856121c9565b612c8e60608301846121c9565b95945050505050565b601f8152602081017f45524332303a206d696e7420746f20746865207a65726f2061646472657373008152905061268a565b6020808252810161072181612c97565b602b8152602081017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612cd9565b602a8152602081017f5361666545524332303a204552433230206f7065726174696f6e20646964206e81527f6f74207375636365656400000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612d41565b60218152602081017f45524332303a206275726e2066726f6d20746865207a65726f2061646472657381527f7300000000000000000000000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612da9565b60228152602081017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e81527f6365000000000000000000000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612e11565b600082821015612e8b57612e8b6126a0565b500390565b60268152602081017f416464726573733a20696e73756666696369656e742062616c616e636520666f81527f722063616c6c0000000000000000000000000000000000000000000000000000602082015290506127c1565b6020808252810161072181612e90565b601d8152602081017f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000008152905061268a565b6020808252810161072181612ef8565b6000612f44825190565b612f528185602086016121df565b9290920192915050565b6107218183612f3a56fea264697066735822122074ee0680a823d083561d7416310c3286de08d8b68f176de3428016a287b9051a64736f6c634300080d0033",
  "devdoc": {
    "author": "Eric Lee (ylikp.ust@gmail.com)",
    "details": "Users can swap other stablecoins to Shield (actually backed by USDC only)         Shield can be used in NaughtyPrice and future products         When users want to withdraw, their shield tokens will be burned         and USDC will be sent back to them (if no sepecific choice)             other stablecoins will be sent back to them (if have sepecific choice)         Currently, the swap is done inside Platypus & Curve         The stablecoin and its swapping pool should be supported         When deposit, the toToken is USDC, which pool to use depends on tokenToPoolForDeposit(token)         When withdraw, the fromToken is USDC, which pool to use depends on tokenToPoolForWithdraw(token)",
    "kind": "dev",
    "methods": {
      "addCurvePool(address,address[])": {
        "params": {
          "_pool": "Curve pool address",
          "_tokens": "Tokens inside this pool"
        }
      },
      "addSupportedStablecoin(address)": {
        "details": "Set a new supported token address      Only callable by the owner",
        "params": {
          "_stablecoin": "Stablecoin address"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "approveStablecoin(address,address)": {
        "params": {
          "_contract": "Contract address to give allowance",
          "_token": "Stablecoin address"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256,address,uint256,uint256)": {
        "params": {
          "_amount": "Input stablecoin amount",
          "_minAmount": "Minimum amount output (if need swap)",
          "_stablecoin": "Stablecoin address",
          "_type": "Swap type (1 for PTP, 2 for Curve)"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256,address,uint256,uint256)": {
        "params": {
          "_amount": "Amount of shield to burn",
          "_minAmount": "Minimum amount of stablecoin to withdraw (if need swap)",
          "_stablecoin": "Stablecoin address",
          "_type": "Swap type (use PTP/Curve, which pool)"
        }
      }
    },
    "title": "Shield Token (Derived Stablecoin on Degis)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addCurvePool(address,address[])": {
        "notice": "Add new curve pool"
      },
      "addSupportedStablecoin(address)": {
        "notice": "Add new supported stablecoin"
      },
      "approveStablecoin(address,address)": {
        "notice": "Approve a stablecoin for swapping         Call once for each stablecoin"
      },
      "decimals()": {
        "notice": "Shield has 6 decimals"
      },
      "deposit(uint256,address,uint256,uint256)": {
        "notice": "Deposit tokens and mint Shield         If the input is USDC, no swap needed, otherwise, swap to USDC"
      },
      "withdraw(uint256,address,uint256,uint256)": {
        "notice": "Withdraw stablecoins and burn shield"
      },
      "withdrawAll()": {
        "notice": "Withdraw all of a user's balance         This function only return USDC back"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2670,
        "contract": "contracts/tokens/Shield.sol:Shield",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2673,
        "contract": "contracts/tokens/Shield.sol:Shield",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3907,
        "contract": "contracts/tokens/Shield.sol:Shield",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2926,
        "contract": "contracts/tokens/Shield.sol:Shield",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2932,
        "contract": "contracts/tokens/Shield.sol:Shield",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2934,
        "contract": "contracts/tokens/Shield.sol:Shield",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 2936,
        "contract": "contracts/tokens/Shield.sol:Shield",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 2938,
        "contract": "contracts/tokens/Shield.sol:Shield",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 3519,
        "contract": "contracts/tokens/Shield.sol:Shield",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 2550,
        "contract": "contracts/tokens/Shield.sol:Shield",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 2662,
        "contract": "contracts/tokens/Shield.sol:Shield",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 39086,
        "contract": "contracts/tokens/Shield.sol:Shield",
        "label": "supportedStablecoin",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 39090,
        "contract": "contracts/tokens/Shield.sol:Shield",
        "label": "pools",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 39094,
        "contract": "contracts/tokens/Shield.sol:Shield",
        "label": "userBalance",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39098,
        "contract": "contracts/tokens/Shield.sol:Shield",
        "label": "tokenToPoolForDeposit",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 39102,
        "contract": "contracts/tokens/Shield.sol:Shield",
        "label": "tokenToPoolForWithdraw",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 39108,
        "contract": "contracts/tokens/Shield.sol:Shield",
        "label": "curvePoolTokenIndex",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_int128))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int128)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int128)",
        "numberOfBytes": "32",
        "value": "t_int128"
      },
      "t_mapping(t_address,t_mapping(t_address,t_int128))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => int128))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_int128)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}