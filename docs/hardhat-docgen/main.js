/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={268:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var a=n(81),i=n.n(a),s=n(645),r=n.n(s)()(i());r.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@400;500;600;700&display=swap);"]),r.push([e.id,"\nhtml,\nbody {\n  font-family: 'Source Code Pro', monospace;\n}\n",""]);const o=r},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,i,s){"string"==typeof e&&(e=[[null,e,void 0]]);var r={};if(a)for(var o=0;o<this.length;o++){var u=this[o][0];null!=u&&(r[u]=!0)}for(var p=0;p<e.length;p++){var d=[].concat(e[p]);a&&r[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),t.push(d))}},t}},81:e=>{"use strict";e.exports=function(e){return e[1]}},387:(e,t,n)=>{var a=n(268);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),(0,n(346).Z)("0b345cf4",a,!1,{})},346:(e,t,n)=>{"use strict";function a(e,t){for(var n=[],a={},i=0;i<t.length;i++){var s=t[i],r=s[0],o={id:e+":"+i,css:s[1],media:s[2],sourceMap:s[3]};a[r]?a[r].parts.push(o):n.push(a[r]={id:r,parts:[o]})}return n}n.d(t,{Z:()=>m});var i="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!i)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var s={},r=i&&(document.head||document.getElementsByTagName("head")[0]),o=null,u=0,p=!1,d=function(){},l=null,y="data-vue-ssr-id",c="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function m(e,t,n,i){p=n,l=i||{};var r=a(e,t);return f(r),function(t){for(var n=[],i=0;i<r.length;i++){var o=r[i];(u=s[o.id]).refs--,n.push(u)}for(t?f(r=a(e,t)):r=[],i=0;i<n.length;i++){var u;if(0===(u=n[i]).refs){for(var p=0;p<u.parts.length;p++)u.parts[p]();delete s[u.id]}}}}function f(e){for(var t=0;t<e.length;t++){var n=e[t],a=s[n.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](n.parts[i]);for(;i<n.parts.length;i++)a.parts.push(b(n.parts[i]));a.parts.length>n.parts.length&&(a.parts.length=n.parts.length)}else{var r=[];for(i=0;i<n.parts.length;i++)r.push(b(n.parts[i]));s[n.id]={id:n.id,refs:1,parts:r}}}}function h(){var e=document.createElement("style");return e.type="text/css",r.appendChild(e),e}function b(e){var t,n,a=document.querySelector("style["+y+'~="'+e.id+'"]');if(a){if(p)return d;a.parentNode.removeChild(a)}if(c){var i=u++;a=o||(o=h()),t=w.bind(null,a,i,!1),n=w.bind(null,a,i,!0)}else a=h(),t=g.bind(null,a),n=function(){a.parentNode.removeChild(a)};return t(e),function(a){if(a){if(a.css===e.css&&a.media===e.media&&a.sourceMap===e.sourceMap)return;t(e=a)}else n()}}var T,v=(T=[],function(e,t){return T[e]=t,T.filter(Boolean).join("\n")});function w(e,t,n,a){var i=n?"":a.css;if(e.styleSheet)e.styleSheet.cssText=v(t,i);else{var s=document.createTextNode(i),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(s,r[t]):e.appendChild(s)}}function g(e,t){var n=t.css,a=t.media,i=t.sourceMap;if(a&&e.setAttribute("media",a),l.ssrId&&e.setAttribute(y,t.id),i&&(n+="\n/*# sourceURL="+i.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},t={};function n(a){var i=t[a];if(void 0!==i)return i.exports;var s=t[a]={id:a,exports:{}};return e[a](s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=Object.freeze({});function t(e){return null==e}function a(e){return null!=e}function i(e){return!0===e}function s(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function r(e){return null!==e&&"object"==typeof e}var o=Object.prototype.toString;function u(e){return"[object Object]"===o.call(e)}function p(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function d(e){return a(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function l(e){return null==e?"":Array.isArray(e)||u(e)&&e.toString===o?JSON.stringify(e,null,2):String(e)}function y(e){var t=parseFloat(e);return isNaN(t)?e:t}function c(e,t){for(var n=Object.create(null),a=e.split(","),i=0;i<a.length;i++)n[a[i]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var m=c("slot,component",!0),f=c("key,ref,slot,slot-scope,is");function h(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var b=Object.prototype.hasOwnProperty;function T(e,t){return b.call(e,t)}function v(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var w=/-(\w)/g,g=v((function(e){return e.replace(w,(function(e,t){return t?t.toUpperCase():""}))})),_=v((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),k=/\B([A-Z])/g,M=v((function(e){return e.replace(k,"-$1").toLowerCase()})),x=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var a=arguments.length;return a?a>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function I(e,t){t=t||0;for(var n=e.length-t,a=new Array(n);n--;)a[n]=e[n+t];return a}function A(e,t){for(var n in t)e[n]=t[n];return e}function R(e){for(var t={},n=0;n<e.length;n++)e[n]&&A(t,e[n]);return t}function C(e,t,n){}var P=function(e,t,n){return!1},O=function(e){return e};function S(e,t){if(e===t)return!0;var n=r(e),a=r(t);if(!n||!a)return!n&&!a&&String(e)===String(t);try{var i=Array.isArray(e),s=Array.isArray(t);if(i&&s)return e.length===t.length&&e.every((function(e,n){return S(e,t[n])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(i||s)return!1;var o=Object.keys(e),u=Object.keys(t);return o.length===u.length&&o.every((function(n){return S(e[n],t[n])}))}catch(e){return!1}}function E(e,t){for(var n=0;n<e.length;n++)if(S(e[n],t))return n;return-1}function D(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var L="data-server-rendered",F=["component","directive","filter"],N=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],U={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:P,isReservedAttr:P,isUnknownElement:P,getTagNamespace:C,parsePlatformTagName:O,mustUseProp:P,async:!0,_lifecycleHooks:N},B=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function $(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function q(e,t,n,a){Object.defineProperty(e,t,{value:n,enumerable:!!a,writable:!0,configurable:!0})}var j,G=new RegExp("[^"+B.source+".$_\\d]"),z="__proto__"in{},V="undefined"!=typeof window,W="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,H=W&&WXEnvironment.platform.toLowerCase(),X=V&&window.navigator.userAgent.toLowerCase(),K=X&&/msie|trident/.test(X),Y=X&&X.indexOf("msie 9.0")>0,J=X&&X.indexOf("edge/")>0,Q=(X&&X.indexOf("android"),X&&/iphone|ipad|ipod|ios/.test(X)||"ios"===H),Z=(X&&/chrome\/\d+/.test(X),X&&/phantomjs/.test(X),X&&X.match(/firefox\/(\d+)/)),ee={}.watch,te=!1;if(V)try{var ne={};Object.defineProperty(ne,"passive",{get:function(){te=!0}}),window.addEventListener("test-passive",null,ne)}catch(e){}var ae=function(){return void 0===j&&(j=!V&&!W&&void 0!==n.g&&n.g.process&&"server"===n.g.process.env.VUE_ENV),j},ie=V&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function se(e){return"function"==typeof e&&/native code/.test(e.toString())}var re,oe="undefined"!=typeof Symbol&&se(Symbol)&&"undefined"!=typeof Reflect&&se(Reflect.ownKeys);re="undefined"!=typeof Set&&se(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var ue=C,pe=0,de=function(){this.id=pe++,this.subs=[]};de.prototype.addSub=function(e){this.subs.push(e)},de.prototype.removeSub=function(e){h(this.subs,e)},de.prototype.depend=function(){de.target&&de.target.addDep(this)},de.prototype.notify=function(){for(var e=this.subs.slice(),t=0,n=e.length;t<n;t++)e[t].update()},de.target=null;var le=[];function ye(e){le.push(e),de.target=e}function ce(){le.pop(),de.target=le[le.length-1]}var me=function(e,t,n,a,i,s,r,o){this.tag=e,this.data=t,this.children=n,this.text=a,this.elm=i,this.ns=void 0,this.context=s,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=r,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=o,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},fe={child:{configurable:!0}};fe.child.get=function(){return this.componentInstance},Object.defineProperties(me.prototype,fe);var he=function(e){void 0===e&&(e="");var t=new me;return t.text=e,t.isComment=!0,t};function be(e){return new me(void 0,void 0,void 0,String(e))}function Te(e){var t=new me(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var ve=Array.prototype,we=Object.create(ve);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=ve[e];q(we,e,(function(){for(var n=[],a=arguments.length;a--;)n[a]=arguments[a];var i,s=t.apply(this,n),r=this.__ob__;switch(e){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2)}return i&&r.observeArray(i),r.dep.notify(),s}))}));var ge=Object.getOwnPropertyNames(we),_e=!0;function ke(e){_e=e}var Me=function(e){this.value=e,this.dep=new de,this.vmCount=0,q(e,"__ob__",this),Array.isArray(e)?(z?function(e,t){e.__proto__=t}(e,we):function(e,t,n){for(var a=0,i=n.length;a<i;a++){var s=n[a];q(e,s,t[s])}}(e,we,ge),this.observeArray(e)):this.walk(e)};function xe(e,t){var n;if(r(e)&&!(e instanceof me))return T(e,"__ob__")&&e.__ob__ instanceof Me?n=e.__ob__:_e&&!ae()&&(Array.isArray(e)||u(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Me(e)),t&&n&&n.vmCount++,n}function Ie(e,t,n,a,i){var s=new de,r=Object.getOwnPropertyDescriptor(e,t);if(!r||!1!==r.configurable){var o=r&&r.get,u=r&&r.set;o&&!u||2!==arguments.length||(n=e[t]);var p=!i&&xe(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=o?o.call(e):n;return de.target&&(s.depend(),p&&(p.dep.depend(),Array.isArray(t)&&Ce(t))),t},set:function(t){var a=o?o.call(e):n;t===a||t!=t&&a!=a||o&&!u||(u?u.call(e,t):n=t,p=!i&&xe(t),s.notify())}})}}function Ae(e,t,n){if(Array.isArray(e)&&p(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var a=e.__ob__;return e._isVue||a&&a.vmCount?n:a?(Ie(a.value,t,n),a.dep.notify(),n):(e[t]=n,n)}function Re(e,t){if(Array.isArray(e)&&p(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount||T(e,t)&&(delete e[t],n&&n.dep.notify())}}function Ce(e){for(var t=void 0,n=0,a=e.length;n<a;n++)(t=e[n])&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&Ce(t)}Me.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)Ie(e,t[n])},Me.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)xe(e[t])};var Pe=U.optionMergeStrategies;function Oe(e,t){if(!t)return e;for(var n,a,i,s=oe?Reflect.ownKeys(t):Object.keys(t),r=0;r<s.length;r++)"__ob__"!==(n=s[r])&&(a=e[n],i=t[n],T(e,n)?a!==i&&u(a)&&u(i)&&Oe(a,i):Ae(e,n,i));return e}function Se(e,t,n){return n?function(){var a="function"==typeof t?t.call(n,n):t,i="function"==typeof e?e.call(n,n):e;return a?Oe(a,i):i}:t?e?function(){return Oe("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function Ee(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function De(e,t,n,a){var i=Object.create(e||null);return t?A(i,t):i}Pe.data=function(e,t,n){return n?Se(e,t,n):t&&"function"!=typeof t?e:Se(e,t)},N.forEach((function(e){Pe[e]=Ee})),F.forEach((function(e){Pe[e+"s"]=De})),Pe.watch=function(e,t,n,a){if(e===ee&&(e=void 0),t===ee&&(t=void 0),!t)return Object.create(e||null);if(!e)return t;var i={};for(var s in A(i,e),t){var r=i[s],o=t[s];r&&!Array.isArray(r)&&(r=[r]),i[s]=r?r.concat(o):Array.isArray(o)?o:[o]}return i},Pe.props=Pe.methods=Pe.inject=Pe.computed=function(e,t,n,a){if(!e)return t;var i=Object.create(null);return A(i,e),t&&A(i,t),i},Pe.provide=Se;var Le=function(e,t){return void 0===t?e:t};function Fe(e,t,n){if("function"==typeof t&&(t=t.options),function(e,t){var n=e.props;if(n){var a,i,s={};if(Array.isArray(n))for(a=n.length;a--;)"string"==typeof(i=n[a])&&(s[g(i)]={type:null});else if(u(n))for(var r in n)i=n[r],s[g(r)]=u(i)?i:{type:i};e.props=s}}(t),function(e,t){var n=e.inject;if(n){var a=e.inject={};if(Array.isArray(n))for(var i=0;i<n.length;i++)a[n[i]]={from:n[i]};else if(u(n))for(var s in n){var r=n[s];a[s]=u(r)?A({from:s},r):{from:r}}}}(t),function(e){var t=e.directives;if(t)for(var n in t){var a=t[n];"function"==typeof a&&(t[n]={bind:a,update:a})}}(t),!t._base&&(t.extends&&(e=Fe(e,t.extends,n)),t.mixins))for(var a=0,i=t.mixins.length;a<i;a++)e=Fe(e,t.mixins[a],n);var s,r={};for(s in e)o(s);for(s in t)T(e,s)||o(s);function o(a){var i=Pe[a]||Le;r[a]=i(e[a],t[a],n,a)}return r}function Ne(e,t,n,a){if("string"==typeof n){var i=e[t];if(T(i,n))return i[n];var s=g(n);if(T(i,s))return i[s];var r=_(s);return T(i,r)?i[r]:i[n]||i[s]||i[r]}}function Ue(e,t,n,a){var i=t[e],s=!T(n,e),r=n[e],o=je(Boolean,i.type);if(o>-1)if(s&&!T(i,"default"))r=!1;else if(""===r||r===M(e)){var u=je(String,i.type);(u<0||o<u)&&(r=!0)}if(void 0===r){r=function(e,t,n){if(T(t,"default")){var a=t.default;return e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n]?e._props[n]:"function"==typeof a&&"Function"!==$e(t.type)?a.call(e):a}}(a,i,e);var p=_e;ke(!0),xe(r),ke(p)}return r}var Be=/^\s*function (\w+)/;function $e(e){var t=e&&e.toString().match(Be);return t?t[1]:""}function qe(e,t){return $e(e)===$e(t)}function je(e,t){if(!Array.isArray(t))return qe(t,e)?0:-1;for(var n=0,a=t.length;n<a;n++)if(qe(t[n],e))return n;return-1}function Ge(e,t,n){ye();try{if(t)for(var a=t;a=a.$parent;){var i=a.$options.errorCaptured;if(i)for(var s=0;s<i.length;s++)try{if(!1===i[s].call(a,e,t,n))return}catch(e){Ve(e,a,"errorCaptured hook")}}Ve(e,t,n)}finally{ce()}}function ze(e,t,n,a,i){var s;try{(s=n?e.apply(t,n):e.call(t))&&!s._isVue&&d(s)&&!s._handled&&(s.catch((function(e){return Ge(e,a,i+" (Promise/async)")})),s._handled=!0)}catch(e){Ge(e,a,i)}return s}function Ve(e,t,n){if(U.errorHandler)try{return U.errorHandler.call(null,e,t,n)}catch(t){t!==e&&We(t)}We(e)}function We(e,t,n){if(!V&&!W||"undefined"==typeof console)throw e;console.error(e)}var He,Xe=!1,Ke=[],Ye=!1;function Je(){Ye=!1;var e=Ke.slice(0);Ke.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&se(Promise)){var Qe=Promise.resolve();He=function(){Qe.then(Je),Q&&setTimeout(C)},Xe=!0}else if(K||"undefined"==typeof MutationObserver||!se(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())He="undefined"!=typeof setImmediate&&se(setImmediate)?function(){setImmediate(Je)}:function(){setTimeout(Je,0)};else{var Ze=1,et=new MutationObserver(Je),tt=document.createTextNode(String(Ze));et.observe(tt,{characterData:!0}),He=function(){Ze=(Ze+1)%2,tt.data=String(Ze)},Xe=!0}function nt(e,t){var n;if(Ke.push((function(){if(e)try{e.call(t)}catch(e){Ge(e,t,"nextTick")}else n&&n(t)})),Ye||(Ye=!0,He()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){n=e}))}var at=new re;function it(e){st(e,at),at.clear()}function st(e,t){var n,a,i=Array.isArray(e);if(!(!i&&!r(e)||Object.isFrozen(e)||e instanceof me)){if(e.__ob__){var s=e.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(i)for(n=e.length;n--;)st(e[n],t);else for(n=(a=Object.keys(e)).length;n--;)st(e[a[n]],t)}}var rt=v((function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),a="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=a?e.slice(1):e,once:n,capture:a,passive:t}}));function ot(e,t){function n(){var e=arguments,a=n.fns;if(!Array.isArray(a))return ze(a,null,arguments,t,"v-on handler");for(var i=a.slice(),s=0;s<i.length;s++)ze(i[s],null,e,t,"v-on handler")}return n.fns=e,n}function ut(e,n,a,s,r,o){var u,p,d,l;for(u in e)p=e[u],d=n[u],l=rt(u),t(p)||(t(d)?(t(p.fns)&&(p=e[u]=ot(p,o)),i(l.once)&&(p=e[u]=r(l.name,p,l.capture)),a(l.name,p,l.capture,l.passive,l.params)):p!==d&&(d.fns=p,e[u]=d));for(u in n)t(e[u])&&s((l=rt(u)).name,n[u],l.capture)}function pt(e,n,s){var r;e instanceof me&&(e=e.data.hook||(e.data.hook={}));var o=e[n];function u(){s.apply(this,arguments),h(r.fns,u)}t(o)?r=ot([u]):a(o.fns)&&i(o.merged)?(r=o).fns.push(u):r=ot([o,u]),r.merged=!0,e[n]=r}function dt(e,t,n,i,s){if(a(t)){if(T(t,n))return e[n]=t[n],s||delete t[n],!0;if(T(t,i))return e[n]=t[i],s||delete t[i],!0}return!1}function lt(e){return s(e)?[be(e)]:Array.isArray(e)?ct(e):void 0}function yt(e){return a(e)&&a(e.text)&&!1===e.isComment}function ct(e,n){var r,o,u,p,d=[];for(r=0;r<e.length;r++)t(o=e[r])||"boolean"==typeof o||(p=d[u=d.length-1],Array.isArray(o)?o.length>0&&(yt((o=ct(o,(n||"")+"_"+r))[0])&&yt(p)&&(d[u]=be(p.text+o[0].text),o.shift()),d.push.apply(d,o)):s(o)?yt(p)?d[u]=be(p.text+o):""!==o&&d.push(be(o)):yt(o)&&yt(p)?d[u]=be(p.text+o.text):(i(e._isVList)&&a(o.tag)&&t(o.key)&&a(n)&&(o.key="__vlist"+n+"_"+r+"__"),d.push(o)));return d}function mt(e,t){if(e){for(var n=Object.create(null),a=oe?Reflect.ownKeys(e):Object.keys(e),i=0;i<a.length;i++){var s=a[i];if("__ob__"!==s){for(var r=e[s].from,o=t;o;){if(o._provided&&T(o._provided,r)){n[s]=o._provided[r];break}o=o.$parent}if(!o&&"default"in e[s]){var u=e[s].default;n[s]="function"==typeof u?u.call(t):u}}}return n}}function ft(e,t){if(!e||!e.length)return{};for(var n={},a=0,i=e.length;a<i;a++){var s=e[a],r=s.data;if(r&&r.attrs&&r.attrs.slot&&delete r.attrs.slot,s.context!==t&&s.fnContext!==t||!r||null==r.slot)(n.default||(n.default=[])).push(s);else{var o=r.slot,u=n[o]||(n[o]=[]);"template"===s.tag?u.push.apply(u,s.children||[]):u.push(s)}}for(var p in n)n[p].every(ht)&&delete n[p];return n}function ht(e){return e.isComment&&!e.asyncFactory||" "===e.text}function bt(e){return e.isComment&&e.asyncFactory}function Tt(t,n,a){var i,s=Object.keys(n).length>0,r=t?!!t.$stable:!s,o=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(r&&a&&a!==e&&o===a.$key&&!s&&!a.$hasNormal)return a;for(var u in i={},t)t[u]&&"$"!==u[0]&&(i[u]=vt(n,u,t[u]))}else i={};for(var p in n)p in i||(i[p]=wt(n,p));return t&&Object.isExtensible(t)&&(t._normalized=i),q(i,"$stable",r),q(i,"$key",o),q(i,"$hasNormal",s),i}function vt(e,t,n){var a=function(){var e=arguments.length?n.apply(null,arguments):n({}),t=(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:lt(e))&&e[0];return e&&(!t||1===e.length&&t.isComment&&!bt(t))?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:a,enumerable:!0,configurable:!0}),a}function wt(e,t){return function(){return e[t]}}function gt(e,t){var n,i,s,o,u;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),i=0,s=e.length;i<s;i++)n[i]=t(e[i],i);else if("number"==typeof e)for(n=new Array(e),i=0;i<e;i++)n[i]=t(i+1,i);else if(r(e))if(oe&&e[Symbol.iterator]){n=[];for(var p=e[Symbol.iterator](),d=p.next();!d.done;)n.push(t(d.value,n.length)),d=p.next()}else for(o=Object.keys(e),n=new Array(o.length),i=0,s=o.length;i<s;i++)u=o[i],n[i]=t(e[u],u,i);return a(n)||(n=[]),n._isVList=!0,n}function _t(e,t,n,a){var i,s=this.$scopedSlots[e];s?(n=n||{},a&&(n=A(A({},a),n)),i=s(n)||("function"==typeof t?t():t)):i=this.$slots[e]||("function"==typeof t?t():t);var r=n&&n.slot;return r?this.$createElement("template",{slot:r},i):i}function kt(e){return Ne(this.$options,"filters",e)||O}function Mt(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function xt(e,t,n,a,i){var s=U.keyCodes[t]||n;return i&&a&&!U.keyCodes[t]?Mt(i,a):s?Mt(s,e):a?M(a)!==t:void 0===e}function It(e,t,n,a,i){if(n&&r(n)){var s;Array.isArray(n)&&(n=R(n));var o=function(r){if("class"===r||"style"===r||f(r))s=e;else{var o=e.attrs&&e.attrs.type;s=a||U.mustUseProp(t,o,r)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var u=g(r),p=M(r);u in s||p in s||(s[r]=n[r],i&&((e.on||(e.on={}))["update:"+r]=function(e){n[r]=e}))};for(var u in n)o(u)}return e}function At(e,t){var n=this._staticTrees||(this._staticTrees=[]),a=n[e];return a&&!t||Ct(a=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),a}function Rt(e,t,n){return Ct(e,"__once__"+t+(n?"_"+n:""),!0),e}function Ct(e,t,n){if(Array.isArray(e))for(var a=0;a<e.length;a++)e[a]&&"string"!=typeof e[a]&&Pt(e[a],t+"_"+a,n);else Pt(e,t,n)}function Pt(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function Ot(e,t){if(t&&u(t)){var n=e.on=e.on?A({},e.on):{};for(var a in t){var i=n[a],s=t[a];n[a]=i?[].concat(i,s):s}}return e}function St(e,t,n,a){t=t||{$stable:!n};for(var i=0;i<e.length;i++){var s=e[i];Array.isArray(s)?St(s,t,n):s&&(s.proxy&&(s.fn.proxy=!0),t[s.key]=s.fn)}return a&&(t.$key=a),t}function Et(e,t){for(var n=0;n<t.length;n+=2){var a=t[n];"string"==typeof a&&a&&(e[t[n]]=t[n+1])}return e}function Dt(e,t){return"string"==typeof e?t+e:e}function Lt(e){e._o=Rt,e._n=y,e._s=l,e._l=gt,e._t=_t,e._q=S,e._i=E,e._m=At,e._f=kt,e._k=xt,e._b=It,e._v=be,e._e=he,e._u=St,e._g=Ot,e._d=Et,e._p=Dt}function Ft(t,n,a,s,r){var o,u=this,p=r.options;T(s,"_uid")?(o=Object.create(s))._original=s:(o=s,s=s._original);var d=i(p._compiled),l=!d;this.data=t,this.props=n,this.children=a,this.parent=s,this.listeners=t.on||e,this.injections=mt(p.inject,s),this.slots=function(){return u.$slots||Tt(t.scopedSlots,u.$slots=ft(a,s)),u.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return Tt(t.scopedSlots,this.slots())}}),d&&(this.$options=p,this.$slots=this.slots(),this.$scopedSlots=Tt(t.scopedSlots,this.$slots)),p._scopeId?this._c=function(e,t,n,a){var i=Gt(o,e,t,n,a,l);return i&&!Array.isArray(i)&&(i.fnScopeId=p._scopeId,i.fnContext=s),i}:this._c=function(e,t,n,a){return Gt(o,e,t,n,a,l)}}function Nt(e,t,n,a,i){var s=Te(e);return s.fnContext=n,s.fnOptions=a,t.slot&&((s.data||(s.data={})).slot=t.slot),s}function Ut(e,t){for(var n in t)e[g(n)]=t[n]}Lt(Ft.prototype);var Bt={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;Bt.prepatch(n,n)}else(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},i=e.data.inlineTemplate;return a(i)&&(n.render=i.render,n.staticRenderFns=i.staticRenderFns),new e.componentOptions.Ctor(n)}(e,Zt)).$mount(t?e.elm:void 0,t)},prepatch:function(t,n){var a=n.componentOptions;!function(t,n,a,i,s){var r=i.data.scopedSlots,o=t.$scopedSlots,u=!!(r&&!r.$stable||o!==e&&!o.$stable||r&&t.$scopedSlots.$key!==r.$key||!r&&t.$scopedSlots.$key),p=!!(s||t.$options._renderChildren||u);if(t.$options._parentVnode=i,t.$vnode=i,t._vnode&&(t._vnode.parent=i),t.$options._renderChildren=s,t.$attrs=i.data.attrs||e,t.$listeners=a||e,n&&t.$options.props){ke(!1);for(var d=t._props,l=t.$options._propKeys||[],y=0;y<l.length;y++){var c=l[y],m=t.$options.props;d[c]=Ue(c,m,n,t)}ke(!0),t.$options.propsData=n}a=a||e;var f=t.$options._parentListeners;t.$options._parentListeners=a,Qt(t,a,f),p&&(t.$slots=ft(s,i.context),t.$forceUpdate())}(n.componentInstance=t.componentInstance,a.propsData,a.listeners,n,a.children)},insert:function(e){var t,n=e.context,a=e.componentInstance;a._isMounted||(a._isMounted=!0,sn(a,"mounted")),e.data.keepAlive&&(n._isMounted?((t=a)._inactive=!1,on.push(t)):nn(a,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?an(t,!0):t.$destroy())}},$t=Object.keys(Bt);function qt(n,s,o,u,p){if(!t(n)){var l=o.$options._base;if(r(n)&&(n=l.extend(n)),"function"==typeof n){var y;if(t(n.cid)&&(n=function(e,n){if(i(e.error)&&a(e.errorComp))return e.errorComp;if(a(e.resolved))return e.resolved;var s=Wt;if(s&&a(e.owners)&&-1===e.owners.indexOf(s)&&e.owners.push(s),i(e.loading)&&a(e.loadingComp))return e.loadingComp;if(s&&!a(e.owners)){var o=e.owners=[s],u=!0,p=null,l=null;s.$on("hook:destroyed",(function(){return h(o,s)}));var y=function(e){for(var t=0,n=o.length;t<n;t++)o[t].$forceUpdate();e&&(o.length=0,null!==p&&(clearTimeout(p),p=null),null!==l&&(clearTimeout(l),l=null))},c=D((function(t){e.resolved=Ht(t,n),u?o.length=0:y(!0)})),m=D((function(t){a(e.errorComp)&&(e.error=!0,y(!0))})),f=e(c,m);return r(f)&&(d(f)?t(e.resolved)&&f.then(c,m):d(f.component)&&(f.component.then(c,m),a(f.error)&&(e.errorComp=Ht(f.error,n)),a(f.loading)&&(e.loadingComp=Ht(f.loading,n),0===f.delay?e.loading=!0:p=setTimeout((function(){p=null,t(e.resolved)&&t(e.error)&&(e.loading=!0,y(!1))}),f.delay||200)),a(f.timeout)&&(l=setTimeout((function(){l=null,t(e.resolved)&&m(null)}),f.timeout)))),u=!1,e.loading?e.loadingComp:e.resolved}}(y=n,l),void 0===n))return function(e,t,n,a,i){var s=he();return s.asyncFactory=e,s.asyncMeta={data:t,context:n,children:a,tag:i},s}(y,s,o,u,p);s=s||{},In(n),a(s.model)&&function(e,t){var n=e.model&&e.model.prop||"value",i=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var s=t.on||(t.on={}),r=s[i],o=t.model.callback;a(r)?(Array.isArray(r)?-1===r.indexOf(o):r!==o)&&(s[i]=[o].concat(r)):s[i]=o}(n.options,s);var c=function(e,n,i){var s=n.options.props;if(!t(s)){var r={},o=e.attrs,u=e.props;if(a(o)||a(u))for(var p in s){var d=M(p);dt(r,u,p,d,!0)||dt(r,o,p,d,!1)}return r}}(s,n);if(i(n.options.functional))return function(t,n,i,s,r){var o=t.options,u={},p=o.props;if(a(p))for(var d in p)u[d]=Ue(d,p,n||e);else a(i.attrs)&&Ut(u,i.attrs),a(i.props)&&Ut(u,i.props);var l=new Ft(i,u,r,s,t),y=o.render.call(null,l._c,l);if(y instanceof me)return Nt(y,i,l.parent,o);if(Array.isArray(y)){for(var c=lt(y)||[],m=new Array(c.length),f=0;f<c.length;f++)m[f]=Nt(c[f],i,l.parent,o);return m}}(n,c,s,o,u);var m=s.on;if(s.on=s.nativeOn,i(n.options.abstract)){var f=s.slot;s={},f&&(s.slot=f)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<$t.length;n++){var a=$t[n],i=t[a],s=Bt[a];i===s||i&&i._merged||(t[a]=i?jt(s,i):s)}}(s);var b=n.options.name||p;return new me("vue-component-"+n.cid+(b?"-"+b:""),s,void 0,void 0,void 0,o,{Ctor:n,propsData:c,listeners:m,tag:p,children:u},y)}}}function jt(e,t){var n=function(n,a){e(n,a),t(n,a)};return n._merged=!0,n}function Gt(e,t,n,o,u,p){return(Array.isArray(n)||s(n))&&(u=o,o=n,n=void 0),i(p)&&(u=2),function(e,t,n,i,s){if(a(n)&&a(n.__ob__))return he();if(a(n)&&a(n.is)&&(t=n.is),!t)return he();var o,u,p;(Array.isArray(i)&&"function"==typeof i[0]&&((n=n||{}).scopedSlots={default:i[0]},i.length=0),2===s?i=lt(i):1===s&&(i=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(i)),"string"==typeof t)?(u=e.$vnode&&e.$vnode.ns||U.getTagNamespace(t),o=U.isReservedTag(t)?new me(U.parsePlatformTagName(t),n,i,void 0,void 0,e):n&&n.pre||!a(p=Ne(e.$options,"components",t))?new me(t,n,i,void 0,void 0,e):qt(p,n,e,i,t)):o=qt(t,n,e,i);return Array.isArray(o)?o:a(o)?(a(u)&&zt(o,u),a(n)&&function(e){r(e.style)&&it(e.style),r(e.class)&&it(e.class)}(n),o):he()}(e,t,n,o,u)}function zt(e,n,s){if(e.ns=n,"foreignObject"===e.tag&&(n=void 0,s=!0),a(e.children))for(var r=0,o=e.children.length;r<o;r++){var u=e.children[r];a(u.tag)&&(t(u.ns)||i(s)&&"svg"!==u.tag)&&zt(u,n,s)}}var Vt,Wt=null;function Ht(e,t){return(e.__esModule||oe&&"Module"===e[Symbol.toStringTag])&&(e=e.default),r(e)?t.extend(e):e}function Xt(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(a(n)&&(a(n.componentOptions)||bt(n)))return n}}function Kt(e,t){Vt.$on(e,t)}function Yt(e,t){Vt.$off(e,t)}function Jt(e,t){var n=Vt;return function a(){var i=t.apply(null,arguments);null!==i&&n.$off(e,a)}}function Qt(e,t,n){Vt=e,ut(t,n||{},Kt,Yt,Jt,e),Vt=void 0}var Zt=null;function en(e){var t=Zt;return Zt=e,function(){Zt=t}}function tn(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function nn(e,t){if(t){if(e._directInactive=!1,tn(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)nn(e.$children[n]);sn(e,"activated")}}function an(e,t){if(!(t&&(e._directInactive=!0,tn(e))||e._inactive)){e._inactive=!0;for(var n=0;n<e.$children.length;n++)an(e.$children[n]);sn(e,"deactivated")}}function sn(e,t){ye();var n=e.$options[t],a=t+" hook";if(n)for(var i=0,s=n.length;i<s;i++)ze(n[i],e,null,e,a);e._hasHookEvent&&e.$emit("hook:"+t),ce()}var rn=[],on=[],un={},pn=!1,dn=!1,ln=0,yn=0,cn=Date.now;if(V&&!K){var mn=window.performance;mn&&"function"==typeof mn.now&&cn()>document.createEvent("Event").timeStamp&&(cn=function(){return mn.now()})}function fn(){var e,t;for(yn=cn(),dn=!0,rn.sort((function(e,t){return e.id-t.id})),ln=0;ln<rn.length;ln++)(e=rn[ln]).before&&e.before(),t=e.id,un[t]=null,e.run();var n=on.slice(),a=rn.slice();ln=rn.length=on.length=0,un={},pn=dn=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,nn(e[t],!0)}(n),function(e){for(var t=e.length;t--;){var n=e[t],a=n.vm;a._watcher===n&&a._isMounted&&!a._isDestroyed&&sn(a,"updated")}}(a),ie&&U.devtools&&ie.emit("flush")}var hn=0,bn=function(e,t,n,a,i){this.vm=e,i&&(e._watcher=this),e._watchers.push(this),a?(this.deep=!!a.deep,this.user=!!a.user,this.lazy=!!a.lazy,this.sync=!!a.sync,this.before=a.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++hn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new re,this.newDepIds=new re,this.expression="","function"==typeof t?this.getter=t:(this.getter=function(e){if(!G.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=C)),this.value=this.lazy?void 0:this.get()};bn.prototype.get=function(){var e;ye(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;Ge(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&it(e),ce(),this.cleanupDeps()}return e},bn.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},bn.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},bn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==un[t]){if(un[t]=!0,dn){for(var n=rn.length-1;n>ln&&rn[n].id>e.id;)n--;rn.splice(n+1,0,e)}else rn.push(e);pn||(pn=!0,nt(fn))}}(this)},bn.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||r(e)||this.deep){var t=this.value;if(this.value=e,this.user){var n='callback for watcher "'+this.expression+'"';ze(this.cb,this.vm,[e,t],this.vm,n)}else this.cb.call(this.vm,e,t)}}},bn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},bn.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},bn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||h(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var Tn={enumerable:!0,configurable:!0,get:C,set:C};function vn(e,t,n){Tn.get=function(){return this[t][n]},Tn.set=function(e){this[t][n]=e},Object.defineProperty(e,n,Tn)}var wn={lazy:!0};function gn(e,t,n){var a=!ae();"function"==typeof n?(Tn.get=a?_n(t):kn(n),Tn.set=C):(Tn.get=n.get?a&&!1!==n.cache?_n(t):kn(n.get):C,Tn.set=n.set||C),Object.defineProperty(e,t,Tn)}function _n(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),de.target&&t.depend(),t.value}}function kn(e){return function(){return e.call(this,this)}}function Mn(e,t,n,a){return u(n)&&(a=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,a)}var xn=0;function In(e){var t=e.options;if(e.super){var n=In(e.super);if(n!==e.superOptions){e.superOptions=n;var a=function(e){var t,n=e.options,a=e.sealedOptions;for(var i in n)n[i]!==a[i]&&(t||(t={}),t[i]=n[i]);return t}(e);a&&A(e.extendOptions,a),(t=e.options=Fe(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function An(e){this._init(e)}function Rn(e){return e&&(e.Ctor.options.name||e.tag)}function Cn(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:(n=e,!("[object RegExp]"!==o.call(n))&&e.test(t));var n}function Pn(e,t){var n=e.cache,a=e.keys,i=e._vnode;for(var s in n){var r=n[s];if(r){var o=r.name;o&&!t(o)&&On(n,s,a,i)}}}function On(e,t,n,a){var i=e[t];!i||a&&i.tag===a.tag||i.componentInstance.$destroy(),e[t]=null,h(n,t)}!function(t){t.prototype._init=function(t){var n=this;n._uid=xn++,n._isVue=!0,t&&t._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),a=t._parentVnode;n.parent=t.parent,n._parentVnode=a;var i=a.componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(n,t):n.$options=Fe(In(n.constructor),t||{},n),n._renderProxy=n,n._self=n,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(n),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&Qt(e,t)}(n),function(t){t._vnode=null,t._staticTrees=null;var n=t.$options,a=t.$vnode=n._parentVnode,i=a&&a.context;t.$slots=ft(n._renderChildren,i),t.$scopedSlots=e,t._c=function(e,n,a,i){return Gt(t,e,n,a,i,!1)},t.$createElement=function(e,n,a,i){return Gt(t,e,n,a,i,!0)};var s=a&&a.data;Ie(t,"$attrs",s&&s.attrs||e,null,!0),Ie(t,"$listeners",n._parentListeners||e,null,!0)}(n),sn(n,"beforeCreate"),function(e){var t=mt(e.$options.inject,e);t&&(ke(!1),Object.keys(t).forEach((function(n){Ie(e,n,t[n])})),ke(!0))}(n),function(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var n=e.$options.propsData||{},a=e._props={},i=e.$options._propKeys=[];e.$parent&&ke(!1);var s=function(s){i.push(s);var r=Ue(s,t,n,e);Ie(a,s,r),s in e||vn(e,"_props",s)};for(var r in t)s(r);ke(!0)}(e,t.props),t.methods&&function(e,t){for(var n in e.$options.props,t)e[n]="function"!=typeof t[n]?C:x(t[n],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;u(t=e._data="function"==typeof t?function(e,t){ye();try{return e.call(t,t)}catch(e){return Ge(e,t,"data()"),{}}finally{ce()}}(t,e):t||{})||(t={});for(var n=Object.keys(t),a=e.$options.props,i=(e.$options.methods,n.length);i--;){var s=n[i];a&&T(a,s)||$(s)||vn(e,"_data",s)}xe(t,!0)}(e):xe(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),a=ae();for(var i in t){var s=t[i],r="function"==typeof s?s:s.get;a||(n[i]=new bn(e,r||C,C,wn)),i in e||gn(e,i,s)}}(e,t.computed),t.watch&&t.watch!==ee&&function(e,t){for(var n in t){var a=t[n];if(Array.isArray(a))for(var i=0;i<a.length;i++)Mn(e,n,a[i]);else Mn(e,n,a)}}(e,t.watch)}(n),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(n),sn(n,"created"),n.$options.el&&n.$mount(n.$options.el)}}(An),function(e){Object.defineProperty(e.prototype,"$data",{get:function(){return this._data}}),Object.defineProperty(e.prototype,"$props",{get:function(){return this._props}}),e.prototype.$set=Ae,e.prototype.$delete=Re,e.prototype.$watch=function(e,t,n){var a=this;if(u(t))return Mn(a,e,t,n);(n=n||{}).user=!0;var i=new bn(a,e,t,n);if(n.immediate){var s='callback for immediate watcher "'+i.expression+'"';ye(),ze(t,a,[i.value],a,s),ce()}return function(){i.teardown()}}}(An),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var a=this;if(Array.isArray(e))for(var i=0,s=e.length;i<s;i++)a.$on(e[i],n);else(a._events[e]||(a._events[e]=[])).push(n),t.test(e)&&(a._hasHookEvent=!0);return a},e.prototype.$once=function(e,t){var n=this;function a(){n.$off(e,a),t.apply(n,arguments)}return a.fn=t,n.$on(e,a),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var a=0,i=e.length;a<i;a++)n.$off(e[a],t);return n}var s,r=n._events[e];if(!r)return n;if(!t)return n._events[e]=null,n;for(var o=r.length;o--;)if((s=r[o])===t||s.fn===t){r.splice(o,1);break}return n},e.prototype.$emit=function(e){var t=this,n=t._events[e];if(n){n=n.length>1?I(n):n;for(var a=I(arguments,1),i='event handler for "'+e+'"',s=0,r=n.length;s<r;s++)ze(n[s],t,a,t,i)}return t}}(An),function(e){e.prototype._update=function(e,t){var n=this,a=n.$el,i=n._vnode,s=en(n);n._vnode=e,n.$el=i?n.__patch__(i,e):n.__patch__(n.$el,e,t,!1),s(),a&&(a.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){sn(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||h(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),sn(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(An),function(e){Lt(e.prototype),e.prototype.$nextTick=function(e){return nt(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,a=n.render,i=n._parentVnode;i&&(t.$scopedSlots=Tt(i.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=i;try{Wt=t,e=a.call(t._renderProxy,t.$createElement)}catch(n){Ge(n,t,"render"),e=t._vnode}finally{Wt=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof me||(e=he()),e.parent=i,e}}(An);var Sn=[String,RegExp,Array],En={name:"keep-alive",abstract:!0,props:{include:Sn,exclude:Sn,max:[String,Number]},methods:{cacheVNode:function(){var e=this,t=e.cache,n=e.keys,a=e.vnodeToCache,i=e.keyToCache;if(a){var s=a.tag,r=a.componentInstance,o=a.componentOptions;t[i]={name:Rn(o),tag:s,componentInstance:r},n.push(i),this.max&&n.length>parseInt(this.max)&&On(t,n[0],n,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)On(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(t){Pn(e,(function(e){return Cn(t,e)}))})),this.$watch("exclude",(function(t){Pn(e,(function(e){return!Cn(t,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,t=Xt(e),n=t&&t.componentOptions;if(n){var a=Rn(n),i=this.include,s=this.exclude;if(i&&(!a||!Cn(i,a))||s&&a&&Cn(s,a))return t;var r=this.cache,o=this.keys,u=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;r[u]?(t.componentInstance=r[u].componentInstance,h(o,u),o.push(u)):(this.vnodeToCache=t,this.keyToCache=u),t.data.keepAlive=!0}return t||e&&e[0]}},Dn={KeepAlive:En};!function(e){var t={get:function(){return U}};Object.defineProperty(e,"config",t),e.util={warn:ue,extend:A,mergeOptions:Fe,defineReactive:Ie},e.set=Ae,e.delete=Re,e.nextTick=nt,e.observable=function(e){return xe(e),e},e.options=Object.create(null),F.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,A(e.options.components,Dn),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=I(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Fe(this.options,e),this}}(e),function(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,a=n.cid,i=e._Ctor||(e._Ctor={});if(i[a])return i[a];var s=e.name||n.options.name,r=function(e){this._init(e)};return(r.prototype=Object.create(n.prototype)).constructor=r,r.cid=t++,r.options=Fe(n.options,e),r.super=n,r.options.props&&function(e){var t=e.options.props;for(var n in t)vn(e.prototype,"_props",n)}(r),r.options.computed&&function(e){var t=e.options.computed;for(var n in t)gn(e.prototype,n,t[n])}(r),r.extend=n.extend,r.mixin=n.mixin,r.use=n.use,F.forEach((function(e){r[e]=n[e]})),s&&(r.options.components[s]=r),r.superOptions=n.options,r.extendOptions=e,r.sealedOptions=A({},r.options),i[a]=r,r}}(e),function(e){F.forEach((function(t){e[t]=function(e,n){return n?("component"===t&&u(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}))}(e)}(An),Object.defineProperty(An.prototype,"$isServer",{get:ae}),Object.defineProperty(An.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(An,"FunctionalRenderContext",{value:Ft}),An.version="2.6.14";var Ln=c("style,class"),Fn=c("input,textarea,option,select,progress"),Nn=function(e,t,n){return"value"===n&&Fn(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},Un=c("contenteditable,draggable,spellcheck"),Bn=c("events,caret,typing,plaintext-only"),$n=c("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),qn="http://www.w3.org/1999/xlink",jn=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Gn=function(e){return jn(e)?e.slice(6,e.length):""},zn=function(e){return null==e||!1===e};function Vn(e,t){return{staticClass:Wn(e.staticClass,t.staticClass),class:a(e.class)?[e.class,t.class]:t.class}}function Wn(e,t){return e?t?e+" "+t:e:t||""}function Hn(e){return Array.isArray(e)?function(e){for(var t,n="",i=0,s=e.length;i<s;i++)a(t=Hn(e[i]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):r(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var Xn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Kn=c("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Yn=c("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Jn=function(e){return Kn(e)||Yn(e)};function Qn(e){return Yn(e)?"svg":"math"===e?"math":void 0}var Zn=Object.create(null),ea=c("text,number,password,search,email,tel,url");function ta(e){return"string"==typeof e?document.querySelector(e)||document.createElement("div"):e}var na=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(e,t){return document.createElementNS(Xn[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),aa={create:function(e,t){ia(t)},update:function(e,t){e.data.ref!==t.data.ref&&(ia(e,!0),ia(t))},destroy:function(e){ia(e,!0)}};function ia(e,t){var n=e.data.ref;if(a(n)){var i=e.context,s=e.componentInstance||e.elm,r=i.$refs;t?Array.isArray(r[n])?h(r[n],s):r[n]===s&&(r[n]=void 0):e.data.refInFor?Array.isArray(r[n])?r[n].indexOf(s)<0&&r[n].push(s):r[n]=[s]:r[n]=s}}var sa=new me("",{},[]),ra=["create","activate","update","remove","destroy"];function oa(e,n){return e.key===n.key&&e.asyncFactory===n.asyncFactory&&(e.tag===n.tag&&e.isComment===n.isComment&&a(e.data)===a(n.data)&&function(e,t){if("input"!==e.tag)return!0;var n,i=a(n=e.data)&&a(n=n.attrs)&&n.type,s=a(n=t.data)&&a(n=n.attrs)&&n.type;return i===s||ea(i)&&ea(s)}(e,n)||i(e.isAsyncPlaceholder)&&t(n.asyncFactory.error))}function ua(e,t,n){var i,s,r={};for(i=t;i<=n;++i)a(s=e[i].key)&&(r[s]=i);return r}var pa={create:da,update:da,destroy:function(e){da(e,sa)}};function da(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,a,i,s=e===sa,r=t===sa,o=ya(e.data.directives,e.context),u=ya(t.data.directives,t.context),p=[],d=[];for(n in u)a=o[n],i=u[n],a?(i.oldValue=a.value,i.oldArg=a.arg,ma(i,"update",t,e),i.def&&i.def.componentUpdated&&d.push(i)):(ma(i,"bind",t,e),i.def&&i.def.inserted&&p.push(i));if(p.length){var l=function(){for(var n=0;n<p.length;n++)ma(p[n],"inserted",t,e)};s?pt(t,"insert",l):l()}if(d.length&&pt(t,"postpatch",(function(){for(var n=0;n<d.length;n++)ma(d[n],"componentUpdated",t,e)})),!s)for(n in o)u[n]||ma(o[n],"unbind",e,e,r)}(e,t)}var la=Object.create(null);function ya(e,t){var n,a,i=Object.create(null);if(!e)return i;for(n=0;n<e.length;n++)(a=e[n]).modifiers||(a.modifiers=la),i[ca(a)]=a,a.def=Ne(t.$options,"directives",a.name);return i}function ca(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function ma(e,t,n,a,i){var s=e.def&&e.def[t];if(s)try{s(n.elm,e,n,a,i)}catch(a){Ge(a,n.context,"directive "+e.name+" "+t+" hook")}}var fa=[aa,pa];function ha(e,n){var i=n.componentOptions;if(!(a(i)&&!1===i.Ctor.options.inheritAttrs||t(e.data.attrs)&&t(n.data.attrs))){var s,r,o=n.elm,u=e.data.attrs||{},p=n.data.attrs||{};for(s in a(p.__ob__)&&(p=n.data.attrs=A({},p)),p)r=p[s],u[s]!==r&&ba(o,s,r,n.data.pre);for(s in(K||J)&&p.value!==u.value&&ba(o,"value",p.value),u)t(p[s])&&(jn(s)?o.removeAttributeNS(qn,Gn(s)):Un(s)||o.removeAttribute(s))}}function ba(e,t,n,a){a||e.tagName.indexOf("-")>-1?Ta(e,t,n):$n(t)?zn(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):Un(t)?e.setAttribute(t,function(e,t){return zn(t)||"false"===t?"false":"contenteditable"===e&&Bn(t)?t:"true"}(t,n)):jn(t)?zn(n)?e.removeAttributeNS(qn,Gn(t)):e.setAttributeNS(qn,t,n):Ta(e,t,n)}function Ta(e,t,n){if(zn(n))e.removeAttribute(t);else{if(K&&!Y&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var a=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",a)};e.addEventListener("input",a),e.__ieph=!0}e.setAttribute(t,n)}}var va={create:ha,update:ha};function wa(e,n){var i=n.elm,s=n.data,r=e.data;if(!(t(s.staticClass)&&t(s.class)&&(t(r)||t(r.staticClass)&&t(r.class)))){var o=function(e){for(var t=e.data,n=e,i=e;a(i.componentInstance);)(i=i.componentInstance._vnode)&&i.data&&(t=Vn(i.data,t));for(;a(n=n.parent);)n&&n.data&&(t=Vn(t,n.data));return s=t.staticClass,r=t.class,a(s)||a(r)?Wn(s,Hn(r)):"";var s,r}(n),u=i._transitionClasses;a(u)&&(o=Wn(o,Hn(u))),o!==i._prevClass&&(i.setAttribute("class",o),i._prevClass=o)}}var ga,_a,ka,Ma,xa,Ia,Aa={create:wa,update:wa},Ra=/[\w).+\-_$\]]/;function Ca(e){var t,n,a,i,s,r=!1,o=!1,u=!1,p=!1,d=0,l=0,y=0,c=0;for(a=0;a<e.length;a++)if(n=t,t=e.charCodeAt(a),r)39===t&&92!==n&&(r=!1);else if(o)34===t&&92!==n&&(o=!1);else if(u)96===t&&92!==n&&(u=!1);else if(p)47===t&&92!==n&&(p=!1);else if(124!==t||124===e.charCodeAt(a+1)||124===e.charCodeAt(a-1)||d||l||y){switch(t){case 34:o=!0;break;case 39:r=!0;break;case 96:u=!0;break;case 40:y++;break;case 41:y--;break;case 91:l++;break;case 93:l--;break;case 123:d++;break;case 125:d--}if(47===t){for(var m=a-1,f=void 0;m>=0&&" "===(f=e.charAt(m));m--);f&&Ra.test(f)||(p=!0)}}else void 0===i?(c=a+1,i=e.slice(0,a).trim()):h();function h(){(s||(s=[])).push(e.slice(c,a).trim()),c=a+1}if(void 0===i?i=e.slice(0,a).trim():0!==c&&h(),s)for(a=0;a<s.length;a++)i=Pa(i,s[a]);return i}function Pa(e,t){var n=t.indexOf("(");if(n<0)return'_f("'+t+'")('+e+")";var a=t.slice(0,n),i=t.slice(n+1);return'_f("'+a+'")('+e+(")"!==i?","+i:i)}function Oa(e,t){console.error("[Vue compiler]: "+e)}function Sa(e,t){return e?e.map((function(e){return e[t]})).filter((function(e){return e})):[]}function Ea(e,t,n,a,i){(e.props||(e.props=[])).push(ja({name:t,value:n,dynamic:i},a)),e.plain=!1}function Da(e,t,n,a,i){(i?e.dynamicAttrs||(e.dynamicAttrs=[]):e.attrs||(e.attrs=[])).push(ja({name:t,value:n,dynamic:i},a)),e.plain=!1}function La(e,t,n,a){e.attrsMap[t]=n,e.attrsList.push(ja({name:t,value:n},a))}function Fa(e,t,n,a,i,s,r,o){(e.directives||(e.directives=[])).push(ja({name:t,rawName:n,value:a,arg:i,isDynamicArg:s,modifiers:r},o)),e.plain=!1}function Na(e,t,n){return n?"_p("+t+',"'+e+'")':e+t}function Ua(t,n,a,i,s,r,o,u){var p;(i=i||e).right?u?n="("+n+")==='click'?'contextmenu':("+n+")":"click"===n&&(n="contextmenu",delete i.right):i.middle&&(u?n="("+n+")==='click'?'mouseup':("+n+")":"click"===n&&(n="mouseup")),i.capture&&(delete i.capture,n=Na("!",n,u)),i.once&&(delete i.once,n=Na("~",n,u)),i.passive&&(delete i.passive,n=Na("&",n,u)),i.native?(delete i.native,p=t.nativeEvents||(t.nativeEvents={})):p=t.events||(t.events={});var d=ja({value:a.trim(),dynamic:u},o);i!==e&&(d.modifiers=i);var l=p[n];Array.isArray(l)?s?l.unshift(d):l.push(d):p[n]=l?s?[d,l]:[l,d]:d,t.plain=!1}function Ba(e,t,n){var a=$a(e,":"+t)||$a(e,"v-bind:"+t);if(null!=a)return Ca(a);if(!1!==n){var i=$a(e,t);if(null!=i)return JSON.stringify(i)}}function $a(e,t,n){var a;if(null!=(a=e.attrsMap[t]))for(var i=e.attrsList,s=0,r=i.length;s<r;s++)if(i[s].name===t){i.splice(s,1);break}return n&&delete e.attrsMap[t],a}function qa(e,t){for(var n=e.attrsList,a=0,i=n.length;a<i;a++){var s=n[a];if(t.test(s.name))return n.splice(a,1),s}}function ja(e,t){return t&&(null!=t.start&&(e.start=t.start),null!=t.end&&(e.end=t.end)),e}function Ga(e,t,n){var a=n||{},i=a.number,s="$$v";a.trim&&(s="(typeof $$v === 'string'? $$v.trim(): $$v)"),i&&(s="_n("+s+")");var r=za(t,s);e.model={value:"("+t+")",expression:JSON.stringify(t),callback:"function ($$v) {"+r+"}"}}function za(e,t){var n=function(e){if(e=e.trim(),ga=e.length,e.indexOf("[")<0||e.lastIndexOf("]")<ga-1)return(Ma=e.lastIndexOf("."))>-1?{exp:e.slice(0,Ma),key:'"'+e.slice(Ma+1)+'"'}:{exp:e,key:null};for(_a=e,Ma=xa=Ia=0;!Wa();)Ha(ka=Va())?Ka(ka):91===ka&&Xa(ka);return{exp:e.slice(0,xa),key:e.slice(xa+1,Ia)}}(e);return null===n.key?e+"="+t:"$set("+n.exp+", "+n.key+", "+t+")"}function Va(){return _a.charCodeAt(++Ma)}function Wa(){return Ma>=ga}function Ha(e){return 34===e||39===e}function Xa(e){var t=1;for(xa=Ma;!Wa();)if(Ha(e=Va()))Ka(e);else if(91===e&&t++,93===e&&t--,0===t){Ia=Ma;break}}function Ka(e){for(var t=e;!Wa()&&(e=Va())!==t;);}var Ya;function Ja(e,t,n){var a=Ya;return function i(){var s=t.apply(null,arguments);null!==s&&ei(e,i,n,a)}}var Qa=Xe&&!(Z&&Number(Z[1])<=53);function Za(e,t,n,a){if(Qa){var i=yn,s=t;t=s._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=i||e.timeStamp<=0||e.target.ownerDocument!==document)return s.apply(this,arguments)}}Ya.addEventListener(e,t,te?{capture:n,passive:a}:n)}function ei(e,t,n,a){(a||Ya).removeEventListener(e,t._wrapper||t,n)}function ti(e,n){if(!t(e.data.on)||!t(n.data.on)){var i=n.data.on||{},s=e.data.on||{};Ya=n.elm,function(e){if(a(e.__r)){var t=K?"change":"input";e[t]=[].concat(e.__r,e[t]||[]),delete e.__r}a(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(i),ut(i,s,Za,ei,Ja,n.context),Ya=void 0}}var ni,ai={create:ti,update:ti};function ii(e,n){if(!t(e.data.domProps)||!t(n.data.domProps)){var i,s,r=n.elm,o=e.data.domProps||{},u=n.data.domProps||{};for(i in a(u.__ob__)&&(u=n.data.domProps=A({},u)),o)i in u||(r[i]="");for(i in u){if(s=u[i],"textContent"===i||"innerHTML"===i){if(n.children&&(n.children.length=0),s===o[i])continue;1===r.childNodes.length&&r.removeChild(r.childNodes[0])}if("value"===i&&"PROGRESS"!==r.tagName){r._value=s;var p=t(s)?"":String(s);si(r,p)&&(r.value=p)}else if("innerHTML"===i&&Yn(r.tagName)&&t(r.innerHTML)){(ni=ni||document.createElement("div")).innerHTML="<svg>"+s+"</svg>";for(var d=ni.firstChild;r.firstChild;)r.removeChild(r.firstChild);for(;d.firstChild;)r.appendChild(d.firstChild)}else if(s!==o[i])try{r[i]=s}catch(e){}}}}function si(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,i=e._vModifiers;if(a(i)){if(i.number)return y(n)!==y(t);if(i.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var ri={create:ii,update:ii},oi=v((function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var a=e.split(n);a.length>1&&(t[a[0].trim()]=a[1].trim())}})),t}));function ui(e){var t=pi(e.style);return e.staticStyle?A(e.staticStyle,t):t}function pi(e){return Array.isArray(e)?R(e):"string"==typeof e?oi(e):e}var di,li=/^--/,yi=/\s*!important$/,ci=function(e,t,n){if(li.test(t))e.style.setProperty(t,n);else if(yi.test(n))e.style.setProperty(M(t),n.replace(yi,""),"important");else{var a=fi(t);if(Array.isArray(n))for(var i=0,s=n.length;i<s;i++)e.style[a]=n[i];else e.style[a]=n}},mi=["Webkit","Moz","ms"],fi=v((function(e){if(di=di||document.createElement("div").style,"filter"!==(e=g(e))&&e in di)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<mi.length;n++){var a=mi[n]+t;if(a in di)return a}}));function hi(e,n){var i=n.data,s=e.data;if(!(t(i.staticStyle)&&t(i.style)&&t(s.staticStyle)&&t(s.style))){var r,o,u=n.elm,p=s.staticStyle,d=s.normalizedStyle||s.style||{},l=p||d,y=pi(n.data.style)||{};n.data.normalizedStyle=a(y.__ob__)?A({},y):y;var c=function(e,t){for(var n,a={},i=e;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(n=ui(i.data))&&A(a,n);(n=ui(e.data))&&A(a,n);for(var s=e;s=s.parent;)s.data&&(n=ui(s.data))&&A(a,n);return a}(n);for(o in l)t(c[o])&&ci(u,o,"");for(o in c)(r=c[o])!==l[o]&&ci(u,o,null==r?"":r)}}var bi={create:hi,update:hi},Ti=/\s+/;function vi(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(Ti).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function wi(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(Ti).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",a=" "+t+" ";n.indexOf(a)>=0;)n=n.replace(a," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function gi(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&A(t,_i(e.name||"v")),A(t,e),t}return"string"==typeof e?_i(e):void 0}}var _i=v((function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}})),ki=V&&!Y,Mi="transition",xi="animation",Ii="transition",Ai="transitionend",Ri="animation",Ci="animationend";ki&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Ii="WebkitTransition",Ai="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Ri="WebkitAnimation",Ci="webkitAnimationEnd"));var Pi=V?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function Oi(e){Pi((function(){Pi(e)}))}function Si(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),vi(e,t))}function Ei(e,t){e._transitionClasses&&h(e._transitionClasses,t),wi(e,t)}function Di(e,t,n){var a=Fi(e,t),i=a.type,s=a.timeout,r=a.propCount;if(!i)return n();var o=i===Mi?Ai:Ci,u=0,p=function(){e.removeEventListener(o,d),n()},d=function(t){t.target===e&&++u>=r&&p()};setTimeout((function(){u<r&&p()}),s+1),e.addEventListener(o,d)}var Li=/\b(transform|all)(,|$)/;function Fi(e,t){var n,a=window.getComputedStyle(e),i=(a[Ii+"Delay"]||"").split(", "),s=(a[Ii+"Duration"]||"").split(", "),r=Ni(i,s),o=(a[Ri+"Delay"]||"").split(", "),u=(a[Ri+"Duration"]||"").split(", "),p=Ni(o,u),d=0,l=0;return t===Mi?r>0&&(n=Mi,d=r,l=s.length):t===xi?p>0&&(n=xi,d=p,l=u.length):l=(n=(d=Math.max(r,p))>0?r>p?Mi:xi:null)?n===Mi?s.length:u.length:0,{type:n,timeout:d,propCount:l,hasTransform:n===Mi&&Li.test(a[Ii+"Property"])}}function Ni(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,n){return Ui(t)+Ui(e[n])})))}function Ui(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Bi(e,n){var i=e.elm;a(i._leaveCb)&&(i._leaveCb.cancelled=!0,i._leaveCb());var s=gi(e.data.transition);if(!t(s)&&!a(i._enterCb)&&1===i.nodeType){for(var o=s.css,u=s.type,p=s.enterClass,d=s.enterToClass,l=s.enterActiveClass,c=s.appearClass,m=s.appearToClass,f=s.appearActiveClass,h=s.beforeEnter,b=s.enter,T=s.afterEnter,v=s.enterCancelled,w=s.beforeAppear,g=s.appear,_=s.afterAppear,k=s.appearCancelled,M=s.duration,x=Zt,I=Zt.$vnode;I&&I.parent;)x=I.context,I=I.parent;var A=!x._isMounted||!e.isRootInsert;if(!A||g||""===g){var R=A&&c?c:p,C=A&&f?f:l,P=A&&m?m:d,O=A&&w||h,S=A&&"function"==typeof g?g:b,E=A&&_||T,L=A&&k||v,F=y(r(M)?M.enter:M),N=!1!==o&&!Y,U=ji(S),B=i._enterCb=D((function(){N&&(Ei(i,P),Ei(i,C)),B.cancelled?(N&&Ei(i,R),L&&L(i)):E&&E(i),i._enterCb=null}));e.data.show||pt(e,"insert",(function(){var t=i.parentNode,n=t&&t._pending&&t._pending[e.key];n&&n.tag===e.tag&&n.elm._leaveCb&&n.elm._leaveCb(),S&&S(i,B)})),O&&O(i),N&&(Si(i,R),Si(i,C),Oi((function(){Ei(i,R),B.cancelled||(Si(i,P),U||(qi(F)?setTimeout(B,F):Di(i,u,B)))}))),e.data.show&&(n&&n(),S&&S(i,B)),N||U||B()}}}function $i(e,n){var i=e.elm;a(i._enterCb)&&(i._enterCb.cancelled=!0,i._enterCb());var s=gi(e.data.transition);if(t(s)||1!==i.nodeType)return n();if(!a(i._leaveCb)){var o=s.css,u=s.type,p=s.leaveClass,d=s.leaveToClass,l=s.leaveActiveClass,c=s.beforeLeave,m=s.leave,f=s.afterLeave,h=s.leaveCancelled,b=s.delayLeave,T=s.duration,v=!1!==o&&!Y,w=ji(m),g=y(r(T)?T.leave:T),_=i._leaveCb=D((function(){i.parentNode&&i.parentNode._pending&&(i.parentNode._pending[e.key]=null),v&&(Ei(i,d),Ei(i,l)),_.cancelled?(v&&Ei(i,p),h&&h(i)):(n(),f&&f(i)),i._leaveCb=null}));b?b(k):k()}function k(){_.cancelled||(!e.data.show&&i.parentNode&&((i.parentNode._pending||(i.parentNode._pending={}))[e.key]=e),c&&c(i),v&&(Si(i,p),Si(i,l),Oi((function(){Ei(i,p),_.cancelled||(Si(i,d),w||(qi(g)?setTimeout(_,g):Di(i,u,_)))}))),m&&m(i,_),v||w||_())}}function qi(e){return"number"==typeof e&&!isNaN(e)}function ji(e){if(t(e))return!1;var n=e.fns;return a(n)?ji(Array.isArray(n)?n[0]:n):(e._length||e.length)>1}function Gi(e,t){!0!==t.data.show&&Bi(t)}var zi=function(e){var n,r,o={},u=e.modules,p=e.nodeOps;for(n=0;n<ra.length;++n)for(o[ra[n]]=[],r=0;r<u.length;++r)a(u[r][ra[n]])&&o[ra[n]].push(u[r][ra[n]]);function d(e){var t=p.parentNode(e);a(t)&&p.removeChild(t,e)}function l(e,t,n,s,r,u,d){if(a(e.elm)&&a(u)&&(e=u[d]=Te(e)),e.isRootInsert=!r,!function(e,t,n,s){var r=e.data;if(a(r)){var u=a(e.componentInstance)&&r.keepAlive;if(a(r=r.hook)&&a(r=r.init)&&r(e,!1),a(e.componentInstance))return y(e,t),m(n,e.elm,s),i(u)&&function(e,t,n,i){for(var s,r=e;r.componentInstance;)if(a(s=(r=r.componentInstance._vnode).data)&&a(s=s.transition)){for(s=0;s<o.activate.length;++s)o.activate[s](sa,r);t.push(r);break}m(n,e.elm,i)}(e,t,n,s),!0}}(e,t,n,s)){var l=e.data,c=e.children,h=e.tag;a(h)?(e.elm=e.ns?p.createElementNS(e.ns,h):p.createElement(h,e),T(e),f(e,c,t),a(l)&&b(e,t),m(n,e.elm,s)):i(e.isComment)?(e.elm=p.createComment(e.text),m(n,e.elm,s)):(e.elm=p.createTextNode(e.text),m(n,e.elm,s))}}function y(e,t){a(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,h(e)?(b(e,t),T(e)):(ia(e),t.push(e))}function m(e,t,n){a(e)&&(a(n)?p.parentNode(n)===e&&p.insertBefore(e,t,n):p.appendChild(e,t))}function f(e,t,n){if(Array.isArray(t))for(var a=0;a<t.length;++a)l(t[a],n,e.elm,null,!0,t,a);else s(e.text)&&p.appendChild(e.elm,p.createTextNode(String(e.text)))}function h(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return a(e.tag)}function b(e,t){for(var i=0;i<o.create.length;++i)o.create[i](sa,e);a(n=e.data.hook)&&(a(n.create)&&n.create(sa,e),a(n.insert)&&t.push(e))}function T(e){var t;if(a(t=e.fnScopeId))p.setStyleScope(e.elm,t);else for(var n=e;n;)a(t=n.context)&&a(t=t.$options._scopeId)&&p.setStyleScope(e.elm,t),n=n.parent;a(t=Zt)&&t!==e.context&&t!==e.fnContext&&a(t=t.$options._scopeId)&&p.setStyleScope(e.elm,t)}function v(e,t,n,a,i,s){for(;a<=i;++a)l(n[a],s,e,t,!1,n,a)}function w(e){var t,n,i=e.data;if(a(i))for(a(t=i.hook)&&a(t=t.destroy)&&t(e),t=0;t<o.destroy.length;++t)o.destroy[t](e);if(a(t=e.children))for(n=0;n<e.children.length;++n)w(e.children[n])}function g(e,t,n){for(;t<=n;++t){var i=e[t];a(i)&&(a(i.tag)?(_(i),w(i)):d(i.elm))}}function _(e,t){if(a(t)||a(e.data)){var n,i=o.remove.length+1;for(a(t)?t.listeners+=i:t=function(e,t){function n(){0==--n.listeners&&d(e)}return n.listeners=t,n}(e.elm,i),a(n=e.componentInstance)&&a(n=n._vnode)&&a(n.data)&&_(n,t),n=0;n<o.remove.length;++n)o.remove[n](e,t);a(n=e.data.hook)&&a(n=n.remove)?n(e,t):t()}else d(e.elm)}function k(e,t,n,i){for(var s=n;s<i;s++){var r=t[s];if(a(r)&&oa(e,r))return s}}function M(e,n,s,r,u,d){if(e!==n){a(n.elm)&&a(r)&&(n=r[u]=Te(n));var y=n.elm=e.elm;if(i(e.isAsyncPlaceholder))a(n.asyncFactory.resolved)?A(e.elm,n,s):n.isAsyncPlaceholder=!0;else if(i(n.isStatic)&&i(e.isStatic)&&n.key===e.key&&(i(n.isCloned)||i(n.isOnce)))n.componentInstance=e.componentInstance;else{var c,m=n.data;a(m)&&a(c=m.hook)&&a(c=c.prepatch)&&c(e,n);var f=e.children,b=n.children;if(a(m)&&h(n)){for(c=0;c<o.update.length;++c)o.update[c](e,n);a(c=m.hook)&&a(c=c.update)&&c(e,n)}t(n.text)?a(f)&&a(b)?f!==b&&function(e,n,i,s,r){for(var o,u,d,y=0,c=0,m=n.length-1,f=n[0],h=n[m],b=i.length-1,T=i[0],w=i[b],_=!r;y<=m&&c<=b;)t(f)?f=n[++y]:t(h)?h=n[--m]:oa(f,T)?(M(f,T,s,i,c),f=n[++y],T=i[++c]):oa(h,w)?(M(h,w,s,i,b),h=n[--m],w=i[--b]):oa(f,w)?(M(f,w,s,i,b),_&&p.insertBefore(e,f.elm,p.nextSibling(h.elm)),f=n[++y],w=i[--b]):oa(h,T)?(M(h,T,s,i,c),_&&p.insertBefore(e,h.elm,f.elm),h=n[--m],T=i[++c]):(t(o)&&(o=ua(n,y,m)),t(u=a(T.key)?o[T.key]:k(T,n,y,m))?l(T,s,e,f.elm,!1,i,c):oa(d=n[u],T)?(M(d,T,s,i,c),n[u]=void 0,_&&p.insertBefore(e,d.elm,f.elm)):l(T,s,e,f.elm,!1,i,c),T=i[++c]);y>m?v(e,t(i[b+1])?null:i[b+1].elm,i,c,b,s):c>b&&g(n,y,m)}(y,f,b,s,d):a(b)?(a(e.text)&&p.setTextContent(y,""),v(y,null,b,0,b.length-1,s)):a(f)?g(f,0,f.length-1):a(e.text)&&p.setTextContent(y,""):e.text!==n.text&&p.setTextContent(y,n.text),a(m)&&a(c=m.hook)&&a(c=c.postpatch)&&c(e,n)}}}function x(e,t,n){if(i(n)&&a(e.parent))e.parent.data.pendingInsert=t;else for(var s=0;s<t.length;++s)t[s].data.hook.insert(t[s])}var I=c("attrs,class,staticClass,staticStyle,key");function A(e,t,n,s){var r,o=t.tag,u=t.data,p=t.children;if(s=s||u&&u.pre,t.elm=e,i(t.isComment)&&a(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(a(u)&&(a(r=u.hook)&&a(r=r.init)&&r(t,!0),a(r=t.componentInstance)))return y(t,n),!0;if(a(o)){if(a(p))if(e.hasChildNodes())if(a(r=u)&&a(r=r.domProps)&&a(r=r.innerHTML)){if(r!==e.innerHTML)return!1}else{for(var d=!0,l=e.firstChild,c=0;c<p.length;c++){if(!l||!A(l,p[c],n,s)){d=!1;break}l=l.nextSibling}if(!d||l)return!1}else f(t,p,n);if(a(u)){var m=!1;for(var h in u)if(!I(h)){m=!0,b(t,n);break}!m&&u.class&&it(u.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,n,s,r){if(!t(n)){var u,d=!1,y=[];if(t(e))d=!0,l(n,y);else{var c=a(e.nodeType);if(!c&&oa(e,n))M(e,n,y,null,null,r);else{if(c){if(1===e.nodeType&&e.hasAttribute(L)&&(e.removeAttribute(L),s=!0),i(s)&&A(e,n,y))return x(n,y,!0),e;u=e,e=new me(p.tagName(u).toLowerCase(),{},[],void 0,u)}var m=e.elm,f=p.parentNode(m);if(l(n,y,m._leaveCb?null:f,p.nextSibling(m)),a(n.parent))for(var b=n.parent,T=h(n);b;){for(var v=0;v<o.destroy.length;++v)o.destroy[v](b);if(b.elm=n.elm,T){for(var _=0;_<o.create.length;++_)o.create[_](sa,b);var k=b.data.hook.insert;if(k.merged)for(var I=1;I<k.fns.length;I++)k.fns[I]()}else ia(b);b=b.parent}a(f)?g([e],0,0):a(e.tag)&&w(e)}}return x(n,y,d),n.elm}a(e)&&w(e)}}({nodeOps:na,modules:[va,Aa,ai,ri,bi,V?{create:Gi,activate:Gi,remove:function(e,t){!0!==e.data.show?$i(e,t):t()}}:{}].concat(fa)});Y&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&Qi(e,"input")}));var Vi={inserted:function(e,t,n,a){"select"===n.tag?(a.elm&&!a.elm._vOptions?pt(n,"postpatch",(function(){Vi.componentUpdated(e,t,n)})):Wi(e,t,n.context),e._vOptions=[].map.call(e.options,Ki)):("textarea"===n.tag||ea(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",Yi),e.addEventListener("compositionend",Ji),e.addEventListener("change",Ji),Y&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){Wi(e,t,n.context);var a=e._vOptions,i=e._vOptions=[].map.call(e.options,Ki);i.some((function(e,t){return!S(e,a[t])}))&&(e.multiple?t.value.some((function(e){return Xi(e,i)})):t.value!==t.oldValue&&Xi(t.value,i))&&Qi(e,"change")}}};function Wi(e,t,n){Hi(e,t),(K||J)&&setTimeout((function(){Hi(e,t)}),0)}function Hi(e,t,n){var a=t.value,i=e.multiple;if(!i||Array.isArray(a)){for(var s,r,o=0,u=e.options.length;o<u;o++)if(r=e.options[o],i)s=E(a,Ki(r))>-1,r.selected!==s&&(r.selected=s);else if(S(Ki(r),a))return void(e.selectedIndex!==o&&(e.selectedIndex=o));i||(e.selectedIndex=-1)}}function Xi(e,t){return t.every((function(t){return!S(t,e)}))}function Ki(e){return"_value"in e?e._value:e.value}function Yi(e){e.target.composing=!0}function Ji(e){e.target.composing&&(e.target.composing=!1,Qi(e.target,"input"))}function Qi(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function Zi(e){return!e.componentInstance||e.data&&e.data.transition?e:Zi(e.componentInstance._vnode)}var es={bind:function(e,t,n){var a=t.value,i=(n=Zi(n)).data&&n.data.transition,s=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;a&&i?(n.data.show=!0,Bi(n,(function(){e.style.display=s}))):e.style.display=a?s:"none"},update:function(e,t,n){var a=t.value;!a!=!t.oldValue&&((n=Zi(n)).data&&n.data.transition?(n.data.show=!0,a?Bi(n,(function(){e.style.display=e.__vOriginalDisplay})):$i(n,(function(){e.style.display="none"}))):e.style.display=a?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,a,i){i||(e.style.display=e.__vOriginalDisplay)}},ts={model:Vi,show:es},ns={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function as(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?as(Xt(t.children)):e}function is(e){var t={},n=e.$options;for(var a in n.propsData)t[a]=e[a];var i=n._parentListeners;for(var s in i)t[g(s)]=i[s];return t}function ss(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var rs=function(e){return e.tag||bt(e)},os=function(e){return"show"===e.name},us={name:"transition",props:ns,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(rs)).length){var a=this.mode,i=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return i;var r=as(i);if(!r)return i;if(this._leaving)return ss(e,i);var o="__transition-"+this._uid+"-";r.key=null==r.key?r.isComment?o+"comment":o+r.tag:s(r.key)?0===String(r.key).indexOf(o)?r.key:o+r.key:r.key;var u=(r.data||(r.data={})).transition=is(this),p=this._vnode,d=as(p);if(r.data.directives&&r.data.directives.some(os)&&(r.data.show=!0),d&&d.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(r,d)&&!bt(d)&&(!d.componentInstance||!d.componentInstance._vnode.isComment)){var l=d.data.transition=A({},u);if("out-in"===a)return this._leaving=!0,pt(l,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),ss(e,i);if("in-out"===a){if(bt(r))return p;var y,c=function(){y()};pt(u,"afterEnter",c),pt(u,"enterCancelled",c),pt(l,"delayLeave",(function(e){y=e}))}}return i}}},ps=A({tag:String,moveClass:String},ns);delete ps.mode;var ds={props:ps,beforeMount:function(){var e=this,t=this._update;this._update=function(n,a){var i=en(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,i(),t.call(e,n,a)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),a=this.prevChildren=this.children,i=this.$slots.default||[],s=this.children=[],r=is(this),o=0;o<i.length;o++){var u=i[o];u.tag&&null!=u.key&&0!==String(u.key).indexOf("__vlist")&&(s.push(u),n[u.key]=u,(u.data||(u.data={})).transition=r)}if(a){for(var p=[],d=[],l=0;l<a.length;l++){var y=a[l];y.data.transition=r,y.data.pos=y.elm.getBoundingClientRect(),n[y.key]?p.push(y):d.push(y)}this.kept=e(t,null,p),this.removed=d}return e(t,null,s)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(ls),e.forEach(ys),e.forEach(cs),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var n=e.elm,a=n.style;Si(n,t),a.transform=a.WebkitTransform=a.transitionDuration="",n.addEventListener(Ai,n._moveCb=function e(a){a&&a.target!==n||a&&!/transform$/.test(a.propertyName)||(n.removeEventListener(Ai,e),n._moveCb=null,Ei(n,t))})}})))},methods:{hasMove:function(e,t){if(!ki)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){wi(n,e)})),vi(n,t),n.style.display="none",this.$el.appendChild(n);var a=Fi(n);return this.$el.removeChild(n),this._hasMove=a.hasTransform}}};function ls(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function ys(e){e.data.newPos=e.elm.getBoundingClientRect()}function cs(e){var t=e.data.pos,n=e.data.newPos,a=t.left-n.left,i=t.top-n.top;if(a||i){e.data.moved=!0;var s=e.elm.style;s.transform=s.WebkitTransform="translate("+a+"px,"+i+"px)",s.transitionDuration="0s"}}var ms={Transition:us,TransitionGroup:ds};An.config.mustUseProp=Nn,An.config.isReservedTag=Jn,An.config.isReservedAttr=Ln,An.config.getTagNamespace=Qn,An.config.isUnknownElement=function(e){if(!V)return!0;if(Jn(e))return!1;if(e=e.toLowerCase(),null!=Zn[e])return Zn[e];var t=document.createElement(e);return e.indexOf("-")>-1?Zn[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Zn[e]=/HTMLUnknownElement/.test(t.toString())},A(An.options.directives,ts),A(An.options.components,ms),An.prototype.__patch__=V?zi:C,An.prototype.$mount=function(e,t){return function(e,t,n){var a;return e.$el=t,e.$options.render||(e.$options.render=he),sn(e,"beforeMount"),a=function(){e._update(e._render(),n)},new bn(e,a,C,{before:function(){e._isMounted&&!e._isDestroyed&&sn(e,"beforeUpdate")}},!0),n=!1,null==e.$vnode&&(e._isMounted=!0,sn(e,"mounted")),e}(this,e=e&&V?ta(e):void 0,t)},V&&setTimeout((function(){U.devtools&&ie&&ie.emit("init",An)}),0);var fs,hs=/\{\{((?:.|\r?\n)+?)\}\}/g,bs=/[-.*+?^${}()|[\]\/\\]/g,Ts=v((function(e){var t=e[0].replace(bs,"\\$&"),n=e[1].replace(bs,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")})),vs={staticKeys:["staticClass"],transformNode:function(e,t){t.warn;var n=$a(e,"class");n&&(e.staticClass=JSON.stringify(n));var a=Ba(e,"class",!1);a&&(e.classBinding=a)},genData:function(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}},ws={staticKeys:["staticStyle"],transformNode:function(e,t){t.warn;var n=$a(e,"style");n&&(e.staticStyle=JSON.stringify(oi(n)));var a=Ba(e,"style",!1);a&&(e.styleBinding=a)},genData:function(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}},gs=c("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),_s=c("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),ks=c("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),Ms=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,xs=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+?\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,Is="[a-zA-Z_][\\-\\.0-9_a-zA-Z"+B.source+"]*",As="((?:"+Is+"\\:)?"+Is+")",Rs=new RegExp("^<"+As),Cs=/^\s*(\/?)>/,Ps=new RegExp("^<\\/"+As+"[^>]*>"),Os=/^<!DOCTYPE [^>]+>/i,Ss=/^<!\--/,Es=/^<!\[/,Ds=c("script,style,textarea",!0),Ls={},Fs={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},Ns=/&(?:lt|gt|quot|amp|#39);/g,Us=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,Bs=c("pre,textarea",!0),$s=function(e,t){return e&&Bs(e)&&"\n"===t[0]};function qs(e,t){var n=t?Us:Ns;return e.replace(n,(function(e){return Fs[e]}))}var js,Gs,zs,Vs,Ws,Hs,Xs,Ks,Ys=/^@|^v-on:/,Js=/^v-|^@|^:|^#/,Qs=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Zs=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,er=/^\(|\)$/g,tr=/^\[.*\]$/,nr=/:(.*)$/,ar=/^:|^\.|^v-bind:/,ir=/\.[^.\]]+(?=[^\]]*$)/g,sr=/^v-slot(:|$)|^#/,rr=/[\r\n]/,or=/[ \f\t\r\n]+/g,ur=v((function(e){return(fs=fs||document.createElement("div")).innerHTML=e,fs.textContent})),pr="_empty_";function dr(e,t,n){return{type:1,tag:e,attrsList:t,attrsMap:hr(t),rawAttrsMap:{},parent:n,children:[]}}function lr(e,t){var n;!function(e){var t=Ba(e,"key");t&&(e.key=t)}(e),e.plain=!e.key&&!e.scopedSlots&&!e.attrsList.length,function(e){var t=Ba(e,"ref");t&&(e.ref=t,e.refInFor=function(e){for(var t=e;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}(e))}(e),function(e){var t;"template"===e.tag?(t=$a(e,"scope"),e.slotScope=t||$a(e,"slot-scope")):(t=$a(e,"slot-scope"))&&(e.slotScope=t);var n=Ba(e,"slot");if(n&&(e.slotTarget='""'===n?'"default"':n,e.slotTargetDynamic=!(!e.attrsMap[":slot"]&&!e.attrsMap["v-bind:slot"]),"template"===e.tag||e.slotScope||Da(e,"slot",n,function(e,t){return e.rawAttrsMap[":slot"]||e.rawAttrsMap["v-bind:slot"]||e.rawAttrsMap.slot}(e))),"template"===e.tag){var a=qa(e,sr);if(a){var i=mr(a),s=i.name,r=i.dynamic;e.slotTarget=s,e.slotTargetDynamic=r,e.slotScope=a.value||pr}}else{var o=qa(e,sr);if(o){var u=e.scopedSlots||(e.scopedSlots={}),p=mr(o),d=p.name,l=p.dynamic,y=u[d]=dr("template",[],e);y.slotTarget=d,y.slotTargetDynamic=l,y.children=e.children.filter((function(e){if(!e.slotScope)return e.parent=y,!0})),y.slotScope=o.value||pr,e.children=[],e.plain=!1}}}(e),"slot"===(n=e).tag&&(n.slotName=Ba(n,"name")),function(e){var t;(t=Ba(e,"is"))&&(e.component=t),null!=$a(e,"inline-template")&&(e.inlineTemplate=!0)}(e);for(var a=0;a<zs.length;a++)e=zs[a](e,t)||e;return function(e){var t,n,a,i,s,r,o,u,p=e.attrsList;for(t=0,n=p.length;t<n;t++)if(a=i=p[t].name,s=p[t].value,Js.test(a))if(e.hasBindings=!0,(r=fr(a.replace(Js,"")))&&(a=a.replace(ir,"")),ar.test(a))a=a.replace(ar,""),s=Ca(s),(u=tr.test(a))&&(a=a.slice(1,-1)),r&&(r.prop&&!u&&"innerHtml"===(a=g(a))&&(a="innerHTML"),r.camel&&!u&&(a=g(a)),r.sync&&(o=za(s,"$event"),u?Ua(e,'"update:"+('+a+")",o,null,!1,0,p[t],!0):(Ua(e,"update:"+g(a),o,null,!1,0,p[t]),M(a)!==g(a)&&Ua(e,"update:"+M(a),o,null,!1,0,p[t])))),r&&r.prop||!e.component&&Xs(e.tag,e.attrsMap.type,a)?Ea(e,a,s,p[t],u):Da(e,a,s,p[t],u);else if(Ys.test(a))a=a.replace(Ys,""),(u=tr.test(a))&&(a=a.slice(1,-1)),Ua(e,a,s,r,!1,0,p[t],u);else{var d=(a=a.replace(Js,"")).match(nr),l=d&&d[1];u=!1,l&&(a=a.slice(0,-(l.length+1)),tr.test(l)&&(l=l.slice(1,-1),u=!0)),Fa(e,a,i,s,l,u,r,p[t])}else Da(e,a,JSON.stringify(s),p[t]),!e.component&&"muted"===a&&Xs(e.tag,e.attrsMap.type,a)&&Ea(e,a,"true",p[t])}(e),e}function yr(e){var t;if(t=$a(e,"v-for")){var n=function(e){var t=e.match(Qs);if(t){var n={};n.for=t[2].trim();var a=t[1].trim().replace(er,""),i=a.match(Zs);return i?(n.alias=a.replace(Zs,"").trim(),n.iterator1=i[1].trim(),i[2]&&(n.iterator2=i[2].trim())):n.alias=a,n}}(t);n&&A(e,n)}}function cr(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function mr(e){var t=e.name.replace(sr,"");return t||"#"!==e.name[0]&&(t="default"),tr.test(t)?{name:t.slice(1,-1),dynamic:!0}:{name:'"'+t+'"',dynamic:!1}}function fr(e){var t=e.match(ir);if(t){var n={};return t.forEach((function(e){n[e.slice(1)]=!0})),n}}function hr(e){for(var t={},n=0,a=e.length;n<a;n++)t[e[n].name]=e[n].value;return t}var br=/^xmlns:NS\d+/,Tr=/^NS\d+:/;function vr(e){return dr(e.tag,e.attrsList.slice(),e.parent)}var wr,gr,_r,kr=[vs,ws,{preTransformNode:function(e,t){if("input"===e.tag){var n,a=e.attrsMap;if(!a["v-model"])return;if((a[":type"]||a["v-bind:type"])&&(n=Ba(e,"type")),a.type||n||!a["v-bind"]||(n="("+a["v-bind"]+").type"),n){var i=$a(e,"v-if",!0),s=i?"&&("+i+")":"",r=null!=$a(e,"v-else",!0),o=$a(e,"v-else-if",!0),u=vr(e);yr(u),La(u,"type","checkbox"),lr(u,t),u.processed=!0,u.if="("+n+")==='checkbox'"+s,cr(u,{exp:u.if,block:u});var p=vr(e);$a(p,"v-for",!0),La(p,"type","radio"),lr(p,t),cr(u,{exp:"("+n+")==='radio'"+s,block:p});var d=vr(e);return $a(d,"v-for",!0),La(d,":type",n),lr(d,t),cr(u,{exp:i,block:d}),r?u.else=!0:o&&(u.elseif=o),u}}}}],Mr={model:function(e,t,n){var a=t.value,i=t.modifiers,s=e.tag,r=e.attrsMap.type;if(e.component)return Ga(e,a,i),!1;if("select"===s)!function(e,t,n){var a='var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"});";Ua(e,"change",a=a+" "+za(t,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),null,!0)}(e,a,i);else if("input"===s&&"checkbox"===r)!function(e,t,n){var a=n&&n.number,i=Ba(e,"value")||"null",s=Ba(e,"true-value")||"true",r=Ba(e,"false-value")||"false";Ea(e,"checked","Array.isArray("+t+")?_i("+t+","+i+")>-1"+("true"===s?":("+t+")":":_q("+t+","+s+")")),Ua(e,"change","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+s+"):("+r+");if(Array.isArray($$a)){var $$v="+(a?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+za(t,"$$a.concat([$$v])")+")}else{$$i>-1&&("+za(t,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+za(t,"$$c")+"}",null,!0)}(e,a,i);else if("input"===s&&"radio"===r)!function(e,t,n){var a=n&&n.number,i=Ba(e,"value")||"null";Ea(e,"checked","_q("+t+","+(i=a?"_n("+i+")":i)+")"),Ua(e,"change",za(t,i),null,!0)}(e,a,i);else if("input"===s||"textarea"===s)!function(e,t,n){var a=e.attrsMap.type,i=n||{},s=i.lazy,r=i.number,o=i.trim,u=!s&&"range"!==a,p=s?"change":"range"===a?"__r":"input",d="$event.target.value";o&&(d="$event.target.value.trim()"),r&&(d="_n("+d+")");var l=za(t,d);u&&(l="if($event.target.composing)return;"+l),Ea(e,"value","("+t+")"),Ua(e,p,l,null,!0),(o||r)&&Ua(e,"blur","$forceUpdate()")}(e,a,i);else if(!U.isReservedTag(s))return Ga(e,a,i),!1;return!0},text:function(e,t){t.value&&Ea(e,"textContent","_s("+t.value+")",t)},html:function(e,t){t.value&&Ea(e,"innerHTML","_s("+t.value+")",t)}},xr={expectHTML:!0,modules:kr,directives:Mr,isPreTag:function(e){return"pre"===e},isUnaryTag:gs,mustUseProp:Nn,canBeLeftOpenTag:_s,isReservedTag:Jn,getTagNamespace:Qn,staticKeys:(_r=kr,_r.reduce((function(e,t){return e.concat(t.staticKeys||[])}),[]).join(","))},Ir=v((function(e){return c("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(e?","+e:""))}));function Ar(e,t){e&&(wr=Ir(t.staticKeys||""),gr=t.isReservedTag||P,Rr(e),Cr(e,!1))}function Rr(e){if(e.static=function(e){return 2!==e.type&&(3===e.type||!(!e.pre&&(e.hasBindings||e.if||e.for||m(e.tag)||!gr(e.tag)||function(e){for(;e.parent;){if("template"!==(e=e.parent).tag)return!1;if(e.for)return!0}return!1}(e)||!Object.keys(e).every(wr))))}(e),1===e.type){if(!gr(e.tag)&&"slot"!==e.tag&&null==e.attrsMap["inline-template"])return;for(var t=0,n=e.children.length;t<n;t++){var a=e.children[t];Rr(a),a.static||(e.static=!1)}if(e.ifConditions)for(var i=1,s=e.ifConditions.length;i<s;i++){var r=e.ifConditions[i].block;Rr(r),r.static||(e.static=!1)}}}function Cr(e,t){if(1===e.type){if((e.static||e.once)&&(e.staticInFor=t),e.static&&e.children.length&&(1!==e.children.length||3!==e.children[0].type))return void(e.staticRoot=!0);if(e.staticRoot=!1,e.children)for(var n=0,a=e.children.length;n<a;n++)Cr(e.children[n],t||!!e.for);if(e.ifConditions)for(var i=1,s=e.ifConditions.length;i<s;i++)Cr(e.ifConditions[i].block,t)}}var Pr=/^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/,Or=/\([^)]*?\);*$/,Sr=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,Er={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},Dr={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},Lr=function(e){return"if("+e+")return null;"},Fr={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:Lr("$event.target !== $event.currentTarget"),ctrl:Lr("!$event.ctrlKey"),shift:Lr("!$event.shiftKey"),alt:Lr("!$event.altKey"),meta:Lr("!$event.metaKey"),left:Lr("'button' in $event && $event.button !== 0"),middle:Lr("'button' in $event && $event.button !== 1"),right:Lr("'button' in $event && $event.button !== 2")};function Nr(e,t){var n=t?"nativeOn:":"on:",a="",i="";for(var s in e){var r=Ur(e[s]);e[s]&&e[s].dynamic?i+=s+","+r+",":a+='"'+s+'":'+r+","}return a="{"+a.slice(0,-1)+"}",i?n+"_d("+a+",["+i.slice(0,-1)+"])":n+a}function Ur(e){if(!e)return"function(){}";if(Array.isArray(e))return"["+e.map((function(e){return Ur(e)})).join(",")+"]";var t=Sr.test(e.value),n=Pr.test(e.value),a=Sr.test(e.value.replace(Or,""));if(e.modifiers){var i="",s="",r=[];for(var o in e.modifiers)if(Fr[o])s+=Fr[o],Er[o]&&r.push(o);else if("exact"===o){var u=e.modifiers;s+=Lr(["ctrl","shift","alt","meta"].filter((function(e){return!u[e]})).map((function(e){return"$event."+e+"Key"})).join("||"))}else r.push(o);return r.length&&(i+=function(e){return"if(!$event.type.indexOf('key')&&"+e.map(Br).join("&&")+")return null;"}(r)),s&&(i+=s),"function($event){"+i+(t?"return "+e.value+".apply(null, arguments)":n?"return ("+e.value+").apply(null, arguments)":a?"return "+e.value:e.value)+"}"}return t||n?e.value:"function($event){"+(a?"return "+e.value:e.value)+"}"}function Br(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var n=Er[e],a=Dr[e];return"_k($event.keyCode,"+JSON.stringify(e)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(a)+")"}var $r={on:function(e,t){e.wrapListeners=function(e){return"_g("+e+","+t.value+")"}},bind:function(e,t){e.wrapData=function(n){return"_b("+n+",'"+e.tag+"',"+t.value+","+(t.modifiers&&t.modifiers.prop?"true":"false")+(t.modifiers&&t.modifiers.sync?",true":"")+")"}},cloak:C},qr=function(e){this.options=e,this.warn=e.warn||Oa,this.transforms=Sa(e.modules,"transformCode"),this.dataGenFns=Sa(e.modules,"genData"),this.directives=A(A({},$r),e.directives);var t=e.isReservedTag||P;this.maybeComponent=function(e){return!!e.component||!t(e.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function jr(e,t){var n=new qr(t);return{render:"with(this){return "+(e?"script"===e.tag?"null":Gr(e,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function Gr(e,t){if(e.parent&&(e.pre=e.pre||e.parent.pre),e.staticRoot&&!e.staticProcessed)return zr(e,t);if(e.once&&!e.onceProcessed)return Vr(e,t);if(e.for&&!e.forProcessed)return Xr(e,t);if(e.if&&!e.ifProcessed)return Wr(e,t);if("template"!==e.tag||e.slotTarget||t.pre){if("slot"===e.tag)return function(e,t){var n=e.slotName||'"default"',a=Qr(e,t),i="_t("+n+(a?",function(){return "+a+"}":""),s=e.attrs||e.dynamicAttrs?to((e.attrs||[]).concat(e.dynamicAttrs||[]).map((function(e){return{name:g(e.name),value:e.value,dynamic:e.dynamic}}))):null,r=e.attrsMap["v-bind"];return!s&&!r||a||(i+=",null"),s&&(i+=","+s),r&&(i+=(s?"":",null")+","+r),i+")"}(e,t);var n;if(e.component)n=function(e,t,n){var a=t.inlineTemplate?null:Qr(t,n,!0);return"_c("+e+","+Kr(t,n)+(a?","+a:"")+")"}(e.component,e,t);else{var a;(!e.plain||e.pre&&t.maybeComponent(e))&&(a=Kr(e,t));var i=e.inlineTemplate?null:Qr(e,t,!0);n="_c('"+e.tag+"'"+(a?","+a:"")+(i?","+i:"")+")"}for(var s=0;s<t.transforms.length;s++)n=t.transforms[s](e,n);return n}return Qr(e,t)||"void 0"}function zr(e,t){e.staticProcessed=!0;var n=t.pre;return e.pre&&(t.pre=e.pre),t.staticRenderFns.push("with(this){return "+Gr(e,t)+"}"),t.pre=n,"_m("+(t.staticRenderFns.length-1)+(e.staticInFor?",true":"")+")"}function Vr(e,t){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return Wr(e,t);if(e.staticInFor){for(var n="",a=e.parent;a;){if(a.for){n=a.key;break}a=a.parent}return n?"_o("+Gr(e,t)+","+t.onceId+++","+n+")":Gr(e,t)}return zr(e,t)}function Wr(e,t,n,a){return e.ifProcessed=!0,Hr(e.ifConditions.slice(),t,n,a)}function Hr(e,t,n,a){if(!e.length)return a||"_e()";var i=e.shift();return i.exp?"("+i.exp+")?"+s(i.block)+":"+Hr(e,t,n,a):""+s(i.block);function s(e){return n?n(e,t):e.once?Vr(e,t):Gr(e,t)}}function Xr(e,t,n,a){var i=e.for,s=e.alias,r=e.iterator1?","+e.iterator1:"",o=e.iterator2?","+e.iterator2:"";return e.forProcessed=!0,(a||"_l")+"(("+i+"),function("+s+r+o+"){return "+(n||Gr)(e,t)+"})"}function Kr(e,t){var n="{",a=function(e,t){var n=e.directives;if(n){var a,i,s,r,o="directives:[",u=!1;for(a=0,i=n.length;a<i;a++){s=n[a],r=!0;var p=t.directives[s.name];p&&(r=!!p(e,s,t.warn)),r&&(u=!0,o+='{name:"'+s.name+'",rawName:"'+s.rawName+'"'+(s.value?",value:("+s.value+"),expression:"+JSON.stringify(s.value):"")+(s.arg?",arg:"+(s.isDynamicArg?s.arg:'"'+s.arg+'"'):"")+(s.modifiers?",modifiers:"+JSON.stringify(s.modifiers):"")+"},")}return u?o.slice(0,-1)+"]":void 0}}(e,t);a&&(n+=a+","),e.key&&(n+="key:"+e.key+","),e.ref&&(n+="ref:"+e.ref+","),e.refInFor&&(n+="refInFor:true,"),e.pre&&(n+="pre:true,"),e.component&&(n+='tag:"'+e.tag+'",');for(var i=0;i<t.dataGenFns.length;i++)n+=t.dataGenFns[i](e);if(e.attrs&&(n+="attrs:"+to(e.attrs)+","),e.props&&(n+="domProps:"+to(e.props)+","),e.events&&(n+=Nr(e.events,!1)+","),e.nativeEvents&&(n+=Nr(e.nativeEvents,!0)+","),e.slotTarget&&!e.slotScope&&(n+="slot:"+e.slotTarget+","),e.scopedSlots&&(n+=function(e,t,n){var a=e.for||Object.keys(t).some((function(e){var n=t[e];return n.slotTargetDynamic||n.if||n.for||Yr(n)})),i=!!e.if;if(!a)for(var s=e.parent;s;){if(s.slotScope&&s.slotScope!==pr||s.for){a=!0;break}s.if&&(i=!0),s=s.parent}var r=Object.keys(t).map((function(e){return Jr(t[e],n)})).join(",");return"scopedSlots:_u(["+r+"]"+(a?",null,true":"")+(!a&&i?",null,false,"+function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return t>>>0}(r):"")+")"}(e,e.scopedSlots,t)+","),e.model&&(n+="model:{value:"+e.model.value+",callback:"+e.model.callback+",expression:"+e.model.expression+"},"),e.inlineTemplate){var s=function(e,t){var n=e.children[0];if(n&&1===n.type){var a=jr(n,t.options);return"inlineTemplate:{render:function(){"+a.render+"},staticRenderFns:["+a.staticRenderFns.map((function(e){return"function(){"+e+"}"})).join(",")+"]}"}}(e,t);s&&(n+=s+",")}return n=n.replace(/,$/,"")+"}",e.dynamicAttrs&&(n="_b("+n+',"'+e.tag+'",'+to(e.dynamicAttrs)+")"),e.wrapData&&(n=e.wrapData(n)),e.wrapListeners&&(n=e.wrapListeners(n)),n}function Yr(e){return 1===e.type&&("slot"===e.tag||e.children.some(Yr))}function Jr(e,t){var n=e.attrsMap["slot-scope"];if(e.if&&!e.ifProcessed&&!n)return Wr(e,t,Jr,"null");if(e.for&&!e.forProcessed)return Xr(e,t,Jr);var a=e.slotScope===pr?"":String(e.slotScope),i="function("+a+"){return "+("template"===e.tag?e.if&&n?"("+e.if+")?"+(Qr(e,t)||"undefined")+":undefined":Qr(e,t)||"undefined":Gr(e,t))+"}",s=a?"":",proxy:true";return"{key:"+(e.slotTarget||'"default"')+",fn:"+i+s+"}"}function Qr(e,t,n,a,i){var s=e.children;if(s.length){var r=s[0];if(1===s.length&&r.for&&"template"!==r.tag&&"slot"!==r.tag){var o=n?t.maybeComponent(r)?",1":",0":"";return""+(a||Gr)(r,t)+o}var u=n?function(e,t){for(var n=0,a=0;a<e.length;a++){var i=e[a];if(1===i.type){if(Zr(i)||i.ifConditions&&i.ifConditions.some((function(e){return Zr(e.block)}))){n=2;break}(t(i)||i.ifConditions&&i.ifConditions.some((function(e){return t(e.block)})))&&(n=1)}}return n}(s,t.maybeComponent):0,p=i||eo;return"["+s.map((function(e){return p(e,t)})).join(",")+"]"+(u?","+u:"")}}function Zr(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function eo(e,t){return 1===e.type?Gr(e,t):3===e.type&&e.isComment?function(e){return"_e("+JSON.stringify(e.text)+")"}(e):"_v("+(2===(n=e).type?n.expression:no(JSON.stringify(n.text)))+")";var n}function to(e){for(var t="",n="",a=0;a<e.length;a++){var i=e[a],s=no(i.value);i.dynamic?n+=i.name+","+s+",":t+='"'+i.name+'":'+s+","}return t="{"+t.slice(0,-1)+"}",n?"_d("+t+",["+n.slice(0,-1)+"])":t}function no(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}function ao(e,t){try{return new Function(e)}catch(n){return t.push({err:n,code:e}),C}}function io(e){var t=Object.create(null);return function(n,a,i){(a=A({},a)).warn,delete a.warn;var s=a.delimiters?String(a.delimiters)+n:n;if(t[s])return t[s];var r=e(n,a),o={},u=[];return o.render=ao(r.render,u),o.staticRenderFns=r.staticRenderFns.map((function(e){return ao(e,u)})),t[s]=o}}new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)");var so,ro,oo=(so=function(e,t){var n=function(e,t){js=t.warn||Oa,Hs=t.isPreTag||P,Xs=t.mustUseProp||P,Ks=t.getTagNamespace||P,t.isReservedTag,zs=Sa(t.modules,"transformNode"),Vs=Sa(t.modules,"preTransformNode"),Ws=Sa(t.modules,"postTransformNode"),Gs=t.delimiters;var n,a,i=[],s=!1!==t.preserveWhitespace,r=t.whitespace,o=!1,u=!1;function p(e){if(d(e),o||e.processed||(e=lr(e,t)),i.length||e===n||n.if&&(e.elseif||e.else)&&cr(n,{exp:e.elseif,block:e}),a&&!e.forbidden)if(e.elseif||e.else)r=e,p=function(e){for(var t=e.length;t--;){if(1===e[t].type)return e[t];e.pop()}}(a.children),p&&p.if&&cr(p,{exp:r.elseif,block:r});else{if(e.slotScope){var s=e.slotTarget||'"default"';(a.scopedSlots||(a.scopedSlots={}))[s]=e}a.children.push(e),e.parent=a}var r,p;e.children=e.children.filter((function(e){return!e.slotScope})),d(e),e.pre&&(o=!1),Hs(e.tag)&&(u=!1);for(var l=0;l<Ws.length;l++)Ws[l](e,t)}function d(e){if(!u)for(var t;(t=e.children[e.children.length-1])&&3===t.type&&" "===t.text;)e.children.pop()}return function(e,t){for(var n,a,i=[],s=t.expectHTML,r=t.isUnaryTag||P,o=t.canBeLeftOpenTag||P,u=0;e;){if(n=e,a&&Ds(a)){var p=0,d=a.toLowerCase(),l=Ls[d]||(Ls[d]=new RegExp("([\\s\\S]*?)(</"+d+"[^>]*>)","i")),y=e.replace(l,(function(e,n,a){return p=a.length,Ds(d)||"noscript"===d||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),$s(d,n)&&(n=n.slice(1)),t.chars&&t.chars(n),""}));u+=e.length-y.length,e=y,I(d,u-p,u)}else{var c=e.indexOf("<");if(0===c){if(Ss.test(e)){var m=e.indexOf("--\x3e");if(m>=0){t.shouldKeepComment&&t.comment(e.substring(4,m),u,u+m+3),k(m+3);continue}}if(Es.test(e)){var f=e.indexOf("]>");if(f>=0){k(f+2);continue}}var h=e.match(Os);if(h){k(h[0].length);continue}var b=e.match(Ps);if(b){var T=u;k(b[0].length),I(b[1],T,u);continue}var v=M();if(v){x(v),$s(v.tagName,e)&&k(1);continue}}var w=void 0,g=void 0,_=void 0;if(c>=0){for(g=e.slice(c);!(Ps.test(g)||Rs.test(g)||Ss.test(g)||Es.test(g)||(_=g.indexOf("<",1))<0);)c+=_,g=e.slice(c);w=e.substring(0,c)}c<0&&(w=e),w&&k(w.length),t.chars&&w&&t.chars(w,u-w.length,u)}if(e===n){t.chars&&t.chars(e);break}}function k(t){u+=t,e=e.substring(t)}function M(){var t=e.match(Rs);if(t){var n,a,i={tagName:t[1],attrs:[],start:u};for(k(t[0].length);!(n=e.match(Cs))&&(a=e.match(xs)||e.match(Ms));)a.start=u,k(a[0].length),a.end=u,i.attrs.push(a);if(n)return i.unarySlash=n[1],k(n[0].length),i.end=u,i}}function x(e){var n=e.tagName,u=e.unarySlash;s&&("p"===a&&ks(n)&&I(a),o(n)&&a===n&&I(n));for(var p=r(n)||!!u,d=e.attrs.length,l=new Array(d),y=0;y<d;y++){var c=e.attrs[y],m=c[3]||c[4]||c[5]||"",f="a"===n&&"href"===c[1]?t.shouldDecodeNewlinesForHref:t.shouldDecodeNewlines;l[y]={name:c[1],value:qs(m,f)}}p||(i.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:l,start:e.start,end:e.end}),a=n),t.start&&t.start(n,l,p,e.start,e.end)}function I(e,n,s){var r,o;if(null==n&&(n=u),null==s&&(s=u),e)for(o=e.toLowerCase(),r=i.length-1;r>=0&&i[r].lowerCasedTag!==o;r--);else r=0;if(r>=0){for(var p=i.length-1;p>=r;p--)t.end&&t.end(i[p].tag,n,s);i.length=r,a=r&&i[r-1].tag}else"br"===o?t.start&&t.start(e,[],!0,n,s):"p"===o&&(t.start&&t.start(e,[],!1,n,s),t.end&&t.end(e,n,s))}I()}(e,{warn:js,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,canBeLeftOpenTag:t.canBeLeftOpenTag,shouldDecodeNewlines:t.shouldDecodeNewlines,shouldDecodeNewlinesForHref:t.shouldDecodeNewlinesForHref,shouldKeepComment:t.comments,outputSourceRange:t.outputSourceRange,start:function(e,s,r,d,l){var y=a&&a.ns||Ks(e);K&&"svg"===y&&(s=function(e){for(var t=[],n=0;n<e.length;n++){var a=e[n];br.test(a.name)||(a.name=a.name.replace(Tr,""),t.push(a))}return t}(s));var c,m=dr(e,s,a);y&&(m.ns=y),"style"!==(c=m).tag&&("script"!==c.tag||c.attrsMap.type&&"text/javascript"!==c.attrsMap.type)||ae()||(m.forbidden=!0);for(var f=0;f<Vs.length;f++)m=Vs[f](m,t)||m;o||(function(e){null!=$a(e,"v-pre")&&(e.pre=!0)}(m),m.pre&&(o=!0)),Hs(m.tag)&&(u=!0),o?function(e){var t=e.attrsList,n=t.length;if(n)for(var a=e.attrs=new Array(n),i=0;i<n;i++)a[i]={name:t[i].name,value:JSON.stringify(t[i].value)},null!=t[i].start&&(a[i].start=t[i].start,a[i].end=t[i].end);else e.pre||(e.plain=!0)}(m):m.processed||(yr(m),function(e){var t=$a(e,"v-if");if(t)e.if=t,cr(e,{exp:t,block:e});else{null!=$a(e,"v-else")&&(e.else=!0);var n=$a(e,"v-else-if");n&&(e.elseif=n)}}(m),function(e){null!=$a(e,"v-once")&&(e.once=!0)}(m)),n||(n=m),r?p(m):(a=m,i.push(m))},end:function(e,t,n){var s=i[i.length-1];i.length-=1,a=i[i.length-1],p(s)},chars:function(e,t,n){if(a&&(!K||"textarea"!==a.tag||a.attrsMap.placeholder!==e)){var i,p,d,l=a.children;(e=u||e.trim()?"script"===(i=a).tag||"style"===i.tag?e:ur(e):l.length?r?"condense"===r&&rr.test(e)?"":" ":s?" ":"":"")&&(u||"condense"!==r||(e=e.replace(or," ")),!o&&" "!==e&&(p=function(e,t){var n=t?Ts(t):hs;if(n.test(e)){for(var a,i,s,r=[],o=[],u=n.lastIndex=0;a=n.exec(e);){(i=a.index)>u&&(o.push(s=e.slice(u,i)),r.push(JSON.stringify(s)));var p=Ca(a[1].trim());r.push("_s("+p+")"),o.push({"@binding":p}),u=i+a[0].length}return u<e.length&&(o.push(s=e.slice(u)),r.push(JSON.stringify(s))),{expression:r.join("+"),tokens:o}}}(e,Gs))?d={type:2,expression:p.expression,tokens:p.tokens,text:e}:" "===e&&l.length&&" "===l[l.length-1].text||(d={type:3,text:e}),d&&l.push(d))}},comment:function(e,t,n){if(a){var i={type:3,text:e,isComment:!0};a.children.push(i)}}}),n}(e.trim(),t);!1!==t.optimize&&Ar(n,t);var a=jr(n,t);return{ast:n,render:a.render,staticRenderFns:a.staticRenderFns}},function(e){function t(t,n){var a=Object.create(e),i=[],s=[];if(n)for(var r in n.modules&&(a.modules=(e.modules||[]).concat(n.modules)),n.directives&&(a.directives=A(Object.create(e.directives||null),n.directives)),n)"modules"!==r&&"directives"!==r&&(a[r]=n[r]);a.warn=function(e,t,n){(n?s:i).push(e)};var o=so(t.trim(),a);return o.errors=i,o.tips=s,o}return{compile:t,compileToFunctions:io(t)}}),uo=oo(xr),po=(uo.compile,uo.compileToFunctions);function lo(e){return(ro=ro||document.createElement("div")).innerHTML=e?'<a href="\n"/>':'<div a="\n"/>',ro.innerHTML.indexOf("&#10;")>0}var yo=!!V&&lo(!1),co=!!V&&lo(!0),mo=v((function(e){var t=ta(e);return t&&t.innerHTML})),fo=An.prototype.$mount;An.prototype.$mount=function(e,t){if((e=e&&ta(e))===document.body||e===document.documentElement)return this;var n=this.$options;if(!n.render){var a=n.template;if(a)if("string"==typeof a)"#"===a.charAt(0)&&(a=mo(a));else{if(!a.nodeType)return this;a=a.innerHTML}else e&&(a=function(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}(e));if(a){var i=po(a,{outputSourceRange:!1,shouldDecodeNewlines:yo,shouldDecodeNewlinesForHref:co,delimiters:n.delimiters,comments:n.comments},this),s=i.render,r=i.staticRenderFns;n.render=s,n.staticRenderFns=r}}return fo.call(this,e,t)},An.compile=po;const ho=An;function bo(e,t){for(var n in t)e[n]=t[n];return e}var To=/[!'()*]/g,vo=function(e){return"%"+e.charCodeAt(0).toString(16)},wo=/%2C/g,go=function(e){return encodeURIComponent(e).replace(To,vo).replace(wo,",")};function _o(e){try{return decodeURIComponent(e)}catch(e){}return e}var ko=function(e){return null==e||"object"==typeof e?e:String(e)};function Mo(e){var t={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var n=e.replace(/\+/g," ").split("="),a=_o(n.shift()),i=n.length>0?_o(n.join("=")):null;void 0===t[a]?t[a]=i:Array.isArray(t[a])?t[a].push(i):t[a]=[t[a],i]})),t):t}function xo(e){var t=e?Object.keys(e).map((function(t){var n=e[t];if(void 0===n)return"";if(null===n)return go(t);if(Array.isArray(n)){var a=[];return n.forEach((function(e){void 0!==e&&(null===e?a.push(go(t)):a.push(go(t)+"="+go(e)))})),a.join("&")}return go(t)+"="+go(n)})).filter((function(e){return e.length>0})).join("&"):null;return t?"?"+t:""}var Io=/\/?$/;function Ao(e,t,n,a){var i=a&&a.options.stringifyQuery,s=t.query||{};try{s=Ro(s)}catch(e){}var r={name:t.name||e&&e.name,meta:e&&e.meta||{},path:t.path||"/",hash:t.hash||"",query:s,params:t.params||{},fullPath:Oo(t,i),matched:e?Po(e):[]};return n&&(r.redirectedFrom=Oo(n,i)),Object.freeze(r)}function Ro(e){if(Array.isArray(e))return e.map(Ro);if(e&&"object"==typeof e){var t={};for(var n in e)t[n]=Ro(e[n]);return t}return e}var Co=Ao(null,{path:"/"});function Po(e){for(var t=[];e;)t.unshift(e),e=e.parent;return t}function Oo(e,t){var n=e.path,a=e.query;void 0===a&&(a={});var i=e.hash;return void 0===i&&(i=""),(n||"/")+(t||xo)(a)+i}function So(e,t,n){return t===Co?e===t:!!t&&(e.path&&t.path?e.path.replace(Io,"")===t.path.replace(Io,"")&&(n||e.hash===t.hash&&Eo(e.query,t.query)):!(!e.name||!t.name)&&e.name===t.name&&(n||e.hash===t.hash&&Eo(e.query,t.query)&&Eo(e.params,t.params)))}function Eo(e,t){if(void 0===e&&(e={}),void 0===t&&(t={}),!e||!t)return e===t;var n=Object.keys(e).sort(),a=Object.keys(t).sort();return n.length===a.length&&n.every((function(n,i){var s=e[n];if(a[i]!==n)return!1;var r=t[n];return null==s||null==r?s===r:"object"==typeof s&&"object"==typeof r?Eo(s,r):String(s)===String(r)}))}function Do(e){for(var t=0;t<e.matched.length;t++){var n=e.matched[t];for(var a in n.instances){var i=n.instances[a],s=n.enteredCbs[a];if(i&&s){delete n.enteredCbs[a];for(var r=0;r<s.length;r++)i._isBeingDestroyed||s[r](i)}}}}var Lo={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,t){var n=t.props,a=t.children,i=t.parent,s=t.data;s.routerView=!0;for(var r=i.$createElement,o=n.name,u=i.$route,p=i._routerViewCache||(i._routerViewCache={}),d=0,l=!1;i&&i._routerRoot!==i;){var y=i.$vnode?i.$vnode.data:{};y.routerView&&d++,y.keepAlive&&i._directInactive&&i._inactive&&(l=!0),i=i.$parent}if(s.routerViewDepth=d,l){var c=p[o],m=c&&c.component;return m?(c.configProps&&Fo(m,s,c.route,c.configProps),r(m,s,a)):r()}var f=u.matched[d],h=f&&f.components[o];if(!f||!h)return p[o]=null,r();p[o]={component:h},s.registerRouteInstance=function(e,t){var n=f.instances[o];(t&&n!==e||!t&&n===e)&&(f.instances[o]=t)},(s.hook||(s.hook={})).prepatch=function(e,t){f.instances[o]=t.componentInstance},s.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==f.instances[o]&&(f.instances[o]=e.componentInstance),Do(u)};var b=f.props&&f.props[o];return b&&(bo(p[o],{route:u,configProps:b}),Fo(h,s,u,b)),r(h,s,a)}};function Fo(e,t,n,a){var i=t.props=function(e,t){switch(typeof t){case"undefined":return;case"object":return t;case"function":return t(e);case"boolean":return t?e.params:void 0}}(n,a);if(i){i=t.props=bo({},i);var s=t.attrs=t.attrs||{};for(var r in i)e.props&&r in e.props||(s[r]=i[r],delete i[r])}}function No(e,t,n){var a=e.charAt(0);if("/"===a)return e;if("?"===a||"#"===a)return t+e;var i=t.split("/");n&&i[i.length-1]||i.pop();for(var s=e.replace(/^\//,"").split("/"),r=0;r<s.length;r++){var o=s[r];".."===o?i.pop():"."!==o&&i.push(o)}return""!==i[0]&&i.unshift(""),i.join("/")}function Uo(e){return e.replace(/\/(?:\s*\/)+/g,"/")}var Bo=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},$o=function e(t,n,a){return Bo(n)||(a=n||a,n=[]),a=a||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var a=0;a<n.length;a++)t.push({name:a,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Jo(e,t)}(t,n):Bo(t)?function(t,n,a){for(var i=[],s=0;s<t.length;s++)i.push(e(t[s],n,a).source);return Jo(new RegExp("(?:"+i.join("|")+")",Qo(a)),n)}(t,n,a):function(e,t,n){return Zo(Vo(e,n),t,n)}(t,n,a)},qo=Vo,jo=Xo,Go=Zo,zo=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Vo(e,t){for(var n,a=[],i=0,s=0,r="",o=t&&t.delimiter||"/";null!=(n=zo.exec(e));){var u=n[0],p=n[1],d=n.index;if(r+=e.slice(s,d),s=d+u.length,p)r+=p[1];else{var l=e[s],y=n[2],c=n[3],m=n[4],f=n[5],h=n[6],b=n[7];r&&(a.push(r),r="");var T=null!=y&&null!=l&&l!==y,v="+"===h||"*"===h,w="?"===h||"*"===h,g=n[2]||o,_=m||f;a.push({name:c||i++,prefix:y||"",delimiter:g,optional:w,repeat:v,partial:T,asterisk:!!b,pattern:_?Yo(_):b?".*":"[^"+Ko(g)+"]+?"})}}return s<e.length&&(r+=e.substr(s)),r&&a.push(r),a}function Wo(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function Ho(e){return encodeURI(e).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function Xo(e,t){for(var n=new Array(e.length),a=0;a<e.length;a++)"object"==typeof e[a]&&(n[a]=new RegExp("^(?:"+e[a].pattern+")$",Qo(t)));return function(t,a){for(var i="",s=t||{},r=(a||{}).pretty?Wo:encodeURIComponent,o=0;o<e.length;o++){var u=e[o];if("string"!=typeof u){var p,d=s[u.name];if(null==d){if(u.optional){u.partial&&(i+=u.prefix);continue}throw new TypeError('Expected "'+u.name+'" to be defined')}if(Bo(d)){if(!u.repeat)throw new TypeError('Expected "'+u.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(u.optional)continue;throw new TypeError('Expected "'+u.name+'" to not be empty')}for(var l=0;l<d.length;l++){if(p=r(d[l]),!n[o].test(p))throw new TypeError('Expected all "'+u.name+'" to match "'+u.pattern+'", but received `'+JSON.stringify(p)+"`");i+=(0===l?u.prefix:u.delimiter)+p}}else{if(p=u.asterisk?Ho(d):r(d),!n[o].test(p))throw new TypeError('Expected "'+u.name+'" to match "'+u.pattern+'", but received "'+p+'"');i+=u.prefix+p}}else i+=u}return i}}function Ko(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function Yo(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function Jo(e,t){return e.keys=t,e}function Qo(e){return e&&e.sensitive?"":"i"}function Zo(e,t,n){Bo(t)||(n=t||n,t=[]);for(var a=(n=n||{}).strict,i=!1!==n.end,s="",r=0;r<e.length;r++){var o=e[r];if("string"==typeof o)s+=Ko(o);else{var u=Ko(o.prefix),p="(?:"+o.pattern+")";t.push(o),o.repeat&&(p+="(?:"+u+p+")*"),s+=p=o.optional?o.partial?u+"("+p+")?":"(?:"+u+"("+p+"))?":u+"("+p+")"}}var d=Ko(n.delimiter||"/"),l=s.slice(-d.length)===d;return a||(s=(l?s.slice(0,-d.length):s)+"(?:"+d+"(?=$))?"),s+=i?"$":a&&l?"":"(?="+d+"|$)",Jo(new RegExp("^"+s,Qo(n)),t)}$o.parse=qo,$o.compile=function(e,t){return Xo(Vo(e,t),t)},$o.tokensToFunction=jo,$o.tokensToRegExp=Go;var eu=Object.create(null);function tu(e,t,n){t=t||{};try{var a=eu[e]||(eu[e]=$o.compile(e));return"string"==typeof t.pathMatch&&(t[0]=t.pathMatch),a(t,{pretty:!0})}catch(e){return""}finally{delete t[0]}}function nu(e,t,n,a){var i="string"==typeof e?{path:e}:e;if(i._normalized)return i;if(i.name){var s=(i=bo({},e)).params;return s&&"object"==typeof s&&(i.params=bo({},s)),i}if(!i.path&&i.params&&t){(i=bo({},i))._normalized=!0;var r=bo(bo({},t.params),i.params);if(t.name)i.name=t.name,i.params=r;else if(t.matched.length){var o=t.matched[t.matched.length-1].path;i.path=tu(o,r,t.path)}return i}var u=function(e){var t="",n="",a=e.indexOf("#");a>=0&&(t=e.slice(a),e=e.slice(0,a));var i=e.indexOf("?");return i>=0&&(n=e.slice(i+1),e=e.slice(0,i)),{path:e,query:n,hash:t}}(i.path||""),p=t&&t.path||"/",d=u.path?No(u.path,p,n||i.append):p,l=function(e,t,n){void 0===t&&(t={});var a,i=n||Mo;try{a=i(e||"")}catch(e){a={}}for(var s in t){var r=t[s];a[s]=Array.isArray(r)?r.map(ko):ko(r)}return a}(u.query,i.query,a&&a.options.parseQuery),y=i.hash||u.hash;return y&&"#"!==y.charAt(0)&&(y="#"+y),{_normalized:!0,path:d,query:l,hash:y}}var au,iu=function(){},su={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(e){var t=this,n=this.$router,a=this.$route,i=n.resolve(this.to,a,this.append),s=i.location,r=i.route,o=i.href,u={},p=n.options.linkActiveClass,d=n.options.linkExactActiveClass,l=null==p?"router-link-active":p,y=null==d?"router-link-exact-active":d,c=null==this.activeClass?l:this.activeClass,m=null==this.exactActiveClass?y:this.exactActiveClass,f=r.redirectedFrom?Ao(null,nu(r.redirectedFrom),null,n):r;u[m]=So(a,f,this.exactPath),u[c]=this.exact||this.exactPath?u[m]:function(e,t){return 0===e.path.replace(Io,"/").indexOf(t.path.replace(Io,"/"))&&(!t.hash||e.hash===t.hash)&&function(e,t){for(var n in t)if(!(n in e))return!1;return!0}(e.query,t.query)}(a,f);var h=u[m]?this.ariaCurrentValue:null,b=function(e){ru(e)&&(t.replace?n.replace(s,iu):n.push(s,iu))},T={click:ru};Array.isArray(this.event)?this.event.forEach((function(e){T[e]=b})):T[this.event]=b;var v={class:u},w=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:o,route:r,navigate:b,isActive:u[c],isExactActive:u[m]});if(w){if(1===w.length)return w[0];if(w.length>1||!w.length)return 0===w.length?e():e("span",{},w)}if("a"===this.tag)v.on=T,v.attrs={href:o,"aria-current":h};else{var g=ou(this.$slots.default);if(g){g.isStatic=!1;var _=g.data=bo({},g.data);for(var k in _.on=_.on||{},_.on){var M=_.on[k];k in T&&(_.on[k]=Array.isArray(M)?M:[M])}for(var x in T)x in _.on?_.on[x].push(T[x]):_.on[x]=b;var I=g.data.attrs=bo({},g.data.attrs);I.href=o,I["aria-current"]=h}else v.on=T}return e(this.tag,v,this.$slots.default)}};function ru(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}function ou(e){if(e)for(var t,n=0;n<e.length;n++){if("a"===(t=e[n]).tag)return t;if(t.children&&(t=ou(t.children)))return t}}var uu="undefined"!=typeof window;function pu(e,t,n,a,i){var s=t||[],r=n||Object.create(null),o=a||Object.create(null);e.forEach((function(e){du(s,r,o,e,i)}));for(var u=0,p=s.length;u<p;u++)"*"===s[u]&&(s.push(s.splice(u,1)[0]),p--,u--);return{pathList:s,pathMap:r,nameMap:o}}function du(e,t,n,a,i,s){var r=a.path,o=a.name,u=a.pathToRegexpOptions||{},p=function(e,t,n){return n||(e=e.replace(/\/$/,"")),"/"===e[0]||null==t?e:Uo(t.path+"/"+e)}(r,i,u.strict);"boolean"==typeof a.caseSensitive&&(u.sensitive=a.caseSensitive);var d={path:p,regex:lu(p,u),components:a.components||{default:a.component},alias:a.alias?"string"==typeof a.alias?[a.alias]:a.alias:[],instances:{},enteredCbs:{},name:o,parent:i,matchAs:s,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};if(a.children&&a.children.forEach((function(a){var i=s?Uo(s+"/"+a.path):void 0;du(e,t,n,a,d,i)})),t[d.path]||(e.push(d.path),t[d.path]=d),void 0!==a.alias)for(var l=Array.isArray(a.alias)?a.alias:[a.alias],y=0;y<l.length;++y){var c={path:l[y],children:a.children};du(e,t,n,c,i,d.path||"/")}o&&(n[o]||(n[o]=d))}function lu(e,t){return $o(e,[],t)}function yu(e,t){var n=pu(e),a=n.pathList,i=n.pathMap,s=n.nameMap;function r(e,n,r){var u=nu(e,n,!1,t),p=u.name;if(p){var d=s[p];if(!d)return o(null,u);var l=d.regex.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}));if("object"!=typeof u.params&&(u.params={}),n&&"object"==typeof n.params)for(var y in n.params)!(y in u.params)&&l.indexOf(y)>-1&&(u.params[y]=n.params[y]);return u.path=tu(d.path,u.params),o(d,u,r)}if(u.path){u.params={};for(var c=0;c<a.length;c++){var m=a[c],f=i[m];if(cu(f.regex,u.path,u.params))return o(f,u,r)}}return o(null,u)}function o(e,n,a){return e&&e.redirect?function(e,n){var a=e.redirect,i="function"==typeof a?a(Ao(e,n,null,t)):a;if("string"==typeof i&&(i={path:i}),!i||"object"!=typeof i)return o(null,n);var u=i,p=u.name,d=u.path,l=n.query,y=n.hash,c=n.params;if(l=u.hasOwnProperty("query")?u.query:l,y=u.hasOwnProperty("hash")?u.hash:y,c=u.hasOwnProperty("params")?u.params:c,p)return s[p],r({_normalized:!0,name:p,query:l,hash:y,params:c},void 0,n);if(d){var m=function(e,t){return No(e,t.parent?t.parent.path:"/",!0)}(d,e);return r({_normalized:!0,path:tu(m,c),query:l,hash:y},void 0,n)}return o(null,n)}(e,a||n):e&&e.matchAs?function(e,t,n){var a=r({_normalized:!0,path:tu(n,t.params)});if(a){var i=a.matched,s=i[i.length-1];return t.params=a.params,o(s,t)}return o(null,t)}(0,n,e.matchAs):Ao(e,n,a,t)}return{match:r,addRoute:function(e,t){var n="object"!=typeof e?s[e]:void 0;pu([t||e],a,i,s,n),n&&n.alias.length&&pu(n.alias.map((function(e){return{path:e,children:[t]}})),a,i,s,n)},getRoutes:function(){return a.map((function(e){return i[e]}))},addRoutes:function(e){pu(e,a,i,s)}}}function cu(e,t,n){var a=t.match(e);if(!a)return!1;if(!n)return!0;for(var i=1,s=a.length;i<s;++i){var r=e.keys[i-1];r&&(n[r.name||"pathMatch"]="string"==typeof a[i]?_o(a[i]):a[i])}return!0}var mu=uu&&window.performance&&window.performance.now?window.performance:Date;function fu(){return mu.now().toFixed(3)}var hu=fu();function bu(){return hu}function Tu(e){return hu=e}var vu=Object.create(null);function wu(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var e=window.location.protocol+"//"+window.location.host,t=window.location.href.replace(e,""),n=bo({},window.history.state);return n.key=bu(),window.history.replaceState(n,"",t),window.addEventListener("popstate",ku),function(){window.removeEventListener("popstate",ku)}}function gu(e,t,n,a){if(e.app){var i=e.options.scrollBehavior;i&&e.app.$nextTick((function(){var s=function(){var e=bu();if(e)return vu[e]}(),r=i.call(e,t,n,a?s:null);r&&("function"==typeof r.then?r.then((function(e){Ru(e,s)})).catch((function(e){})):Ru(r,s))}))}}function _u(){var e=bu();e&&(vu[e]={x:window.pageXOffset,y:window.pageYOffset})}function ku(e){_u(),e.state&&e.state.key&&Tu(e.state.key)}function Mu(e){return Iu(e.x)||Iu(e.y)}function xu(e){return{x:Iu(e.x)?e.x:window.pageXOffset,y:Iu(e.y)?e.y:window.pageYOffset}}function Iu(e){return"number"==typeof e}var Au=/^#\d/;function Ru(e,t){var n,a="object"==typeof e;if(a&&"string"==typeof e.selector){var i=Au.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(i){var s=e.offset&&"object"==typeof e.offset?e.offset:{};t=function(e,t){var n=document.documentElement.getBoundingClientRect(),a=e.getBoundingClientRect();return{x:a.left-n.left-t.x,y:a.top-n.top-t.y}}(i,s={x:Iu((n=s).x)?n.x:0,y:Iu(n.y)?n.y:0})}else Mu(e)&&(t=xu(e))}else a&&Mu(e)&&(t=xu(e));t&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:t.x,top:t.y,behavior:e.behavior}):window.scrollTo(t.x,t.y))}var Cu,Pu=uu&&(-1===(Cu=window.navigator.userAgent).indexOf("Android 2.")&&-1===Cu.indexOf("Android 4.0")||-1===Cu.indexOf("Mobile Safari")||-1!==Cu.indexOf("Chrome")||-1!==Cu.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState;function Ou(e,t){_u();var n=window.history;try{if(t){var a=bo({},n.state);a.key=bu(),n.replaceState(a,"",e)}else n.pushState({key:Tu(fu())},"",e)}catch(n){window.location[t?"replace":"assign"](e)}}function Su(e){Ou(e,!0)}function Eu(e,t,n){var a=function(i){i>=e.length?n():e[i]?t(e[i],(function(){a(i+1)})):a(i+1)};a(0)}var Du={redirected:2,aborted:4,cancelled:8,duplicated:16};function Lu(e,t){return Fu(e,t,Du.cancelled,'Navigation cancelled from "'+e.fullPath+'" to "'+t.fullPath+'" with a new navigation.')}function Fu(e,t,n,a){var i=new Error(a);return i._isRouter=!0,i.from=e,i.to=t,i.type=n,i}var Nu=["params","query","hash"];function Uu(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function Bu(e,t){return Uu(e)&&e._isRouter&&(null==t||e.type===t)}function $u(e,t){return qu(e.map((function(e){return Object.keys(e.components).map((function(n){return t(e.components[n],e.instances[n],e,n)}))})))}function qu(e){return Array.prototype.concat.apply([],e)}var ju="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Gu(e){var t=!1;return function(){for(var n=[],a=arguments.length;a--;)n[a]=arguments[a];if(!t)return t=!0,e.apply(this,n)}}var zu=function(e,t){this.router=e,this.base=function(e){if(!e)if(uu){var t=document.querySelector("base");e=(e=t&&t.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";return"/"!==e.charAt(0)&&(e="/"+e),e.replace(/\/$/,"")}(t),this.current=Co,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Vu(e,t,n,a){var i=$u(e,(function(e,a,i,s){var r=function(e,t){return"function"!=typeof e&&(e=au.extend(e)),e.options[t]}(e,t);if(r)return Array.isArray(r)?r.map((function(e){return n(e,a,i,s)})):n(r,a,i,s)}));return qu(a?i.reverse():i)}function Wu(e,t){if(t)return function(){return e.apply(t,arguments)}}zu.prototype.listen=function(e){this.cb=e},zu.prototype.onReady=function(e,t){this.ready?e():(this.readyCbs.push(e),t&&this.readyErrorCbs.push(t))},zu.prototype.onError=function(e){this.errorCbs.push(e)},zu.prototype.transitionTo=function(e,t,n){var a,i=this;try{a=this.router.match(e,this.current)}catch(e){throw this.errorCbs.forEach((function(t){t(e)})),e}var s=this.current;this.confirmTransition(a,(function(){i.updateRoute(a),t&&t(a),i.ensureURL(),i.router.afterHooks.forEach((function(e){e&&e(a,s)})),i.ready||(i.ready=!0,i.readyCbs.forEach((function(e){e(a)})))}),(function(e){n&&n(e),e&&!i.ready&&(Bu(e,Du.redirected)&&s===Co||(i.ready=!0,i.readyErrorCbs.forEach((function(t){t(e)}))))}))},zu.prototype.confirmTransition=function(e,t,n){var a=this,i=this.current;this.pending=e;var s,r,o=function(e){!Bu(e)&&Uu(e)&&(a.errorCbs.length?a.errorCbs.forEach((function(t){t(e)})):console.error(e)),n&&n(e)},u=e.matched.length-1,p=i.matched.length-1;if(So(e,i)&&u===p&&e.matched[u]===i.matched[p])return this.ensureURL(),e.hash&&gu(this.router,i,e,!1),o(((r=Fu(s=i,e,Du.duplicated,'Avoided redundant navigation to current location: "'+s.fullPath+'".')).name="NavigationDuplicated",r));var d,l=function(e,t){var n,a=Math.max(e.length,t.length);for(n=0;n<a&&e[n]===t[n];n++);return{updated:t.slice(0,n),activated:t.slice(n),deactivated:e.slice(n)}}(this.current.matched,e.matched),y=l.updated,c=l.deactivated,m=l.activated,f=[].concat(function(e){return Vu(e,"beforeRouteLeave",Wu,!0)}(c),this.router.beforeHooks,function(e){return Vu(e,"beforeRouteUpdate",Wu)}(y),m.map((function(e){return e.beforeEnter})),(d=m,function(e,t,n){var a=!1,i=0,s=null;$u(d,(function(e,t,r,o){if("function"==typeof e&&void 0===e.cid){a=!0,i++;var u,p=Gu((function(t){var a;((a=t).__esModule||ju&&"Module"===a[Symbol.toStringTag])&&(t=t.default),e.resolved="function"==typeof t?t:au.extend(t),r.components[o]=t,--i<=0&&n()})),d=Gu((function(e){var t="Failed to resolve async component "+o+": "+e;s||(s=Uu(e)?e:new Error(t),n(s))}));try{u=e(p,d)}catch(e){d(e)}if(u)if("function"==typeof u.then)u.then(p,d);else{var l=u.component;l&&"function"==typeof l.then&&l.then(p,d)}}})),a||n()})),h=function(t,n){if(a.pending!==e)return o(Lu(i,e));try{t(e,i,(function(t){!1===t?(a.ensureURL(!0),o(function(e,t){return Fu(e,t,Du.aborted,'Navigation aborted from "'+e.fullPath+'" to "'+t.fullPath+'" via a navigation guard.')}(i,e))):Uu(t)?(a.ensureURL(!0),o(t)):"string"==typeof t||"object"==typeof t&&("string"==typeof t.path||"string"==typeof t.name)?(o(function(e,t){return Fu(e,t,Du.redirected,'Redirected when going from "'+e.fullPath+'" to "'+function(e){if("string"==typeof e)return e;if("path"in e)return e.path;var t={};return Nu.forEach((function(n){n in e&&(t[n]=e[n])})),JSON.stringify(t,null,2)}(t)+'" via a navigation guard.')}(i,e)),"object"==typeof t&&t.replace?a.replace(t):a.push(t)):n(t)}))}catch(e){o(e)}};Eu(f,h,(function(){var n=function(e){return Vu(e,"beforeRouteEnter",(function(e,t,n,a){return function(e,t,n){return function(a,i,s){return e(a,i,(function(e){"function"==typeof e&&(t.enteredCbs[n]||(t.enteredCbs[n]=[]),t.enteredCbs[n].push(e)),s(e)}))}}(e,n,a)}))}(m);Eu(n.concat(a.router.resolveHooks),h,(function(){if(a.pending!==e)return o(Lu(i,e));a.pending=null,t(e),a.router.app&&a.router.app.$nextTick((function(){Do(e)}))}))}))},zu.prototype.updateRoute=function(e){this.current=e,this.cb&&this.cb(e)},zu.prototype.setupListeners=function(){},zu.prototype.teardown=function(){this.listeners.forEach((function(e){e()})),this.listeners=[],this.current=Co,this.pending=null};var Hu=function(e){function t(t,n){e.call(this,t,n),this._startLocation=Xu(this.base)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var t=this.router,n=t.options.scrollBehavior,a=Pu&&n;a&&this.listeners.push(wu());var i=function(){var n=e.current,i=Xu(e.base);e.current===Co&&i===e._startLocation||e.transitionTo(i,(function(e){a&&gu(t,e,n,!0)}))};window.addEventListener("popstate",i),this.listeners.push((function(){window.removeEventListener("popstate",i)}))}},t.prototype.go=function(e){window.history.go(e)},t.prototype.push=function(e,t,n){var a=this,i=this.current;this.transitionTo(e,(function(e){Ou(Uo(a.base+e.fullPath)),gu(a.router,e,i,!1),t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var a=this,i=this.current;this.transitionTo(e,(function(e){Su(Uo(a.base+e.fullPath)),gu(a.router,e,i,!1),t&&t(e)}),n)},t.prototype.ensureURL=function(e){if(Xu(this.base)!==this.current.fullPath){var t=Uo(this.base+this.current.fullPath);e?Ou(t):Su(t)}},t.prototype.getCurrentLocation=function(){return Xu(this.base)},t}(zu);function Xu(e){var t=window.location.pathname,n=t.toLowerCase(),a=e.toLowerCase();return!e||n!==a&&0!==n.indexOf(Uo(a+"/"))||(t=t.slice(e.length)),(t||"/")+window.location.search+window.location.hash}var Ku=function(e){function t(t,n,a){e.call(this,t,n),a&&function(e){var t=Xu(e);if(!/^\/#/.test(t))return window.location.replace(Uo(e+"/#"+t)),!0}(this.base)||Yu()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var t=this.router.options.scrollBehavior,n=Pu&&t;n&&this.listeners.push(wu());var a=function(){var t=e.current;Yu()&&e.transitionTo(Ju(),(function(a){n&&gu(e.router,a,t,!0),Pu||ep(a.fullPath)}))},i=Pu?"popstate":"hashchange";window.addEventListener(i,a),this.listeners.push((function(){window.removeEventListener(i,a)}))}},t.prototype.push=function(e,t,n){var a=this,i=this.current;this.transitionTo(e,(function(e){Zu(e.fullPath),gu(a.router,e,i,!1),t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var a=this,i=this.current;this.transitionTo(e,(function(e){ep(e.fullPath),gu(a.router,e,i,!1),t&&t(e)}),n)},t.prototype.go=function(e){window.history.go(e)},t.prototype.ensureURL=function(e){var t=this.current.fullPath;Ju()!==t&&(e?Zu(t):ep(t))},t.prototype.getCurrentLocation=function(){return Ju()},t}(zu);function Yu(){var e=Ju();return"/"===e.charAt(0)||(ep("/"+e),!1)}function Ju(){var e=window.location.href,t=e.indexOf("#");return t<0?"":e=e.slice(t+1)}function Qu(e){var t=window.location.href,n=t.indexOf("#");return(n>=0?t.slice(0,n):t)+"#"+e}function Zu(e){Pu?Ou(Qu(e)):window.location.hash=e}function ep(e){Pu?Su(Qu(e)):window.location.replace(Qu(e))}var tp=function(e){function t(t,n){e.call(this,t,n),this.stack=[],this.index=-1}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.push=function(e,t,n){var a=this;this.transitionTo(e,(function(e){a.stack=a.stack.slice(0,a.index+1).concat(e),a.index++,t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var a=this;this.transitionTo(e,(function(e){a.stack=a.stack.slice(0,a.index).concat(e),t&&t(e)}),n)},t.prototype.go=function(e){var t=this,n=this.index+e;if(!(n<0||n>=this.stack.length)){var a=this.stack[n];this.confirmTransition(a,(function(){var e=t.current;t.index=n,t.updateRoute(a),t.router.afterHooks.forEach((function(t){t&&t(a,e)}))}),(function(e){Bu(e,Du.duplicated)&&(t.index=n)}))}},t.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},t.prototype.ensureURL=function(){},t}(zu),np=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=yu(e.routes||[],this);var t=e.mode||"hash";switch(this.fallback="history"===t&&!Pu&&!1!==e.fallback,this.fallback&&(t="hash"),uu||(t="abstract"),this.mode=t,t){case"history":this.history=new Hu(this,e.base);break;case"hash":this.history=new Ku(this,e.base,this.fallback);break;case"abstract":this.history=new tp(this,e.base)}},ap={currentRoute:{configurable:!0}};function ip(e,t){return e.push(t),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}np.prototype.match=function(e,t,n){return this.matcher.match(e,t,n)},ap.currentRoute.get=function(){return this.history&&this.history.current},np.prototype.init=function(e){var t=this;if(this.apps.push(e),e.$once("hook:destroyed",(function(){var n=t.apps.indexOf(e);n>-1&&t.apps.splice(n,1),t.app===e&&(t.app=t.apps[0]||null),t.app||t.history.teardown()})),!this.app){this.app=e;var n=this.history;if(n instanceof Hu||n instanceof Ku){var a=function(e){n.setupListeners(),function(e){var a=n.current,i=t.options.scrollBehavior;Pu&&i&&"fullPath"in e&&gu(t,e,a,!1)}(e)};n.transitionTo(n.getCurrentLocation(),a,a)}n.listen((function(e){t.apps.forEach((function(t){t._route=e}))}))}},np.prototype.beforeEach=function(e){return ip(this.beforeHooks,e)},np.prototype.beforeResolve=function(e){return ip(this.resolveHooks,e)},np.prototype.afterEach=function(e){return ip(this.afterHooks,e)},np.prototype.onReady=function(e,t){this.history.onReady(e,t)},np.prototype.onError=function(e){this.history.onError(e)},np.prototype.push=function(e,t,n){var a=this;if(!t&&!n&&"undefined"!=typeof Promise)return new Promise((function(t,n){a.history.push(e,t,n)}));this.history.push(e,t,n)},np.prototype.replace=function(e,t,n){var a=this;if(!t&&!n&&"undefined"!=typeof Promise)return new Promise((function(t,n){a.history.replace(e,t,n)}));this.history.replace(e,t,n)},np.prototype.go=function(e){this.history.go(e)},np.prototype.back=function(){this.go(-1)},np.prototype.forward=function(){this.go(1)},np.prototype.getMatchedComponents=function(e){var t=e?e.matched?e:this.resolve(e).route:this.currentRoute;return t?[].concat.apply([],t.matched.map((function(e){return Object.keys(e.components).map((function(t){return e.components[t]}))}))):[]},np.prototype.resolve=function(e,t,n){var a=nu(e,t=t||this.history.current,n,this),i=this.match(a,t),s=i.redirectedFrom||i.fullPath,r=function(e,t,n){var a="hash"===n?"#"+t:t;return e?Uo(e+"/"+a):a}(this.history.base,s,this.mode);return{location:a,route:i,href:r,normalizedTo:a,resolved:i}},np.prototype.getRoutes=function(){return this.matcher.getRoutes()},np.prototype.addRoute=function(e,t){this.matcher.addRoute(e,t),this.history.current!==Co&&this.history.transitionTo(this.history.getCurrentLocation())},np.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==Co&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(np.prototype,ap),np.install=function e(t){if(!e.installed||au!==t){e.installed=!0,au=t;var n=function(e){return void 0!==e},a=function(e,t){var a=e.$options._parentVnode;n(a)&&n(a=a.data)&&n(a=a.registerRouteInstance)&&a(e,t)};t.mixin({beforeCreate:function(){n(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),t.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,a(this,this)},destroyed:function(){a(this)}}),Object.defineProperty(t.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(t.prototype,"$route",{get:function(){return this._routerRoot._route}}),t.component("RouterView",Lo),t.component("RouterLink",su);var i=t.config.optionMergeStrategies;i.beforeRouteEnter=i.beforeRouteLeave=i.beforeRouteUpdate=i.created}},np.version="3.5.4",np.isNavigationFailure=Bu,np.NavigationFailureType=Du,np.START_LOCATION=Co,uu&&window.Vue&&window.Vue.use(np);const sp=np;var rp=function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"min-h-screen bg-gray-100 px-4 pt-6"},[t("router-view")],1)};function op(e,t,n,a,i,s,r,o){var u,p="function"==typeof e?e.options:e;if(t&&(p.render=t,p.staticRenderFns=n,p._compiled=!0),a&&(p.functional=!0),s&&(p._scopeId="data-v-"+s),r?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),i&&i.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(r)},p._ssrRegister=u):i&&(u=o?function(){i.call(this,(p.functional?this.parent:this).$root.$options.shadowRoot)}:i),u)if(p.functional){p._injectStyles=u;var d=p.render;p.render=function(e,t){return u.call(t),d(e,t)}}else{var l=p.beforeCreate;p.beforeCreate=l?[].concat(l,u):[u]}return{exports:e,options:p}}rp._withStripped=!0,n(387);var up=op({},rp,[],!1,null,null,null);up.options.__file="node_modules/hardhat-docgen/src/App.vue";const pp=up.exports;var dp=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"w-full space-y-10 md:max-w-screen-sm lg:max-w-screen-md mx-auto"},[n("HeaderBar"),e._v(" "),n("div",{staticClass:"pb-32"},[n("div",{staticClass:"space-y-4"},[n("span",{staticClass:"text-lg"},[e._v("\n        "+e._s(e.json.source)+"\n      ")]),e._v(" "),n("h1",{staticClass:"text-xl"},[e._v("\n        "+e._s(e.json.name)+"\n      ")]),e._v(" "),n("h2",{staticClass:"text-lg"},[e._v("\n        "+e._s(e.json.title)+"\n      ")]),e._v(" "),n("h2",{staticClass:"text-lg"},[e._v("\n        "+e._s(e.json.author)+"\n      ")]),e._v(" "),n("p",[e._v(e._s(e.json.notice))]),e._v(" "),n("p",[e._v(e._s(e.json.details))])]),e._v(" "),n("div",{staticClass:"mt-8"},[e.json.hasOwnProperty("constructor")?n("Member",{attrs:{json:e.json.constructor}}):e._e()],1),e._v(" "),n("div",{staticClass:"mt-8"},[e.json.receive?n("Member",{attrs:{json:e.json.receive}}):e._e()],1),e._v(" "),n("div",{staticClass:"mt-8"},[e.json.fallback?n("Member",{attrs:{json:e.json.fallback}}):e._e()],1),e._v(" "),e.json.events?n("MemberSet",{attrs:{title:"Events",json:e.json.events}}):e._e(),e._v(" "),e.json.stateVariables?n("MemberSet",{attrs:{title:"State Variables",json:e.json.stateVariables}}):e._e(),e._v(" "),e.json.methods?n("MemberSet",{attrs:{title:"Methods",json:e.json.methods}}):e._e()],1),e._v(" "),n("FooterBar")],1)};dp._withStripped=!0;var lp=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"bg-gray-100 fixed bottom-0 right-0 w-full border-t border-dashed border-gray-300"},[n("div",{staticClass:"w-full text-center py-2 md:max-w-screen-sm lg:max-w-screen-md mx-auto"},[n("button",{staticClass:"py-1 px-2 text-gray-500",on:{click:function(t){return e.openLink(e.repository)}}},[e._v("\n      built with "+e._s(e.name)+"\n    ")])])])};lp._withStripped=!0;const yp=JSON.parse('{"u2":"hardhat-docgen","cj":"https://github.com/ItsNickBarry/hardhat-docgen"}');var cp=op({data:function(){return{repository:yp.cj,name:yp.u2}},methods:{openLink(e){window.open(e,"_blank")}}},lp,[],!1,null,null,null);cp.options.__file="node_modules/hardhat-docgen/src/components/FooterBar.vue";const mp=cp.exports;var fp=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"w-full border-b border-dashed py-2 border-gray-300"},[n("router-link",{staticClass:"py-2 text-gray-500",attrs:{to:"/"}},[e._v("\n    <- Go back\n  ")])],1)};fp._withStripped=!0;var hp=op({},fp,[],!1,null,null,null);hp.options.__file="node_modules/hardhat-docgen/src/components/HeaderBar.vue";const bp=hp.exports;var Tp=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"border-2 border-gray-400 border-dashed w-full p-2"},[n("h3",{staticClass:"text-lg pb-2 mb-2 border-b-2 border-gray-400 border-dashed"},[e._v("\n    "+e._s(e.name)+" "+e._s(e.keywords)+" "+e._s(e.inputSignature)+"\n  ")]),e._v(" "),n("div",{staticClass:"space-y-3"},[n("p",[e._v(e._s(e.json.notice))]),e._v(" "),n("p",[e._v(e._s(e.json.details))]),e._v(" "),n("MemberSection",{attrs:{name:"Parameters",items:e.inputs}}),e._v(" "),n("MemberSection",{attrs:{name:"Return Values",items:e.outputs}})],1)])};Tp._withStripped=!0;var vp=function(){var e=this,t=e.$createElement,n=e._self._c||t;return e.items.length>0?n("ul",[n("h4",{staticClass:"text-lg"},[e._v("\n    "+e._s(e.name)+"\n  ")]),e._v(" "),e._l(e.items,(function(t,a){return n("li",{key:a},[n("span",{staticClass:"bg-gray-300"},[e._v(e._s(t.type))]),e._v(" "),n("b",[e._v(e._s(t.name||"_"+a))]),t.desc?n("span",[e._v(": "),n("i",[e._v(e._s(t.desc))])]):e._e()])}))],2):e._e()};vp._withStripped=!0;var wp=op({props:{name:{type:String,default:""},items:{type:Array,default:()=>new Array}}},vp,[],!1,null,null,null);wp.options.__file="node_modules/hardhat-docgen/src/components/MemberSection.vue";const gp={components:{MemberSection:wp.exports},props:{json:{type:Object,default:()=>new Object}},computed:{name:function(){return this.json.name||this.json.type},keywords:function(){let e=[];return this.json.stateMutability&&e.push(this.json.stateMutability),"true"===this.json.anonymous&&e.push("anonymous"),e.join(" ")},params:function(){return this.json.params||{}},returns:function(){return this.json.returns||{}},inputs:function(){return(this.json.inputs||[]).map((e=>({...e,desc:this.params[e.name]})))},inputSignature:function(){return`(${this.inputs.map((e=>e.type)).join(",")})`},outputs:function(){return(this.json.outputs||[]).map(((e,t)=>({...e,desc:this.returns[e.name||`_${t}`]})))},outputSignature:function(){return`(${this.outputs.map((e=>e.type)).join(",")})`}}};var _p=op(gp,Tp,[],!1,null,null,null);_p.options.__file="node_modules/hardhat-docgen/src/components/Member.vue";const kp=_p.exports;var Mp=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"w-full mt-8"},[n("h2",{staticClass:"text-lg"},[e._v(e._s(e.title))]),e._v(" "),e._l(Object.keys(e.json),(function(t){return n("Member",{key:t,staticClass:"mt-3",attrs:{json:e.json[t]}})}))],2)};Mp._withStripped=!0;var xp=op({components:{Member:kp},props:{title:{type:String,default:""},json:{type:Object,default:()=>new Object}}},Mp,[],!1,null,null,null);xp.options.__file="node_modules/hardhat-docgen/src/components/MemberSet.vue";var Ip=op({components:{Member:kp,MemberSet:xp.exports,HeaderBar:bp,FooterBar:mp},props:{json:{type:Object,default:()=>new Object}}},dp,[],!1,null,null,null);Ip.options.__file="node_modules/hardhat-docgen/src/components/Contract.vue";const Ap=Ip.exports;var Rp=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"w-full space-y-10 md:max-w-screen-sm lg:max-w-screen-md mx-auto pb-32"},[n("Branch",{attrs:{json:e.trees,name:"Sources:"}}),e._v(" "),n("FooterBar",{staticClass:"mt-20"})],1)};Rp._withStripped=!0;var Cp=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._v("\n  "+e._s(e.name)+"\n  "),Array.isArray(e.json)?n("div",{staticClass:"pl-5"},e._l(e.json,(function(t,a){return n("div",{key:a},[n("router-link",{attrs:{to:t.source+":"+t.name}},[e._v("\n        "+e._s(t.name)+"\n      ")])],1)})),0):n("div",{staticClass:"pl-5"},e._l(Object.keys(e.json),(function(t){return n("div",{key:t},[n("Branch",{attrs:{json:e.json[t],name:t}})],1)})),0)])};Cp._withStripped=!0;var Pp=op({name:"Branch",props:{name:{type:String,default:null},json:{type:[Object,Array],default:()=>new Object}}},Cp,[],!1,null,null,null);Pp.options.__file="node_modules/hardhat-docgen/src/components/Branch.vue";var Op=op({components:{Branch:Pp.exports,FooterBar:mp},props:{json:{type:Object,default:()=>new Object}},computed:{trees:function(){let e={};for(let t in this.json)t.replace("/","//").split(/\/(?=[^\/])/).reduce(function(e,n){if(!n.includes(":"))return e[n]=e[n]||{},e[n];{let[a]=n.split(":");e[a]=e[a]||[],e[a].push(this.json[t])}}.bind(this),e);return e}}},Rp,[],!1,null,null,null);Op.options.__file="node_modules/hardhat-docgen/src/components/Index.vue";const Sp=Op.exports;ho.use(sp);const Ep={"contracts/EmergencyPool.sol:EmergencyPool":{source:"contracts/EmergencyPool.sol",name:"EmergencyPool",title:"Emergency Pool",notice:"Emergency pool in degis will keep a reserve vault for emergency usage.         The asset comes from part of the product's income (currently 10%).         Users can also stake funds into this contract manually.         The owner has the right to withdraw funds from emergency pool and it would be passed to community governance.",constructor:{inputs:[],stateMutability:"nonpayable",type:"constructor"},events:{"Deposit(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"tokenAddress",type:"address"},{indexed:!0,internalType:"address",name:"userAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Deposit",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"UseFund(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"tokenAddress",type:"address"},{indexed:!0,internalType:"address",name:"userAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"UseFund",type:"event"},"Withdraw(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"tokenAddress",type:"address"},{indexed:!0,internalType:"address",name:"userAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Withdraw",type:"event"}},methods:{"deposit(address,uint256)":{inputs:[{internalType:"address",name:"_tokenAddress",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"The amount that the user want to stake",_tokenAddress:"Address of the ERC20 token"},notice:"Manually stake into the pool"},"emergencyWithdraw(address,uint256)":{inputs:[{internalType:"address",name:"_tokenAddress",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"emergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function",details:"The ownership need to be transferred to another contract in the future",params:{_amount:"The amount that the user want to unstake",_tokenAddress:"Address of the ERC20 token"},notice:"Withdraw the asset when emergency (only by the owner)"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."},"useFund(address,address,uint256)":{inputs:[{internalType:"address",name:"_tokenAddress",type:"address"},{internalType:"address",name:"_receiver",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"useFund",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"The amount to use    ",_receiver:"Address of the receiver",_tokenAddress:"Address of the ERC20 token"},notice:"Use emergency pool fund"}}},"contracts/ILM/ILMToken.sol:ILMToken":{source:"contracts/ILM/ILMToken.sol",name:"ILMToken",constructor:{inputs:[{internalType:"address",name:"_ILM",type:"address"},{internalType:"string",name:"_name",type:"string"},{internalType:"string",name:"_symbol",type:"string"}],stateMutability:"nonpayable",type:"constructor"},events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"ILMContract()":{inputs:[],name:"ILMContract",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"burn(address,uint256)":{inputs:[{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"mint(address,uint256)":{inputs:[{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}},"contracts/ILM/NaughtyPriceILM.sol:NaughtyPriceILM":{source:"contracts/ILM/NaughtyPriceILM.sol",name:"NaughtyPriceILM",title:"Naughty Price Initial Liquidity Matching",notice:"Naughty Price timeline: 1 -- 14 -- 5         The first day of each round would be the time for liquidity matching         User           - Select the naughty token           - Provide stablecoins into this contract & Select your price choice           - Change the amountA and amountB of this pair         When reach deadline           - Final price of ILM = Initial price of naughty price pair = amountA/amountB",events:{"Claim(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amountA",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountB",type:"uint256"}],name:"Claim",type:"event"},"Deposit(address,address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"policyToken",type:"address"},{indexed:!0,internalType:"address",name:"stablecoin",type:"address"},{indexed:!1,internalType:"uint256",name:"amountA",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountB",type:"uint256"}],name:"Deposit",type:"event"},"EmergencyWithdraw(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"owner",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"EmergencyWithdraw",type:"event"},"Harvest(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"reward",type:"uint256"}],name:"Harvest",type:"event"},"ILMFinish(address,address,address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"policyToken",type:"address"},{indexed:!1,internalType:"address",name:"stablecoin",type:"address"},{indexed:!1,internalType:"address",name:"poolAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"amountA",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountB",type:"uint256"}],name:"ILMFinish",type:"event"},"ILMStart(address,address,uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"policyToken",type:"address"},{indexed:!1,internalType:"address",name:"stablecoin",type:"address"},{indexed:!1,internalType:"uint256",name:"deadline",type:"uint256"},{indexed:!1,internalType:"address",name:"lptokenAddress",type:"address"}],name:"ILMStart",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Withdraw(address,address,address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"policyToken",type:"address"},{indexed:!0,internalType:"address",name:"stablecoin",type:"address"},{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amountA",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountB",type:"uint256"}],name:"Withdraw",type:"event"}},methods:{"FEE_DENOMINATOR()":{inputs:[],name:"FEE_DENOMINATOR",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"MAX_UINT256()":{inputs:[],name:"MAX_UINT256",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"MINIMUM_AMOUNT()":{inputs:[],name:"MINIMUM_AMOUNT",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"SCALE()":{inputs:[],name:"SCALE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"approveStablecoin(address)":{inputs:[{internalType:"address",name:"_stablecoin",type:"address"}],name:"approveStablecoin",outputs:[],stateMutability:"nonpayable",type:"function",params:{_stablecoin:"Stablecoin address"},notice:"Approve stablecoins for naughty price contracts"},"claim(address,address,uint256,uint256,uint256)":{inputs:[{internalType:"address",name:"_policyToken",type:"address"},{internalType:"address",name:"_stablecoin",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"uint256",name:"_amountAMin",type:"uint256"},{internalType:"uint256",name:"_amountBMin",type:"uint256"}],name:"claim",outputs:[],stateMutability:"nonpayable",type:"function",details:"You will get back some DEG (depending on how many users deposit after you)      The claim amount is determined by the LP Token balance of you (you can buy from others)      But the DEG reward would only be got once      Your LP token will be burnt and you can not join ILM farming pool again",params:{_amountAMin:"Minimum amount of policy token (slippage)",_amountBMin:"Minimum amount of stablecoin (slippage)",_policyToken:"Policy token address",_stablecoin:"Stablecoin address"},notice:"Claim liquidity back"},"degis()":{inputs:[],name:"degis",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"deposit(address,address,uint256,uint256)":{inputs:[{internalType:"address",name:"_policyToken",type:"address"},{internalType:"address",name:"_stablecoin",type:"address"},{internalType:"uint256",name:"_amountA",type:"uint256"},{internalType:"uint256",name:"_amountB",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function",details:"Deposit only check the pair status not the deadline      There may be a zero ILM and we still need to deposit some asset to make it start      Anyone wants to enter ILM need to pay some DEG as entrance fee      The ratio is 100:1(usd:deg) and your fee is distributed to the users prior to you",params:{_amountA:"Amount of policy token (virtual)",_amountB:"Amount of stablecoin (virtual)",_policyToken:"Policy token address",_stablecoin:"Stablecoin address"},notice:"Deposit stablecoin and choose the price"},"emergencyPool()":{inputs:[],name:"emergencyPool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"emergencyRestart(address)":{inputs:[{internalType:"address",name:"_policyToken",type:"address"}],name:"emergencyRestart",outputs:[],stateMutability:"nonpayable",type:"function",params:{_policyToken:"Policy token address to be restarted"},notice:"Emergency restart ILM"},"emergencyStop(address)":{inputs:[{internalType:"address",name:"_policyToken",type:"address"}],name:"emergencyStop",outputs:[],stateMutability:"nonpayable",type:"function",params:{_policyToken:"Policy token address to be stopped"},notice:"Emergency stop ILM"},"emergencyWithdraw(address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"emergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Token amount",_token:"Token address"},notice:"Emergency withdraw a certain token"},"finishILM(address,uint256,uint256)":{inputs:[{internalType:"address",name:"_policyToken",type:"address"},{internalType:"uint256",name:"_deadlineForSwap",type:"uint256"},{internalType:"uint256",name:"_feeRate",type:"uint256"}],name:"finishILM",outputs:[],stateMutability:"nonpayable",type:"function",details:"The swap pool for the protection token will be deployed with inital liquidity\\      The amount of initial liquidity will be the total amount of the pair      Can be called by any address",params:{_deadlineForSwap:"Pool deadline",_feeRate:"Fee rate of the swap pool",_policyToken:"Policy token address"},notice:"Finish a round of ILM"},"getPairTotalAmount(address)":{inputs:[{internalType:"address",name:"_policyToken",type:"address"}],name:"getPairTotalAmount",outputs:[{internalType:"uint256",name:"totalAmount",type:"uint256"}],stateMutability:"view",type:"function",params:{_policyToken:"Policy token address"},returns:{totalAmount:"Total amount of a pair"},notice:"Get the total amount of a pair"},"getPrice(address)":{inputs:[{internalType:"address",name:"_policyToken",type:"address"}],name:"getPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Price has a scale of 1e12",params:{_policyToken:"Policy token address"},returns:{_0:"price Price of the token pair"},notice:"Get the current price"},"getUserDeposit(address,address)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address",name:"_policyToken",type:"address"}],name:"getUserDeposit",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"view",type:"function",params:{_policyToken:"Policy token address",_user:"User address"},notice:"Get the amount of user's deposit"},"initialize(address,address,address,address)":{inputs:[{internalType:"address",name:"_degis",type:"address"},{internalType:"address",name:"_policyCore",type:"address"},{internalType:"address",name:"_router",type:"address"},{internalType:"address",name:"_emergencyPool",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"Called only when deploying proxy contract",params:{_degis:"Degis token address",_emergencyPool:"EmergencyPool contract address",_policyCore:"PolicyCore contract address",_router:"NaughtyRouter contract address"},notice:"Initialze function for proxy"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"pairs(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"pairs",outputs:[{internalType:"enum NaughtyPriceILM.Status",name:"status",type:"uint8"},{internalType:"address",name:"lptoken",type:"address"},{internalType:"uint256",name:"ILMDeadline",type:"uint256"},{internalType:"address",name:"stablecoin",type:"address"},{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"},{internalType:"address",name:"naughtyPairAddress",type:"address"},{internalType:"uint256",name:"degisAmount",type:"uint256"},{internalType:"uint256",name:"accDegisPerShare",type:"uint256"}],stateMutability:"view",type:"function"},"policyCore()":{inputs:[],name:"policyCore",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"router()":{inputs:[],name:"router",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"startILM(address,address,uint256)":{inputs:[{internalType:"address",name:"_policyToken",type:"address"},{internalType:"address",name:"_stablecoin",type:"address"},{internalType:"uint256",name:"_ILMDeadline",type:"uint256"}],name:"startILM",outputs:[],stateMutability:"nonpayable",type:"function",details:"A new lp token will be deployed when starting a new ILM round      It will have a special farming reward pool",params:{_ILMDeadline:"Deadline of ILM period",_policyToken:"Policy token address",_stablecoin:"Stablecoin address"},notice:"Start a new ILM round"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"users(address,address)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"}],name:"users",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"},{internalType:"uint256",name:"degisDebt",type:"uint256"}],stateMutability:"view",type:"function"},"withdraw(address,address,uint256,uint256)":{inputs:[{internalType:"address",name:"_policyToken",type:"address"},{internalType:"address",name:"_stablecoin",type:"address"},{internalType:"uint256",name:"_amountA",type:"uint256"},{internalType:"uint256",name:"_amountB",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only checks the status not the deadline",params:{_amountA:"Amount of policy token (virtual)",_amountB:"Amount of stablecoin (virtual)",_policyToken:"Policy token address",_stablecoin:"Stablecoin address"},notice:"Withdraw stablecoins"},"withdrawAll(address,address)":{inputs:[{internalType:"address",name:"_policyToken",type:"address"},{internalType:"address",name:"_stablecoin",type:"address"}],name:"withdrawAll",outputs:[],stateMutability:"nonpayable",type:"function",params:{_policyToken:"Policy token address",_stablecoin:"Stablecoin address"},notice:"Withdraw all stablecoins of a certain policy token"}}},"contracts/chainlinkMock/FlightOracleMock.sol:FlightOracleMock":{source:"contracts/chainlinkMock/FlightOracleMock.sol",name:"FlightOracleMock",title:"Flight Oracle Mock",notice:"Mock oracle contract for test.",constructor:{inputs:[{internalType:"address",name:"_policyFlow",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"PolicyFlowChanged(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newPolicyFlow",type:"address"}],name:"PolicyFlowChanged",type:"event"}},methods:{"delayResult()":{inputs:[],name:"delayResult",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"fulfill(bytes32)":{inputs:[{internalType:"bytes32",name:"_requestId",type:"bytes32"}],name:"fulfill",outputs:[],stateMutability:"nonpayable",type:"function",details:"The recordChainlinkFulfillment protects this function from being called      by anyone other than the oracle address that the request was sent to",params:{_requestId:"The ID that was generated for the request"},notice:"The fulfill method from requests created by this contract"},"newOracleRequest(uint256,string,string,int256)":{inputs:[{internalType:"uint256",name:"_payment",type:"uint256"},{internalType:"string",name:"_url",type:"string"},{internalType:"string",name:"_path",type:"string"},{internalType:"int256",name:"_times",type:"int256"}],name:"newOracleRequest",outputs:[{internalType:"bytes32",name:"requestId",type:"bytes32"}],stateMutability:"view",type:"function",details:"This function ignores the stored Oracle contract address and      will instead send the request to the address specified",params:{_path:"The dot-delimited path to parse of the response",_payment:"Payment to the oracle",_times:"The number to multiply the result by",_url:"The URL to fetch data from"},notice:"Creates a request to the specified Oracle contract address"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"policyFlow()":{inputs:[],name:"policyFlow",outputs:[{internalType:"contract IPolicyFlow",name:"",type:"address"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"setPolicyFlow(address)":{inputs:[{internalType:"address",name:"_policyFlow",type:"address"}],name:"setPolicyFlow",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Change the policy flow contract address"},"setResult(uint256)":{inputs:[{internalType:"uint256",name:"_delayResult",type:"uint256"}],name:"setResult",outputs:[],stateMutability:"nonpayable",type:"function"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."}}},"contracts/chainlinkMock/PriceFeedMock.sol:PriceFeedMock":{source:"contracts/chainlinkMock/PriceFeedMock.sol",name:"PriceFeedMock",constructor:{inputs:[],stateMutability:"nonpayable",type:"constructor"},events:{"LatestPriceGet(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"roundID",type:"uint256"},{indexed:!1,internalType:"uint256",name:"price",type:"uint256"}],name:"LatestPriceGet",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"PriceFeedChanged(string,address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"string",name:"tokenName",type:"string"},{indexed:!1,internalType:"address",name:"feedAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"decimals",type:"uint256"}],name:"PriceFeedChanged",type:"event"}},methods:{"getLatestPrice(string)":{inputs:[{internalType:"string",name:"_tokenName",type:"string"}],name:"getLatestPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function",params:{_tokenName:"Address of the token"},returns:{_0:"price The latest price"},notice:"Get latest price of a token"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"priceFeedInfo(string)":{inputs:[{internalType:"string",name:"",type:"string"}],name:"priceFeedInfo",outputs:[{internalType:"address",name:"priceFeedAddress",type:"address"},{internalType:"uint256",name:"decimals",type:"uint256"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"result()":{inputs:[],name:"result",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"roundId()":{inputs:[],name:"roundId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"setResult(uint256)":{inputs:[{internalType:"uint256",name:"_result",type:"uint256"}],name:"setResult",outputs:[],stateMutability:"nonpayable",type:"function",details:"For test, you can set the result you want"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."}}},"contracts/chainlinkMock/VRFMock.sol:VRFMock":{source:"contracts/chainlinkMock/VRFMock.sol",name:"VRFMock",constructor:{inputs:[],stateMutability:"nonpayable",type:"constructor"},events:{"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"}},methods:{"DegisLottery()":{inputs:[],name:"DegisLottery",outputs:[{internalType:"contract IDegisLottery",name:"",type:"address"}],stateMutability:"view",type:"function"},"getRandomNumber()":{inputs:[],name:"getRandomNumber",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Request randomness from Chainlink VRF"},"latestLotteryId()":{inputs:[],name:"latestLotteryId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"randomResult()":{inputs:[],name:"randomResult",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"setLotteryAddress(address)":{inputs:[{internalType:"address",name:"_degisLottery",type:"address"}],name:"setLotteryAddress",outputs:[],stateMutability:"nonpayable",type:"function",params:{_degisLottery:"address of the PancakeSwap lottery"},notice:"Set the address for the DegisLottery"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."}}},"contracts/farming/FarmingPool.sol:FarmingPool":{source:"contracts/farming/FarmingPool.sol",name:"FarmingPool",title:"Farming Pool",details:"The pool id starts from 1 rather than 0         The degis reward is calculated by timestamp rather than block number         VeDEG will boost the farming speed by having a extra reward type         The extra reward is shared by those staking lptokens with veDEG balances         Every time the veDEG balance change, the reward will be updated",notice:"This contract is for LPToken mining on Degis",constructor:{inputs:[{internalType:"address",name:"_degis",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"DegisRewardChanged(uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"basicDegisPerSecond",type:"uint256"},{indexed:!1,internalType:"uint256",name:"bonusDegisPerSecond",type:"uint256"}],name:"DegisRewardChanged",type:"event"},"FarmingPoolStarted(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"timestamp",type:"uint256"}],name:"FarmingPoolStarted",type:"event"},"FarmingPoolStopped(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"timestamp",type:"uint256"}],name:"FarmingPoolStopped",type:"event"},"Harvest(address,address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"staker",type:"address"},{indexed:!1,internalType:"address",name:"rewardReceiver",type:"address"},{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"pendingReward",type:"uint256"}],name:"Harvest",type:"event"},"NewPoolAdded(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"lpToken",type:"address"},{indexed:!1,internalType:"uint256",name:"basicDegisPerSecond",type:"uint256"},{indexed:!1,internalType:"uint256",name:"bonusDegisPerSecond",type:"uint256"}],name:"NewPoolAdded",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Paused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},"PoolUpdated(uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"accDegisPerShare",type:"uint256"},{indexed:!1,internalType:"uint256",name:"accDegisPerBonusShare",type:"uint256"}],name:"PoolUpdated",type:"event"},"Stake(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"staker",type:"address"},{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Stake",type:"event"},"StartTimestampChanged(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"startTimestamp",type:"uint256"}],name:"StartTimestampChanged",type:"event"},"Unpaused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},"Withdraw(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"staker",type:"address"},{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Withdraw",type:"event"}},methods:{"SCALE()":{inputs:[],name:"SCALE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"_nextPoolId()":{inputs:[],name:"_nextPoolId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"add(address,uint256,uint256,bool)":{inputs:[{internalType:"address",name:"_lpToken",type:"address"},{internalType:"uint256",name:"_basicDegisPerSecond",type:"uint256"},{internalType:"uint256",name:"_bonusDegisPerSecond",type:"uint256"},{internalType:"bool",name:"_withUpdate",type:"bool"}],name:"add",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the owner      The reward speed can be 0 and set later by setDegisReward function",params:{_basicDegisPerSecond:"Basic reward speed(per second) for this new pool",_bonusDegisPerSecond:"Bonus reward speed(per second) for this new pool",_lpToken:"LP token address",_withUpdate:"Whether update all pools' status"},notice:"Add a new lp into the pool"},"degis()":{inputs:[],name:"degis",outputs:[{internalType:"contract IDegisToken",name:"",type:"address"}],stateMutability:"view",type:"function"},"getPoolList()":{inputs:[],name:"getPoolList",outputs:[{components:[{internalType:"address",name:"lpToken",type:"address"},{internalType:"uint256",name:"basicDegisPerSecond",type:"uint256"},{internalType:"uint256",name:"bonusDegisPerSecond",type:"uint256"},{internalType:"uint256",name:"lastRewardTimestamp",type:"uint256"},{internalType:"uint256",name:"accDegisPerShare",type:"uint256"},{internalType:"uint256",name:"accDegisPerBonusShare",type:"uint256"},{internalType:"uint256",name:"totalBonus",type:"uint256"}],internalType:"struct FarmingPool.PoolInfo[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function",returns:{_0:"pooList Total pool list"},notice:"Get the total pool list"},"getUserBalance(uint256,address)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"getUserBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{_poolId:"Id of the pool",_user:"User address"},returns:{_0:"balance User's balance (lpToken)"},notice:"Get a user's balance"},"harvest(uint256,address)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"address",name:"_to",type:"address"}],name:"harvest",outputs:[],stateMutability:"nonpayable",type:"function",params:{_poolId:"Id of the farming pool",_to:"Receiver of degis rewards"},notice:"Harvest the degis reward and can be sent to another address"},"isFarming(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"isFarming",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"massUpdatePools()":{inputs:[],name:"massUpdatePools",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can be called by anyone      Only update those active pools",notice:"Update all farming pools (except for those stopped ones)"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"pause()":{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},"paused()":{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if the contract is paused, and false otherwise."},"pendingDegis(uint256,address)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"pendingDegis",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{_poolId:"PoolId of this farming pool",_user:"User address"},returns:{_0:"pendingDegisAmount Amount of pending degis"},notice:"Check the amount of pending degis reward"},"poolList(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"poolList",outputs:[{internalType:"address",name:"lpToken",type:"address"},{internalType:"uint256",name:"basicDegisPerSecond",type:"uint256"},{internalType:"uint256",name:"bonusDegisPerSecond",type:"uint256"},{internalType:"uint256",name:"lastRewardTimestamp",type:"uint256"},{internalType:"uint256",name:"accDegisPerShare",type:"uint256"},{internalType:"uint256",name:"accDegisPerBonusShare",type:"uint256"},{internalType:"uint256",name:"totalBonus",type:"uint256"}],stateMutability:"view",type:"function"},"poolMapping(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"poolMapping",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"setDegisReward(uint256,uint256,uint256,bool)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"uint256",name:"_basicDegisPerSecond",type:"uint256"},{internalType:"uint256",name:"_bonusDegisPerSecond",type:"uint256"},{internalType:"bool",name:"_withUpdate",type:"bool"}],name:"setDegisReward",outputs:[],stateMutability:"nonpayable",type:"function",params:{_basicDegisPerSecond:"New basic reward amount per second",_bonusDegisPerSecond:"New bonus reward amount per second",_poolId:"Id of the farming pool",_withUpdate:"Whether update all pools"},notice:"Update the degisPerSecond for a specific pool (set to 0 to stop farming)"},"setStartTimestamp(uint256)":{inputs:[{internalType:"uint256",name:"_startTimestamp",type:"uint256"}],name:"setStartTimestamp",outputs:[],stateMutability:"nonpayable",type:"function",params:{_startTimestamp:"New start block timestamp"},notice:"Set the start block timestamp"},"setVeDEG(address)":{inputs:[{internalType:"address",name:"_veDEG",type:"address"}],name:"setVeDEG",outputs:[],stateMutability:"nonpayable",type:"function"},"stake(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"stake",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only stake to the pools that are still farming",params:{_amount:"Staking amount",_poolId:"Id of the farming pool"},notice:"Stake LP token into the farming pool"},"startTimestamp()":{inputs:[],name:"startTimestamp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."},"unpause()":{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},"updateBonus(address,uint256)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"uint256",name:"_newVeDEGBalance",type:"uint256"}],name:"updateBonus",outputs:[],stateMutability:"nonpayable",type:"function",details:"When veDEG has balance change      Only called by veDEG contract",params:{_newVeDEGBalance:"New veDEG balance",_user:"User address"},notice:"Update a user's bonus"},"updatePool(uint256)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"}],name:"updatePool",outputs:[],stateMutability:"nonpayable",type:"function",params:{_poolId:"Id of the farming pool"},notice:"Update the pool's reward status"},"userInfo(uint256,address)":{inputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"address",name:"",type:"address"}],name:"userInfo",outputs:[{internalType:"uint256",name:"rewardDebt",type:"uint256"},{internalType:"uint256",name:"stakingBalance",type:"uint256"},{internalType:"uint256",name:"bonus",type:"uint256"}],stateMutability:"view",type:"function"},"veDEG()":{inputs:[],name:"veDEG",outputs:[{internalType:"contract IVeDEG",name:"",type:"address"}],stateMutability:"view",type:"function"},"withdraw(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Amount of lp tokens to withdraw",_poolId:"Id of the farming pool"},notice:"Withdraw lptoken from the pool"}}},"contracts/farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable":{source:"contracts/farming/FarmingPoolUpgradeable.sol",name:"FarmingPoolUpgradeable",title:"Farming Pool",details:"The pool id starts from 1 rather than 0         The degis reward is calculated by timestamp rather than block number         VeDEG will boost the farming speed by having a extra reward type         The extra reward is shared by those staking lptokens with veDEG balances         Every time the veDEG balance change, the reward will be updated         The basic reward depends on the liquidity inside the pool         Update with a piecewise function         liquidity amount:   |---------------|------------------|----------------                             0           threshold 1        threshold 2          reward speed:            speed1          speed2             speed3         The speed update will be updated one tx after the last tx that triggers the threshold         The reward update will be another one tx later",notice:"This contract is for LPToken mining on Degis",events:{"DegisRewardChanged(uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"basicDegisPerSecond",type:"uint256"},{indexed:!1,internalType:"uint256",name:"bonusDegisPerSecond",type:"uint256"}],name:"DegisRewardChanged",type:"event"},"FarmingPoolStarted(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"timestamp",type:"uint256"}],name:"FarmingPoolStarted",type:"event"},"FarmingPoolStopped(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"timestamp",type:"uint256"}],name:"FarmingPoolStopped",type:"event"},"Harvest(address,address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"staker",type:"address"},{indexed:!1,internalType:"address",name:"rewardReceiver",type:"address"},{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"pendingReward",type:"uint256"}],name:"Harvest",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"NewPoolAdded(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"lpToken",type:"address"},{indexed:!1,internalType:"uint256",name:"basicDegisPerSecond",type:"uint256"},{indexed:!1,internalType:"uint256",name:"bonusDegisPerSecond",type:"uint256"}],name:"NewPoolAdded",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Paused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},"PoolUpdated(uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"accDegisPerShare",type:"uint256"},{indexed:!1,internalType:"uint256",name:"accDegisPerBonusShare",type:"uint256"}],name:"PoolUpdated",type:"event"},"Stake(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"staker",type:"address"},{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Stake",type:"event"},"StartTimestampChanged(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"startTimestamp",type:"uint256"}],name:"StartTimestampChanged",type:"event"},"Unpaused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},"Withdraw(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"staker",type:"address"},{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Withdraw",type:"event"}},methods:{"SCALE()":{inputs:[],name:"SCALE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"_nextPoolId()":{inputs:[],name:"_nextPoolId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"add(address,uint256,uint256,bool)":{inputs:[{internalType:"address",name:"_lpToken",type:"address"},{internalType:"uint256",name:"_basicDegisPerSecond",type:"uint256"},{internalType:"uint256",name:"_bonusDegisPerSecond",type:"uint256"},{internalType:"bool",name:"_withUpdate",type:"bool"}],name:"add",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the owner      The reward speed can be 0 and set later by setDegisReward function",params:{_basicDegisPerSecond:"Basic reward speed(per second) for this new pool",_bonusDegisPerSecond:"Bonus reward speed(per second) for this new pool",_lpToken:"LP token address",_withUpdate:"Whether update all pools' status"},notice:"Add a new lp into the pool"},"currentRewardLevel()":{inputs:[],name:"currentRewardLevel",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"degis()":{inputs:[],name:"degis",outputs:[{internalType:"contract IDegisToken",name:"",type:"address"}],stateMutability:"view",type:"function"},"extraClaimable(uint256,address)":{inputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"address",name:"",type:"address"}],name:"extraClaimable",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getPoolList()":{inputs:[],name:"getPoolList",outputs:[{components:[{internalType:"address",name:"lpToken",type:"address"},{internalType:"uint256",name:"basicDegisPerSecond",type:"uint256"},{internalType:"uint256",name:"bonusDegisPerSecond",type:"uint256"},{internalType:"uint256",name:"lastRewardTimestamp",type:"uint256"},{internalType:"uint256",name:"accDegisPerShare",type:"uint256"},{internalType:"uint256",name:"accDegisPerBonusShare",type:"uint256"},{internalType:"uint256",name:"totalBonus",type:"uint256"}],internalType:"struct FarmingPoolUpgradeable.PoolInfo[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function",returns:{_0:"pooList Total pool list"},notice:"Get the total pool list"},"getUserBalance(uint256,address)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"getUserBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{_poolId:"Id of the pool",_user:"User address"},returns:{_0:"balance User's balance (lpToken)"},notice:"Get a user's balance"},"harvest(uint256,address)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"address",name:"_to",type:"address"}],name:"harvest",outputs:[],stateMutability:"nonpayable",type:"function",params:{_poolId:"Id of the farming pool",_to:"Receiver of degis rewards"},notice:"Harvest the degis reward and can be sent to another address"},"initialize(address)":{inputs:[{internalType:"address",name:"_degis",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"isFarming(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"isFarming",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"massUpdatePools()":{inputs:[],name:"massUpdatePools",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can be called by anyone      Only update those active pools",notice:"Update all farming pools (except for those stopped ones)"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"pause()":{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},"paused()":{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if the contract is paused, and false otherwise."},"pendingDegis(uint256,address)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"pendingDegis",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{_poolId:"PoolId of this farming pool",_user:"User address"},returns:{_0:"pendingDegisAmount Amount of pending degis"},notice:"Check the amount of pending degis reward"},"piecewiseBasic(uint256,uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"}],name:"piecewiseBasic",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"poolList(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"poolList",outputs:[{internalType:"address",name:"lpToken",type:"address"},{internalType:"uint256",name:"basicDegisPerSecond",type:"uint256"},{internalType:"uint256",name:"bonusDegisPerSecond",type:"uint256"},{internalType:"uint256",name:"lastRewardTimestamp",type:"uint256"},{internalType:"uint256",name:"accDegisPerShare",type:"uint256"},{internalType:"uint256",name:"accDegisPerBonusShare",type:"uint256"},{internalType:"uint256",name:"totalBonus",type:"uint256"}],stateMutability:"view",type:"function"},"poolMapping(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"poolMapping",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"poolRewardLevel(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"poolRewardLevel",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setDegisReward(uint256,uint256,uint256,bool)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"uint256",name:"_basicDegisPerSecond",type:"uint256"},{internalType:"uint256",name:"_bonusDegisPerSecond",type:"uint256"},{internalType:"bool",name:"_withUpdate",type:"bool"}],name:"setDegisReward",outputs:[],stateMutability:"nonpayable",type:"function",params:{_basicDegisPerSecond:"New basic reward amount per second",_bonusDegisPerSecond:"New bonus reward amount per second",_poolId:"Id of the farming pool",_withUpdate:"Whether update all pools"},notice:"Update the degisPerSecond for a specific pool (set to 0 to stop farming)"},"setPiecewise(uint256,uint256[],uint256[])":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"uint256[]",name:"_threshold",type:"uint256[]"},{internalType:"uint256[]",name:"_reward",type:"uint256[]"}],name:"setPiecewise",outputs:[],stateMutability:"nonpayable",type:"function",params:{_poolId:"Id of the pool",_reward:"Piecewise reward",_threshold:"Piecewise threshold"},notice:"Set piecewise reward and threshold"},"setStartTimestamp(uint256)":{inputs:[{internalType:"uint256",name:"_startTimestamp",type:"uint256"}],name:"setStartTimestamp",outputs:[],stateMutability:"nonpayable",type:"function",params:{_startTimestamp:"New start block timestamp"},notice:"Set the start block timestamp"},"setVeDEG(address)":{inputs:[{internalType:"address",name:"_veDEG",type:"address"}],name:"setVeDEG",outputs:[],stateMutability:"nonpayable",type:"function"},"stake(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"stake",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only stake to the pools that are still farming",params:{_amount:"Staking amount",_poolId:"Id of the farming pool"},notice:"Stake LP token into the farming pool"},"startTimestamp()":{inputs:[],name:"startTimestamp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"thresholdBasic(uint256,uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"}],name:"thresholdBasic",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unpause()":{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},"updateBonus(address,uint256)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"uint256",name:"_newVeDEGBalance",type:"uint256"}],name:"updateBonus",outputs:[],stateMutability:"nonpayable",type:"function",details:"When veDEG has balance change      Only called by veDEG contract",params:{_newVeDEGBalance:"New veDEG balance",_user:"User address"},notice:"Update a user's bonus"},"updatePool(uint256)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"}],name:"updatePool",outputs:[],stateMutability:"nonpayable",type:"function",params:{_poolId:"Id of the farming pool"},notice:"Update the pool's reward status"},"userInfo(uint256,address)":{inputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"address",name:"",type:"address"}],name:"userInfo",outputs:[{internalType:"uint256",name:"rewardDebt",type:"uint256"},{internalType:"uint256",name:"stakingBalance",type:"uint256"},{internalType:"uint256",name:"bonus",type:"uint256"}],stateMutability:"view",type:"function"},"veDEG()":{inputs:[],name:"veDEG",outputs:[{internalType:"contract IVeDEG",name:"",type:"address"}],stateMutability:"view",type:"function"},"withdraw(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Amount of lp tokens to withdraw",_poolId:"Id of the farming pool"},notice:"Withdraw lptoken from the pool"}}},"contracts/farming/PurchaseIncentiveVault.sol:PurchaseIncentiveVault":{source:"contracts/farming/PurchaseIncentiveVault.sol",name:"PurchaseIncentiveVault",title:"Purchase Incentive Vault",notice:"This is the purchase incentive vault for staking buyer tokens         Users first stake their buyer tokens and wait for distribution         About every 24 hours, the reward will be calculated to users' account         After disrtribution, reward will be updated              but it still need to be manually claimed.         Buyer tokens can only be used once         You can withdraw your buyer token within the same round (current round)         They can not be withdrawed if the round was settled",events:{"DegisRewardChanged(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"oldRewardPerRound",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newRewardPerRound",type:"uint256"}],name:"DegisRewardChanged",type:"event"},"DistributionIntervalChanged(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"oldInterval",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newInterval",type:"uint256"}],name:"DistributionIntervalChanged",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Paused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},"Redeem(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"userAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"currentRound",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Redeem",type:"event"},"RewardClaimed(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"userAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"userReward",type:"uint256"}],name:"RewardClaimed",type:"event"},"RoundSettled(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"currentRound",type:"uint256"},{indexed:!1,internalType:"uint256",name:"blockNumber",type:"uint256"}],name:"RoundSettled",type:"event"},"Stake(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"userAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"currentRound",type:"uint256"},{indexed:!1,internalType:"uint256",name:"actualAmount",type:"uint256"}],name:"Stake",type:"event"},"Unpaused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"}},methods:{"MAX_ROUND()":{inputs:[],name:"MAX_ROUND",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"SCALE()":{inputs:[],name:"SCALE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"claim()":{inputs:[],name:"claim",outputs:[],stateMutability:"nonpayable",type:"function",notice:"User can claim his own reward"},"currentRound()":{inputs:[],name:"currentRound",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"degisPerRound()":{inputs:[],name:"degisPerRound",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"distributionInterval()":{inputs:[],name:"distributionInterval",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getRewardPerRound()":{inputs:[],name:"getRewardPerRound",outputs:[{internalType:"uint256",name:"rewardPerRound",type:"uint256"}],stateMutability:"view",type:"function",details:"Depends on the total shares in this round",returns:{rewardPerRound:"Degis reward per round"},notice:"Get degis reward per round"},"getTotalUsersInRound(uint256)":{inputs:[{internalType:"uint256",name:"_round",type:"uint256"}],name:"getTotalUsersInRound",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{_round:"Round number to check"},returns:{_0:"totalUsers Total amount of users in _round"},notice:"Get the amount of users in _round, used for distribution"},"getUserPendingRounds(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"getUserPendingRounds",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",params:{_user:"User address to check"},returns:{_0:"pendingRounds User's pending rounds"},notice:"Get user's pending rounds"},"getUserShares(address,uint256)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"uint256",name:"_round",type:"uint256"}],name:"getUserShares",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{_round:"Round number",_user:"Address of the user"},returns:{_0:"userShares User's shares in the current round"},notice:"Get your shares in the current round"},"getUsersInRound(uint256)":{inputs:[{internalType:"uint256",name:"_round",type:"uint256"}],name:"getUsersInRound",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",params:{_round:"Round number to check"},returns:{_0:"users All user addresses in this round"},notice:"Get the user addresses in _round"},"initialize(address,address)":{inputs:[{internalType:"address",name:"_buyerToken",type:"address"},{internalType:"address",name:"_degisToken",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"lastDistribution()":{inputs:[],name:"lastDistribution",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"pause()":{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},"paused()":{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if the contract is paused, and false otherwise."},"pendingReward(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"pendingReward",outputs:[{internalType:"uint256",name:"userPendingReward",type:"uint256"}],stateMutability:"view",type:"function",params:{_user:"User address"},returns:{userPendingReward:"User's pending reward"},notice:"Get a user's pending reward"},"redeem(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"redeem",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Amount to redeem"},notice:"Redeem buyer token from the vault"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"rounds(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"rounds",outputs:[{internalType:"uint256",name:"shares",type:"uint256"},{internalType:"bool",name:"hasDistributed",type:"bool"},{internalType:"uint256",name:"degisPerShare",type:"uint256"}],stateMutability:"view",type:"function"},"setDegisPerRound(uint256)":{inputs:[{internalType:"uint256",name:"_degisPerRound",type:"uint256"}],name:"setDegisPerRound",outputs:[],stateMutability:"nonpayable",type:"function",params:{_degisPerRound:"Degis distribution per round"},notice:"Set degis distribution per round"},"setDistributionInterval(uint256)":{inputs:[{internalType:"uint256",name:"_newInterval",type:"uint256"}],name:"setDistributionInterval",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newInterval:"The new interval"},notice:"Set a new distribution interval"},"setPiecewise(uint256[],uint256[])":{inputs:[{internalType:"uint256[]",name:"_threshold",type:"uint256[]"},{internalType:"uint256[]",name:"_reward",type:"uint256[]"}],name:"setPiecewise",outputs:[],stateMutability:"nonpayable",type:"function",params:{_reward:"The piecewise reward",_threshold:"The threshold"},notice:"Set the threshold and piecewise reward"},"settleCurrentRound()":{inputs:[],name:"settleCurrentRound",outputs:[],stateMutability:"nonpayable",type:"function",details:"Callable by any address, must pass the distribution interval",notice:"Setttle the current round"},"stake(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"stake",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Amount of buyer tokens to stake"},notice:"Stake buyer tokens into this contract"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unpause()":{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},"userSharesInRound(address,uint256)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"userSharesInRound",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"users(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"users",outputs:[{internalType:"uint256",name:"lastRewardRoundIndex",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/farming/interfaces/IFarmingPool.sol:IFarmingPool":{source:"contracts/farming/interfaces/IFarmingPool.sol",name:"IFarmingPool",methods:{"add(address,uint256,bool)":{inputs:[{internalType:"address",name:"_lpToken",type:"address"},{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"bool",name:"_withUpdate",type:"bool"}],name:"add",outputs:[],stateMutability:"nonpayable",type:"function"},"harvest(uint256,address)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"address",name:"_to",type:"address"}],name:"harvest",outputs:[],stateMutability:"nonpayable",type:"function"},"massUpdatePools()":{inputs:[],name:"massUpdatePools",outputs:[],stateMutability:"nonpayable",type:"function"},"pendingDegis(uint256,address)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"pendingDegis",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"setDegisReward(uint256,uint256,uint256,bool)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"uint256",name:"_basicDegisPerBlock",type:"uint256"},{internalType:"uint256",name:"_bonusDegisPerBlock",type:"uint256"},{internalType:"bool",name:"_withUpdate",type:"bool"}],name:"setDegisReward",outputs:[],stateMutability:"nonpayable",type:"function"},"setStartBlock(uint256)":{inputs:[{internalType:"uint256",name:"_startBlock",type:"uint256"}],name:"setStartBlock",outputs:[],stateMutability:"nonpayable",type:"function"},"stake(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"stake",outputs:[],stateMutability:"nonpayable",type:"function"},"updateBonus(address,uint256)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"uint256",name:"_newBalance",type:"uint256"}],name:"updateBonus",outputs:[],stateMutability:"nonpayable",type:"function"},"updatePool(uint256)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"}],name:"updatePool",outputs:[],stateMutability:"nonpayable",type:"function"},"withdraw(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/governance/TimeLock.sol:TimelockController":{source:"contracts/governance/TimeLock.sol",name:"TimelockController",details:"Contract module which acts as a timelocked controller. When set as the owner of an `Ownable` smart contract, it enforces a timelock on all `onlyOwner` maintenance operations. This gives time for users of the controlled contract to exit before a potentially dangerous maintenance operation is applied. By default, this contract is self administered, meaning administration tasks have to go through the timelock process. The proposer (resp executor) role is in charge of proposing (resp executing) operations. A common use case is to position this {TimelockController} as the owner of a smart contract, with a multisig or a DAO as the sole proposer. _Available since v3.3._",constructor:{inputs:[{internalType:"uint256",name:"minDelay",type:"uint256"},{internalType:"address[]",name:"proposers",type:"address[]"},{internalType:"address[]",name:"executors",type:"address[]"}],stateMutability:"nonpayable",type:"constructor"},receive:{stateMutability:"payable",type:"receive"},events:{"CallExecuted(bytes32,uint256,address,uint256,bytes)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"id",type:"bytes32"},{indexed:!0,internalType:"uint256",name:"index",type:"uint256"},{indexed:!1,internalType:"address",name:"target",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"},{indexed:!1,internalType:"bytes",name:"data",type:"bytes"}],name:"CallExecuted",type:"event",details:"Emitted when a call is performed as part of operation `id`."},"CallScheduled(bytes32,uint256,address,uint256,bytes,bytes32,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"id",type:"bytes32"},{indexed:!0,internalType:"uint256",name:"index",type:"uint256"},{indexed:!1,internalType:"address",name:"target",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"},{indexed:!1,internalType:"bytes",name:"data",type:"bytes"},{indexed:!1,internalType:"bytes32",name:"predecessor",type:"bytes32"},{indexed:!1,internalType:"uint256",name:"delay",type:"uint256"}],name:"CallScheduled",type:"event",details:"Emitted when a call is scheduled as part of operation `id`."},"Cancelled(bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"id",type:"bytes32"}],name:"Cancelled",type:"event",details:"Emitted when operation `id` is cancelled."},"MinDelayChange(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"oldDuration",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newDuration",type:"uint256"}],name:"MinDelayChange",type:"event",details:"Emitted when the minimum delay for future operations is modified."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},"RoleGranted(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},"RoleRevoked(bytes32,address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"}},methods:{"DEFAULT_ADMIN_ROLE()":{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"EXECUTOR_ROLE()":{inputs:[],name:"EXECUTOR_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"PROPOSER_ROLE()":{inputs:[],name:"PROPOSER_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"TIMELOCK_ADMIN_ROLE()":{inputs:[],name:"TIMELOCK_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"cancel(bytes32)":{inputs:[{internalType:"bytes32",name:"id",type:"bytes32"}],name:"cancel",outputs:[],stateMutability:"nonpayable",type:"function",details:"Cancel an operation. Requirements: - the caller must have the 'proposer' role."},"execute(address,uint256,bytes,bytes32,bytes32)":{inputs:[{internalType:"address",name:"target",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"},{internalType:"bytes32",name:"predecessor",type:"bytes32"},{internalType:"bytes32",name:"salt",type:"bytes32"}],name:"execute",outputs:[],stateMutability:"payable",type:"function",details:"Execute an (ready) operation containing a single transaction. Emits a {CallExecuted} event. Requirements: - the caller must have the 'executor' role."},"executeBatch(address[],uint256[],bytes[],bytes32,bytes32)":{inputs:[{internalType:"address[]",name:"targets",type:"address[]"},{internalType:"uint256[]",name:"values",type:"uint256[]"},{internalType:"bytes[]",name:"datas",type:"bytes[]"},{internalType:"bytes32",name:"predecessor",type:"bytes32"},{internalType:"bytes32",name:"salt",type:"bytes32"}],name:"executeBatch",outputs:[],stateMutability:"payable",type:"function",details:"Execute an (ready) operation containing a batch of transactions. Emits one {CallExecuted} event per transaction in the batch. Requirements: - the caller must have the 'executor' role."},"getMinDelay()":{inputs:[],name:"getMinDelay",outputs:[{internalType:"uint256",name:"duration",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the minimum delay for an operation to become valid. This value can be changed by executing an operation that calls `updateDelay`."},"getRoleAdmin(bytes32)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getTimestamp(bytes32)":{inputs:[{internalType:"bytes32",name:"id",type:"bytes32"}],name:"getTimestamp",outputs:[{internalType:"uint256",name:"timestamp",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the timestamp at with an operation becomes ready (0 for unset operations, 1 for done operations)."},"grantRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns `true` if `account` has been granted `role`."},"hashOperation(address,uint256,bytes,bytes32,bytes32)":{inputs:[{internalType:"address",name:"target",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"},{internalType:"bytes32",name:"predecessor",type:"bytes32"},{internalType:"bytes32",name:"salt",type:"bytes32"}],name:"hashOperation",outputs:[{internalType:"bytes32",name:"hash",type:"bytes32"}],stateMutability:"pure",type:"function",details:"Returns the identifier of an operation containing a single transaction."},"hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)":{inputs:[{internalType:"address[]",name:"targets",type:"address[]"},{internalType:"uint256[]",name:"values",type:"uint256[]"},{internalType:"bytes[]",name:"datas",type:"bytes[]"},{internalType:"bytes32",name:"predecessor",type:"bytes32"},{internalType:"bytes32",name:"salt",type:"bytes32"}],name:"hashOperationBatch",outputs:[{internalType:"bytes32",name:"hash",type:"bytes32"}],stateMutability:"pure",type:"function",details:"Returns the identifier of an operation containing a batch of transactions."},"isOperation(bytes32)":{inputs:[{internalType:"bytes32",name:"id",type:"bytes32"}],name:"isOperation",outputs:[{internalType:"bool",name:"pending",type:"bool"}],stateMutability:"view",type:"function",details:"Returns whether an id correspond to a registered operation. This includes both Pending, Ready and Done operations."},"isOperationDone(bytes32)":{inputs:[{internalType:"bytes32",name:"id",type:"bytes32"}],name:"isOperationDone",outputs:[{internalType:"bool",name:"done",type:"bool"}],stateMutability:"view",type:"function",details:"Returns whether an operation is done or not."},"isOperationPending(bytes32)":{inputs:[{internalType:"bytes32",name:"id",type:"bytes32"}],name:"isOperationPending",outputs:[{internalType:"bool",name:"pending",type:"bool"}],stateMutability:"view",type:"function",details:"Returns whether an operation is pending or not."},"isOperationReady(bytes32)":{inputs:[{internalType:"bytes32",name:"id",type:"bytes32"}],name:"isOperationReady",outputs:[{internalType:"bool",name:"ready",type:"bool"}],stateMutability:"view",type:"function",details:"Returns whether an operation is ready or not."},"renounceRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function",details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."},"schedule(address,uint256,bytes,bytes32,bytes32,uint256)":{inputs:[{internalType:"address",name:"target",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"},{internalType:"bytes32",name:"predecessor",type:"bytes32"},{internalType:"bytes32",name:"salt",type:"bytes32"},{internalType:"uint256",name:"delay",type:"uint256"}],name:"schedule",outputs:[],stateMutability:"nonpayable",type:"function",details:"Schedule an operation containing a single transaction. Emits a {CallScheduled} event. Requirements: - the caller must have the 'proposer' role."},"scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)":{inputs:[{internalType:"address[]",name:"targets",type:"address[]"},{internalType:"uint256[]",name:"values",type:"uint256[]"},{internalType:"bytes[]",name:"datas",type:"bytes[]"},{internalType:"bytes32",name:"predecessor",type:"bytes32"},{internalType:"bytes32",name:"salt",type:"bytes32"},{internalType:"uint256",name:"delay",type:"uint256"}],name:"scheduleBatch",outputs:[],stateMutability:"nonpayable",type:"function",details:"Schedule an operation containing a batch of transactions. Emits one {CallScheduled} event per transaction in the batch. Requirements: - the caller must have the 'proposer' role."},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"updateDelay(uint256)":{inputs:[{internalType:"uint256",name:"newDelay",type:"uint256"}],name:"updateDelay",outputs:[],stateMutability:"nonpayable",type:"function",details:"Changes the minimum timelock duration for future operations. Emits a {MinDelayChange} event. Requirements: - the caller must be the timelock itself. This can only be achieved by scheduling and later executing an operation where the timelock is the target and the data is the ABI-encoded call to this function."}}},"contracts/governance/VeERC20Upgradeable.sol:VeERC20Upgradeable":{source:"contracts/governance/VeERC20Upgradeable.sol",name:"VeERC20Upgradeable",title:"VeERC20Upgradeable",details:"only minting and burning are allowed. The hook _afterTokenOperation is called after Minting and Burning.",notice:"Modified version of ERC20Upgradeable where transfers and allowances are disabled.",events:{"Burn(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Burn",type:"event",details:"Emitted when `value` tokens are burned and minted"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"Mint(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"beneficiary",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Mint",type:"event"}},methods:{"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."}}},"contracts/governance/VoteEscrowedDegis.sol:VoteEscrowedDegis":{source:"contracts/governance/VoteEscrowedDegis.sol",name:"VoteEscrowedDegis",title:"Vote Escrowed Degis",notice:"The staking contract for DEG -> veDEG         veDEG:            - Boosting the farming reward            - Governance            - Participate in Initial Liquidity Matching (naughty price)            - etc.         If you stake degis, you generate veDEG at the current `generationRate` until you reach `maxCap`         If you unstake any amount of degis, you will lose all of your veDEG tokens         There is also an option that you lock your DEG for the max time         and get the maximum veDEG balance immediately.         !! Attention !!         If you stake DEG for the max time for more than once, the lockUntil timestamp will         be updated to the latest one.",events:{"BoostVeDEG(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"boostType",type:"uint256"}],name:"BoostVeDEG",type:"event"},"Burn(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Burn",type:"event"},"BurnVeDEG(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"caller",type:"address"},{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"BurnVeDEG",type:"event"},"Claimed(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Claimed",type:"event"},"Deposit(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Deposit",type:"event"},"DepositMaxTime(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"lockUntil",type:"uint256"}],name:"DepositMaxTime",type:"event"},"GenerationRateChanged(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"oldRate",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newRate",type:"uint256"}],name:"GenerationRateChanged",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"LockVeDEG(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"caller",type:"address"},{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"LockVeDEG",type:"event"},"MaxCapRatioChanged(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"oldMaxCapRatio",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newMaxCapRatio",type:"uint256"}],name:"MaxCapRatioChanged",type:"event"},"Mint(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"beneficiary",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Mint",type:"event"},"NFTStakingChanged(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldNFTStaking",type:"address"},{indexed:!1,internalType:"address",name:"newNFTStaking",type:"address"}],name:"NFTStakingChanged",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Paused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},"UnBoostVeDEG(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"}],name:"UnBoostVeDEG",type:"event"},"UnlockVeDEG(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"caller",type:"address"},{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"UnlockVeDEG",type:"event"},"Unpaused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},"WhiteListAdded(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newWhiteList",type:"address"}],name:"WhiteListAdded",type:"event"},"WhiteListRemoved(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldWhiteList",type:"address"}],name:"WhiteListRemoved",type:"event"},"Withdraw(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Withdraw",type:"event"}},methods:{"SCALE()":{inputs:[],name:"SCALE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"addWhitelist(address)":{inputs:[{internalType:"address",name:"_account",type:"address"}],name:"addWhitelist",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only callable by the owner",params:{_account:"Address to add"},notice:"Add a new whitelist address"},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"boostVeDEG(address,uint256)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"uint256",name:"_type",type:"uint256"}],name:"boostVeDEG",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only called by nftStaking contract",params:{_type:"Boost type (1 = 120%, 2 = 150%)",_user:"User address"},notice:"Boost veDEG"},"boosted(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"boosted",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"burnVeDEG(address,uint256)":{inputs:[{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"burnVeDEG",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only whitelisted contract      For future use, some contracts may need veDEG for entrance",params:{_amount:"Amount to burn",_to:"Address to burn"},notice:"Burn veDEG"},"claim()":{inputs:[],name:"claim",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Claims accumulated veDEG for flex deposit"},"claimable(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"claimable",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{_user:"User address"},returns:{_0:"claimableAmount Claimable amount of the user"},notice:"Calculate the amount of veDEG that can be claimed by user"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"degis()":{inputs:[],name:"degis",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"deposit(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only EOA or whitelisted contract address",params:{_amount:"Amount to deposit"},notice:"Depisit degis for veDEG"},"depositMaxTime(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"depositMaxTime",outputs:[],stateMutability:"nonpayable",type:"function",details:"Release the max amount one time",notice:"Deposit for the max time"},"farmingPool()":{inputs:[],name:"farmingPool",outputs:[{internalType:"contract IFarmingPool",name:"",type:"address"}],stateMutability:"view",type:"function"},"generationRate()":{inputs:[],name:"generationRate",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"initialize(address,address)":{inputs:[{internalType:"address",name:"_degis",type:"address"},{internalType:"address",name:"_farmingPool",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"lockVeDEG(address,uint256)":{inputs:[{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"lockVeDEG",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only whitelisted contract      Income sharing contract will lock veDEG as entrance",params:{_amount:"Amount to lock",_to:"User address"},notice:"Lock veDEG token"},"locked(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"locked",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"maxCapRatio()":{inputs:[],name:"maxCapRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"nftStaking()":{inputs:[],name:"nftStaking",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"pause()":{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},"paused()":{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if the contract is paused, and false otherwise."},"removeWhitelist(address)":{inputs:[{internalType:"address",name:"_account",type:"address"}],name:"removeWhitelist",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only callable by the owner",params:{_account:"Address to remove"},notice:"Remove a new whitelist address"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setGenerationRate(uint256)":{inputs:[{internalType:"uint256",name:"_generationRate",type:"uint256"}],name:"setGenerationRate",outputs:[],stateMutability:"nonpayable",type:"function",params:{_generationRate:"New generation rate"},notice:"Set generationRate"},"setMaxCapRatio(uint256)":{inputs:[{internalType:"uint256",name:"_maxCapRatio",type:"uint256"}],name:"setMaxCapRatio",outputs:[],stateMutability:"nonpayable",type:"function",params:{_maxCapRatio:"the new max ratio"},notice:"Set maxCap ratio"},"setNFTStaking(address)":{inputs:[{internalType:"address",name:"_nftStaking",type:"address"}],name:"setNFTStaking",outputs:[],stateMutability:"nonpayable",type:"function"},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unBoostVeDEG(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"unBoostVeDEG",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only called by nftStaking contract",params:{_user:"User address"},notice:"UnBoost veDEG"},"unlockVeDEG(address,uint256)":{inputs:[{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"unlockVeDEG",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Amount to unlock",_to:"User address"},notice:"Unlock veDEG token"},"unpause()":{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},"users(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"users",outputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"lastRelease",type:"uint256"},{internalType:"uint256",name:"amountLocked",type:"uint256"},{internalType:"uint256",name:"lockUntil",type:"uint256"}],stateMutability:"view",type:"function"},"withdraw(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function",details:"User will lose all veDEG once he withdrawed",params:{_amount:"Amount to withdraw"},notice:"Withdraw degis token"},"withdrawLocked()":{inputs:[],name:"withdrawLocked",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraw all the locked veDEG"}}},"contracts/governance/interfaces/IVeDEG.sol:IVeDEG":{source:"contracts/governance/interfaces/IVeDEG.sol",name:"IVeDEG",details:"Interface of the VePtp",methods:{"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"claim()":{inputs:[],name:"claim",outputs:[],stateMutability:"nonpayable",type:"function"},"deposit(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},"getStakedPtp(address)":{inputs:[{internalType:"address",name:"_addr",type:"address"}],name:"getStakedPtp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getVotes(address)":{inputs:[{internalType:"address",name:"_account",type:"address"}],name:"getVotes",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"isUser(address)":{inputs:[{internalType:"address",name:"_addr",type:"address"}],name:"isUser",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"lockVeDEG(address,uint256)":{inputs:[{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"lockVeDEG",outputs:[],stateMutability:"nonpayable",type:"function"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"unlockVeDEG(address,uint256)":{inputs:[{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"unlockVeDEG",outputs:[],stateMutability:"nonpayable",type:"function"},"withdraw(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/governance/interfaces/IVeERC20.sol:IVeERC20":{source:"contracts/governance/interfaces/IVeERC20.sol",name:"IVeERC20",methods:{"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/income/IncomeMaker.sol:IncomeMaker":{source:"contracts/income/IncomeMaker.sol",name:"IncomeMaker",title:"Degis Maker Contract",details:"This contract will receive the transaction fee from swap pool      Then it will transfer",events:{"ConvertIncome(address,address,address,uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"caller",type:"address"},{indexed:!1,internalType:"address",name:"policyTokenAddress",type:"address"},{indexed:!1,internalType:"address",name:"stablecoin",type:"address"},{indexed:!1,internalType:"uint256",name:"policyTokenAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"stablecoinAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"stablecoinBackAmount",type:"uint256"}],name:"ConvertIncome",type:"event"},"EmergencyWithdraw(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"EmergencyWithdraw",type:"event"},"IncomeToUSD(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"policyTokenAddress",type:"address"},{indexed:!1,internalType:"address",name:"stablecoin",type:"address"},{indexed:!1,internalType:"uint256",name:"amountOut",type:"uint256"}],name:"IncomeToUSD",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"}},methods:{"PRICE_SCALE()":{inputs:[],name:"PRICE_SCALE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"UINT256_MAX()":{inputs:[],name:"UINT256_MAX",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"convertIncome(address,address)":{inputs:[{internalType:"address",name:"_policyToken",type:"address"},{internalType:"address",name:"_stablecoin",type:"address"}],name:"convertIncome",outputs:[],stateMutability:"nonpayable",type:"function",params:{_policyToken:"Address of the policy token",_stablecoin:"Address of the stablecoi"},notice:"Convert the income to stablecoin and transfer to the incomeSharingVault"},"emergencyWithdraw(address,uint256)":{inputs:[{internalType:"address",name:"_token",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"emergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Amount of the token",_token:"Address of the token"},notice:"Emergency withdraw by the owner"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"contract INaughtyFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},"incomeSharingVault()":{inputs:[],name:"incomeSharingVault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"initialize(address,address,address)":{inputs:[{internalType:"address",name:"_router",type:"address"},{internalType:"address",name:"_factory",type:"address"},{internalType:"address",name:"_vault",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",params:{_factory:"Address of the naughty factory",_router:"Address of the naughty router",_vault:"Address of the income sharing vault"},notice:"Initialize function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"router()":{inputs:[],name:"router",outputs:[{internalType:"contract INaughtyRouter",name:"",type:"address"}],stateMutability:"view",type:"function"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"contracts/income/IncomeSharingVault.sol:IncomeSharingVault":{source:"contracts/income/IncomeSharingVault.sol",name:"IncomeSharingVault",title:"Degis Income Sharing Contract",notice:"This contract will receive part of the income from Degis products         And the income will be shared by DEG holders (in the form of veDEG)         It is designed to be an ever-lasting reward         At first the reward is USDC.e and later may be transferred to Shield         To enter the income sharing vault, you need to lock some veDEG             - When your veDEG is locked, it can not be withdrawed         The reward is distributed per second like a farming pool         The income will come from (to be updated)             - IncomeMaker: Collect swap fee in naughty price pool             - PolicyCore: Collect deposit/redeem fee in policy core",events:{"Deposit(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Deposit",type:"event"},"Harvest(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Harvest",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"NewRewardPoolStart(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"address",name:"rewardToken",type:"address"}],name:"NewRewardPoolStart",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Paused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},"PoolUpdated(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"accRewardPerSecond",type:"uint256"}],name:"PoolUpdated",type:"event"},"RewardSpeedSet(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"rewardPerSecond",type:"uint256"}],name:"RewardSpeedSet",type:"event"},"RoundTimeChanged(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"oldRoundTime",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newRoundTime",type:"uint256"}],name:"RoundTimeChanged",type:"event"},"Unpaused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},"Withdraw(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"poolId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Withdraw",type:"event"}},methods:{"SCALE()":{inputs:[],name:"SCALE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"deposit(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Amount of tokens to deposit",_poolId:"Pool Id"},notice:"Deposit"},"harvest(uint256,address)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"address",name:"_to",type:"address"}],name:"harvest",outputs:[],stateMutability:"nonpayable",type:"function",params:{_poolId:"Pool Id",_to:"Reward receiver address"},notice:"Harvest income reward"},"initialize(address)":{inputs:[{internalType:"address",name:"_veDEG",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"nextPool()":{inputs:[],name:"nextPool",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"paused()":{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if the contract is paused, and false otherwise."},"pendingReward(uint256,address)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"pendingReward",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{_poolId:"Pool Id",_user:"User address"},returns:{_0:"pendingReward Amount of pending reward"},notice:"Pending reward"},"pools(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"pools",outputs:[{internalType:"bool",name:"available",type:"bool"},{internalType:"address",name:"rewardToken",type:"address"},{internalType:"uint256",name:"totalAmount",type:"uint256"},{internalType:"uint256",name:"rewardPerSecond",type:"uint256"},{internalType:"uint256",name:"accRewardPerShare",type:"uint256"},{internalType:"uint256",name:"lastRewardTimestamp",type:"uint256"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"roundTime()":{inputs:[],name:"roundTime",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"setRewardSpeed(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"uint256",name:"_rewardPerSecond",type:"uint256"}],name:"setRewardSpeed",outputs:[],stateMutability:"nonpayable",type:"function",params:{_poolId:"Pool id",_rewardPerSecond:"Reward speed"},notice:"Set reward speed for a pool"},"setRoundTime(uint256)":{inputs:[{internalType:"uint256",name:"_roundTime",type:"uint256"}],name:"setRoundTime",outputs:[],stateMutability:"nonpayable",type:"function",details:"Round time is only used for checking reward speed",params:{_roundTime:"Round time in seconds"},notice:"Set round time"},"startPool(address)":{inputs:[{internalType:"address",name:"_rewardToken",type:"address"}],name:"startPool",outputs:[],stateMutability:"nonpayable",type:"function",details:"Normally there will be two pools          - USDC.e as reward (1)          - Shield as reward (2)",params:{_rewardToken:"Reward token address"},notice:"Start a new income sharing pool"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"updatePool(uint256)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"}],name:"updatePool",outputs:[],stateMutability:"nonpayable",type:"function",params:{_poolId:"Pool id"},notice:"Update pool"},"users(uint256,address)":{inputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"address",name:"",type:"address"}],name:"users",outputs:[{internalType:"uint256",name:"totalAmount",type:"uint256"},{internalType:"uint256",name:"rewardDebt",type:"uint256"}],stateMutability:"view",type:"function"},"veDEG()":{inputs:[],name:"veDEG",outputs:[{internalType:"contract IVeDEG",name:"",type:"address"}],stateMutability:"view",type:"function"},"withdraw(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Amount to withdraw",_poolId:"Pool Id"},notice:"Withdraw the reward from the pool"},"withdrawAll(uint256)":{inputs:[{internalType:"uint256",name:"_poolId",type:"uint256"}],name:"withdrawAll",outputs:[],stateMutability:"nonpayable",type:"function",params:{_poolId:"Pool Id"},notice:"Withdraw all veDEG"}}},"contracts/libraries/Math.sol:Math":{source:"contracts/libraries/Math.sol",name:"Math"},"contracts/libraries/PublicLib.sol:PublicLib":{source:"contracts/libraries/PublicLib.sol",name:"PublicLib"},"contracts/libraries/SafeCast.sol:SafeCast":{source:"contracts/libraries/SafeCast.sol",name:"SafeCast",details:"Wrappers over Solidity's uintXX/intXX casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always. Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing all math on `uint256` and `int256` and then downcasting."},"contracts/libraries/SafePRBMath.sol:SafePRBMath":{source:"contracts/libraries/SafePRBMath.sol",name:"SafePRBMath",title:"PRBMathUD60x18",author:"Paul Razvan Berg",notice:"Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18 trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60 digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the maximum values permitted by the Solidity type uint256."},"contracts/libraries/SafePRBMathTester.sol:SafePRBMathTester":{source:"contracts/libraries/SafePRBMathTester.sol",name:"SafePRBMathTester",methods:{"avg(uint256,uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"},{internalType:"uint256",name:"y",type:"uint256"}],name:"avg",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"ceil(uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"}],name:"ceil",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"div(uint256,uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"},{internalType:"uint256",name:"y",type:"uint256"}],name:"div",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"e()":{inputs:[],name:"e",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"exp(uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"}],name:"exp",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"exp2(uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"}],name:"exp2",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"floor(uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"}],name:"floor",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"frac(uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"}],name:"frac",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"fromUint(uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"}],name:"fromUint",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"gm(uint256,uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"},{internalType:"uint256",name:"y",type:"uint256"}],name:"gm",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"inv(uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"}],name:"inv",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"ln(uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"}],name:"ln",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"log10(uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"}],name:"log10",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"log2(uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"}],name:"log2",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"mul(uint256,uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"},{internalType:"uint256",name:"y",type:"uint256"}],name:"mul",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"pi()":{inputs:[],name:"pi",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"pow(uint256,uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"},{internalType:"uint256",name:"y",type:"uint256"}],name:"pow",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"powu(uint256,uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"},{internalType:"uint256",name:"y",type:"uint256"}],name:"powu",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"scale()":{inputs:[],name:"scale",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"sqrt(uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"}],name:"sqrt",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"},"toUint(uint256)":{inputs:[{internalType:"uint256",name:"x",type:"uint256"}],name:"toUint",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"pure",type:"function"}}},"contracts/libraries/StablecoinDecimal.sol:StablecoinDecimal":{source:"contracts/libraries/StablecoinDecimal.sol",name:"StablecoinDecimal"},"contracts/libraries/StringsUtils.sol:StringsUtils":{source:"contracts/libraries/StringsUtils.sol",name:"StringsUtils",details:"String operations."},"contracts/libraries/StringsUtilsTester.sol:StringsUtilsTester":{source:"contracts/libraries/StringsUtilsTester.sol",name:"StringsUtilsTester",methods:{"addressToString(address)":{inputs:[{internalType:"address",name:"_addr",type:"address"}],name:"addressToString",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"pure",type:"function"},"byToString(bytes32)":{inputs:[{internalType:"bytes32",name:"_bytes",type:"bytes32"}],name:"byToString",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"pure",type:"function"},"uintToHexString(uint256)":{inputs:[{internalType:"uint256",name:"value",type:"uint256"}],name:"uintToHexString",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"pure",type:"function"},"uintToHexString(uint256,uint256)":{inputs:[{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"length",type:"uint256"}],name:"uintToHexString",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"pure",type:"function",details:"Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"uintToString(uint256)":{inputs:[{internalType:"uint256",name:"value",type:"uint256"}],name:"uintToString",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"pure",type:"function",details:"Converts a `uint256` to its ASCII `string` decimal representation."}}},"contracts/lucky-box/DegisLottery.sol:DegisLottery":{source:"contracts/lucky-box/DegisLottery.sol",name:"DegisLottery",constructor:{inputs:[{internalType:"address",name:"_DEGTokenAddress",type:"address"},{internalType:"address",name:"_USDTokenAddress",type:"address"},{internalType:"address",name:"_randomGeneratorAddress",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"AdminTokenRecovery(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"AdminTokenRecovery",type:"event"},"LotteryClose(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"lotteryId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"timestamp",type:"uint256"}],name:"LotteryClose",type:"event"},"LotteryFundInjection(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"lotteryId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"injectedAmount",type:"uint256"}],name:"LotteryFundInjection",type:"event"},"LotteryNumberDrawn(uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"lotteryId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"finalNumber",type:"uint256"},{indexed:!1,internalType:"uint256",name:"pendingRewards",type:"uint256"}],name:"LotteryNumberDrawn",type:"event"},"LotteryOpen(uint256,uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"lotteryId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"startTime",type:"uint256"},{indexed:!1,internalType:"uint256",name:"endTime",type:"uint256"},{indexed:!1,internalType:"uint256",name:"totalRewards",type:"uint256"}],name:"LotteryOpen",type:"event"},"OperatorAddressChanged(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldOperator",type:"address"},{indexed:!1,internalType:"address",name:"newOperator",type:"address"}],name:"OperatorAddressChanged",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"RandomNumberGeneratorChanged(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldGenerator",type:"address"},{indexed:!1,internalType:"address",name:"newGenerator",type:"address"}],name:"RandomNumberGeneratorChanged",type:"event"},"ReceiveRewards(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"claimer",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!0,internalType:"uint256",name:"lotteryId",type:"uint256"}],name:"ReceiveRewards",type:"event"},"TicketsPurchase(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"buyer",type:"address"},{indexed:!0,internalType:"uint256",name:"lotteryId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"totalAmount",type:"uint256"}],name:"TicketsPurchase",type:"event"},"TicketsRedeem(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"redeemer",type:"address"},{indexed:!0,internalType:"uint256",name:"lotteryId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"totalAmount",type:"uint256"}],name:"TicketsRedeem",type:"event"},"UpdateBalance(uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"lotteryId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"oldBalance",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newBalance",type:"uint256"}],name:"UpdateBalance",type:"event"}},methods:{"DEGToken()":{inputs:[],name:"DEGToken",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"TICKET_PRICE()":{inputs:[],name:"TICKET_PRICE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"USDToken()":{inputs:[],name:"USDToken",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"allPendingRewards()":{inputs:[],name:"allPendingRewards",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"buyTickets(uint256[],uint256[])":{inputs:[{internalType:"uint256[]",name:"_ticketNumbers",type:"uint256[]"},{internalType:"uint256[]",name:"_ticketAmounts",type:"uint256[]"}],name:"buyTickets",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can not be called by a smart contract",params:{_ticketAmounts:"array of ticket amount",_ticketNumbers:"array of ticket numbers between 0 and 9999"},notice:"Buy tickets for the current lottery round"},"checkPoint(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"checkPoint",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"closeLottery()":{inputs:[],name:"closeLottery",outputs:[],stateMutability:"nonpayable",type:"function",details:"Callable by any address and need to meet the endtime conditionNormally it's automatically called by our contract",notice:"Close a lottery"},"currentLotteryId()":{inputs:[],name:"currentLotteryId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"drawLottery()":{inputs:[],name:"drawLottery",outputs:[],stateMutability:"nonpayable",type:"function",details:"Callable by any address",notice:"Draw the final number, calculate reward in DEG for each group,         and make this lottery claimable (need to wait for the random generator)"},"getCurrentRoundWeight()":{inputs:[],name:"getCurrentRoundWeight",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getLotteriesStageInfo(uint256)":{inputs:[{internalType:"uint256",name:"_lotteryId",type:"uint256"}],name:"getLotteriesStageInfo",outputs:[{internalType:"uint256[]",name:"stageProportion",type:"uint256[]"},{internalType:"uint256[]",name:"stageReward",type:"uint256[]"},{internalType:"uint256[]",name:"stageAmount",type:"uint256[]"},{internalType:"uint256[]",name:"stageWeight",type:"uint256[]"}],stateMutability:"view",type:"function",notice:"Get lottery stage info"},"getPoolTicketsInfo(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"_startIndex",type:"uint256"},{internalType:"uint256",name:"_stopIndex",type:"uint256"},{internalType:"uint256",name:"_position",type:"uint256"}],name:"getPoolTicketsInfo",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",details:"May be a huge number, avoid reading this frequently",params:{_position:"Which level to check (0, 1, 2, 3), use 0 to check the 4-digit number",_startIndex:"Start number",_stopIndex:"Stop number"},notice:"Get pool tickets info"},"getUserTicketsInfo(address,uint256,uint256,uint256)":{inputs:[{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"_startIndex",type:"uint256"},{internalType:"uint256",name:"_stopIndex",type:"uint256"},{internalType:"uint256",name:"position",type:"uint256"}],name:"getUserTicketsInfo",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function",notice:"Get user tickets info"},"lotteries(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"lotteries",outputs:[{internalType:"enum DegisLottery.Status",name:"status",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"totalRewards",type:"uint256"},{internalType:"uint256",name:"pendingRewards",type:"uint256"},{internalType:"uint256",name:"finalNumber",type:"uint256"}],stateMutability:"view",type:"function"},"operatorAddress()":{inputs:[],name:"operatorAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"pendingReward(uint256,address)":{inputs:[{internalType:"uint256",name:"_lotteryId",type:"uint256"},{internalType:"address",name:"user",type:"address"}],name:"pendingReward",outputs:[{internalType:"uint256",name:"reward",type:"uint256"}],stateMutability:"view",type:"function",params:{_lotteryId:"lottery id",user:"user address"},notice:"Receive award from a lottery"},"randomGenerator()":{inputs:[],name:"randomGenerator",outputs:[{internalType:"contract IRandomNumberGenerator",name:"",type:"address"}],stateMutability:"view",type:"function"},"receiveRewards(uint256)":{inputs:[{internalType:"uint256",name:"_lotteryId",type:"uint256"}],name:"receiveRewards",outputs:[],stateMutability:"nonpayable",type:"function",details:"Callable by users only, not contract!",params:{_lotteryId:"lottery id"},notice:"Receive all awards from lottery before lottery id"},"recoverWrongTokens(address,uint256)":{inputs:[{internalType:"address",name:"_tokenAddress",type:"address"},{internalType:"uint256",name:"_tokenAmount",type:"uint256"}],name:"recoverWrongTokens",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only callable by the ownerAll tokens except DEG and USD are wrong tokens",params:{_tokenAddress:"the address of the token to withdraw",_tokenAmount:"token amount to withdraw"},notice:"Recover wrong tokens sent to the contract"},"redeemTickets(uint256[])":{inputs:[{internalType:"uint256[]",name:"_ticketNumbers",type:"uint256[]"}],name:"redeemTickets",outputs:[],stateMutability:"nonpayable",type:"function",details:"Callable by users",params:{_ticketNumbers:"Array of ticket numbers"},notice:"Redeem tickets for all lottery"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"rewardBalance()":{inputs:[],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rewardsToNextLottery()":{inputs:[],name:"rewardsToNextLottery",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"setEndTime(uint256)":{inputs:[{internalType:"uint256",name:"_endTime",type:"uint256"}],name:"setEndTime",outputs:[],stateMutability:"nonpayable",type:"function",details:"Normally this function is not needed",params:{_endTime:"New end time"},notice:"Change the end time of current round (only if it was set a wrong number)"},"setOperatorAddress(address)":{inputs:[{internalType:"address",name:"_operatorAddress",type:"address"}],name:"setOperatorAddress",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only callable by the owner",params:{_operatorAddress:"address of the operator"},notice:"Set operator address"},"setRandomNumberGenerator(address)":{inputs:[{internalType:"address",name:"_randomNumberGenerator",type:"address"}],name:"setRandomNumberGenerator",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only callable by the owner",params:{_randomNumberGenerator:"Address of the Random Number Generator contract"},notice:"Set Random Number Generator contract address"},"startLottery(uint256,uint256[4])":{inputs:[{internalType:"uint256",name:"_endTime",type:"uint256"},{internalType:"uint256[4]",name:"_stageProportion",type:"uint256[4]"}],name:"startLottery",outputs:[],stateMutability:"nonpayable",type:"function",details:"Callable only by operatorStage proportion must sum to 10,000(100 <=> 1)",params:{_endTime:"EndTime of the lottery (UNIX timestamp in s)",_stageProportion:"Breakdown of rewards per bracket"},notice:"Start the lottery"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."},"updateBalance()":{inputs:[],name:"updateBalance",outputs:[],stateMutability:"nonpayable",type:"function"},"usersRewards(address,uint256)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"usersRewards",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"usersTotalRewards(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"usersTotalRewards",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"viewUserRewardsInfo(address,uint256,uint256)":{inputs:[{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"_startRound",type:"uint256"},{internalType:"uint256",name:"_endRound",type:"uint256"}],name:"viewUserRewardsInfo",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"}}},"contracts/lucky-box/DegisLotteryV2.sol:DegisLotteryV2":{source:"contracts/lucky-box/DegisLotteryV2.sol",name:"DegisLotteryV2",events:{"AdminTokenRecovery(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"AdminTokenRecovery",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"LotteryClose(uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"lotteryId",type:"uint256"}],name:"LotteryClose",type:"event"},"LotteryInjection(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"lotteryId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"injectedAmount",type:"uint256"}],name:"LotteryInjection",type:"event"},"LotteryNumberDrawn(uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"lotteryId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"finalNumber",type:"uint256"},{indexed:!1,internalType:"uint256",name:"countWinningTickets",type:"uint256"}],name:"LotteryNumberDrawn",type:"event"},"LotteryOpen(uint256,uint256,uint256,uint256,uint256[4],uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"lotteryId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"startTime",type:"uint256"},{indexed:!1,internalType:"uint256",name:"endTime",type:"uint256"},{indexed:!1,internalType:"uint256",name:"priceTicketInDegis",type:"uint256"},{indexed:!1,internalType:"uint256[4]",name:"rewardsBreakdown",type:"uint256[4]"},{indexed:!1,internalType:"uint256",name:"injectedAmount",type:"uint256"}],name:"LotteryOpen",type:"event"},"MaxNumberTicketsEachTimeChanged(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"oldMaxNumber",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newMaxNumber",type:"uint256"}],name:"MaxNumberTicketsEachTimeChanged",type:"event"},"NewRandomGenerator(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"randomGenerator",type:"address"}],name:"NewRandomGenerator",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"TicketsClaim(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"claimer",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!0,internalType:"uint256",name:"lotteryId",type:"uint256"}],name:"TicketsClaim",type:"event"},"TicketsPurchased(address,uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"buyer",type:"address"},{indexed:!0,internalType:"uint256",name:"lotteryId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"number",type:"uint256"},{indexed:!1,internalType:"uint256",name:"totalPrice",type:"uint256"}],name:"TicketsPurchased",type:"event"}},methods:{"DEFAULT_PRICE()":{inputs:[],name:"DEFAULT_PRICE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"DISCOUNT_DIVISOR()":{inputs:[],name:"DISCOUNT_DIVISOR",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"DegisToken()":{inputs:[],name:"DegisToken",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"MAX_TICKET_NUMBER()":{inputs:[],name:"MAX_TICKET_NUMBER",outputs:[{internalType:"uint32",name:"",type:"uint32"}],stateMutability:"view",type:"function"},"MAX_TREASURY_FEE()":{inputs:[],name:"MAX_TREASURY_FEE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"MIN_TICKET_NUMBER()":{inputs:[],name:"MIN_TICKET_NUMBER",outputs:[{internalType:"uint32",name:"",type:"uint32"}],stateMutability:"view",type:"function"},"PROBABILITY_1()":{inputs:[],name:"PROBABILITY_1",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"PROBABILITY_2()":{inputs:[],name:"PROBABILITY_2",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"PROBABILITY_3()":{inputs:[],name:"PROBABILITY_3",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"buyTickets(uint32[])":{inputs:[{internalType:"uint32[]",name:"_ticketNumbers",type:"uint32[]"}],name:"buyTickets",outputs:[],stateMutability:"nonpayable",type:"function",details:"Need to transfer the 4-digit number to a 5-digit number to be used here (+10000)      Can not be called by a smart contract      Can only purchase in the current round",params:{_ticketNumbers:"Array of ticket numbers between 10,000 and 19,999"},notice:"Buy tickets for the current lottery round"},"changeRandomGenerator(address)":{inputs:[{internalType:"address",name:"_randomGeneratorAddress",type:"address"}],name:"changeRandomGenerator",outputs:[],stateMutability:"nonpayable",type:"function",details:"The calls to functions are used to verify the new generator implements them properly. It is necessary to wait for the VRF response before starting a round. Callable only by the contract owner",params:{_randomGeneratorAddress:"address of the random generator"},notice:"Change the random generator contract address"},"claimAllTickets(uint256)":{inputs:[{internalType:"uint256",name:"_lotteryId",type:"uint256"}],name:"claimAllTickets",outputs:[],stateMutability:"nonpayable",type:"function",details:"Callable by users only, not contract      Gas cost may be oversized, recommended to get brackets offchain first",params:{_lotteryId:"Lottery id"},notice:"Claim all winning tickets for a lottery round"},"claimTickets(uint256,uint256[],uint32[])":{inputs:[{internalType:"uint256",name:"_lotteryId",type:"uint256"},{internalType:"uint256[]",name:"_ticketIds",type:"uint256[]"},{internalType:"uint32[]",name:"_brackets",type:"uint32[]"}],name:"claimTickets",outputs:[],stateMutability:"nonpayable",type:"function",details:"Callable by users only, not contract",params:{_brackets:"Bracket / prize level of each ticket",_lotteryId:"Lottery id",_ticketIds:"Array of ticket ids"},notice:"Claim winning tickets"},"closeLottery(uint256)":{inputs:[{internalType:"uint256",name:"_lotteryId",type:"uint256"}],name:"closeLottery",outputs:[],stateMutability:"nonpayable",type:"function",details:"Callable only by the owner",params:{_lotteryId:"lottery round"},notice:"Close a lottery"},"currentLotteryId()":{inputs:[],name:"currentLotteryId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"currentTicketId()":{inputs:[],name:"currentTicketId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"drawFinalNumberAndMakeLotteryClaimable(uint256,bool)":{inputs:[{internalType:"uint256",name:"_lotteryId",type:"uint256"},{internalType:"bool",name:"_autoInjection",type:"bool"}],name:"drawFinalNumberAndMakeLotteryClaimable",outputs:[],stateMutability:"nonpayable",type:"function",details:"Callable only by the operator",params:{_autoInjection:"reinjects funds into next lottery",_lotteryId:"lottery round"},notice:"Draw the final number, calculate reward in Degis for each group, and make this lottery claimable (need to wait for the random generator)"},"initialize(address,address)":{inputs:[{internalType:"address",name:"_degis",type:"address"},{internalType:"address",name:"_randomGenerator",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"RandomNumberGenerator must be deployed prior to this contract",params:{_degis:"Address of DEG",_randomGenerator:"Address of the RandomGenerator contract used to work with ChainLink VRF"},notice:"Initialize function"},"injectFunds(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"injectFunds",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Amount to inject"},notice:"Inject funds"},"lotteries(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"lotteries",outputs:[{internalType:"enum DegisLotteryV2.Status",name:"status",type:"uint8"},{internalType:"uint8",name:"treasuryFee",type:"uint8"},{internalType:"uint32",name:"startTime",type:"uint32"},{internalType:"uint32",name:"endTime",type:"uint32"},{internalType:"uint32",name:"finalNumber",type:"uint32"},{internalType:"uint256",name:"ticketPrice",type:"uint256"},{internalType:"uint256",name:"firstTicketId",type:"uint256"},{internalType:"uint256",name:"firstTicketIdNextRound",type:"uint256"},{internalType:"uint256",name:"amountCollected",type:"uint256"},{internalType:"uint256",name:"pendingRewards",type:"uint256"}],stateMutability:"view",type:"function"},"maxNumberTicketsEachTime()":{inputs:[],name:"maxNumberTicketsEachTime",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"pendingInjectionNextLottery()":{inputs:[],name:"pendingInjectionNextLottery",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"randomGenerator()":{inputs:[],name:"randomGenerator",outputs:[{internalType:"contract IRandomNumberGenerator",name:"",type:"address"}],stateMutability:"view",type:"function"},"recoverWrongTokens(address,uint256)":{inputs:[{internalType:"address",name:"_tokenAddress",type:"address"},{internalType:"uint256",name:"_tokenAmount",type:"uint256"}],name:"recoverWrongTokens",outputs:[],stateMutability:"nonpayable",type:"function",params:{_tokenAddress:"the address of the token to withdraw",_tokenAmount:"token amount to withdraw"},notice:"Recover wrong tokens sent to the contract, only by the owner All tokens except Degis and USDC are wrong tokens"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setMaxNumberTicketsEachTime(uint256)":{inputs:[{internalType:"uint256",name:"_maxNumber",type:"uint256"}],name:"setMaxNumberTicketsEachTime",outputs:[],stateMutability:"nonpayable",type:"function",params:{_maxNumber:"Max number each time"},notice:"Set max number can buy/claim/redeem each time"},"setTreasury(address)":{inputs:[{internalType:"address",name:"_treasury",type:"address"}],name:"setTreasury",outputs:[],stateMutability:"nonpayable",type:"function",params:{_treasury:"wallet address"},notice:"Set treasury wallet address"},"startLottery(uint256,uint256,uint256[4],uint256)":{inputs:[{internalType:"uint256",name:"_endTime",type:"uint256"},{internalType:"uint256",name:"_ticketPrice",type:"uint256"},{internalType:"uint256[4]",name:"_rewardsBreakdown",type:"uint256[4]"},{internalType:"uint256",name:"_fee",type:"uint256"}],name:"startLottery",outputs:[],stateMutability:"nonpayable",type:"function",params:{_endTime:"EndTime of the lottery",_fee:"Treasury fee (10,000 = 100%, 100 = 1%) (set as 0)",_rewardsBreakdown:"Breakdown of rewards per bracket (must sum to 10,000)(100 <=> 1)",_ticketPrice:"Price of each ticket without discount"},notice:"Start the lottery"},"tickets(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"tickets",outputs:[{internalType:"uint32",name:"number",type:"uint32"},{internalType:"address",name:"owner",type:"address"}],stateMutability:"view",type:"function"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"treasury()":{inputs:[],name:"treasury",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"viewAllLottery()":{inputs:[],name:"viewAllLottery",outputs:[{components:[{internalType:"enum DegisLotteryV2.Status",name:"status",type:"uint8"},{internalType:"uint8",name:"treasuryFee",type:"uint8"},{internalType:"uint32",name:"startTime",type:"uint32"},{internalType:"uint32",name:"endTime",type:"uint32"},{internalType:"uint32",name:"finalNumber",type:"uint32"},{internalType:"uint256",name:"ticketPrice",type:"uint256"},{internalType:"uint256[4]",name:"rewardsBreakdown",type:"uint256[4]"},{internalType:"uint256[4]",name:"rewardPerTicketInBracket",type:"uint256[4]"},{internalType:"uint256[4]",name:"countWinnersPerBracket",type:"uint256[4]"},{internalType:"uint256",name:"firstTicketId",type:"uint256"},{internalType:"uint256",name:"firstTicketIdNextRound",type:"uint256"},{internalType:"uint256",name:"amountCollected",type:"uint256"},{internalType:"uint256",name:"pendingRewards",type:"uint256"}],internalType:"struct DegisLotteryV2.Lottery[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function",notice:"View lottery information"},"viewNumbersPerTicketId(uint256[])":{inputs:[{internalType:"uint256[]",name:"_ticketIds",type:"uint256[]"}],name:"viewNumbersPerTicketId",outputs:[{internalType:"uint32[]",name:"",type:"uint32[]"}],stateMutability:"view",type:"function",params:{_ticketIds:": array of _ticketId"},notice:"View ticker statuses and numbers for an array of ticket ids"},"viewWalletTicketIds(address,uint256)":{inputs:[{internalType:"address",name:"_wallet",type:"address"},{internalType:"uint256",name:"_lotteryId",type:"uint256"}],name:"viewWalletTicketIds",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"}}},"contracts/lucky-box/MathLib.sol:MathLib":{source:"contracts/lucky-box/MathLib.sol",name:"MathLib"},"contracts/lucky-box/RandomNumberGenerator.sol:RandomNumberGenerator":{source:"contracts/lucky-box/RandomNumberGenerator.sol",name:"RandomNumberGenerator",constructor:{inputs:[{internalType:"address",name:"_vrfCoordinator",type:"address"},{internalType:"address",name:"_linkToken",type:"address"},{internalType:"bytes32",name:"_keyHash",type:"bytes32"}],stateMutability:"nonpayable",type:"constructor"},events:{"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"}},methods:{"DegisLottery()":{inputs:[],name:"DegisLottery",outputs:[{internalType:"contract IDegisLottery",name:"",type:"address"}],stateMutability:"view",type:"function"},"fee()":{inputs:[],name:"fee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getRandomNumber()":{inputs:[],name:"getRandomNumber",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Request randomness from Chainlink VRF"},"keyHash()":{inputs:[],name:"keyHash",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"latestLotteryId()":{inputs:[],name:"latestLotteryId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"latestRequestId()":{inputs:[],name:"latestRequestId",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"randomResult()":{inputs:[],name:"randomResult",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rawFulfillRandomness(bytes32,uint256)":{inputs:[{internalType:"bytes32",name:"requestId",type:"bytes32"},{internalType:"uint256",name:"randomness",type:"uint256"}],name:"rawFulfillRandomness",outputs:[],stateMutability:"nonpayable",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"setFee(uint256)":{inputs:[{internalType:"uint256",name:"_fee",type:"uint256"}],name:"setFee",outputs:[],stateMutability:"nonpayable",type:"function",params:{_fee:"new fee (in LINK)"},notice:"Change the fee"},"setKeyHash(bytes32)":{inputs:[{internalType:"bytes32",name:"_keyHash",type:"bytes32"}],name:"setKeyHash",outputs:[],stateMutability:"nonpayable",type:"function",params:{_keyHash:"new keyHash"},notice:"Change the keyHash"},"setLotteryAddress(address)":{inputs:[{internalType:"address",name:"_degisLottery",type:"address"}],name:"setLotteryAddress",outputs:[],stateMutability:"nonpayable",type:"function",params:{_degisLottery:"address of the PancakeSwap lottery"},notice:"Set the address for the DegisLottery"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."},"withdrawTokens(address,uint256)":{inputs:[{internalType:"address",name:"_tokenAddress",type:"address"},{internalType:"uint256",name:"_tokenAmount",type:"uint256"}],name:"withdrawTokens",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only callable by owner.",params:{_tokenAddress:"the address of the token to withdraw",_tokenAmount:"the number of token amount to withdraw"},notice:"It allows the admin to withdraw tokens sent to the contract"}}},"contracts/lucky-box/RandomNumberGeneratorV2.sol:RandomNumberGeneratorV2":{source:"contracts/lucky-box/RandomNumberGeneratorV2.sol",name:"RandomNumberGeneratorV2",constructor:{inputs:[{internalType:"address",name:"_vrfCoordinator",type:"address"},{internalType:"bytes32",name:"_keyHash",type:"bytes32"},{internalType:"uint64",name:"_subscriptionId",type:"uint64"}],stateMutability:"nonpayable",type:"constructor"},events:{"RequestRandomWords(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"requestId",type:"uint256"}],name:"RequestRandomWords",type:"event"}},methods:{"keyHash()":{inputs:[],name:"keyHash",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"rawFulfillRandomWords(uint256,uint256[])":{inputs:[{internalType:"uint256",name:"requestId",type:"uint256"},{internalType:"uint256[]",name:"randomWords",type:"uint256[]"}],name:"rawFulfillRandomWords",outputs:[],stateMutability:"nonpayable",type:"function"},"requestRandomWords()":{inputs:[],name:"requestRandomWords",outputs:[],stateMutability:"nonpayable",type:"function"},"s_randomWords(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"s_randomWords",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"s_requestId()":{inputs:[],name:"s_requestId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"setCoordinator(address)":{inputs:[{internalType:"address",name:"_coordinator",type:"address"}],name:"setCoordinator",outputs:[],stateMutability:"nonpayable",type:"function"},"setKeyHash(bytes32)":{inputs:[{internalType:"bytes32",name:"_keyHash",type:"bytes32"}],name:"setKeyHash",outputs:[],stateMutability:"nonpayable",type:"function"},"setRequestConfirmations(uint16)":{inputs:[{internalType:"uint16",name:"_requestConfirmations",type:"uint16"}],name:"setRequestConfirmations",outputs:[],stateMutability:"nonpayable",type:"function"},"setSubscriptionId(uint64)":{inputs:[{internalType:"uint64",name:"_subscriptionId",type:"uint64"}],name:"setSubscriptionId",outputs:[],stateMutability:"nonpayable",type:"function"},"setWordsPerTime(uint32)":{inputs:[{internalType:"uint32",name:"_wordsPerTime",type:"uint32"}],name:"setWordsPerTime",outputs:[],stateMutability:"nonpayable",type:"function"},"wordsPerTime()":{inputs:[],name:"wordsPerTime",outputs:[{internalType:"uint32",name:"",type:"uint32"}],stateMutability:"view",type:"function"}}},"contracts/lucky-box/interfaces/IDegisLottery.sol:IDegisLottery":{source:"contracts/lucky-box/interfaces/IDegisLottery.sol",name:"IDegisLottery",methods:{"currentLotteryId()":{inputs:[],name:"currentLotteryId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",notice:"View current lottery id"},"injectFunds(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"injectFunds",outputs:[],stateMutability:"nonpayable",type:"function",details:"Callable by operator",params:{_amount:"amount to inject in USD"},notice:"Inject funds"}}},"contracts/lucky-box/interfaces/IRandomNumberGenerator.sol:IRandomNumberGenerator":{source:"contracts/lucky-box/interfaces/IRandomNumberGenerator.sol",name:"IRandomNumberGenerator",methods:{"getRandomNumber()":{inputs:[],name:"getRandomNumber",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Views random result"},"latestLotteryId()":{inputs:[],name:"latestLotteryId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"randomResult()":{inputs:[],name:"randomResult",outputs:[{internalType:"uint32",name:"",type:"uint32"}],stateMutability:"view",type:"function"}}},"contracts/miserable-flight/FDPolicyToken.sol:FDPolicyToken":{source:"contracts/miserable-flight/FDPolicyToken.sol",name:"FDPolicyToken",title:"Policy Token for flight delay",notice:"ERC721 policy token         Can get a long string form of the tokenURI         When the ownership is transferred, it will update the status in policyFlow",constructor:{inputs:[],stateMutability:"nonpayable",type:"constructor"},events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"approved",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Approval",type:"event"},"ApprovalForAll(address,address,bool)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!1,internalType:"bool",name:"approved",type:"bool"}],name:"ApprovalForAll",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"PolicyFlowUpdated(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newPolicyFlow",type:"address"}],name:"PolicyFlowUpdated",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"_nextId()":{inputs:[],name:"_nextId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"approve(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"approve",outputs:[],stateMutability:"nonpayable",type:"function",details:"See {IERC721-approve}."},"balanceOf(address)":{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC721-balanceOf}."},"getApproved(uint256)":{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getApproved",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"operator",type:"address"}],name:"isApprovedForAll",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC721-isApprovedForAll}."},"mintPolicyToken(address)":{inputs:[{internalType:"address",name:"_to",type:"address"}],name:"mintPolicyToken",outputs:[],stateMutability:"nonpayable",type:"function",params:{_to:"The receiver address"},notice:"Mint a new policy token to an address"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"See {IERC721Metadata-name}."},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"ownerOf(uint256)":{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"ownerOf",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"See {IERC721-ownerOf}."},"policyFlow()":{inputs:[],name:"policyFlow",outputs:[{internalType:"contract IPolicyFlow",name:"",type:"address"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"safeTransferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"safeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function",details:"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"bytes",name:"_data",type:"bytes"}],name:"safeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function",details:"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{inputs:[{internalType:"address",name:"operator",type:"address"},{internalType:"bool",name:"approved",type:"bool"}],name:"setApprovalForAll",outputs:[],stateMutability:"nonpayable",type:"function",details:"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"See {IERC165-supportsInterface}."},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"See {IERC721Metadata-symbol}."},"tokenByIndex(uint256)":{inputs:[{internalType:"uint256",name:"index",type:"uint256"}],name:"tokenByIndex",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC721Enumerable-tokenByIndex}."},"tokenOfOwnerByIndex(address,uint256)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"index",type:"uint256"}],name:"tokenOfOwnerByIndex",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC721Enumerable-tokenOfOwnerByIndex}."},"tokenURI(uint256)":{inputs:[{internalType:"uint256",name:"_tokenId",type:"uint256"}],name:"tokenURI",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",params:{_tokenId:"Token Id of the policy token"},returns:{_0:"The tokenURI in string form"},notice:"Get the tokenURI of a policy"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC721Enumerable-totalSupply}."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"transferFrom",outputs:[],stateMutability:"nonpayable",type:"function",details:"See {IERC721-transferFrom}."},"transferOwner(address,address,uint256)":{inputs:[{internalType:"address",name:"_from",type:"address"},{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_tokenId",type:"uint256"}],name:"transferOwner",outputs:[],stateMutability:"nonpayable",type:"function",details:"Need approval and is prepared for secondary marketIf you just transfer the policy token, you will not transfer the right for claiming payoff",params:{_from:"The original owner of the policy",_to:"The new owner of the policy",_tokenId:"Token id of the policy"},notice:"Transfer the owner of a policy token and update the information in policyFlow"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."},"updatePolicyFlow(address)":{inputs:[{internalType:"address",name:"_policyFlow",type:"address"}],name:"updatePolicyFlow",outputs:[],stateMutability:"nonpayable",type:"function",params:{_policyFlow:"New policyFlow contract address"},notice:"Update the policyFlow address if it has been updated"}}},"contracts/miserable-flight/FlightOracle.sol:FlightOracle":{source:"contracts/miserable-flight/FlightOracle.sol",name:"FlightOracle",title:"Flight Oracle",details:"Remember to set the url, oracleAddress and jobId         If there are multiple oracle providers in the future, this contract may need to be updated.",notice:"This is the flight oracle contract.         Called by policyFlow contract and send the request to chainlink node.         After receiving the result, call the policyFlow contract to do the settlement.",constructor:{inputs:[{internalType:"address",name:"_policyFlow",type:"address"},{internalType:"address",name:"_link",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"ChainlinkCancelled(bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"id",type:"bytes32"}],name:"ChainlinkCancelled",type:"event"},"ChainlinkFulfilled(bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"id",type:"bytes32"}],name:"ChainlinkFulfilled",type:"event"},"ChainlinkRequested(bytes32)":{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"id",type:"bytes32"}],name:"ChainlinkRequested",type:"event"},"JobIdChanged(bytes32)":{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"newJobId",type:"bytes32"}],name:"JobIdChanged",type:"event"},"OracleAddressChanged(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newOracle",type:"address"}],name:"OracleAddressChanged",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"PolicyFlowChanged(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newPolicyFlow",type:"address"}],name:"PolicyFlowChanged",type:"event"}},methods:{"fulfill(bytes32,uint256)":{inputs:[{internalType:"bytes32",name:"_requestId",type:"bytes32"},{internalType:"uint256",name:"_data",type:"uint256"}],name:"fulfill",outputs:[],stateMutability:"nonpayable",type:"function",details:"The recordChainlinkFulfillment protects this function from being called      by anyone other than the oracle address that the request was sent to",params:{_data:"The answer provided by the oracle",_requestId:"The ID that was generated for the request"},notice:"The fulfill method from requests created by this contract"},"getChainlinkTokenAddress()":{inputs:[],name:"getChainlinkTokenAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"This is the public implementation for chainlinkTokenAddress, which is      an internal method of the ChainlinkClient contract",notice:"Returns the address of the LINK token"},"jobId()":{inputs:[],name:"jobId",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"newOracleRequest(uint256,string,string,int256)":{inputs:[{internalType:"uint256",name:"_payment",type:"uint256"},{internalType:"string",name:"_url",type:"string"},{internalType:"string",name:"_path",type:"string"},{internalType:"int256",name:"_times",type:"int256"}],name:"newOracleRequest",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"nonpayable",type:"function",details:"This function ignores the stored Oracle contract address and      will instead send the request to the address specified",params:{_path:"The dot-delimited path to parse of the response",_payment:"Payment to the oracle",_times:"The number to multiply the result by",_url:"The URL to fetch data from"},notice:"Creates a request to the specified Oracle contract address"},"oracleAddress()":{inputs:[],name:"oracleAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"policyFlow()":{inputs:[],name:"policyFlow",outputs:[{internalType:"contract IPolicyFlow",name:"",type:"address"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"setJobId(bytes32)":{inputs:[{internalType:"bytes32",name:"_newJobId",type:"bytes32"}],name:"setJobId",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Set a new job id"},"setOracleAddress(address)":{inputs:[{internalType:"address",name:"_newOracle",type:"address"}],name:"setOracleAddress",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Set the oracle address"},"setPolicyFlow(address)":{inputs:[{internalType:"address",name:"_policyFlow",type:"address"}],name:"setPolicyFlow",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Change the policy flow contract address"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."}}},"contracts/miserable-flight/InsurancePool.sol:InsurancePool":{source:"contracts/miserable-flight/InsurancePool.sol",name:"InsurancePool",title:"Insurance Pool",notice:"Insurance pool is the reserved risk pool for flight delay product.         For simplicity, some state variables are in the InsurancePoolStore contract.",constructor:{inputs:[{internalType:"address",name:"_emergencyPool",type:"address"},{internalType:"address",name:"_degisLottery",type:"address"},{internalType:"address",name:"_usdAddress",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"CollateralFactorChanged(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"oldFactor",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newFactor",type:"uint256"}],name:"CollateralFactorChanged",type:"event"},"FrozenTimeChanged(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"_newFrozenTime",type:"uint256"}],name:"FrozenTimeChanged",type:"event"},"NewPolicyBought(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"userAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"premium",type:"uint256"},{indexed:!1,internalType:"uint256",name:"payout",type:"uint256"}],name:"NewPolicyBought",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"PolicyFlowChanged(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"policyFlowAddress",type:"address"}],name:"PolicyFlowChanged",type:"event"},"PremiumDistributed(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"_premiumToEmergency",type:"uint256"},{indexed:!1,internalType:"uint256",name:"_premiumToLottery",type:"uint256"}],name:"PremiumDistributed",type:"event"},"RewardDistributionChanged(uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"toLP",type:"uint256"},{indexed:!1,internalType:"uint256",name:"toLottery",type:"uint256"},{indexed:!1,internalType:"uint256",name:"toEmergency",type:"uint256"}],name:"RewardDistributionChanged",type:"event"},"Stake(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"userAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Stake",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},"Unstake(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"userAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Unstake",type:"event"}},methods:{"LPValue()":{inputs:[],name:"LPValue",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"USDToken()":{inputs:[],name:"USDToken",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"activePremiums()":{inputs:[],name:"activePremiums",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"availableCapacity()":{inputs:[],name:"availableCapacity",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"checkCapacity(uint256)":{inputs:[{internalType:"uint256",name:"_payoff",type:"uint256"}],name:"checkCapacity",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",params:{_payoff:"Payoff of the policy to be bought"},returns:{_0:"Whether there is enough capacity in the pool for this payoff"},notice:"Check the conditions when receive new buying request"},"collateralFactor()":{inputs:[],name:"collateralFactor",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"degisLottery()":{inputs:[],name:"degisLottery",outputs:[{internalType:"contract IDegisLottery",name:"",type:"address"}],stateMutability:"view",type:"function"},"emergencyPool()":{inputs:[],name:"emergencyPool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"frozenTime()":{inputs:[],name:"frozenTime",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getUnlockedFor(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"getUnlockedFor",outputs:[{internalType:"uint256",name:"_unlockedAmount",type:"uint256"}],stateMutability:"view",type:"function",params:{_user:"User's address"},returns:{_unlockedAmount:"Unlocked amount of the user"},notice:"Get the balance that one user(LP) can unlock"},"getUserBalance(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"getUserBalance",outputs:[{internalType:"uint256",name:"_userBalance",type:"uint256"}],stateMutability:"view",type:"function",details:"Used in many places so give it a seperate function",params:{_user:"User's address"},returns:{_userBalance:"Real balance of this user"},notice:"Get the real balance: LPValue * LP_Num"},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"lockedBalance()":{inputs:[],name:"lockedBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"lockedRatio()":{inputs:[],name:"lockedRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"payClaim(uint256,uint256,uint256,address)":{inputs:[{internalType:"uint256",name:"_premium",type:"uint256"},{internalType:"uint256",name:"_payoff",type:"uint256"},{internalType:"uint256",name:"_realPayoff",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"payClaim",outputs:[],stateMutability:"nonpayable",type:"function",params:{_payoff:"Max payoff of the policy",_premium:"Premium of the policy",_realPayoff:"Real payoff of the policy",_user:"Address of the policy claimer"},notice:"Pay a claim"},"policyFlow()":{inputs:[],name:"policyFlow",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"rewardDistribution(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"rewardDistribution",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"setCollateralFactor(uint256)":{inputs:[{internalType:"uint256",name:"_factor",type:"uint256"}],name:"setCollateralFactor",outputs:[],stateMutability:"nonpayable",type:"function",params:{_factor:"The new collateral factor"},notice:"Change the collateral factor"},"setFrozenTime(uint256)":{inputs:[{internalType:"uint256",name:"_newFrozenTime",type:"uint256"}],name:"setFrozenTime",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newFrozenTime:"New frozen time, in timestamp(s)"},notice:"Set a new frozen time"},"setPolicyFlow(address)":{inputs:[{internalType:"address",name:"_policyFlowAddress",type:"address"}],name:"setPolicyFlow",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Set the address of policyFlow"},"setRewardDistribution(uint256[3])":{inputs:[{internalType:"uint256[3]",name:"_newDistribution",type:"uint256[3]"}],name:"setRewardDistribution",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newDistribution:"New distribution [LP, Lottery, Emergency]"},notice:"Set the premium reward distribution"},"stake(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"stake",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"The amount that the user want to stake"},notice:"LPs stake assets into the pool"},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalStakingBalance()":{inputs:[],name:"totalStakingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."},"unstake(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"unstake",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only unstake by yourself",params:{_amount:"The amount that the user want to unstake"},notice:"Unstake from the pool (May fail if a claim happens before this operation)"},"unstakeMax()":{inputs:[],name:"unstakeMax",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Unstake the max amount of a user"},"updateWhenBuy(uint256,uint256,address)":{inputs:[{internalType:"uint256",name:"_premium",type:"uint256"},{internalType:"uint256",name:"_payoff",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"updateWhenBuy",outputs:[],stateMutability:"nonpayable",type:"function",details:"Capacity check is done before calling this function",params:{_payoff:"Policy's payoff (max payoff)",_premium:"Policy's premium",_user:"Address of the buyer"},notice:"Update the pool variables when buying policies"},"updateWhenExpire(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_premium",type:"uint256"},{internalType:"uint256",name:"_payoff",type:"uint256"}],name:"updateWhenExpire",outputs:[],stateMutability:"nonpayable",type:"function",params:{_payoff:"Policy's payoff (max payoff)",_premium:"Policy's premium"},notice:"Update the status when a policy expires"},"userInfo(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"userInfo",outputs:[{internalType:"uint256",name:"depositTime",type:"uint256"},{internalType:"uint256",name:"pendingBalance",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/miserable-flight/PolicyFlow.sol:PolicyFlow":{source:"contracts/miserable-flight/PolicyFlow.sol",name:"PolicyFlow",events:{"DelayThresholdChanged(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"thresholdMin",type:"uint256"},{indexed:!1,internalType:"uint256",name:"thresholdMax",type:"uint256"}],name:"DelayThresholdChanged",type:"event"},"FeeChanged(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newFee",type:"uint256"}],name:"FeeChanged",type:"event"},"FlightOracleChanged(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newOracle",type:"address"}],name:"FlightOracleChanged",type:"event"},"FulfilledOracleRequest(uint256,bytes32)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"policyId",type:"uint256"},{indexed:!1,internalType:"bytes32",name:"requestId",type:"bytes32"}],name:"FulfilledOracleRequest",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"MaxPayoffChanged(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newMaxPayoff",type:"uint256"}],name:"MaxPayoffChanged",type:"event"},"MinTimeBeforeDepartureChanged(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newMinTime",type:"uint256"}],name:"MinTimeBeforeDepartureChanged",type:"event"},"NewClaimRequest(uint256,string,bytes32)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"policyId",type:"uint256"},{indexed:!1,internalType:"string",name:"flightNumber",type:"string"},{indexed:!1,internalType:"bytes32",name:"requestId",type:"bytes32"}],name:"NewClaimRequest",type:"event"},"NewPolicyApplication(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"policyId",type:"uint256"},{indexed:!0,internalType:"address",name:"user",type:"address"}],name:"NewPolicyApplication",type:"event"},"OracleUrlChanged(string)":{anonymous:!1,inputs:[{indexed:!1,internalType:"string",name:"newUrl",type:"string"}],name:"OracleUrlChanged",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"PolicyClaimed(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"policyId",type:"uint256"},{indexed:!0,internalType:"address",name:"user",type:"address"}],name:"PolicyClaimed",type:"event"},"PolicyDeclined(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"policyId",type:"uint256"},{indexed:!0,internalType:"address",name:"user",type:"address"}],name:"PolicyDeclined",type:"event"},"PolicyExpired(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"policyId",type:"uint256"},{indexed:!0,internalType:"address",name:"user",type:"address"}],name:"PolicyExpired",type:"event"},"PolicyOwnerTransfer(uint256,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"address",name:"newOwner",type:"address"}],name:"PolicyOwnerTransfer",type:"event"},"PolicySold(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"policyId",type:"uint256"},{indexed:!0,internalType:"address",name:"user",type:"address"}],name:"PolicySold",type:"event"}},methods:{"DELAY_THRESHOLD_MAX()":{inputs:[],name:"DELAY_THRESHOLD_MAX",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"DELAY_THRESHOLD_MIN()":{inputs:[],name:"DELAY_THRESHOLD_MIN",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"FLIGHT_STATUS_URL()":{inputs:[],name:"FLIGHT_STATUS_URL",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"MAX_PAYOFF()":{inputs:[],name:"MAX_PAYOFF",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"MIN_TIME_BEFORE_DEPARTURE()":{inputs:[],name:"MIN_TIME_BEFORE_DEPARTURE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"PRODUCT_ID()":{inputs:[],name:"PRODUCT_ID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"buyerToken()":{inputs:[],name:"buyerToken",outputs:[{internalType:"contract IBuyerToken",name:"",type:"address"}],stateMutability:"view",type:"function"},"fee()":{inputs:[],name:"fee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"finalSettlement(bytes32,uint256)":{inputs:[{internalType:"bytes32",name:"_requestId",type:"bytes32"},{internalType:"uint256",name:"_result",type:"uint256"}],name:"finalSettlement",outputs:[],stateMutability:"nonpayable",type:"function",params:{_requestId:"Chainlink request id",_result:"Delay result (minutes) given by oracle"},notice:"Do the final settlement, called by FlightOracle contract"},"findPolicyBuyerById(uint256)":{inputs:[{internalType:"uint256",name:"_policyId",type:"uint256"}],name:"findPolicyBuyerById",outputs:[{internalType:"address",name:"buyerAddress",type:"address"}],stateMutability:"view",type:"function",params:{_policyId:"Unique policy Id (uint256)"},returns:{buyerAddress:"The buyer of this policy"},notice:"Get the policy buyer by policyId"},"flightOracle()":{inputs:[],name:"flightOracle",outputs:[{internalType:"contract IFlightOracle",name:"",type:"address"}],stateMutability:"view",type:"function"},"getPolicyInfoById(uint256)":{inputs:[{internalType:"uint256",name:"_policyId",type:"uint256"}],name:"getPolicyInfoById",outputs:[{components:[{internalType:"uint256",name:"productId",type:"uint256"},{internalType:"address",name:"buyerAddress",type:"address"},{internalType:"uint256",name:"policyId",type:"uint256"},{internalType:"string",name:"flightNumber",type:"string"},{internalType:"uint256",name:"premium",type:"uint256"},{internalType:"uint256",name:"payoff",type:"uint256"},{internalType:"uint256",name:"purchaseTimestamp",type:"uint256"},{internalType:"uint256",name:"departureTimestamp",type:"uint256"},{internalType:"uint256",name:"landingTimestamp",type:"uint256"},{internalType:"enum IPolicyStruct.PolicyStatus",name:"status",type:"uint8"},{internalType:"bool",name:"alreadySettled",type:"bool"},{internalType:"uint256",name:"delayResult",type:"uint256"}],internalType:"struct IPolicyStruct.PolicyInfo",name:"policy",type:"tuple"}],stateMutability:"view",type:"function",params:{_policyId:"Total count/order of the policy = NFT tokenId"},returns:{policy:"A struct of information about this policy"},notice:"Get the policyInfo from its count/order"},"initialize(address,address,address,address)":{inputs:[{internalType:"address",name:"_insurancePool",type:"address"},{internalType:"address",name:"_policyToken",type:"address"},{internalType:"address",name:"_sigManager",type:"address"},{internalType:"address",name:"_buyerToken",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",details:"Upgradeable contracts do not have a constrcutor",params:{_buyerToken:"The BuyerToken contract address",_insurancePool:"The InsurancePool contract address",_policyToken:"The PolicyToken contract address",_sigManager:"The SigManager contract address"},notice:"Initializer of the PolicyFlow contract"},"insurancePool()":{inputs:[],name:"insurancePool",outputs:[{internalType:"contract IInsurancePool",name:"",type:"address"}],stateMutability:"view",type:"function"},"newApplication(uint256,string,uint256,uint256,uint256,uint256,bytes)":{inputs:[{internalType:"uint256",name:"_productId",type:"uint256"},{internalType:"string",name:"_flightNumber",type:"string"},{internalType:"uint256",name:"_premium",type:"uint256"},{internalType:"uint256",name:"_departureTimestamp",type:"uint256"},{internalType:"uint256",name:"_landingDate",type:"uint256"},{internalType:"uint256",name:"_deadline",type:"uint256"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"newApplication",outputs:[{internalType:"uint256",name:"_policyId",type:"uint256"}],stateMutability:"nonpayable",type:"function",details:"The transaction should have the signature from the backend serverPremium is in stablecoin, so it is 6 decimals",params:{_deadline:"Deadline for this purchase request",_departureTimestamp:"Departure date of this flight (unix timestamp in s, not ms!)",_flightNumber:'Flight number in string (e.g. "AQ1299")',_landingDate:"Landing date of this flight (uinx timestamp in s, not ms!)",_premium:"Premium of this policy (decimals: 6)",_productId:"ID of the purchased product (0: flightdelay; 1,2,3...: others)",signature:"Use web3.eth.sign(hash(data), account) to generate the signature"},notice:"Buy a new flight delay policy"},"newClaimRequest(uint256,string,string,string,bool)":{inputs:[{internalType:"uint256",name:"_policyId",type:"uint256"},{internalType:"string",name:"_flightNumber",type:"string"},{internalType:"string",name:"_timestamp",type:"string"},{internalType:"string",name:"_path",type:"string"},{internalType:"bool",name:"_forceUpdate",type:"bool"}],name:"newClaimRequest",outputs:[],stateMutability:"nonpayable",type:"function",details:"Anyone can make a new claim",params:{_flightNumber:"The flight number",_forceUpdate:"Owner can force to update",_path:"Which data in json needs to get",_policyId:"The total order/id of the policy",_timestamp:"The flight departure timestamp"},notice:"Make a claim request"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"policyList(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"policyList",outputs:[{internalType:"uint256",name:"productId",type:"uint256"},{internalType:"address",name:"buyerAddress",type:"address"},{internalType:"uint256",name:"policyId",type:"uint256"},{internalType:"string",name:"flightNumber",type:"string"},{internalType:"uint256",name:"premium",type:"uint256"},{internalType:"uint256",name:"payoff",type:"uint256"},{internalType:"uint256",name:"purchaseTimestamp",type:"uint256"},{internalType:"uint256",name:"departureTimestamp",type:"uint256"},{internalType:"uint256",name:"landingTimestamp",type:"uint256"},{internalType:"enum IPolicyStruct.PolicyStatus",name:"status",type:"uint8"},{internalType:"bool",name:"alreadySettled",type:"bool"},{internalType:"uint256",name:"delayResult",type:"uint256"}],stateMutability:"view",type:"function"},"policyOwnerTransfer(uint256,address,address)":{inputs:[{internalType:"uint256",name:"_tokenId",type:"uint256"},{internalType:"address",name:"_oldOwner",type:"address"},{internalType:"address",name:"_newOwner",type:"address"}],name:"policyOwnerTransfer",outputs:[],stateMutability:"nonpayable",type:"function",details:"This function is called by the ERC721 contract of PolicyToken",params:{_newOwner:"The new owner",_oldOwner:"The initial owner",_tokenId:"Token Id of the policy token"},notice:"Update information when a policy token's ownership has been transferred"},"policyToken()":{inputs:[],name:"policyToken",outputs:[{internalType:"contract IFDPolicyToken",name:"",type:"address"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setDelayThreshold(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_thresholdMin",type:"uint256"},{internalType:"uint256",name:"_thresholdMax",type:"uint256"}],name:"setDelayThreshold",outputs:[],stateMutability:"nonpayable",type:"function",params:{_thresholdMax:"New maximum threshold",_thresholdMin:"New minimum threshold"},notice:"Set the new delay threshold used for calculating payoff"},"setFee(uint256)":{inputs:[{internalType:"uint256",name:"_fee",type:"uint256"}],name:"setFee",outputs:[],stateMutability:"nonpayable",type:"function",params:{_fee:"New oracle fee"},notice:"Change the oracle fee"},"setFlightOracle(address)":{inputs:[{internalType:"address",name:"_oracleAddress",type:"address"}],name:"setFlightOracle",outputs:[],stateMutability:"nonpayable",type:"function",params:{_oracleAddress:"New oracle address"},notice:"Change the oracle address"},"setMaxPayoff(uint256)":{inputs:[{internalType:"uint256",name:"_newMaxPayoff",type:"uint256"}],name:"setMaxPayoff",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newMaxPayoff:"New maxpayoff amount"},notice:"Change the max payoff"},"setMinTimeBeforeDeparture(uint256)":{inputs:[{internalType:"uint256",name:"_newMinTime",type:"uint256"}],name:"setMinTimeBeforeDeparture",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newMinTime:"New time set"},notice:"How long before departure when users can not buy new policies"},"setURL(string)":{inputs:[{internalType:"string",name:"_url",type:"string"}],name:"setURL",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Set a new url"},"sigManager()":{inputs:[],name:"sigManager",outputs:[{internalType:"contract ISigManager",name:"",type:"address"}],stateMutability:"view",type:"function"},"totalPolicies()":{inputs:[],name:"totalPolicies",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"viewUserPolicy(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"viewUserPolicy",outputs:[{components:[{internalType:"uint256",name:"productId",type:"uint256"},{internalType:"address",name:"buyerAddress",type:"address"},{internalType:"uint256",name:"policyId",type:"uint256"},{internalType:"string",name:"flightNumber",type:"string"},{internalType:"uint256",name:"premium",type:"uint256"},{internalType:"uint256",name:"payoff",type:"uint256"},{internalType:"uint256",name:"purchaseTimestamp",type:"uint256"},{internalType:"uint256",name:"departureTimestamp",type:"uint256"},{internalType:"uint256",name:"landingTimestamp",type:"uint256"},{internalType:"enum IPolicyStruct.PolicyStatus",name:"status",type:"uint8"},{internalType:"bool",name:"alreadySettled",type:"bool"},{internalType:"uint256",name:"delayResult",type:"uint256"}],internalType:"struct IPolicyStruct.PolicyInfo[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function",details:"Should only be checked for frontend",params:{_user:"User's address"},returns:{_0:"userPolicies User's all policy details"},notice:"Show a user's policies (all)"}}},"contracts/miserable-flight/SigManager.sol:SigManager":{source:"contracts/miserable-flight/SigManager.sol",name:"SigManager",title:"Signature Manager",notice:"Signature is used when submitting new applications.         The premium should be decided by the pricing model and be signed by a private key.         Other submissions will not be accepted.         Please keep the signer key safe.",constructor:{inputs:[],stateMutability:"nonpayable",type:"constructor"},events:{"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"SignerAdded(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"_newSigner",type:"address"}],name:"SignerAdded",type:"event"},"SignerRemoved(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"_oldSigner",type:"address"}],name:"SignerRemoved",type:"event"}},methods:{"_SUBMIT_APPLICATION_TYPEHASH()":{inputs:[],name:"_SUBMIT_APPLICATION_TYPEHASH",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"addSigner(address)":{inputs:[{internalType:"address",name:"_newSigner",type:"address"}],name:"addSigner",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newSigner:"The new signer address"},notice:"Add a signer into valid signer list"},"checkSignature(bytes,string,uint256,uint256,address,uint256,uint256)":{inputs:[{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"string",name:"_flightNumber",type:"string"},{internalType:"uint256",name:"_departureTimestamp",type:"uint256"},{internalType:"uint256",name:"_landingDate",type:"uint256"},{internalType:"address",name:"_user",type:"address"},{internalType:"uint256",name:"_premium",type:"uint256"},{internalType:"uint256",name:"_deadline",type:"uint256"}],name:"checkSignature",outputs:[],stateMutability:"view",type:"function",params:{_deadline:"Deadline of a this signature",_departureTimestamp:"Flight departure timestamp",_flightNumber:"Flight number",_landingDate:"Flight landing date",_premium:"Policy premium",_user:"User address",signature:"65 bytes array: [[v (1)], [r (32)], [s (32)]]"},notice:"Check signature when buying a new policy (avoid arbitrary premium amount)"},"isValidSigner(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"isValidSigner",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"removeSigner(address)":{inputs:[{internalType:"address",name:"_oldSigner",type:"address"}],name:"removeSigner",outputs:[],stateMutability:"nonpayable",type:"function",params:{_oldSigner:"The old signer address to be removed"},notice:"Remove a signer from the valid signer list"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."}}},"contracts/miserable-flight/abstracts/InsurancePoolStore.sol:InsurancePoolStore":{source:"contracts/miserable-flight/abstracts/InsurancePoolStore.sol",name:"InsurancePoolStore",events:{"CollateralFactorChanged(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"oldFactor",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newFactor",type:"uint256"}],name:"CollateralFactorChanged",type:"event"},"FrozenTimeChanged(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"_newFrozenTime",type:"uint256"}],name:"FrozenTimeChanged",type:"event"},"NewPolicyBought(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"userAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"premium",type:"uint256"},{indexed:!1,internalType:"uint256",name:"payout",type:"uint256"}],name:"NewPolicyBought",type:"event"},"PolicyFlowChanged(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"policyFlowAddress",type:"address"}],name:"PolicyFlowChanged",type:"event"},"PremiumDistributed(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"_premiumToEmergency",type:"uint256"},{indexed:!1,internalType:"uint256",name:"_premiumToLottery",type:"uint256"}],name:"PremiumDistributed",type:"event"},"RewardDistributionChanged(uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"toLP",type:"uint256"},{indexed:!1,internalType:"uint256",name:"toLottery",type:"uint256"},{indexed:!1,internalType:"uint256",name:"toEmergency",type:"uint256"}],name:"RewardDistributionChanged",type:"event"},"Stake(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"userAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Stake",type:"event"},"Unstake(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"userAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Unstake",type:"event"}},methods:{"LPValue()":{inputs:[],name:"LPValue",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"activePremiums()":{inputs:[],name:"activePremiums",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"availableCapacity()":{inputs:[],name:"availableCapacity",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"collateralFactor()":{inputs:[],name:"collateralFactor",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"emergencyPool()":{inputs:[],name:"emergencyPool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"frozenTime()":{inputs:[],name:"frozenTime",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"lockedBalance()":{inputs:[],name:"lockedBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"lockedRatio()":{inputs:[],name:"lockedRatio",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"policyFlow()":{inputs:[],name:"policyFlow",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"rewardDistribution(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"rewardDistribution",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"totalStakingBalance()":{inputs:[],name:"totalStakingBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"userInfo(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"userInfo",outputs:[{internalType:"uint256",name:"depositTime",type:"uint256"},{internalType:"uint256",name:"pendingBalance",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/miserable-flight/abstracts/PolicyParameters.sol:PolicyParameters":{source:"contracts/miserable-flight/abstracts/PolicyParameters.sol",name:"PolicyParameters",methods:{"DELAY_THRESHOLD_MAX()":{inputs:[],name:"DELAY_THRESHOLD_MAX",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"DELAY_THRESHOLD_MIN()":{inputs:[],name:"DELAY_THRESHOLD_MIN",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"MAX_PAYOFF()":{inputs:[],name:"MAX_PAYOFF",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"MIN_TIME_BEFORE_DEPARTURE()":{inputs:[],name:"MIN_TIME_BEFORE_DEPARTURE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"PRODUCT_ID()":{inputs:[],name:"PRODUCT_ID",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/miserable-flight/interfaces/IFDPolicyToken.sol:IFDPolicyToken":{source:"contracts/miserable-flight/interfaces/IFDPolicyToken.sol",name:"IFDPolicyToken",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"approved",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Approval",type:"event"},"ApprovalForAll(address,address,bool)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!1,internalType:"bool",name:"approved",type:"bool"}],name:"ApprovalForAll",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"approve(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"approve",outputs:[],stateMutability:"nonpayable",type:"function",details:"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"balance",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getApproved",outputs:[{internalType:"address",name:"operator",type:"address"}],stateMutability:"view",type:"function",details:"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"getTokenURI(uint256)":{inputs:[{internalType:"uint256",name:"_tokenId",type:"uint256"}],name:"getTokenURI",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"isApprovedForAll(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"operator",type:"address"}],name:"isApprovedForAll",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"mintPolicyToken(address)":{inputs:[{internalType:"address",name:"_receiver",type:"address"}],name:"mintPolicyToken",outputs:[],stateMutability:"nonpayable",type:"function"},"ownerOf(uint256)":{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"ownerOf",outputs:[{internalType:"address",name:"owner",type:"address"}],stateMutability:"view",type:"function",details:"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"safeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function",details:"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],name:"safeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function",details:"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{inputs:[{internalType:"address",name:"operator",type:"address"},{internalType:"bool",name:"_approved",type:"bool"}],name:"setApprovalForAll",outputs:[],stateMutability:"nonpayable",type:"function",details:"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"tokenByIndex(uint256)":{inputs:[{internalType:"uint256",name:"index",type:"uint256"}],name:"tokenByIndex",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."},"tokenOfOwnerByIndex(address,uint256)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"index",type:"uint256"}],name:"tokenOfOwnerByIndex",outputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."},"tokenURI(uint256)":{inputs:[{internalType:"uint256",name:"_tokenId",type:"uint256"}],name:"tokenURI",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the total amount of tokens stored by the contract."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"transferFrom",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}}},"contracts/miserable-flight/interfaces/IFlightOracle.sol:IFlightOracle":{source:"contracts/miserable-flight/interfaces/IFlightOracle.sol",name:"IFlightOracle",methods:{"getChainlinkTokenAddress()":{inputs:[],name:"getChainlinkTokenAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"newOracleRequest(uint256,string,string,int256)":{inputs:[{internalType:"uint256",name:"_payment",type:"uint256"},{internalType:"string",name:"_url",type:"string"},{internalType:"string",name:"_path",type:"string"},{internalType:"int256",name:"times",type:"int256"}],name:"newOracleRequest",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"nonpayable",type:"function"},"setJobId(bytes32)":{inputs:[{internalType:"bytes32",name:"_newJobId",type:"bytes32"}],name:"setJobId",outputs:[],stateMutability:"nonpayable",type:"function"},"setOracleAddress(address)":{inputs:[{internalType:"address",name:"_newOracle",type:"address"}],name:"setOracleAddress",outputs:[],stateMutability:"nonpayable",type:"function"},"setPolicyFlow(address)":{inputs:[{internalType:"address",name:"_policyFlow",type:"address"}],name:"setPolicyFlow",outputs:[],stateMutability:"nonpayable",type:"function"},"setURL(string)":{inputs:[{internalType:"string",name:"_url",type:"string"}],name:"setURL",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/miserable-flight/interfaces/IInsurancePool.sol:IInsurancePool":{source:"contracts/miserable-flight/interfaces/IInsurancePool.sol",name:"IInsurancePool",methods:{"checkCapacity(uint256)":{inputs:[{internalType:"uint256",name:"_payoff",type:"uint256"}],name:"checkCapacity",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"getLockedFor(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"getLockedFor",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getPoolUnlocked()":{inputs:[],name:"getPoolUnlocked",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getUnlockedFor(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"getUnlockedFor",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getUserBalance(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"getUserBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"payClaim(uint256,uint256,uint256,address)":{inputs:[{internalType:"uint256",name:"_premium",type:"uint256"},{internalType:"uint256",name:"_payoff",type:"uint256"},{internalType:"uint256",name:"_realPayoff",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"payClaim",outputs:[],stateMutability:"nonpayable",type:"function"},"revertAllUnstakeRequest(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"revertAllUnstakeRequest",outputs:[],stateMutability:"nonpayable",type:"function"},"revertUnstakeRequest(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"revertUnstakeRequest",outputs:[],stateMutability:"nonpayable",type:"function"},"setCollateralFactor(uint256)":{inputs:[{internalType:"uint256",name:"_factor",type:"uint256"}],name:"setCollateralFactor",outputs:[],stateMutability:"nonpayable",type:"function"},"setFrozenTime(uint256)":{inputs:[{internalType:"uint256",name:"_newFrozenTime",type:"uint256"}],name:"setFrozenTime",outputs:[],stateMutability:"nonpayable",type:"function"},"setIncomeDistribution(uint256[3])":{inputs:[{internalType:"uint256[3]",name:"_newDistribution",type:"uint256[3]"}],name:"setIncomeDistribution",outputs:[],stateMutability:"nonpayable",type:"function"},"setPolicyFlow(address)":{inputs:[{internalType:"address",name:"_policyFlowAddress",type:"address"}],name:"setPolicyFlow",outputs:[],stateMutability:"nonpayable",type:"function"},"setPurchaseIncentive(uint256)":{inputs:[{internalType:"uint256",name:"_newIncentive",type:"uint256"}],name:"setPurchaseIncentive",outputs:[],stateMutability:"nonpayable",type:"function"},"stake(address,uint256)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"stake",outputs:[],stateMutability:"nonpayable",type:"function"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"_newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},"unstake(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"unstake",outputs:[],stateMutability:"nonpayable",type:"function"},"unstakeMax()":{inputs:[],name:"unstakeMax",outputs:[],stateMutability:"nonpayable",type:"function"},"updateWhenBuy(uint256,uint256,address)":{inputs:[{internalType:"uint256",name:"_premium",type:"uint256"},{internalType:"uint256",name:"_payoff",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"updateWhenBuy",outputs:[],stateMutability:"nonpayable",type:"function"},"updateWhenExpire(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_premium",type:"uint256"},{internalType:"uint256",name:"_payoff",type:"uint256"}],name:"updateWhenExpire",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/miserable-flight/interfaces/IPolicyFlow.sol:IPolicyFlow":{source:"contracts/miserable-flight/interfaces/IPolicyFlow.sol",name:"IPolicyFlow",title:"IPolicyFlow",notice:"This is the interface of PolicyFlow contract.         Contains some type definations, event list and function declarations.",methods:{"finalSettlement(bytes32,uint256)":{inputs:[{internalType:"bytes32",name:"_requestId",type:"bytes32"},{internalType:"uint256",name:"_result",type:"uint256"}],name:"finalSettlement",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Do the final settlement when receiving the oracle result"},"getPolicyInfoById(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"getPolicyInfoById",outputs:[{components:[{internalType:"uint256",name:"productId",type:"uint256"},{internalType:"address",name:"buyerAddress",type:"address"},{internalType:"uint256",name:"policyId",type:"uint256"},{internalType:"string",name:"flightNumber",type:"string"},{internalType:"uint256",name:"premium",type:"uint256"},{internalType:"uint256",name:"payoff",type:"uint256"},{internalType:"uint256",name:"purchaseTimestamp",type:"uint256"},{internalType:"uint256",name:"departureTimestamp",type:"uint256"},{internalType:"uint256",name:"landingTimestamp",type:"uint256"},{internalType:"enum IPolicyStruct.PolicyStatus",name:"status",type:"uint8"},{internalType:"bool",name:"alreadySettled",type:"bool"},{internalType:"uint256",name:"delayResult",type:"uint256"}],internalType:"struct IPolicyStruct.PolicyInfo",name:"",type:"tuple"}],stateMutability:"view",type:"function",notice:"Get the policy info by its policyId"},"newApplication(uint256,string,uint256,uint256,uint256,uint256,bytes)":{inputs:[{internalType:"uint256",name:"_productId",type:"uint256"},{internalType:"string",name:"_flightNumber",type:"string"},{internalType:"uint256",name:"_premium",type:"uint256"},{internalType:"uint256",name:"_departureTimestamp",type:"uint256"},{internalType:"uint256",name:"_landingTimestamp",type:"uint256"},{internalType:"uint256",name:"_deadline",type:"uint256"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"newApplication",outputs:[{internalType:"uint256",name:"policyId",type:"uint256"}],stateMutability:"nonpayable",type:"function",notice:"Apply for a new policy"},"newClaimRequest(uint256,string,string,string,bool)":{inputs:[{internalType:"uint256",name:"_policyId",type:"uint256"},{internalType:"string",name:"_flightNumber",type:"string"},{internalType:"string",name:"_timestamp",type:"string"},{internalType:"string",name:"_path",type:"string"},{internalType:"bool",name:"_forceUpdate",type:"bool"}],name:"newClaimRequest",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Start a new claim request"},"policyOwnerTransfer(uint256,address,address)":{inputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"}],name:"policyOwnerTransfer",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Update when the policy token is transferred to another owner"},"viewUserPolicy(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"viewUserPolicy",outputs:[{components:[{internalType:"uint256",name:"productId",type:"uint256"},{internalType:"address",name:"buyerAddress",type:"address"},{internalType:"uint256",name:"policyId",type:"uint256"},{internalType:"string",name:"flightNumber",type:"string"},{internalType:"uint256",name:"premium",type:"uint256"},{internalType:"uint256",name:"payoff",type:"uint256"},{internalType:"uint256",name:"purchaseTimestamp",type:"uint256"},{internalType:"uint256",name:"departureTimestamp",type:"uint256"},{internalType:"uint256",name:"landingTimestamp",type:"uint256"},{internalType:"enum IPolicyStruct.PolicyStatus",name:"status",type:"uint8"},{internalType:"bool",name:"alreadySettled",type:"bool"},{internalType:"uint256",name:"delayResult",type:"uint256"}],internalType:"struct IPolicyStruct.PolicyInfo[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function",notice:"View a user's policy info"}}},"contracts/miserable-flight/interfaces/IPolicyStruct.sol:IPolicyStruct":{source:"contracts/miserable-flight/interfaces/IPolicyStruct.sol",name:"IPolicyStruct"},"contracts/miserable-flight/interfaces/ISigManager.sol:ISigManager":{source:"contracts/miserable-flight/interfaces/ISigManager.sol",name:"ISigManager",events:{"SignerAdded(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"_newSigner",type:"address"}],name:"SignerAdded",type:"event"},"SignerRemoved(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"_oldSigner",type:"address"}],name:"SignerRemoved",type:"event"}},methods:{"addSigner(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"addSigner",outputs:[],stateMutability:"nonpayable",type:"function"},"checkSignature(bytes,string,uint256,uint256,address,uint256,uint256)":{inputs:[{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"string",name:"_flightNumber",type:"string"},{internalType:"uint256",name:"_departureTimestamp",type:"uint256"},{internalType:"uint256",name:"_landingDate",type:"uint256"},{internalType:"address",name:"_address",type:"address"},{internalType:"uint256",name:"_premium",type:"uint256"},{internalType:"uint256",name:"_deadline",type:"uint256"}],name:"checkSignature",outputs:[],stateMutability:"view",type:"function"},"isValidSigner(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"isValidSigner",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"removeSigner(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"removeSigner",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/mocks/MockERC20.sol:MockERC20":{source:"contracts/mocks/MockERC20.sol",name:"MockERC20",details:"MockUSD has 6 decimals, this contract is 18 decimals",notice:"MockERC20 for test",constructor:{inputs:[],stateMutability:"nonpayable",type:"constructor"},events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"mint(address,uint256)":{inputs:[{internalType:"address",name:"_account",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}},"contracts/mocks/MockPTP.sol:MockPTP":{source:"contracts/mocks/MockPTP.sol",name:"MockPTP",methods:{"swap(address,address,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"fromToken",type:"address"},{internalType:"address",name:"toToken",type:"address"},{internalType:"uint256",name:"fromAmount",type:"uint256"},{internalType:"uint256",name:"minimumToAmount",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swap",outputs:[{internalType:"uint256",name:"actualToAmount",type:"uint256"},{internalType:"uint256",name:"haircut",type:"uint256"}],stateMutability:"nonpayable",type:"function"}}},"contracts/mocks/MockUSD.sol:MockUSD":{source:"contracts/mocks/MockUSD.sol",name:"MockUSD",notice:"This is the MockUSD used in testnet         Maximum mint amount is 500k for each user.         Maximum mint amount for every single tx is 100k.",constructor:{inputs:[],stateMutability:"nonpayable",type:"constructor"},events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"INITIAL_SUPPLY()":{inputs:[],name:"INITIAL_SUPPLY",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"pure",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"mint(address,uint256)":{inputs:[{internalType:"address",name:"_account",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}},"contracts/naughty-price/NPPolicyToken.sol:NPPolicyToken":{source:"contracts/naughty-price/NPPolicyToken.sol",name:"NPPolicyToken",title:"Policy Token for Naughty Price",details:"It is different from the flight delay token.         That is an ERC721 NFT and this is an ERC20 token.",notice:"This is the contract for token price policy token.         It is a ERC20 token with an owner and a minter.         The owner should be the deployer at first.         The minter should be the policyCore contract.",constructor:{inputs:[{internalType:"string",name:"_name",type:"string"},{internalType:"string",name:"_symbol",type:"string"},{internalType:"address",name:"_minter",type:"address"},{internalType:"uint256",name:"_decimals",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Burn(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Burn",type:"event"},"Mint(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Mint",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"burn(address,uint256)":{inputs:[{internalType:"address",name:"_account",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function",params:{_account:"Address to burn tokens",_amount:"Amount to be burned"},notice:"Burn some policy tokens"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"It should be the same as its paired stablecoin",notice:"Get the decimals of this token"},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"mint(address,uint256)":{inputs:[{internalType:"address",name:"_account",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function",params:{_account:"Address to receive the tokens",_amount:"Amount to be minted"},notice:"Mint some policy tokens"},"minter()":{inputs:[],name:"minter",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}}},"contracts/naughty-price/NaughtyFactory.sol:NaughtyFactory":{source:"contracts/naughty-price/NaughtyFactory.sol",name:"NaughtyFactory",title:"Naughty Factory",details:"Factory contract to deploy new pools periodically      Each pool(product) will have a unique naughtyId      Each pool will have its pool token      PolicyToken - Stablecoin      Token 0 may change but Token 1 is always stablecoin.",events:{"IncomeMakerAddressChanged(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldIncomeMaker",type:"address"},{indexed:!1,internalType:"address",name:"newIncomeMaker",type:"address"}],name:"IncomeMakerAddressChanged",type:"event"},"IncomeMakerProportionChanged(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"oldProportion",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newProportion",type:"uint256"}],name:"IncomeMakerProportionChanged",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"PolicyCoreAddressChanged(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldPolicyCore",type:"address"},{indexed:!1,internalType:"address",name:"newPolicyCore",type:"address"}],name:"PolicyCoreAddressChanged",type:"event"}},methods:{"PAIR_INIT_CODE_HASH()":{inputs:[],name:"PAIR_INIT_CODE_HASH",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"_nextId()":{inputs:[],name:"_nextId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"allPairs(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"allPairs",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"allTokens(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"allTokens",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"deployPolicyToken(string,uint256)":{inputs:[{internalType:"string",name:"_policyTokenName",type:"string"},{internalType:"uint256",name:"_decimals",type:"uint256"}],name:"deployPolicyToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"nonpayable",type:"function",params:{_decimals:"Decimals of the policyToken",_policyTokenName:"Name of the policyToken"},returns:{_0:"tokenAddress PolicyToken address"},notice:"For each round we need to first create the policytoken(ERC20)"},"deployPool(address,address,uint256,uint256)":{inputs:[{internalType:"address",name:"_policyTokenAddress",type:"address"},{internalType:"address",name:"_stablecoin",type:"address"},{internalType:"uint256",name:"_deadline",type:"uint256"},{internalType:"uint256",name:"_feeRate",type:"uint256"}],name:"deployPool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"nonpayable",type:"function",params:{_deadline:"Deadline of the pool",_feeRate:"Fee rate given to LP holders",_policyTokenAddress:"Address of policy token",_stablecoin:"Address of the stable coin"},returns:{_0:"poolAddress Address of the pool"},notice:"After deploy the policytoken and get the address,         we deploy the policyToken - stablecoin pool contract"},"getAllTokens()":{inputs:[],name:"getAllTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function",returns:{_0:"tokens All tokens"},notice:"Get the all tokens that have been deployed"},"getInitCodeHashForPolicyToken(string,uint256)":{inputs:[{internalType:"string",name:"_tokenName",type:"string"},{internalType:"uint256",name:"_decimals",type:"uint256"}],name:"getInitCodeHashForPolicyToken",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"For test/task convinience, pre-compute the address      Ethers.js:      Address = ethers.utils.getCreate2Address(factory address, salt, INIT_CODE_HASH)      salt = keccak256(abi.encodePacked(_policyTokenName))",params:{_decimals:"Token decimals of this policy token",_tokenName:"Name of the policy token to be deployed"},notice:"Get the INIT_CODE_HASH for policy tokens with parameters"},"getPairAddress(address,address)":{inputs:[{internalType:"address",name:"_tokenAddress1",type:"address"},{internalType:"address",name:"_tokenAddress2",type:"address"}],name:"getPairAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",params:{_tokenAddress1:"Address of token1",_tokenAddress2:"Address of toekn2"},returns:{_0:"Pool address of the two tokens"},notice:"Get the pair address deployed by the factory         PolicyToken address first, and then stablecoin address         The order of the tokens will be sorted inside the function"},"incomeMaker()":{inputs:[],name:"incomeMaker",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"incomeMakerProportion()":{inputs:[],name:"incomeMakerProportion",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"initialize()":{inputs:[],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"policyCore()":{inputs:[],name:"policyCore",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setIncomeMakerAddress(address)":{inputs:[{internalType:"address",name:"_incomeMaker",type:"address"}],name:"setIncomeMakerAddress",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only callable by the owner",params:{_incomeMaker:"New income maker address"},notice:"Set income maker address"},"setIncomeMakerProportion(uint256)":{inputs:[{internalType:"uint256",name:"_proportion",type:"uint256"}],name:"setIncomeMakerProportion",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only callable by the owner",params:{_proportion:"New proportion to income maker contract"},notice:"Set income maker proportion"},"setPolicyCoreAddress(address)":{inputs:[{internalType:"address",name:"_policyCore",type:"address"}],name:"setPolicyCoreAddress",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only callable by the owner         < PolicyCore should be the minter of policyToken >         < This process is done inside constructor >",params:{_policyCore:"Address of policyCore contract"},notice:"Remember to call this function to set the policyCore address"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"contracts/naughty-price/NaughtyPair.sol:NaughtyPair":{source:"contracts/naughty-price/NaughtyPair.sol",name:"NaughtyPair",title:"Naughty Pair",notice:"This is the contract for the naughtyPrice swapping pair.         Every time a new naughtyPrice product is online you need to deploy this contract.         The contract will be initialized with two tokens and a deadline.         Token0 will be policy tokens and token1 will be stablecoins.         The swaps are only availale before the deadline.",constructor:{inputs:[],stateMutability:"nonpayable",type:"constructor"},events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Burn(address,uint256,uint256,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"uint256",name:"amountA",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountB",type:"uint256"},{indexed:!0,internalType:"address",name:"to",type:"address"}],name:"Burn",type:"event"},"Mint(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"uint256",name:"amountA",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountB",type:"uint256"}],name:"Mint",type:"event"},"ReserveUpdated(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"reserve0",type:"uint256"},{indexed:!1,internalType:"uint256",name:"reserve1",type:"uint256"}],name:"ReserveUpdated",type:"event"},"Swap(address,uint256,uint256,uint256,uint256,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"uint256",name:"amountAIn",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountBIn",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountAOut",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountBOut",type:"uint256"},{indexed:!0,internalType:"address",name:"to",type:"address"}],name:"Swap",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"MINIMUM_LIQUIDITY()":{inputs:[],name:"MINIMUM_LIQUIDITY",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"burn(address)":{inputs:[{internalType:"address",name:"_to",type:"address"}],name:"burn",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"}],stateMutability:"nonpayable",type:"function",params:{_to:"User address"},returns:{amount0:"Amount of token0 to be sent back",amount1:"Amount of token1 to be sent back"},notice:"Burn LP tokens give back the original tokens"},"deadline()":{inputs:[],name:"deadline",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"feeRate()":{inputs:[],name:"feeRate",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getReserves()":{inputs:[],name:"getReserves",outputs:[{internalType:"uint112",name:"_reserve0",type:"uint112"},{internalType:"uint112",name:"_reserve1",type:"uint112"}],stateMutability:"view",type:"function",details:"This function always put policy token at the first place!",returns:{_reserve0:"Reserve of token0",_reserve1:"Reserve of token1"},notice:"Get reserve0 (Policy token) and reserve1 (stablecoin)."},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"initialize(address,address,uint256,uint256)":{inputs:[{internalType:"address",name:"_token0",type:"address"},{internalType:"address",name:"_token1",type:"address"},{internalType:"uint256",name:"_deadline",type:"uint256"},{internalType:"uint256",name:"_feeRate",type:"uint256"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",params:{_deadline:"Deadline for this pool",_feeRate:"Fee rate to LP holders (1000 <=> 100%)",_token0:"Token0 address (policy token address)",_token1:"Token1 address (stablecoin address)"},notice:"Initialize the contract status after the deployment by factory"},"kLast()":{inputs:[],name:"kLast",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"mint(address)":{inputs:[{internalType:"address",name:"to",type:"address"}],name:"mint",outputs:[{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"nonpayable",type:"function",params:{to:"The user address"},returns:{liquidity:"The LP token amount"},notice:"Mint LP Token to liquidity providers         Called when adding liquidity."},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"swap(uint256,uint256,address)":{inputs:[{internalType:"uint256",name:"_amount0Out",type:"uint256"},{internalType:"uint256",name:"_amount1Out",type:"uint256"},{internalType:"address",name:"_to",type:"address"}],name:"swap",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount0Out:"Amount of token0 to be given out (may be 0)",_amount1Out:"Amount of token1 to be given out (may be 0)",_to:"Address to receive the swap result"},notice:"Finish the swap process"},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"sync()":{inputs:[],name:"sync",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Syncrinize the status of this pool"},"token0()":{inputs:[],name:"token0",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"token1()":{inputs:[],name:"token1",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."},"unlocked()":{inputs:[],name:"unlocked",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}}},"contracts/naughty-price/NaughtyRouter.sol:NaughtyRouter":{source:"contracts/naughty-price/NaughtyRouter.sol",name:"NaughtyRouter",title:"NaughtyRouter",notice:"Router for the pool, you can add/remove liquidity or swap A for B.         Swapping fee rate is 2% and all of them are given to LP.         Very similar logic with Uniswap V2.",events:{"BuyerTokenChanged(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldBuyerToken",type:"address"},{indexed:!1,internalType:"address",name:"newBuyerToken",type:"address"}],name:"BuyerTokenChanged",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"LiquidityAdded(address,uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pairAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"amountA",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountB",type:"uint256"},{indexed:!1,internalType:"uint256",name:"liquidity",type:"uint256"}],name:"LiquidityAdded",type:"event"},"LiquidityRemoved(address,uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"pairAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"amountA",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountB",type:"uint256"},{indexed:!1,internalType:"uint256",name:"liquidity",type:"uint256"}],name:"LiquidityRemoved",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"PolicyCoreChanged(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldPolicyCore",type:"address"},{indexed:!1,internalType:"address",name:"newPolicyCore",type:"address"}],name:"PolicyCoreChanged",type:"event"}},methods:{"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"_tokenA",type:"address"},{internalType:"address",name:"_tokenB",type:"address"},{internalType:"uint256",name:"_amountADesired",type:"uint256"},{internalType:"uint256",name:"_amountBDesired",type:"uint256"},{internalType:"uint256",name:"_amountAMin",type:"uint256"},{internalType:"uint256",name:"_amountBMin",type:"uint256"},{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_deadline",type:"uint256"}],name:"addLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"nonpayable",type:"function",params:{_amountADesired:"Amount of policyToken desired",_amountAMin:"Minimum amoutn of policy token",_amountBDesired:"Amount of stablecoin desired",_amountBMin:"Minimum amount of stablecoin",_deadline:"Transaction will revert after this deadline",_to:"Address that receive the lp token, normally the user himself",_tokenA:"Address of policyToken",_tokenB:"Address of stablecoin"},returns:{amountA:"Amount of tokenA to be input",amountB:"Amount of tokenB to be input",liquidity:"LP token to be mint"},notice:"Add liquidity function"},"addLiquidityWithUSD(address,address,uint256,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"_tokenA",type:"address"},{internalType:"address",name:"_tokenB",type:"address"},{internalType:"uint256",name:"_amountADesired",type:"uint256"},{internalType:"uint256",name:"_amountBDesired",type:"uint256"},{internalType:"uint256",name:"_amountAMin",type:"uint256"},{internalType:"uint256",name:"_amountBMin",type:"uint256"},{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_deadline",type:"uint256"}],name:"addLiquidityWithUSD",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"nonpayable",type:"function",details:"Only difference with addLiquidity is that mintPolicyTokenForUser",params:{_amountADesired:"Amount of policyToken desired",_amountAMin:"Minimum amount of policy token",_amountBDesired:"Amount of stablecoin desired",_amountBMin:"Minimum amount of stablecoin",_deadline:"Transaction will revert after this deadline",_to:"Address that receive the lp token, normally the user himself",_tokenA:"Address of policyToken",_tokenB:"Address of stablecoin"},notice:"Add liquidity but only provide stablecoins"},"buyerToken()":{inputs:[],name:"buyerToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"initialize(address,address)":{inputs:[{internalType:"address",name:"_factory",type:"address"},{internalType:"address",name:"_buyerToken",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"policyCore()":{inputs:[],name:"policyCore",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"_tokenA",type:"address"},{internalType:"address",name:"_tokenB",type:"address"},{internalType:"uint256",name:"_liquidity",type:"uint256"},{internalType:"uint256",name:"_amountAMin",type:"uint256"},{internalType:"uint256",name:"_amountBMin",type:"uint256"},{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_deadline",type:"uint256"}],name:"removeLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"nonpayable",type:"function",params:{_amountAMin:"Minimum amount of tokenA given out",_amountBMin:"Minimum amount of tokenB given out",_deadline:"Deadline of this transaction",_liquidity:"The lptoken amount to be removed",_to:"User address",_tokenA:"Address of policy token",_tokenB:"Address of stablecoin"},returns:{amountA:"Amount of token0 given out",amountB:"Amount of token1 given out"},notice:"Remove liquidity from the pool"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setBuyerToken(address)":{inputs:[{internalType:"address",name:"_buyerToken",type:"address"}],name:"setBuyerToken",outputs:[],stateMutability:"nonpayable",type:"function",params:{_buyerToken:"Address of new buyer token"},notice:"Set the address of buyer token"},"setNaughtyFactory(address)":{inputs:[{internalType:"address",name:"_naughtyFactory",type:"address"}],name:"setNaughtyFactory",outputs:[],stateMutability:"nonpayable",type:"function",params:{_naughtyFactory:"Address of new naughty factory"},notice:"Set the address of factory"},"setPolicyCore(address)":{inputs:[{internalType:"address",name:"_coreAddress",type:"address"}],name:"setPolicyCore",outputs:[],stateMutability:"nonpayable",type:"function",params:{_coreAddress:"Address of new policyCore"},notice:"Set the address of policyCore"},"swapExactTokensforTokens(uint256,uint256,address,address,address,uint256)":{inputs:[{internalType:"uint256",name:"_amountIn",type:"uint256"},{internalType:"uint256",name:"_amountOutMin",type:"uint256"},{internalType:"address",name:"_tokenIn",type:"address"},{internalType:"address",name:"_tokenOut",type:"address"},{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_deadline",type:"uint256"}],name:"swapExactTokensforTokens",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"nonpayable",type:"function",params:{_amountIn:"Fixed token input",_amountOutMin:"Minimum token output",_deadline:"Deadline for this specific swap",_to:"User address",_tokenIn:"Address of input token",_tokenOut:"Address of output token"},returns:{amountOut:"Amounts to be really given out"},notice:"Amount in is fixed"},"swapTokensforExactTokens(uint256,uint256,address,address,address,uint256)":{inputs:[{internalType:"uint256",name:"_amountInMax",type:"uint256"},{internalType:"uint256",name:"_amountOut",type:"uint256"},{internalType:"address",name:"_tokenIn",type:"address"},{internalType:"address",name:"_tokenOut",type:"address"},{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_deadline",type:"uint256"}],name:"swapTokensforExactTokens",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"nonpayable",type:"function",params:{_amountInMax:"Maximum token input",_amountOut:"Fixed token output",_deadline:"Deadline for this specific swap",_to:"User address",_tokenIn:"Address of input token",_tokenOut:"Address of output token"},returns:{amountIn:"Amounts to be really put in"},notice:"Amount out is fixed"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"contracts/naughty-price/PolicyCore.sol:PolicyCore":{source:"contracts/naughty-price/PolicyCore.sol",name:"PolicyCore",title:"PolicyCore",details:"Most of the functions to be called from outside will use the name of policyToken         rather than the address (easy to read).         Other variables or functions still use address to index.         The rule of policyToken naming is:              Original Token Name(with decimals) + Strike Price + Lower or Higher + Date         E.g.  AVAX_30.0_L_2101, BTC_30000.0_L_2102, ETH_8000.0_H_2109         (the original name need to be the same as in the chainlink oracle)         There are three decimals for a policy token:              1. Name decimals: Only for generating the name of policyToken              2. Token decimals: The decimals of the policyToken                 (should be the same as the paired stablecoin)              3. Price decimals: Always 18. The oracle result will be transferred for settlement",notice:"Core logic of Naughty Price Product         Preset:              (Done in the naughtyFactory contract)              1. Deploy policyToken contract              2. Deploy policyToken-Stablecoin pool contract         User Interaction:              1. Deposit Stablecoin and mint PolicyTokens              2. Redeem their Stablecoin and burn the PolicyTokens (before settlement)              3. Claim for payout with PolicyTokens (after settlement)         PolicyTokens are minted with the ratio 1:1 to Stablecoin         The PolicyTokens are traded in the pool with CFMM (xy=k)         When the event happens, a PolicyToken can be burned for claiming 1 Stablecoin.         When the event does not happen, the PolicyToken depositors can         redeem their 1 deposited Stablecoin",events:{"DelegateDeposit(address,address,string,address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"payerAddress",type:"address"},{indexed:!1,internalType:"address",name:"userAddress",type:"address"},{indexed:!1,internalType:"string",name:"policyTokenName",type:"string"},{indexed:!1,internalType:"address",name:"stablecoin",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"DelegateDeposit",type:"event"},"Deposit(address,string,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"userAddress",type:"address"},{indexed:!0,internalType:"string",name:"policyTokenName",type:"string"},{indexed:!0,internalType:"address",name:"stablecoin",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Deposit",type:"event"},"FinalResultSettled(string,uint256,bool)":{anonymous:!1,inputs:[{indexed:!1,internalType:"string",name:"_policyTokenName",type:"string"},{indexed:!1,internalType:"uint256",name:"price",type:"uint256"},{indexed:!1,internalType:"bool",name:"isHappened",type:"bool"}],name:"FinalResultSettled",type:"event"},"ILMChanged(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldILM",type:"address"},{indexed:!1,internalType:"address",name:"newILM",type:"address"}],name:"ILMChanged",type:"event"},"IncomeSharingChanged(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldIncomeSharing",type:"address"},{indexed:!1,internalType:"address",name:"newIncomeSharing",type:"address"}],name:"IncomeSharingChanged",type:"event"},"IncomeToLotteryChanged(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"oldToLottery",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newToLottery",type:"uint256"}],name:"IncomeToLotteryChanged",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"LotteryChanged(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldLotteryAddress",type:"address"},{indexed:!1,internalType:"address",name:"newLotteryAddress",type:"address"}],name:"LotteryChanged",type:"event"},"NaughtyRouterChanged(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldRouter",type:"address"},{indexed:!1,internalType:"address",name:"newRouter",type:"address"}],name:"NaughtyRouterChanged",type:"event"},"NewStablecoinAdded(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"_newStablecoin",type:"address"}],name:"NewStablecoinAdded",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"PolicyTokenDeployed(string,address,uint256,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"string",name:"tokenName",type:"string"},{indexed:!1,internalType:"address",name:"tokenAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"tokenDecimals",type:"uint256"},{indexed:!1,internalType:"uint256",name:"deadline",type:"uint256"},{indexed:!1,internalType:"uint256",name:"settleTimestamp",type:"uint256"}],name:"PolicyTokenDeployed",type:"event"},"PolicyTokensSettledForUsers(string,address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"string",name:"policyTokenName",type:"string"},{indexed:!1,internalType:"address",name:"stablecoin",type:"address"},{indexed:!1,internalType:"uint256",name:"startIndex",type:"uint256"},{indexed:!1,internalType:"uint256",name:"stopIndex",type:"uint256"}],name:"PolicyTokensSettledForUsers",type:"event"},"PoolDeployed(address,address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"poolAddress",type:"address"},{indexed:!1,internalType:"address",name:"policyTokenAddress",type:"address"},{indexed:!1,internalType:"address",name:"stablecoin",type:"address"}],name:"PoolDeployed",type:"event"},"PoolDeployedWithInitialLiquidity(address,address,address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"poolAddress",type:"address"},{indexed:!1,internalType:"address",name:"policyTokenAddress",type:"address"},{indexed:!1,internalType:"address",name:"stablecoin",type:"address"},{indexed:!1,internalType:"uint256",name:"initLiquidityA",type:"uint256"},{indexed:!1,internalType:"uint256",name:"initLiquidityB",type:"uint256"}],name:"PoolDeployedWithInitialLiquidity",type:"event"},"Redeem(address,string,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"userAddress",type:"address"},{indexed:!0,internalType:"string",name:"policyTokenName",type:"string"},{indexed:!0,internalType:"address",name:"stablecoin",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Redeem",type:"event"},"RedeemAfterSettlement(address,string,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"userAddress",type:"address"},{indexed:!0,internalType:"string",name:"policyTokenName",type:"string"},{indexed:!0,internalType:"address",name:"stablecoin",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"RedeemAfterSettlement",type:"event"},"UpdateUserQuota(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"address",name:"policyTokenAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"UpdateUserQuota",type:"event"}},methods:{"ILMContract()":{inputs:[],name:"ILMContract",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"_generateName(string,uint256,uint256,bool,string)":{inputs:[{internalType:"string",name:"_tokenName",type:"string"},{internalType:"uint256",name:"_decimals",type:"uint256"},{internalType:"uint256",name:"_strikePrice",type:"uint256"},{internalType:"bool",name:"_isCall",type:"bool"},{internalType:"string",name:"_round",type:"string"}],name:"_generateName",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"pure",type:"function",params:{_decimals:"Decimals of the name generation (0,1=>1, 2=>2)",_isCall:"The policy's payoff is triggered when higher(true) or lower(false)",_round:"Round of the policy, named by <month><day> (e.g. 0320, 1215)",_strikePrice:"Strike price of the policy (18 decimals)",_tokenName:"Name of the stike token (BTC, ETH, AVAX...)"},notice:"Generate the policy token name"},"addStablecoin(address)":{inputs:[{internalType:"address",name:"_newStablecoin",type:"address"}],name:"addStablecoin",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newStablecoin:"Address of the new stablecoin"},notice:"Add a new supported stablecoin"},"allDepositors(address,uint256)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"allDepositors",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"allPolicyTokens(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"allPolicyTokens",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"claim(string,address,uint256)":{inputs:[{internalType:"string",name:"_policyTokenName",type:"string"},{internalType:"address",name:"_stablecoin",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"claim",outputs:[],stateMutability:"nonpayable",type:"function",details:"It is done after result settlement and only if the result is true",params:{_amount:"Amount of stablecoin",_policyTokenName:"Name of the policy token",_stablecoin:"Address of the stable coin"},notice:"Claim a payoff based on policy tokens"},"collectIncome(address)":{inputs:[{internalType:"address",name:"_stablecoin",type:"address"}],name:"collectIncome",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can be done by anyone, only when there is some income to be distributed",params:{_stablecoin:"Address of stablecoin"},notice:"Collect the income"},"delegateDeposit(string,address,uint256,address)":{inputs:[{internalType:"string",name:"_policyTokenName",type:"string"},{internalType:"address",name:"_stablecoin",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"delegateDeposit",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only called by the router contract",params:{_amount:"Amount of stablecoin",_policyTokenName:"Name of the policy token",_stablecoin:"Address of the sable coin",_user:"Address to receive the policy tokens"},notice:"Delegate deposit (deposit and mint for other addresses)"},"deployPolicyToken(string,address,bool,uint256,uint256,uint256,string,uint256,uint256)":{inputs:[{internalType:"string",name:"_tokenName",type:"string"},{internalType:"address",name:"_stablecoin",type:"address"},{internalType:"bool",name:"_isCall",type:"bool"},{internalType:"uint256",name:"_nameDecimals",type:"uint256"},{internalType:"uint256",name:"_tokenDecimals",type:"uint256"},{internalType:"uint256",name:"_strikePrice",type:"uint256"},{internalType:"string",name:"_round",type:"string"},{internalType:"uint256",name:"_deadline",type:"uint256"},{internalType:"uint256",name:"_settleTimestamp",type:"uint256"}],name:"deployPolicyToken",outputs:[],stateMutability:"nonpayable",type:"function",details:'Only the owner can deploy new policy tokens      The name form is like "AVAX_50_L_2203" and is built inside the contract      Name decimals and token decimals are different here      The original token name should be the same in Chainlink PriceFeeds      Those tokens that are not listed on Chainlink are not supported',params:{_deadline:"Deadline of this policy token (deposit / redeem / swap)",_isCall:"The policy is for higher or lower than the strike price (call / put)",_nameDecimals:"Decimals of this token's name (0~18)",_round:"Round of the token (e.g. 2203 -> expired at 22 March)",_settleTimestamp:"Can settle after this timestamp (for oracle)",_stablecoin:"Address of the stablecoin (Just for check decimals here)",_strikePrice:"Strike price of the policy (have already been transferred with 1e18)",_tokenDecimals:"Decimals of this token's value (0~18) (same as paired stablecoin)",_tokenName:"Name of the original token (e.g. AVAX, BTC, ETH...)"},notice:"Deploy a new policy token and return the token address"},"deployPool(string,address,uint256,uint256)":{inputs:[{internalType:"string",name:"_policyTokenName",type:"string"},{internalType:"address",name:"_stablecoin",type:"address"},{internalType:"uint256",name:"_poolDeadline",type:"uint256"},{internalType:"uint256",name:"_feeRate",type:"uint256"}],name:"deployPool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"nonpayable",type:"function",params:{_feeRate:"Fee rate given to LP holders",_policyTokenName:"Name of the policy token",_poolDeadline:"Swapping deadline of the pool (normally the same as the token's deadline)",_stablecoin:"Address of the stable coin"},notice:"Deploy a new pair (pool)"},"deposit(string,address,uint256)":{inputs:[{internalType:"string",name:"_policyTokenName",type:"string"},{internalType:"address",name:"_stablecoin",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Amount of stablecoin",_policyTokenName:"Name of the policy token",_stablecoin:"Address of the stable coin"},notice:"Deposit stablecoins and get policy tokens"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"contract INaughtyFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},"findAddressbyName(string)":{inputs:[{internalType:"string",name:"_policyTokenName",type:"string"}],name:"findAddressbyName",outputs:[{internalType:"address",name:"policyTokenAddress",type:"address"}],stateMutability:"view",type:"function",params:{_policyTokenName:'Name of the policy token (e.g. "AVAX_30_L_2103")'},returns:{policyTokenAddress:"Address of the policy token"},notice:"Find the token address by its name"},"findNamebyAddress(address)":{inputs:[{internalType:"address",name:"_policyTokenAddress",type:"address"}],name:"findNamebyAddress",outputs:[{internalType:"string",name:"policyTokenName",type:"string"}],stateMutability:"view",type:"function",params:{_policyTokenAddress:"Address of the policy token"},returns:{policyTokenName:"Name of the policy token"},notice:"Find the token name by its address"},"getAllTokens()":{inputs:[],name:"getAllTokens",outputs:[{components:[{internalType:"address",name:"policyTokenAddress",type:"address"},{internalType:"bool",name:"isCall",type:"bool"},{internalType:"uint256",name:"nameDecimals",type:"uint256"},{internalType:"uint256",name:"tokenDecimals",type:"uint256"},{internalType:"uint256",name:"strikePrice",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"settleTimestamp",type:"uint256"}],internalType:"struct PolicyCore.PolicyTokenInfo[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function",details:"Include all active&expired tokens",returns:{_0:"tokensInfo Token information list"},notice:"Get the information about all the tokens"},"getPolicyTokenInfo(string)":{inputs:[{internalType:"string",name:"_policyTokenName",type:"string"}],name:"getPolicyTokenInfo",outputs:[{components:[{internalType:"address",name:"policyTokenAddress",type:"address"},{internalType:"bool",name:"isCall",type:"bool"},{internalType:"uint256",name:"nameDecimals",type:"uint256"},{internalType:"uint256",name:"tokenDecimals",type:"uint256"},{internalType:"uint256",name:"strikePrice",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"settleTimestamp",type:"uint256"}],internalType:"struct PolicyCore.PolicyTokenInfo",name:"",type:"tuple"}],stateMutability:"view",type:"function",params:{_policyTokenName:'Name of the policy token (e.g. "AVAX30L202103")'},returns:{_0:"policyTokenInfo PolicyToken detail information"},notice:"Find the token information by its name"},"getUserQuota(address,address)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address",name:"_policyTokenAddress",type:"address"}],name:"getUserQuota",outputs:[{internalType:"uint256",name:"_quota",type:"uint256"}],stateMutability:"view",type:"function",params:{_policyTokenAddress:"Address of the policy token",_user:"Address of the user to be checked"},returns:{_quota:"User's quota result"},notice:"Get a user's quota for a certain policy token"},"incomeSharing()":{inputs:[],name:"incomeSharing",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"initialize(address,address,address)":{inputs:[{internalType:"address",name:"_usdc",type:"address"},{internalType:"address",name:"_factory",type:"address"},{internalType:"address",name:"_priceGetter",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function",params:{_factory:"Address of naughty factory",_priceGetter:"Address of the oracle contract",_usdc:"USDC.e is the first stablecoin supported in the pool"},notice:"Constructor, for some addresses"},"lottery()":{inputs:[],name:"lottery",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"naughtyRouter()":{inputs:[],name:"naughtyRouter",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"pendingIncomeToLottery(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"pendingIncomeToLottery",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"pendingIncomeToSharing(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"pendingIncomeToSharing",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"policyTokenAddressToName(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"policyTokenAddressToName",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"policyTokenInfoMapping(string)":{inputs:[{internalType:"string",name:"",type:"string"}],name:"policyTokenInfoMapping",outputs:[{internalType:"address",name:"policyTokenAddress",type:"address"},{internalType:"bool",name:"isCall",type:"bool"},{internalType:"uint256",name:"nameDecimals",type:"uint256"},{internalType:"uint256",name:"tokenDecimals",type:"uint256"},{internalType:"uint256",name:"strikePrice",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"settleTimestamp",type:"uint256"}],stateMutability:"view",type:"function"},"priceGetter()":{inputs:[],name:"priceGetter",outputs:[{internalType:"contract IPriceGetter",name:"",type:"address"}],stateMutability:"view",type:"function"},"redeem(string,address,uint256)":{inputs:[{internalType:"string",name:"_policyTokenName",type:"string"},{internalType:"address",name:"_stablecoin",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"redeem",outputs:[],stateMutability:"nonpayable",type:"function",details:"Redeem happens before the deadline and is different from claim/settle",params:{_amount:"Amount to redeem",_policyTokenName:"Name of the policy token",_stablecoin:"Address of the stablecoin"},notice:"Burn policy tokens and redeem stablecoins"},"redeemAfterSettlement(string,address)":{inputs:[{internalType:"string",name:"_policyTokenName",type:"string"},{internalType:"address",name:"_stablecoin",type:"address"}],name:"redeemAfterSettlement",outputs:[],stateMutability:"nonpayable",type:"function",params:{_policyTokenName:"Name of the policy token",_stablecoin:"Address of the stablecoin"},notice:"Redeem policy tokens and get stablecoins by the user himeself"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setILMContract(address)":{inputs:[{internalType:"address",name:"_ILM",type:"address"}],name:"setILMContract",outputs:[],stateMutability:"nonpayable",type:"function",params:{_ILM:"Address of the new ILM"},notice:"Change the address of ILM"},"setIncomeSharing(address)":{inputs:[{internalType:"address",name:"_incomeSharing",type:"address"}],name:"setIncomeSharing",outputs:[],stateMutability:"nonpayable",type:"function",params:{_incomeSharing:"Address of the new incomeSharing"},notice:"Change the address of emergency pool"},"setIncomeToLottery(uint256)":{inputs:[{internalType:"uint256",name:"_toLottery",type:"uint256"}],name:"setIncomeToLottery",outputs:[],stateMutability:"nonpayable",type:"function",details:"The remaining part will be distributed to incomeSharing",params:{_toLottery:"Proportion to lottery"},notice:"Change the income part to lottery"},"setLottery(address)":{inputs:[{internalType:"address",name:"_lotteryAddress",type:"address"}],name:"setLottery",outputs:[],stateMutability:"nonpayable",type:"function",params:{_lotteryAddress:"Address of the new lottery"},notice:"Change the address of lottery"},"setNaughtyRouter(address)":{inputs:[{internalType:"address",name:"_router",type:"address"}],name:"setNaughtyRouter",outputs:[],stateMutability:"nonpayable",type:"function",params:{_router:"Address of the new naughty router"},notice:"Change the address of naughty router"},"settleAllPolicyTokens(string,address,uint256,uint256)":{inputs:[{internalType:"string",name:"_policyTokenName",type:"string"},{internalType:"address",name:"_stablecoin",type:"address"},{internalType:"uint256",name:"_startIndex",type:"uint256"},{internalType:"uint256",name:"_stopIndex",type:"uint256"}],name:"settleAllPolicyTokens",outputs:[],stateMutability:"nonpayable",type:"function",details:"Take care of the gas cost and can use the _startIndex and _stopIndex to control the size",params:{_policyTokenName:"Name of policy token",_stablecoin:"Address of stablecoin",_startIndex:"Settlement start index",_stopIndex:"Settlement stop index"},notice:"Settle the policies for the users when insurance events do not happen         Funds are automatically distributed back to the depositors"},"settleFinalResult(string)":{inputs:[{internalType:"string",name:"_policyTokenName",type:"string"}],name:"settleFinalResult",outputs:[],stateMutability:"nonpayable",type:"function",params:{_policyTokenName:"Name of the policy token"},notice:"Get the final price from the PriceGetter contract"},"settleResult(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"settleResult",outputs:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bool",name:"isHappened",type:"bool"},{internalType:"bool",name:"alreadySettled",type:"bool"},{internalType:"uint256",name:"currentDistributionIndex",type:"uint256"}],stateMutability:"view",type:"function"},"supportedStablecoin(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"supportedStablecoin",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"toLotteryPart()":{inputs:[],name:"toLotteryPart",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"updateUserQuota(address,address,uint256)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address",name:"_policyToken",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"updateUserQuota",outputs:[],stateMutability:"nonpayable",type:"function",details:"When you claim your liquidity from ILM, you will get normal quota as you are using policyCore",params:{_amount:"Quota amount",_policyToken:"PolicyToken address",_user:"User address"},notice:"Update user quota from ILM when claim"},"whichStablecoin(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"whichStablecoin",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}}},"contracts/naughty-price/PriceGetter.sol:PriceGetter":{source:"contracts/naughty-price/PriceGetter.sol",name:"PriceGetter",title:"Price Getter",details:"The price from chainlink priceFeed has different decimals, be careful.",notice:"This is the contract for getting price feed from chainlink.         The contract will keep a record from tokenName => priceFeed Address.         Got the sponsorship and collaboration with Chainlink.",constructor:{inputs:[],stateMutability:"nonpayable",type:"constructor"},events:{"LatestPriceGet(uint80,int256,uint256,uint256,uint80)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint80",name:"roundID",type:"uint80"},{indexed:!1,internalType:"int256",name:"price",type:"int256"},{indexed:!1,internalType:"uint256",name:"startedAt",type:"uint256"},{indexed:!1,internalType:"uint256",name:"timeStamp",type:"uint256"},{indexed:!1,internalType:"uint80",name:"answeredInRound",type:"uint80"}],name:"LatestPriceGet",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"PriceFeedChanged(string,address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"string",name:"tokenName",type:"string"},{indexed:!1,internalType:"address",name:"feedAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"decimals",type:"uint256"}],name:"PriceFeedChanged",type:"event"}},methods:{"getLatestPrice(string)":{inputs:[{internalType:"string",name:"_tokenName",type:"string"}],name:"getLatestPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function",params:{_tokenName:"Address of the token"},returns:{_0:"price The latest price"},notice:"Get latest price of a token"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"priceFeedInfo(string)":{inputs:[{internalType:"string",name:"",type:"string"}],name:"priceFeedInfo",outputs:[{internalType:"address",name:"priceFeedAddress",type:"address"},{internalType:"uint256",name:"decimals",type:"uint256"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"setPriceFeed(string,address,uint256)":{inputs:[{internalType:"string",name:"_tokenName",type:"string"},{internalType:"address",name:"_feedAddress",type:"address"},{internalType:"uint256",name:"_decimals",type:"uint256"}],name:"setPriceFeed",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only callable by the owner      The price result decimal should be less than 18",params:{_decimals:"Decimals of this price feed service",_feedAddress:"Price feed oracle address",_tokenName:"Address of the token"},notice:"Set a price feed oracle address for a token"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."}}},"contracts/naughty-price/interfaces/INPPolicyToken.sol:INPPolicyToken":{source:"contracts/naughty-price/interfaces/INPPolicyToken.sol",name:"INPPolicyToken",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the amount of tokens owned by `account`."},"burn(address,uint256)":{inputs:[{internalType:"address",name:"_account",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},"mint(address,uint256)":{inputs:[{internalType:"address",name:"_account",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the amount of tokens in existence."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}}},"contracts/naughty-price/interfaces/INaughtyFactory.sol:INaughtyFactory":{source:"contracts/naughty-price/interfaces/INaughtyFactory.sol",name:"INaughtyFactory",methods:{"deployPolicyToken(string,uint256)":{inputs:[{internalType:"string",name:"_policyTokenName",type:"string"},{internalType:"uint256",name:"_decimals",type:"uint256"}],name:"deployPolicyToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"nonpayable",type:"function"},"deployPool(address,address,uint256,uint256)":{inputs:[{internalType:"address",name:"_policyTokenAddress",type:"address"},{internalType:"address",name:"_stablecoin",type:"address"},{internalType:"uint256",name:"_deadline",type:"uint256"},{internalType:"uint256",name:"_feeRate",type:"uint256"}],name:"deployPool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"nonpayable",type:"function"},"getPairAddress(address,address)":{inputs:[{internalType:"address",name:"_tokenAddress1",type:"address"},{internalType:"address",name:"_tokenAddress2",type:"address"}],name:"getPairAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"incomeMaker()":{inputs:[],name:"incomeMaker",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"incomeMakerProportion()":{inputs:[],name:"incomeMakerProportion",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/naughty-price/interfaces/INaughtyPair.sol:INaughtyPair":{source:"contracts/naughty-price/interfaces/INaughtyPair.sol",name:"INaughtyPair",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the amount of tokens owned by `account`."},"burn(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"burn",outputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"deadline()":{inputs:[],name:"deadline",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"feeRate()":{inputs:[],name:"feeRate",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getReserves()":{inputs:[],name:"getReserves",outputs:[{internalType:"uint112",name:"_reserve0",type:"uint112"},{internalType:"uint112",name:"_reserve1",type:"uint112"}],stateMutability:"view",type:"function"},"initialize(address,address,uint256,uint256)":{inputs:[{internalType:"address",name:"_token0",type:"address"},{internalType:"address",name:"_token1",type:"address"},{internalType:"uint256",name:"_deadline",type:"uint256"},{internalType:"uint256",name:"_feeRate",type:"uint256"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"mint(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"mint",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"swap(uint256,uint256,address)":{inputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"address",name:"",type:"address"}],name:"swap",outputs:[],stateMutability:"nonpayable",type:"function"},"sync()":{inputs:[],name:"sync",outputs:[],stateMutability:"nonpayable",type:"function"},"token0()":{inputs:[],name:"token0",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"token1()":{inputs:[],name:"token1",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the amount of tokens in existence."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}}},"contracts/naughty-price/interfaces/INaughtyRouter.sol:INaughtyRouter":{source:"contracts/naughty-price/interfaces/INaughtyRouter.sol",name:"INaughtyRouter",methods:{"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"_tokenA",type:"address"},{internalType:"address",name:"_tokenB",type:"address"},{internalType:"uint256",name:"_amountADesired",type:"uint256"},{internalType:"uint256",name:"_amountBDesired",type:"uint256"},{internalType:"uint256",name:"_amountAMin",type:"uint256"},{internalType:"uint256",name:"_amountBMin",type:"uint256"},{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_deadline",type:"uint256"}],name:"addLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"addLiquidityWithUSD(address,address,uint256,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"_tokenA",type:"address"},{internalType:"address",name:"_tokenB",type:"address"},{internalType:"uint256",name:"_amountADesired",type:"uint256"},{internalType:"uint256",name:"_amountBDesired",type:"uint256"},{internalType:"uint256",name:"_amountAMin",type:"uint256"},{internalType:"uint256",name:"_amountBMin",type:"uint256"},{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_deadline",type:"uint256"}],name:"addLiquidityWithUSD",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"_tokenA",type:"address"},{internalType:"address",name:"_tokenB",type:"address"},{internalType:"uint256",name:"_liquidity",type:"uint256"},{internalType:"uint256",name:"_amountAMin",type:"uint256"},{internalType:"uint256",name:"_amountBMin",type:"uint256"},{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_deadline",type:"uint256"}],name:"removeLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"swapExactTokensforTokens(uint256,uint256,address,address,address,uint256)":{inputs:[{internalType:"uint256",name:"_amountIn",type:"uint256"},{internalType:"uint256",name:"_amountOutMin",type:"uint256"},{internalType:"address",name:"_tokenIn",type:"address"},{internalType:"address",name:"_tokenOut",type:"address"},{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_deadline",type:"uint256"}],name:"swapExactTokensforTokens",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"nonpayable",type:"function"}}},"contracts/naughty-price/interfaces/IPolicyCore.sol:IPolicyCore":{source:"contracts/naughty-price/interfaces/IPolicyCore.sol",name:"IPolicyCore",methods:{"delegateDeposit(string,address,uint256,address)":{inputs:[{internalType:"string",name:"_policyTokenName",type:"string"},{internalType:"address",name:"_stablecoin",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"delegateDeposit",outputs:[],stateMutability:"nonpayable",type:"function"},"deployPool(string,address,uint256,uint256)":{inputs:[{internalType:"string",name:"_policyTokenName",type:"string"},{internalType:"address",name:"_stablecoin",type:"address"},{internalType:"uint256",name:"_poolDeadline",type:"uint256"},{internalType:"uint256",name:"_feeRate",type:"uint256"}],name:"deployPool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"nonpayable",type:"function"},"findAddressbyName(string)":{inputs:[{internalType:"string",name:"_policyTokenName",type:"string"}],name:"findAddressbyName",outputs:[{internalType:"address",name:"_policyTokenAddress",type:"address"}],stateMutability:"view",type:"function",notice:"Find the address by its name"},"findNamebyAddress(address)":{inputs:[{internalType:"address",name:"_policyTokenAddress",type:"address"}],name:"findNamebyAddress",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"Find the name by address"},"getPolicyTokenInfo(string)":{inputs:[{internalType:"string",name:"_policyTokenName",type:"string"}],name:"getPolicyTokenInfo",outputs:[{components:[{internalType:"address",name:"policyTokenAddress",type:"address"},{internalType:"bool",name:"isCall",type:"bool"},{internalType:"uint256",name:"nameDecimals",type:"uint256"},{internalType:"uint256",name:"tokenDecimals",type:"uint256"},{internalType:"uint256",name:"strikePrice",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"settleTimestamp",type:"uint256"}],internalType:"struct IPolicyCore.PolicyTokenInfo",name:"",type:"tuple"}],stateMutability:"view",type:"function"},"supportedStablecoin(address)":{inputs:[{internalType:"address",name:"_coinAddress",type:"address"}],name:"supportedStablecoin",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",notice:"Check whether the stablecoin is supported"},"updateUserQuota(address,address,uint256)":{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"address",name:"_policyToken",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"updateUserQuota",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/naughty-price/interfaces/IPriceGetter.sol:IPriceGetter":{source:"contracts/naughty-price/interfaces/IPriceGetter.sol",name:"IPriceGetter",methods:{"getLatestPrice(string)":{inputs:[{internalType:"string",name:"_tokenName",type:"string"}],name:"getLatestPrice",outputs:[{internalType:"uint256",name:"_price",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"getPriceFeedAddress(string)":{inputs:[{internalType:"string",name:"_tokenName",type:"string"}],name:"getPriceFeedAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"setPriceFeed(string,address)":{inputs:[{internalType:"string",name:"_tokenName",type:"string"},{internalType:"address",name:"_feedAddress",type:"address"}],name:"setPriceFeed",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/proxy/Initializable.sol:Initializable":{source:"contracts/proxy/Initializable.sol",name:"Initializable",details:"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed: [.hljs-theme-light.nopadding] ```"},"contracts/proxy/OwnableUpgradeable.sol:OwnableUpgradeable":{source:"contracts/proxy/OwnableUpgradeable.sol",name:"OwnableUpgradeable",details:"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",events:{"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"}},methods:{"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"contracts/proxy/ProxyAdmin.sol:ProxyAdmin":{source:"contracts/proxy/ProxyAdmin.sol",name:"ProxyAdmin",details:"This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.",constructor:{inputs:[],stateMutability:"nonpayable",type:"constructor"},events:{"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"}},methods:{"changeProxyAdmin(address,address)":{inputs:[{internalType:"contract TransparentUpgradeableProxy",name:"proxy",type:"address"},{internalType:"address",name:"newAdmin",type:"address"}],name:"changeProxyAdmin",outputs:[],stateMutability:"nonpayable",type:"function",details:"Changes the admin of `proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `proxy`."},"getProxyAdmin(address)":{inputs:[{internalType:"contract TransparentUpgradeableProxy",name:"proxy",type:"address"}],name:"getProxyAdmin",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the current admin of `proxy`. Requirements: - This contract must be the admin of `proxy`."},"getProxyImplementation(address)":{inputs:[{internalType:"contract TransparentUpgradeableProxy",name:"proxy",type:"address"}],name:"getProxyImplementation",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the current implementation of `proxy`. Requirements: - This contract must be the admin of `proxy`."},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."},"upgrade(address,address)":{inputs:[{internalType:"contract TransparentUpgradeableProxy",name:"proxy",type:"address"},{internalType:"address",name:"implementation",type:"address"}],name:"upgrade",outputs:[],stateMutability:"nonpayable",type:"function",details:"Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}. Requirements: - This contract must be the admin of `proxy`."},"upgradeAndCall(address,address,bytes)":{inputs:[{internalType:"contract TransparentUpgradeableProxy",name:"proxy",type:"address"},{internalType:"address",name:"implementation",type:"address"},{internalType:"bytes",name:"data",type:"bytes"}],name:"upgradeAndCall",outputs:[],stateMutability:"payable",type:"function",details:"Upgrades `proxy` to `implementation` and calls a function on the new implementation. See {TransparentUpgradeableProxy-upgradeToAndCall}. Requirements: - This contract must be the admin of `proxy`."}}},"contracts/proxy/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy":{source:"contracts/proxy/TransparentUpgradeableProxy.sol",name:"TransparentUpgradeableProxy",details:"This contract implements a proxy that is upgradeable by an admin. To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing], which can potentially be used in an attack, this contract uses the https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two things that go hand in hand: 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if that call matches one of the admin functions exposed by the proxy itself. 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the implementation. If the admin tries to call a function on the implementation it will fail with an error that says \"admin cannot fallback to proxy target\". These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due to sudden errors when trying to call a function from the proxy implementation. Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way, you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.",constructor:{inputs:[{internalType:"address",name:"_logic",type:"address"},{internalType:"address",name:"admin_",type:"address"},{internalType:"bytes",name:"_data",type:"bytes"}],stateMutability:"payable",type:"constructor"},fallback:{stateMutability:"payable",type:"fallback"},receive:{stateMutability:"payable",type:"receive"},events:{"AdminChanged(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"previousAdmin",type:"address"},{indexed:!1,internalType:"address",name:"newAdmin",type:"address"}],name:"AdminChanged",type:"event"},"BeaconUpgraded(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"beacon",type:"address"}],name:"BeaconUpgraded",type:"event"},"Upgraded(address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"implementation",type:"address"}],name:"Upgraded",type:"event"}},methods:{"admin()":{inputs:[],name:"admin",outputs:[{internalType:"address",name:"admin_",type:"address"}],stateMutability:"nonpayable",type:"function",details:"Returns the current admin. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`"},"changeAdmin(address)":{inputs:[{internalType:"address",name:"newAdmin",type:"address"}],name:"changeAdmin",outputs:[],stateMutability:"nonpayable",type:"function",details:"Changes the admin of the proxy. Emits an {AdminChanged} event. NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}."},"implementation()":{inputs:[],name:"implementation",outputs:[{internalType:"address",name:"implementation_",type:"address"}],stateMutability:"nonpayable",type:"function",details:"Returns the current implementation. NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`"},"upgradeTo(address)":{inputs:[{internalType:"address",name:"newImplementation",type:"address"}],name:"upgradeTo",outputs:[],stateMutability:"nonpayable",type:"function",details:"Upgrade the implementation of the proxy. NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}."},"upgradeToAndCall(address,bytes)":{inputs:[{internalType:"address",name:"newImplementation",type:"address"},{internalType:"bytes",name:"data",type:"bytes"}],name:"upgradeToAndCall",outputs:[],stateMutability:"payable",type:"function",details:"Upgrade the implementation of the proxy, and then call a function from the new implementation as specified by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract. NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}."}}},"contracts/staking/CoreStakingPool.sol:CoreStakingPool":{source:"contracts/staking/CoreStakingPool.sol",name:"CoreStakingPool",constructor:{inputs:[{internalType:"address",name:"_degisToken",type:"address"},{internalType:"address",name:"_poolToken",type:"address"},{internalType:"address",name:"_factory",type:"address"},{internalType:"uint256",name:"_startTimestamp",type:"uint256"},{internalType:"uint256",name:"_degisPerSecond",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},events:{"Harvest(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Harvest",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Stake(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"lockUntil",type:"uint256"}],name:"Stake",type:"event"},"Unstake(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Unstake",type:"event"}},methods:{"accDegisPerWeight()":{inputs:[],name:"accDegisPerWeight",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"degisPerSecond()":{inputs:[],name:"degisPerSecond",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"degisToken()":{inputs:[],name:"degisToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"fee()":{inputs:[],name:"fee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getUserDeposits(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"getUserDeposits",outputs:[{components:[{internalType:"uint256",name:"tokenAmount",type:"uint256"},{internalType:"uint256",name:"weight",type:"uint256"},{internalType:"uint256",name:"lockedFrom",type:"uint256"},{internalType:"uint256",name:"lockedUntil",type:"uint256"}],internalType:"struct IPool.Deposit[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function",params:{_user:"User address"},returns:{_0:"deposits[] User's deposit info"},notice:"Get a user's deposit info"},"harvest()":{inputs:[],name:"harvest",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Harvest your staking rewards"},"lastRewardTimestamp()":{inputs:[],name:"lastRewardTimestamp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"pendingReward(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"pendingReward",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{_user:"User address"},returns:{_0:"pendingReward User's pending rewards"},notice:"Get pending rewards"},"poolToken()":{inputs:[],name:"poolToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"rewardToWeight(uint256,uint256)":{inputs:[{internalType:"uint256",name:"reward",type:"uint256"},{internalType:"uint256",name:"rewardPerWeight",type:"uint256"}],name:"rewardToWeight",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function"},"setDegisPerSecond(uint256)":{inputs:[{internalType:"uint256",name:"_degisPerSecond",type:"uint256"}],name:"setDegisPerSecond",outputs:[],stateMutability:"nonpayable",type:"function"},"stake(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"uint256",name:"_lockUntil",type:"uint256"}],name:"stake",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Amount of tokens to stake",_lockUntil:"Lock until timestamp"},notice:"Stake tokens"},"startTimestamp()":{inputs:[],name:"startTimestamp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"timeToWeight(uint256)":{inputs:[{internalType:"uint256",name:"_length",type:"uint256"}],name:"timeToWeight",outputs:[{internalType:"uint256",name:"_weight",type:"uint256"}],stateMutability:"pure",type:"function",details:"1 year = 2e6      1 week = 1e6      2 weeks = 1e6 * ( 1 + 1 / 365)",notice:"Lock time => Lock weight"},"totalWeight()":{inputs:[],name:"totalWeight",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."},"unstake(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_depositId",type:"uint256"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"unstake",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Amount of tokens to unstake",_depositId:"Deposit id to be unstaked"},notice:"Unstake tokens"},"updatePool()":{inputs:[],name:"updatePool",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Update the pool without fee"},"users(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"users",outputs:[{internalType:"uint256",name:"tokenAmount",type:"uint256"},{internalType:"uint256",name:"totalWeight",type:"uint256"},{internalType:"uint256",name:"rewardDebt",type:"uint256"}],stateMutability:"view",type:"function"},"weightToReward(uint256,uint256)":{inputs:[{internalType:"uint256",name:"weight",type:"uint256"},{internalType:"uint256",name:"rewardPerWeight",type:"uint256"}],name:"weightToReward",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function"}}},"contracts/staking/StakingPoolFactory.sol:StakingPoolFactory":{source:"contracts/staking/StakingPoolFactory.sol",name:"StakingPoolFactory",constructor:{inputs:[{internalType:"address",name:"_degisToken",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"DegisPerSecondChanged(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"pool",type:"address"},{indexed:!1,internalType:"uint256",name:"degisPerSecond",type:"uint256"}],name:"DegisPerSecondChanged",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"PoolRegistered(address,address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"by",type:"address"},{indexed:!0,internalType:"address",name:"poolToken",type:"address"},{indexed:!0,internalType:"address",name:"poolAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"degisPerSecond",type:"uint256"}],name:"PoolRegistered",type:"event"}},methods:{"createPool(address,uint256,uint256)":{inputs:[{internalType:"address",name:"_poolToken",type:"address"},{internalType:"uint256",name:"_startTimestamp",type:"uint256"},{internalType:"uint256",name:"_degisPerSecond",type:"uint256"}],name:"createPool",outputs:[],stateMutability:"nonpayable",type:"function",details:"Only called by the owner",params:{_degisPerSecond:"Reward speed",_poolToken:"Pool token address",_startTimestamp:"Start timestamp for reward"},notice:"Creates a staking pool and registers it within the factory"},"degisToken()":{inputs:[],name:"degisToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getPoolAddress(address)":{inputs:[{internalType:"address",name:"_poolToken",type:"address"}],name:"getPoolAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",params:{_poolToken:"Pool token address"},notice:"Get the pool address from pool token address"},"getPoolData(address)":{inputs:[{internalType:"address",name:"_poolToken",type:"address"}],name:"getPoolData",outputs:[{components:[{internalType:"address",name:"poolToken",type:"address"},{internalType:"address",name:"poolAddress",type:"address"},{internalType:"uint256",name:"startTimestamp",type:"uint256"},{internalType:"uint256",name:"degisPerSecond",type:"uint256"}],internalType:"struct StakingPoolFactory.PoolData",name:"",type:"tuple"}],stateMutability:"view",type:"function",params:{_poolToken:"Pool token address"},returns:{_0:"poolData Pool data struct"},notice:"Get pool data from pool token address"},"mintReward(address,uint256)":{inputs:[{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"mintReward",outputs:[],stateMutability:"nonpayable",type:"function",details:"With this function, we only need to add factory contract into minterList",params:{_amount:"Amount of degis tokens to mint",_to:"The address to mint tokens to"},notice:"Mint degis tokens as reward"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"poolExists(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"poolExists",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"pools(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"pools",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"setDegisPerSecond(address,uint256)":{inputs:[{internalType:"address",name:"_pool",type:"address"},{internalType:"uint256",name:"_degisPerSecond",type:"uint256"}],name:"setDegisPerSecond",outputs:[],stateMutability:"nonpayable",type:"function",params:{_degisPerSecond:"Degis reward per second",_pool:"Address of the staking pool"},notice:"Set degis per second for a pool"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."}}},"contracts/staking/abstracts/BasePool.sol:BasePool":{source:"contracts/staking/abstracts/BasePool.sol",name:"BasePool",events:{"Harvest(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Harvest",type:"event"},"Stake(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"lockUntil",type:"uint256"}],name:"Stake",type:"event"},"Unstake(address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Unstake",type:"event"}},methods:{"accDegisPerWeight()":{inputs:[],name:"accDegisPerWeight",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"degisPerSecond()":{inputs:[],name:"degisPerSecond",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"degisToken()":{inputs:[],name:"degisToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"fee()":{inputs:[],name:"fee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getUserDeposits(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"getUserDeposits",outputs:[{components:[{internalType:"uint256",name:"tokenAmount",type:"uint256"},{internalType:"uint256",name:"weight",type:"uint256"},{internalType:"uint256",name:"lockedFrom",type:"uint256"},{internalType:"uint256",name:"lockedUntil",type:"uint256"}],internalType:"struct IPool.Deposit[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function",params:{_user:"User address"},returns:{_0:"deposits[] User's deposit info"},notice:"Get a user's deposit info"},"harvest()":{inputs:[],name:"harvest",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Harvest your staking rewards"},"lastRewardTimestamp()":{inputs:[],name:"lastRewardTimestamp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"pendingReward(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"pendingReward",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",params:{_user:"User address"},returns:{_0:"pendingReward User's pending rewards"},notice:"Get pending rewards"},"poolToken()":{inputs:[],name:"poolToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"rewardToWeight(uint256,uint256)":{inputs:[{internalType:"uint256",name:"reward",type:"uint256"},{internalType:"uint256",name:"rewardPerWeight",type:"uint256"}],name:"rewardToWeight",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function"},"setDegisPerSecond(uint256)":{inputs:[{internalType:"uint256",name:"_degisPerSecond",type:"uint256"}],name:"setDegisPerSecond",outputs:[],stateMutability:"nonpayable",type:"function"},"stake(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"uint256",name:"_lockUntil",type:"uint256"}],name:"stake",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Amount of tokens to stake",_lockUntil:"Lock until timestamp"},notice:"Stake tokens"},"startTimestamp()":{inputs:[],name:"startTimestamp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"timeToWeight(uint256)":{inputs:[{internalType:"uint256",name:"_length",type:"uint256"}],name:"timeToWeight",outputs:[{internalType:"uint256",name:"_weight",type:"uint256"}],stateMutability:"pure",type:"function",details:"1 year = 2e6      1 week = 1e6      2 weeks = 1e6 * ( 1 + 1 / 365)",notice:"Lock time => Lock weight"},"totalWeight()":{inputs:[],name:"totalWeight",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"unstake(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_depositId",type:"uint256"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"unstake",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Amount of tokens to unstake",_depositId:"Deposit id to be unstaked"},notice:"Unstake tokens"},"updatePool()":{inputs:[],name:"updatePool",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Update the pool without fee"},"users(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"users",outputs:[{internalType:"uint256",name:"tokenAmount",type:"uint256"},{internalType:"uint256",name:"totalWeight",type:"uint256"},{internalType:"uint256",name:"rewardDebt",type:"uint256"}],stateMutability:"view",type:"function"},"weightToReward(uint256,uint256)":{inputs:[{internalType:"uint256",name:"weight",type:"uint256"},{internalType:"uint256",name:"rewardPerWeight",type:"uint256"}],name:"weightToReward",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function"}}},"contracts/staking/interfaces/IPool.sol:IPool":{source:"contracts/staking/interfaces/IPool.sol",name:"IPool",title:"Illuvium Pool",author:"Pedro Bergamini, reviewed by Basil Gorin",notice:"An abstraction representing a pool, see IlluviumPoolBase for details",methods:{"accDegisPerWeight()":{inputs:[],name:"accDegisPerWeight",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"degisPerSecond()":{inputs:[],name:"degisPerSecond",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"degisToken()":{inputs:[],name:"degisToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"pendingReward(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"pendingReward",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"poolToken()":{inputs:[],name:"poolToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"setDegisPerSecond(uint256)":{inputs:[{internalType:"uint256",name:"_degisPerSecond",type:"uint256"}],name:"setDegisPerSecond",outputs:[],stateMutability:"nonpayable",type:"function"},"startTimestamp()":{inputs:[],name:"startTimestamp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"totalWeight()":{inputs:[],name:"totalWeight",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/staking/interfaces/IStakingPoolFactory.sol:IStakingPoolFactory":{source:"contracts/staking/interfaces/IStakingPoolFactory.sol",name:"IStakingPoolFactory",methods:{"createPool(address,uint256,uint256)":{inputs:[{internalType:"address",name:"_poolToken",type:"address"},{internalType:"uint256",name:"_startBlock",type:"uint256"},{internalType:"uint256",name:"_degisPerBlock",type:"uint256"}],name:"createPool",outputs:[],stateMutability:"nonpayable",type:"function"},"mintReward(address,uint256)":{inputs:[{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"mintReward",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/tokens/BuyerToken.sol:BuyerToken":{source:"contracts/tokens/BuyerToken.sol",name:"BuyerToken",title:"Buyer Token",details:"Need to set the correct minters and burners when reploying this contract.",notice:"Buyer tokens are distributed to buyers corresponding to the usd value they spend.         Users can deposit their buyer tokens into PurchaseIncentiveVault.         Periodical reward will be given to the participants in PurchaseIncentiveVault.         When distributing purchase incentive reward, the buyer tokens will be burned.",constructor:{inputs:[],stateMutability:"nonpayable",type:"constructor"},events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Burn(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Burn",type:"event"},"BurnerAdded(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newBurner",type:"address"}],name:"BurnerAdded",type:"event"},"BurnerRemoved(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldBurner",type:"address"}],name:"BurnerRemoved",type:"event"},"Mint(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Mint",type:"event"},"MinterAdded(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newMinter",type:"address"}],name:"MinterAdded",type:"event"},"MinterRemoved(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldMinter",type:"address"}],name:"MinterRemoved",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"DOMAIN_SEPARATOR()":{inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"See {IERC20Permit-DOMAIN_SEPARATOR}."},"addBurner(address)":{inputs:[{internalType:"address",name:"_newBurner",type:"address"}],name:"addBurner",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newBurner:"Address of the new burner"},notice:"Add a new burner into the burnerList"},"addMinter(address)":{inputs:[{internalType:"address",name:"_newMinter",type:"address"}],name:"addMinter",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newMinter:"Address of the new minter"},notice:"Add a new minter into the minterList"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"burnBuyerToken(address,uint256)":{inputs:[{internalType:"address",name:"_account",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"burnBuyerToken",outputs:[],stateMutability:"nonpayable",type:"function",params:{_account:"Receiver's address",_amount:"Amount to be burned"},notice:"Burn buyer tokens"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"isBurner(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"isBurner",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isMinter(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"isMinter",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"mintBuyerToken(address,uint256)":{inputs:[{internalType:"address",name:"_account",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"mintBuyerToken",outputs:[],stateMutability:"nonpayable",type:"function",params:{_account:"Receiver's address",_amount:"Amount to be minted"},notice:"Mint buyer tokens"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"nonces(address)":{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20Permit-nonces}."},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"permit",outputs:[],stateMutability:"nonpayable",type:"function",details:"See {IERC20Permit-permit}."},"removeBurner(address)":{inputs:[{internalType:"address",name:"_oldBurner",type:"address"}],name:"removeBurner",outputs:[],stateMutability:"nonpayable",type:"function",params:{_oldBurner:"Address of the minter to be removed"},notice:"Remove a minter from the minterList"},"removeMinter(address)":{inputs:[{internalType:"address",name:"_oldMinter",type:"address"}],name:"removeMinter",outputs:[],stateMutability:"nonpayable",type:"function",params:{_oldMinter:"Address of the minter to be removed"},notice:"Remove a minter from the minterList"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."}}},"contracts/tokens/DegisToken.sol:DegisToken":{source:"contracts/tokens/DegisToken.sol",name:"DegisToken",title:"Degis Token",notice:"DegisToken inherits from ERC20 Permit which contains the basic ERC20 implementation.         DegisToken can use the permit function rather than approve + transferFrom.         DegisToken has an owner, a minterList and a burnerList.         When lauched on mainnet, the owner may be removed or tranferred to a multisig.         By default, the owner & the first minter will be the one that deploys the contract.         The minterList should contain FarmingPool and PurchaseIncentiveVault.         The burnerList should contain EmergencyPool.",constructor:{inputs:[],stateMutability:"nonpayable",type:"constructor"},events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Burn(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Burn",type:"event"},"BurnerAdded(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newBurner",type:"address"}],name:"BurnerAdded",type:"event"},"BurnerRemoved(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldBurner",type:"address"}],name:"BurnerRemoved",type:"event"},"Mint(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Mint",type:"event"},"MinterAdded(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newMinter",type:"address"}],name:"MinterAdded",type:"event"},"MinterRemoved(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldMinter",type:"address"}],name:"MinterRemoved",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"CAP()":{inputs:[],name:"CAP",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"DOMAIN_SEPARATOR()":{inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"See {IERC20Permit-DOMAIN_SEPARATOR}."},"addBurner(address)":{inputs:[{internalType:"address",name:"_newBurner",type:"address"}],name:"addBurner",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newBurner:"Address of the new burner"},notice:"Add a new burner into the burnerList"},"addMinter(address)":{inputs:[{internalType:"address",name:"_newMinter",type:"address"}],name:"addMinter",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newMinter:"Address of the new minter"},notice:"Add a new minter into the minterList"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"burnDegis(address,uint256)":{inputs:[{internalType:"address",name:"_account",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"burnDegis",outputs:[],stateMutability:"nonpayable",type:"function",params:{_account:"Receiver's address",_amount:"Amount to be burned"},notice:"Burn degis tokens"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"isBurner(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"isBurner",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isMinter(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"isMinter",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"mintDegis(address,uint256)":{inputs:[{internalType:"address",name:"_account",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"mintDegis",outputs:[],stateMutability:"nonpayable",type:"function",params:{_account:"Receiver's address",_amount:"Amount to be minted"},notice:"Mint degis tokens"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"nonces(address)":{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20Permit-nonces}."},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"permit",outputs:[],stateMutability:"nonpayable",type:"function",details:"See {IERC20Permit-permit}."},"removeBurner(address)":{inputs:[{internalType:"address",name:"_oldBurner",type:"address"}],name:"removeBurner",outputs:[],stateMutability:"nonpayable",type:"function",params:{_oldBurner:"Address of the minter to be removed"},notice:"Remove a minter from the minterList"},"removeMinter(address)":{inputs:[{internalType:"address",name:"_oldMinter",type:"address"}],name:"removeMinter",outputs:[],stateMutability:"nonpayable",type:"function",params:{_oldMinter:"Address of the minter to be removed"},notice:"Remove a minter from the minterList"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."}}},"contracts/tokens/Shield.sol:Shield":{source:"contracts/tokens/Shield.sol",name:"Shield",title:"Shield Token (Derived Stablecoin on Degis)",author:"Eric Lee (ylikp.ust@gmail.com)",details:"Users can swap other stablecoins to Shield         Shield can be used in NaughtyPrice and future products         When users want to withdraw, their shield tokens will be burned         and USDC will be sent back to them         Currently, the swap is done inside Platypus",events:{"AddStablecoin(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"stablecoin",type:"address"}],name:"AddStablecoin",type:"event"},"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Deposit(address,address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!0,internalType:"address",name:"stablecoin",type:"address"},{indexed:!1,internalType:"uint256",name:"inAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"outAmount",type:"uint256"}],name:"Deposit",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"SetPTPPool(address,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldPool",type:"address"},{indexed:!1,internalType:"address",name:"newPool",type:"address"}],name:"SetPTPPool",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},"Withdraw(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Withdraw",type:"event"}},methods:{"DAIe()":{inputs:[],name:"DAIe",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"PTPPOOL()":{inputs:[],name:"PTPPOOL",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"USDC()":{inputs:[],name:"USDC",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"USDCe()":{inputs:[],name:"USDCe",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"USDCeUSDCPOOL()":{inputs:[],name:"USDCeUSDCPOOL",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"USDT()":{inputs:[],name:"USDT",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"USDTe()":{inputs:[],name:"USDTe",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"YUSD()":{inputs:[],name:"YUSD",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"YUSDCTPOOL()":{inputs:[],name:"YUSDCTPOOL",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"aTRICURVEPOOL()":{inputs:[],name:"aTRICURVEPOOL",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"addSupportedStablecoin(address)":{inputs:[{internalType:"address",name:"_stablecoin",type:"address"}],name:"addSupportedStablecoin",outputs:[],stateMutability:"nonpayable",type:"function",details:"Set the token address and collateral ratio at the same time      The collateral ratio need to be less than 100      Only callable by the owner",params:{_stablecoin:"Stablecoin address"},notice:"Add new supported stablecoin"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"approveStablecoin(address)":{inputs:[{internalType:"address",name:"_token",type:"address"}],name:"approveStablecoin",outputs:[],stateMutability:"nonpayable",type:"function"},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"pure",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"deposit(address,uint256,uint256)":{inputs:[{internalType:"address",name:"_stablecoin",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"uint256",name:"_minAmount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Input stablecoin amount",_minAmount:"Minimum amount output (if need swap)",_stablecoin:"Stablecoin address"},notice:"Deposit tokens and mint Shield"},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"initialize(address)":{inputs:[{internalType:"address",name:"_veDEG",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setPTPPool(address)":{inputs:[{internalType:"address",name:"_ptpPool",type:"address"}],name:"setPTPPool",outputs:[],stateMutability:"nonpayable",type:"function"},"supportedStablecoin(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"supportedStablecoin",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"users(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"users",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"veDEG()":{inputs:[],name:"veDEG",outputs:[{internalType:"contract IVeDEG",name:"",type:"address"}],stateMutability:"view",type:"function"},"withdraw(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"Amount of Shield to be burned"},notice:"Withdraw stablecoins"},"withdrawAll()":{inputs:[],name:"withdrawAll",outputs:[],stateMutability:"nonpayable",type:"function",notice:"Withdraw all stablecoins"}}},"contracts/tokens/interfaces/IBuyerToken.sol:IBuyerToken":{source:"contracts/tokens/interfaces/IBuyerToken.sol",name:"IBuyerToken",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the amount of tokens owned by `account`."},"burnBuyerToken(address,uint256)":{inputs:[{internalType:"address",name:"_account",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"burnBuyerToken",outputs:[],stateMutability:"nonpayable",type:"function",params:{_account:"Receiver's address",_amount:"Amount to be burned"},notice:"Burn buyer tokens"},"mintBuyerToken(address,uint256)":{inputs:[{internalType:"address",name:"_account",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"mintBuyerToken",outputs:[],stateMutability:"nonpayable",type:"function",params:{_account:"Receiver's address",_amount:"Amount to be minted"},notice:"Mint buyer tokens"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the amount of tokens in existence."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}}},"contracts/tokens/interfaces/IDegisToken.sol:IDegisToken":{source:"contracts/tokens/interfaces/IDegisToken.sol",name:"IDegisToken",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"CAP()":{inputs:[],name:"CAP",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"DOMAIN_SEPARATOR()":{inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the amount of tokens owned by `account`."},"burnDegis(address,uint256)":{inputs:[{internalType:"address",name:"_account",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"burnDegis",outputs:[],stateMutability:"nonpayable",type:"function",params:{_account:"Receiver's address",_amount:"Amount to be burned"},notice:"Burn degis tokens"},"mintDegis(address,uint256)":{inputs:[{internalType:"address",name:"_account",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"mintDegis",outputs:[],stateMutability:"nonpayable",type:"function",params:{_account:"Receiver's address",_amount:"Amount to be minted"},notice:"Mint degis tokens"},"nonces(address)":{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"permit",outputs:[],stateMutability:"nonpayable",type:"function",details:"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the amount of tokens in existence."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}}},"contracts/utils/Context.sol:Context":{source:"contracts/utils/Context.sol",name:"Context",details:"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts."},"contracts/utils/ERC20PermitWithMultipleMinters.sol:ERC20PermitWithMultipleMinters":{source:"contracts/utils/ERC20PermitWithMultipleMinters.sol",name:"ERC20PermitWithMultipleMinters",title:"ERC20 with Multiple Minters and Burners",details:"The minters and burners are some contracts in Degis that need to issue DEG.         It has basic implementations for ERC20 and also the owner control.         Even if the owner is renounced to zero address, the token can still be minted/burned.         DegisToken and BuyerToken are both this kind ERC20 token.",notice:"This is contract used for ERC20 tokens that has multiple minters and burners.",constructor:{inputs:[{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"symbol",type:"string"}],stateMutability:"nonpayable",type:"constructor"},events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Burn(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Burn",type:"event"},"BurnerAdded(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newBurner",type:"address"}],name:"BurnerAdded",type:"event"},"BurnerRemoved(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldBurner",type:"address"}],name:"BurnerRemoved",type:"event"},"Mint(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Mint",type:"event"},"MinterAdded(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newMinter",type:"address"}],name:"MinterAdded",type:"event"},"MinterRemoved(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldMinter",type:"address"}],name:"MinterRemoved",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"DOMAIN_SEPARATOR()":{inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"See {IERC20Permit-DOMAIN_SEPARATOR}."},"addBurner(address)":{inputs:[{internalType:"address",name:"_newBurner",type:"address"}],name:"addBurner",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newBurner:"Address of the new burner"},notice:"Add a new burner into the burnerList"},"addMinter(address)":{inputs:[{internalType:"address",name:"_newMinter",type:"address"}],name:"addMinter",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newMinter:"Address of the new minter"},notice:"Add a new minter into the minterList"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-allowance}."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-balanceOf}."},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"isBurner(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"isBurner",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"isMinter(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"isMinter",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the name of the token."},"nonces(address)":{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20Permit-nonces}."},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"permit",outputs:[],stateMutability:"nonpayable",type:"function",details:"See {IERC20Permit-permit}."},"removeBurner(address)":{inputs:[{internalType:"address",name:"_oldBurner",type:"address"}],name:"removeBurner",outputs:[],stateMutability:"nonpayable",type:"function",params:{_oldBurner:"Address of the minter to be removed"},notice:"Remove a minter from the minterList"},"removeMinter(address)":{inputs:[{internalType:"address",name:"_oldMinter",type:"address"}],name:"removeMinter",outputs:[],stateMutability:"nonpayable",type:"function",params:{_oldMinter:"Address of the minter to be removed"},notice:"Remove a minter from the minterList"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."}}},"contracts/utils/Ownable.sol:Ownable":{source:"contracts/utils/Ownable.sol",name:"Ownable",details:"The owner can be set during deployment, not default to be msg.sender",events:{"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"}},methods:{"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."}}},"contracts/utils/OwnableWithoutContext.sol:OwnableWithoutContext":{source:"contracts/utils/OwnableWithoutContext.sol",name:"OwnableWithoutContext",details:"The owner can be set during deployment, not default to be msg.sender",events:{"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"}},methods:{"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Returns the address of the current owner."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Renouncing ownership will leave the contract without an owner,         thereby removing any functionality that is only available to the owner.",notice:"Leaves the contract without owner. It will not be possible to call         `onlyOwner` functions anymore. Can only be called by the current owner."},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Can only be called by the current owner.",params:{newOwner:"Address of the new owner"},notice:"Transfers ownership of the contract to a new account (`newOwner`)."}}},"contracts/utils/Pausable.sol:Pausable":{source:"contracts/utils/Pausable.sol",name:"Pausable",details:"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.",events:{"Paused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event",details:"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event",details:"Emitted when the pause is lifted by `account`."}},methods:{"paused()":{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if the contract is paused, and false otherwise."}}},"contracts/utils/ReentrancyGuard.sol:ReentrancyGuard":{source:"contracts/utils/ReentrancyGuard.sol",name:"ReentrancyGuard",details:"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"contracts/utils/interfaces/IERC20Decimals.sol:IERC20Decimals":{source:"contracts/utils/interfaces/IERC20Decimals.sol",name:"IERC20Decimals",methods:{"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"}}},"contracts/utils/interfaces/IERC20PermitWithMultipleMinters.sol:IERC20PermitWithMultipleMinters":{source:"contracts/utils/interfaces/IERC20PermitWithMultipleMinters.sol",name:"IERC20PermitWithMultipleMinters",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"DOMAIN_SEPARATOR()":{inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",details:"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"addBurner(address)":{inputs:[{internalType:"address",name:"_newBurner",type:"address"}],name:"addBurner",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newBurner:"Address of the new burner"},notice:"Add a new burner into the burnerList"},"addMinter(address)":{inputs:[{internalType:"address",name:"_newMinter",type:"address"}],name:"addMinter",outputs:[],stateMutability:"nonpayable",type:"function",params:{_newMinter:"Address of the new minter"},notice:"Add a new minter into the minterList"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the amount of tokens owned by `account`."},"nonces(address)":{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"permit",outputs:[],stateMutability:"nonpayable",type:"function",details:"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."},"removeBurner(address)":{inputs:[{internalType:"address",name:"_oldBurner",type:"address"}],name:"removeBurner",outputs:[],stateMutability:"nonpayable",type:"function",params:{_oldBurner:"Address of the minter to be removed"},notice:"Remove a minter from the minterList"},"removeMinter(address)":{inputs:[{internalType:"address",name:"_oldMinter",type:"address"}],name:"removeMinter",outputs:[],stateMutability:"nonpayable",type:"function",params:{_oldMinter:"Address of the minter to be removed"},notice:"Remove a minter from the minterList"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the amount of tokens in existence."},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}}}};new ho({el:"#app",router:new sp({routes:[{path:"/",component:Sp,props:()=>({json:Ep})},{path:"*",component:Ap,props:e=>({json:Ep[e.path.slice(1)]})}]}),mounted(){document.dispatchEvent(new Event("render-event"))},render:e=>e(pp)})})()})();